// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_ouder1_historie_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_ouder1_historie Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_ouder1_historie implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_ouder1_historie";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_ouder1_historie.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_ouder1_historie.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_ouder1_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_ouder1_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_ouder1_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_ouder1_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_ouder1_historieStruct implements routines.system.IPersistableRow<ldf_ouder1_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal ou1hstsleutelgeldigdatum;

				public BigDecimal getOu1hstsleutelgeldigdatum () {
					return this.ou1hstsleutelgeldigdatum;
				}
				
			    public BigDecimal ou1hstsleutelgeldigvolgnummer;

				public BigDecimal getOu1hstsleutelgeldigvolgnummer () {
					return this.ou1hstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal ou1hstanummer;

				public BigDecimal getOu1hstanummer () {
					return this.ou1hstanummer;
				}
				
			    public BigDecimal ou1hstburgerservicenummer;

				public BigDecimal getOu1hstburgerservicenummer () {
					return this.ou1hstburgerservicenummer;
				}
				
			    public String ou1hstvoornamen;

				public String getOu1hstvoornamen () {
					return this.ou1hstvoornamen;
				}
				
			    public String ou1hstvoorletters;

				public String getOu1hstvoorletters () {
					return this.ou1hstvoorletters;
				}
				
			    public String ou1hstadellijketitelcode;

				public String getOu1hstadellijketitelcode () {
					return this.ou1hstadellijketitelcode;
				}
				
			    public String ou1hstadellijketitelomschrijving;

				public String getOu1hstadellijketitelomschrijving () {
					return this.ou1hstadellijketitelomschrijving;
				}
				
			    public String ou1hstvoorvoegselgeslachtsnaam;

				public String getOu1hstvoorvoegselgeslachtsnaam () {
					return this.ou1hstvoorvoegselgeslachtsnaam;
				}
				
			    public String ou1hstgeslachtsnaam;

				public String getOu1hstgeslachtsnaam () {
					return this.ou1hstgeslachtsnaam;
				}
				
			    public java.util.Date ou1hstgeboortedatum;

				public java.util.Date getOu1hstgeboortedatum () {
					return this.ou1hstgeboortedatum;
				}
				
			    public String ou1hstgeboortedatumindicator;

				public String getOu1hstgeboortedatumindicator () {
					return this.ou1hstgeboortedatumindicator;
				}
				
			    public String ou1hstgeboorteplaatscode;

				public String getOu1hstgeboorteplaatscode () {
					return this.ou1hstgeboorteplaatscode;
				}
				
			    public String ou1hstgeboorteplaatsomschrijving;

				public String getOu1hstgeboorteplaatsomschrijving () {
					return this.ou1hstgeboorteplaatsomschrijving;
				}
				
			    public String ou1hstgeboortelandcode;

				public String getOu1hstgeboortelandcode () {
					return this.ou1hstgeboortelandcode;
				}
				
			    public String ou1hstgeboortelandomschrijving;

				public String getOu1hstgeboortelandomschrijving () {
					return this.ou1hstgeboortelandomschrijving;
				}
				
			    public String ou1hstgeslachtsaanduidingcode;

				public String getOu1hstgeslachtsaanduidingcode () {
					return this.ou1hstgeslachtsaanduidingcode;
				}
				
			    public String ou1hstgeslachtsaanduidingomschrijving;

				public String getOu1hstgeslachtsaanduidingomschrijving () {
					return this.ou1hstgeslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date ou1hstdatumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu1hstdatumingangfamilierechtelijkebetrekking () {
					return this.ou1hstdatumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou1hstdatumingangfamilierechtelijkebetrekkingindicator;

				public String getOu1hstdatumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public String ou1hstregistergemeenteaktecode;

				public String getOu1hstregistergemeenteaktecode () {
					return this.ou1hstregistergemeenteaktecode;
				}
				
			    public String ou1hstregistergemeenteakteomschrijving;

				public String getOu1hstregistergemeenteakteomschrijving () {
					return this.ou1hstregistergemeenteakteomschrijving;
				}
				
			    public String ou1hstaktenummer;

				public String getOu1hstaktenummer () {
					return this.ou1hstaktenummer;
				}
				
			    public String ou1hstgemeentedocumentcode;

				public String getOu1hstgemeentedocumentcode () {
					return this.ou1hstgemeentedocumentcode;
				}
				
			    public String ou1hstgemeentedocumentomschrijving;

				public String getOu1hstgemeentedocumentomschrijving () {
					return this.ou1hstgemeentedocumentomschrijving;
				}
				
			    public java.util.Date ou1hstdatumdocument;

				public java.util.Date getOu1hstdatumdocument () {
					return this.ou1hstdatumdocument;
				}
				
			    public String ou1hstdatumdocumentindicator;

				public String getOu1hstdatumdocumentindicator () {
					return this.ou1hstdatumdocumentindicator;
				}
				
			    public String ou1hstbeschrijvingdocument;

				public String getOu1hstbeschrijvingdocument () {
					return this.ou1hstbeschrijvingdocument;
				}
				
			    public BigDecimal ou1hstaanduidinggegevensonderzoek;

				public BigDecimal getOu1hstaanduidinggegevensonderzoek () {
					return this.ou1hstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ou1hstdatumingangonderzoek;

				public java.util.Date getOu1hstdatumingangonderzoek () {
					return this.ou1hstdatumingangonderzoek;
				}
				
			    public String ou1hstdatumingangonderzoekindicator;

				public String getOu1hstdatumingangonderzoekindicator () {
					return this.ou1hstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date ou1hstdatumeindeonderzoek;

				public java.util.Date getOu1hstdatumeindeonderzoek () {
					return this.ou1hstdatumeindeonderzoek;
				}
				
			    public String ou1hstdatumeindeonderzoekindicator;

				public String getOu1hstdatumeindeonderzoekindicator () {
					return this.ou1hstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date ou1hstingangsdatumgeldigheid;

				public java.util.Date getOu1hstingangsdatumgeldigheid () {
					return this.ou1hstingangsdatumgeldigheid;
				}
				
			    public String ou1hstingangsdatumgeldigheidindicator;

				public String getOu1hstingangsdatumgeldigheidindicator () {
					return this.ou1hstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou1hstdatumvanopneming;

				public java.util.Date getOu1hstdatumvanopneming () {
					return this.ou1hstdatumvanopneming;
				}
				
			    public String ou1hstdatumvanopnemingindicator;

				public String getOu1hstdatumvanopnemingindicator () {
					return this.ou1hstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.ou1hstsleutelgeldigdatum == null) ? 0 : this.ou1hstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.ou1hstsleutelgeldigvolgnummer == null) ? 0 : this.ou1hstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_ouder1_historieStruct other = (ldf_ouder1_historieStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.ou1hstsleutelgeldigdatum == null) {
							if (other.ou1hstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.ou1hstsleutelgeldigdatum.equals(other.ou1hstsleutelgeldigdatum))
						
							return false;
					
						if (this.ou1hstsleutelgeldigvolgnummer == null) {
							if (other.ou1hstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.ou1hstsleutelgeldigvolgnummer.equals(other.ou1hstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_ouder1_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            other.ou1hstsleutelgeldigdatum = this.ou1hstsleutelgeldigdatum;
	            other.ou1hstsleutelgeldigvolgnummer = this.ou1hstsleutelgeldigvolgnummer;
	            other.ou1hstanummer = this.ou1hstanummer;
	            other.ou1hstburgerservicenummer = this.ou1hstburgerservicenummer;
	            other.ou1hstvoornamen = this.ou1hstvoornamen;
	            other.ou1hstvoorletters = this.ou1hstvoorletters;
	            other.ou1hstadellijketitelcode = this.ou1hstadellijketitelcode;
	            other.ou1hstadellijketitelomschrijving = this.ou1hstadellijketitelomschrijving;
	            other.ou1hstvoorvoegselgeslachtsnaam = this.ou1hstvoorvoegselgeslachtsnaam;
	            other.ou1hstgeslachtsnaam = this.ou1hstgeslachtsnaam;
	            other.ou1hstgeboortedatum = this.ou1hstgeboortedatum;
	            other.ou1hstgeboortedatumindicator = this.ou1hstgeboortedatumindicator;
	            other.ou1hstgeboorteplaatscode = this.ou1hstgeboorteplaatscode;
	            other.ou1hstgeboorteplaatsomschrijving = this.ou1hstgeboorteplaatsomschrijving;
	            other.ou1hstgeboortelandcode = this.ou1hstgeboortelandcode;
	            other.ou1hstgeboortelandomschrijving = this.ou1hstgeboortelandomschrijving;
	            other.ou1hstgeslachtsaanduidingcode = this.ou1hstgeslachtsaanduidingcode;
	            other.ou1hstgeslachtsaanduidingomschrijving = this.ou1hstgeslachtsaanduidingomschrijving;
	            other.ou1hstdatumingangfamilierechtelijkebetrekking = this.ou1hstdatumingangfamilierechtelijkebetrekking;
	            other.ou1hstdatumingangfamilierechtelijkebetrekkingindicator = this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator;
	            other.ou1hstregistergemeenteaktecode = this.ou1hstregistergemeenteaktecode;
	            other.ou1hstregistergemeenteakteomschrijving = this.ou1hstregistergemeenteakteomschrijving;
	            other.ou1hstaktenummer = this.ou1hstaktenummer;
	            other.ou1hstgemeentedocumentcode = this.ou1hstgemeentedocumentcode;
	            other.ou1hstgemeentedocumentomschrijving = this.ou1hstgemeentedocumentomschrijving;
	            other.ou1hstdatumdocument = this.ou1hstdatumdocument;
	            other.ou1hstdatumdocumentindicator = this.ou1hstdatumdocumentindicator;
	            other.ou1hstbeschrijvingdocument = this.ou1hstbeschrijvingdocument;
	            other.ou1hstaanduidinggegevensonderzoek = this.ou1hstaanduidinggegevensonderzoek;
	            other.ou1hstdatumingangonderzoek = this.ou1hstdatumingangonderzoek;
	            other.ou1hstdatumingangonderzoekindicator = this.ou1hstdatumingangonderzoekindicator;
	            other.ou1hstdatumeindeonderzoek = this.ou1hstdatumeindeonderzoek;
	            other.ou1hstdatumeindeonderzoekindicator = this.ou1hstdatumeindeonderzoekindicator;
	            other.ou1hstingangsdatumgeldigheid = this.ou1hstingangsdatumgeldigheid;
	            other.ou1hstingangsdatumgeldigheidindicator = this.ou1hstingangsdatumgeldigheidindicator;
	            other.ou1hstdatumvanopneming = this.ou1hstdatumvanopneming;
	            other.ou1hstdatumvanopnemingindicator = this.ou1hstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_ouder1_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.ou1hstsleutelgeldigdatum = this.ou1hstsleutelgeldigdatum;
	            	other.ou1hstsleutelgeldigvolgnummer = this.ou1hstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.ou1hstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.ou1hstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.ou1hstanummer = (BigDecimal) dis.readObject();
					
						this.ou1hstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou1hstvoornamen = readString(dis);
					
					this.ou1hstvoorletters = readString(dis);
					
					this.ou1hstadellijketitelcode = readString(dis);
					
					this.ou1hstadellijketitelomschrijving = readString(dis);
					
					this.ou1hstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.ou1hstgeslachtsnaam = readString(dis);
					
					this.ou1hstgeboortedatum = readDate(dis);
					
					this.ou1hstgeboortedatumindicator = readString(dis);
					
					this.ou1hstgeboorteplaatscode = readString(dis);
					
					this.ou1hstgeboorteplaatsomschrijving = readString(dis);
					
					this.ou1hstgeboortelandcode = readString(dis);
					
					this.ou1hstgeboortelandomschrijving = readString(dis);
					
					this.ou1hstgeslachtsaanduidingcode = readString(dis);
					
					this.ou1hstgeslachtsaanduidingomschrijving = readString(dis);
					
					this.ou1hstdatumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou1hstregistergemeenteaktecode = readString(dis);
					
					this.ou1hstregistergemeenteakteomschrijving = readString(dis);
					
					this.ou1hstaktenummer = readString(dis);
					
					this.ou1hstgemeentedocumentcode = readString(dis);
					
					this.ou1hstgemeentedocumentomschrijving = readString(dis);
					
					this.ou1hstdatumdocument = readDate(dis);
					
					this.ou1hstdatumdocumentindicator = readString(dis);
					
					this.ou1hstbeschrijvingdocument = readString(dis);
					
						this.ou1hstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ou1hstdatumingangonderzoek = readDate(dis);
					
					this.ou1hstdatumingangonderzoekindicator = readString(dis);
					
					this.ou1hstdatumeindeonderzoek = readDate(dis);
					
					this.ou1hstdatumeindeonderzoekindicator = readString(dis);
					
					this.ou1hstingangsdatumgeldigheid = readDate(dis);
					
					this.ou1hstingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou1hstdatumvanopneming = readDate(dis);
					
					this.ou1hstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstburgerservicenummer);
					
					// String
				
						writeString(this.ou1hstvoornamen,dos);
					
					// String
				
						writeString(this.ou1hstvoorletters,dos);
					
					// String
				
						writeString(this.ou1hstadellijketitelcode,dos);
					
					// String
				
						writeString(this.ou1hstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou1hstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstgeboortedatum,dos);
					
					// String
				
						writeString(this.ou1hstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou1hstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou1hstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstgeboortelandcode,dos);
					
					// String
				
						writeString(this.ou1hstgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.ou1hstgeslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// String
				
						writeString(this.ou1hstregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ou1hstregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstaktenummer,dos);
					
					// String
				
						writeString(this.ou1hstgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ou1hstgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumdocument,dos);
					
					// String
				
						writeString(this.ou1hstdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.ou1hstbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.ou1hstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ou1hstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou1hstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumvanopneming,dos);
					
					// String
				
						writeString(this.ou1hstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",ou1hstsleutelgeldigdatum="+String.valueOf(ou1hstsleutelgeldigdatum));
		sb.append(",ou1hstsleutelgeldigvolgnummer="+String.valueOf(ou1hstsleutelgeldigvolgnummer));
		sb.append(",ou1hstanummer="+String.valueOf(ou1hstanummer));
		sb.append(",ou1hstburgerservicenummer="+String.valueOf(ou1hstburgerservicenummer));
		sb.append(",ou1hstvoornamen="+ou1hstvoornamen);
		sb.append(",ou1hstvoorletters="+ou1hstvoorletters);
		sb.append(",ou1hstadellijketitelcode="+ou1hstadellijketitelcode);
		sb.append(",ou1hstadellijketitelomschrijving="+ou1hstadellijketitelomschrijving);
		sb.append(",ou1hstvoorvoegselgeslachtsnaam="+ou1hstvoorvoegselgeslachtsnaam);
		sb.append(",ou1hstgeslachtsnaam="+ou1hstgeslachtsnaam);
		sb.append(",ou1hstgeboortedatum="+String.valueOf(ou1hstgeboortedatum));
		sb.append(",ou1hstgeboortedatumindicator="+ou1hstgeboortedatumindicator);
		sb.append(",ou1hstgeboorteplaatscode="+ou1hstgeboorteplaatscode);
		sb.append(",ou1hstgeboorteplaatsomschrijving="+ou1hstgeboorteplaatsomschrijving);
		sb.append(",ou1hstgeboortelandcode="+ou1hstgeboortelandcode);
		sb.append(",ou1hstgeboortelandomschrijving="+ou1hstgeboortelandomschrijving);
		sb.append(",ou1hstgeslachtsaanduidingcode="+ou1hstgeslachtsaanduidingcode);
		sb.append(",ou1hstgeslachtsaanduidingomschrijving="+ou1hstgeslachtsaanduidingomschrijving);
		sb.append(",ou1hstdatumingangfamilierechtelijkebetrekking="+String.valueOf(ou1hstdatumingangfamilierechtelijkebetrekking));
		sb.append(",ou1hstdatumingangfamilierechtelijkebetrekkingindicator="+ou1hstdatumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou1hstregistergemeenteaktecode="+ou1hstregistergemeenteaktecode);
		sb.append(",ou1hstregistergemeenteakteomschrijving="+ou1hstregistergemeenteakteomschrijving);
		sb.append(",ou1hstaktenummer="+ou1hstaktenummer);
		sb.append(",ou1hstgemeentedocumentcode="+ou1hstgemeentedocumentcode);
		sb.append(",ou1hstgemeentedocumentomschrijving="+ou1hstgemeentedocumentomschrijving);
		sb.append(",ou1hstdatumdocument="+String.valueOf(ou1hstdatumdocument));
		sb.append(",ou1hstdatumdocumentindicator="+ou1hstdatumdocumentindicator);
		sb.append(",ou1hstbeschrijvingdocument="+ou1hstbeschrijvingdocument);
		sb.append(",ou1hstaanduidinggegevensonderzoek="+String.valueOf(ou1hstaanduidinggegevensonderzoek));
		sb.append(",ou1hstdatumingangonderzoek="+String.valueOf(ou1hstdatumingangonderzoek));
		sb.append(",ou1hstdatumingangonderzoekindicator="+ou1hstdatumingangonderzoekindicator);
		sb.append(",ou1hstdatumeindeonderzoek="+String.valueOf(ou1hstdatumeindeonderzoek));
		sb.append(",ou1hstdatumeindeonderzoekindicator="+ou1hstdatumeindeonderzoekindicator);
		sb.append(",ou1hstingangsdatumgeldigheid="+String.valueOf(ou1hstingangsdatumgeldigheid));
		sb.append(",ou1hstingangsdatumgeldigheidindicator="+ou1hstingangsdatumgeldigheidindicator);
		sb.append(",ou1hstdatumvanopneming="+String.valueOf(ou1hstdatumvanopneming));
		sb.append(",ou1hstdatumvanopnemingindicator="+ou1hstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_ouder1_historieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ou1hstsleutelgeldigdatum, other.ou1hstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ou1hstsleutelgeldigvolgnummer, other.ou1hstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_ouder1_historieStruct implements routines.system.IPersistableRow<cipers_ouder1_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal OU1HSTSLEUTELGELDIGDATUM;

				public BigDecimal getOU1HSTSLEUTELGELDIGDATUM () {
					return this.OU1HSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal OU1HSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getOU1HSTSLEUTELGELDIGVOLGNUMMER () {
					return this.OU1HSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal OU1HSTANUMMER;

				public BigDecimal getOU1HSTANUMMER () {
					return this.OU1HSTANUMMER;
				}
				
			    public BigDecimal OU1HSTBURGERSERVICENUMMER;

				public BigDecimal getOU1HSTBURGERSERVICENUMMER () {
					return this.OU1HSTBURGERSERVICENUMMER;
				}
				
			    public String OU1HSTVOORNAMEN;

				public String getOU1HSTVOORNAMEN () {
					return this.OU1HSTVOORNAMEN;
				}
				
			    public String OU1HSTVOORLETTERS;

				public String getOU1HSTVOORLETTERS () {
					return this.OU1HSTVOORLETTERS;
				}
				
			    public String OU1HSTADELLIJKETITELCODE;

				public String getOU1HSTADELLIJKETITELCODE () {
					return this.OU1HSTADELLIJKETITELCODE;
				}
				
			    public String OU1HSTVOORVOEGSELGESLACHTSNAAM;

				public String getOU1HSTVOORVOEGSELGESLACHTSNAAM () {
					return this.OU1HSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String OU1HSTGESLACHTSNAAM;

				public String getOU1HSTGESLACHTSNAAM () {
					return this.OU1HSTGESLACHTSNAAM;
				}
				
			    public java.util.Date OU1HSTGEBOORTEDATUM;

				public java.util.Date getOU1HSTGEBOORTEDATUM () {
					return this.OU1HSTGEBOORTEDATUM;
				}
				
			    public String OU1HSTGEBOORTEDATUMINDICATOR;

				public String getOU1HSTGEBOORTEDATUMINDICATOR () {
					return this.OU1HSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String OU1HSTGEBOORTEPLAATSCODE;

				public String getOU1HSTGEBOORTEPLAATSCODE () {
					return this.OU1HSTGEBOORTEPLAATSCODE;
				}
				
			    public String OU1HSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getOU1HSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.OU1HSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String OU1HSTGEBOORTELANDCODE;

				public String getOU1HSTGEBOORTELANDCODE () {
					return this.OU1HSTGEBOORTELANDCODE;
				}
				
			    public String OU1HSTGESLACHTSAANDUIDINGCODE;

				public String getOU1HSTGESLACHTSAANDUIDINGCODE () {
					return this.OU1HSTGESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING;

				public java.util.Date getOU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING () {
					return this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING;
				}
				
			    public String OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;

				public String getOU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR () {
					return this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
				}
				
			    public String OU1HSTREGISTERGEMEENTEAKTECODE;

				public String getOU1HSTREGISTERGEMEENTEAKTECODE () {
					return this.OU1HSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String OU1HSTAKTENUMMER;

				public String getOU1HSTAKTENUMMER () {
					return this.OU1HSTAKTENUMMER;
				}
				
			    public String OU1HSTGEMEENTEDOCUMENTCODE;

				public String getOU1HSTGEMEENTEDOCUMENTCODE () {
					return this.OU1HSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OU1HSTDATUMDOCUMENT;

				public java.util.Date getOU1HSTDATUMDOCUMENT () {
					return this.OU1HSTDATUMDOCUMENT;
				}
				
			    public String OU1HSTDATUMDOCUMENTINDICATOR;

				public String getOU1HSTDATUMDOCUMENTINDICATOR () {
					return this.OU1HSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String OU1HSTBESCHRIJVINGDOCUMENT;

				public String getOU1HSTBESCHRIJVINGDOCUMENT () {
					return this.OU1HSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OU1HSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOU1HSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.OU1HSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OU1HSTDATUMINGANGONDERZOEK;

				public java.util.Date getOU1HSTDATUMINGANGONDERZOEK () {
					return this.OU1HSTDATUMINGANGONDERZOEK;
				}
				
			    public String OU1HSTDATUMINGANGONDERZOEKINDICATOR;

				public String getOU1HSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.OU1HSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1HSTDATUMEINDEONDERZOEK;

				public java.util.Date getOU1HSTDATUMEINDEONDERZOEK () {
					return this.OU1HSTDATUMEINDEONDERZOEK;
				}
				
			    public String OU1HSTDATUMEINDEONDERZOEKINDICATOR;

				public String getOU1HSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.OU1HSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1HSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getOU1HSTINGANGSDATUMGELDIGHEID () {
					return this.OU1HSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOU1HSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OU1HSTDATUMVANOPNEMING;

				public java.util.Date getOU1HSTDATUMVANOPNEMING () {
					return this.OU1HSTDATUMVANOPNEMING;
				}
				
			    public String OU1HSTDATUMVANOPNEMINGINDICATOR;

				public String getOU1HSTDATUMVANOPNEMINGINDICATOR () {
					return this.OU1HSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.OU1HSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.OU1HSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.OU1HSTANUMMER = (BigDecimal) dis.readObject();
					
						this.OU1HSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.OU1HSTVOORNAMEN = readString(dis);
					
					this.OU1HSTVOORLETTERS = readString(dis);
					
					this.OU1HSTADELLIJKETITELCODE = readString(dis);
					
					this.OU1HSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.OU1HSTGESLACHTSNAAM = readString(dis);
					
					this.OU1HSTGEBOORTEDATUM = readDate(dis);
					
					this.OU1HSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.OU1HSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.OU1HSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.OU1HSTGEBOORTELANDCODE = readString(dis);
					
					this.OU1HSTGESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING = readDate(dis);
					
					this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = readString(dis);
					
					this.OU1HSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OU1HSTAKTENUMMER = readString(dis);
					
					this.OU1HSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OU1HSTDATUMDOCUMENT = readDate(dis);
					
					this.OU1HSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OU1HSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OU1HSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OU1HSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.OU1HSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OU1HSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.OU1HSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OU1HSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OU1HSTDATUMVANOPNEMING = readDate(dis);
					
					this.OU1HSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.OU1HSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.OU1HSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.OU1HSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.OU1HSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU1HSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.OU1HSTGESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR,dos);
					
					// String
				
						writeString(this.OU1HSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OU1HSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.OU1HSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OU1HSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",OU1HSTSLEUTELGELDIGDATUM="+String.valueOf(OU1HSTSLEUTELGELDIGDATUM));
		sb.append(",OU1HSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(OU1HSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",OU1HSTANUMMER="+String.valueOf(OU1HSTANUMMER));
		sb.append(",OU1HSTBURGERSERVICENUMMER="+String.valueOf(OU1HSTBURGERSERVICENUMMER));
		sb.append(",OU1HSTVOORNAMEN="+OU1HSTVOORNAMEN);
		sb.append(",OU1HSTVOORLETTERS="+OU1HSTVOORLETTERS);
		sb.append(",OU1HSTADELLIJKETITELCODE="+OU1HSTADELLIJKETITELCODE);
		sb.append(",OU1HSTVOORVOEGSELGESLACHTSNAAM="+OU1HSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",OU1HSTGESLACHTSNAAM="+OU1HSTGESLACHTSNAAM);
		sb.append(",OU1HSTGEBOORTEDATUM="+String.valueOf(OU1HSTGEBOORTEDATUM));
		sb.append(",OU1HSTGEBOORTEDATUMINDICATOR="+OU1HSTGEBOORTEDATUMINDICATOR);
		sb.append(",OU1HSTGEBOORTEPLAATSCODE="+OU1HSTGEBOORTEPLAATSCODE);
		sb.append(",OU1HSTGEBOORTEPLAATSOMSCHRIJVING="+OU1HSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",OU1HSTGEBOORTELANDCODE="+OU1HSTGEBOORTELANDCODE);
		sb.append(",OU1HSTGESLACHTSAANDUIDINGCODE="+OU1HSTGESLACHTSAANDUIDINGCODE);
		sb.append(",OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING="+String.valueOf(OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING));
		sb.append(",OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR="+OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR);
		sb.append(",OU1HSTREGISTERGEMEENTEAKTECODE="+OU1HSTREGISTERGEMEENTEAKTECODE);
		sb.append(",OU1HSTAKTENUMMER="+OU1HSTAKTENUMMER);
		sb.append(",OU1HSTGEMEENTEDOCUMENTCODE="+OU1HSTGEMEENTEDOCUMENTCODE);
		sb.append(",OU1HSTDATUMDOCUMENT="+String.valueOf(OU1HSTDATUMDOCUMENT));
		sb.append(",OU1HSTDATUMDOCUMENTINDICATOR="+OU1HSTDATUMDOCUMENTINDICATOR);
		sb.append(",OU1HSTBESCHRIJVINGDOCUMENT="+OU1HSTBESCHRIJVINGDOCUMENT);
		sb.append(",OU1HSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OU1HSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OU1HSTDATUMINGANGONDERZOEK="+String.valueOf(OU1HSTDATUMINGANGONDERZOEK));
		sb.append(",OU1HSTDATUMINGANGONDERZOEKINDICATOR="+OU1HSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OU1HSTDATUMEINDEONDERZOEK="+String.valueOf(OU1HSTDATUMEINDEONDERZOEK));
		sb.append(",OU1HSTDATUMEINDEONDERZOEKINDICATOR="+OU1HSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OU1HSTINGANGSDATUMGELDIGHEID="+String.valueOf(OU1HSTINGANGSDATUMGELDIGHEID));
		sb.append(",OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR="+OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OU1HSTDATUMVANOPNEMING="+String.valueOf(OU1HSTDATUMVANOPNEMING));
		sb.append(",OU1HSTDATUMVANOPNEMINGINDICATOR="+OU1HSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_ouder1_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal OU1HSTSLEUTELGELDIGDATUM;

				public BigDecimal getOU1HSTSLEUTELGELDIGDATUM () {
					return this.OU1HSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal OU1HSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getOU1HSTSLEUTELGELDIGVOLGNUMMER () {
					return this.OU1HSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal OU1HSTANUMMER;

				public BigDecimal getOU1HSTANUMMER () {
					return this.OU1HSTANUMMER;
				}
				
			    public BigDecimal OU1HSTBURGERSERVICENUMMER;

				public BigDecimal getOU1HSTBURGERSERVICENUMMER () {
					return this.OU1HSTBURGERSERVICENUMMER;
				}
				
			    public String OU1HSTVOORNAMEN;

				public String getOU1HSTVOORNAMEN () {
					return this.OU1HSTVOORNAMEN;
				}
				
			    public String OU1HSTVOORLETTERS;

				public String getOU1HSTVOORLETTERS () {
					return this.OU1HSTVOORLETTERS;
				}
				
			    public String OU1HSTADELLIJKETITELCODE;

				public String getOU1HSTADELLIJKETITELCODE () {
					return this.OU1HSTADELLIJKETITELCODE;
				}
				
			    public String OU1HSTVOORVOEGSELGESLACHTSNAAM;

				public String getOU1HSTVOORVOEGSELGESLACHTSNAAM () {
					return this.OU1HSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String OU1HSTGESLACHTSNAAM;

				public String getOU1HSTGESLACHTSNAAM () {
					return this.OU1HSTGESLACHTSNAAM;
				}
				
			    public java.util.Date OU1HSTGEBOORTEDATUM;

				public java.util.Date getOU1HSTGEBOORTEDATUM () {
					return this.OU1HSTGEBOORTEDATUM;
				}
				
			    public String OU1HSTGEBOORTEDATUMINDICATOR;

				public String getOU1HSTGEBOORTEDATUMINDICATOR () {
					return this.OU1HSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String OU1HSTGEBOORTEPLAATSCODE;

				public String getOU1HSTGEBOORTEPLAATSCODE () {
					return this.OU1HSTGEBOORTEPLAATSCODE;
				}
				
			    public String OU1HSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getOU1HSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.OU1HSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String OU1HSTGEBOORTELANDCODE;

				public String getOU1HSTGEBOORTELANDCODE () {
					return this.OU1HSTGEBOORTELANDCODE;
				}
				
			    public String OU1HSTGESLACHTSAANDUIDINGCODE;

				public String getOU1HSTGESLACHTSAANDUIDINGCODE () {
					return this.OU1HSTGESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING;

				public java.util.Date getOU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING () {
					return this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING;
				}
				
			    public String OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;

				public String getOU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR () {
					return this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
				}
				
			    public String OU1HSTREGISTERGEMEENTEAKTECODE;

				public String getOU1HSTREGISTERGEMEENTEAKTECODE () {
					return this.OU1HSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String OU1HSTAKTENUMMER;

				public String getOU1HSTAKTENUMMER () {
					return this.OU1HSTAKTENUMMER;
				}
				
			    public String OU1HSTGEMEENTEDOCUMENTCODE;

				public String getOU1HSTGEMEENTEDOCUMENTCODE () {
					return this.OU1HSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OU1HSTDATUMDOCUMENT;

				public java.util.Date getOU1HSTDATUMDOCUMENT () {
					return this.OU1HSTDATUMDOCUMENT;
				}
				
			    public String OU1HSTDATUMDOCUMENTINDICATOR;

				public String getOU1HSTDATUMDOCUMENTINDICATOR () {
					return this.OU1HSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String OU1HSTBESCHRIJVINGDOCUMENT;

				public String getOU1HSTBESCHRIJVINGDOCUMENT () {
					return this.OU1HSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OU1HSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOU1HSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.OU1HSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OU1HSTDATUMINGANGONDERZOEK;

				public java.util.Date getOU1HSTDATUMINGANGONDERZOEK () {
					return this.OU1HSTDATUMINGANGONDERZOEK;
				}
				
			    public String OU1HSTDATUMINGANGONDERZOEKINDICATOR;

				public String getOU1HSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.OU1HSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1HSTDATUMEINDEONDERZOEK;

				public java.util.Date getOU1HSTDATUMEINDEONDERZOEK () {
					return this.OU1HSTDATUMEINDEONDERZOEK;
				}
				
			    public String OU1HSTDATUMEINDEONDERZOEKINDICATOR;

				public String getOU1HSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.OU1HSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1HSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getOU1HSTINGANGSDATUMGELDIGHEID () {
					return this.OU1HSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOU1HSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OU1HSTDATUMVANOPNEMING;

				public java.util.Date getOU1HSTDATUMVANOPNEMING () {
					return this.OU1HSTDATUMVANOPNEMING;
				}
				
			    public String OU1HSTDATUMVANOPNEMINGINDICATOR;

				public String getOU1HSTDATUMVANOPNEMINGINDICATOR () {
					return this.OU1HSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.OU1HSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.OU1HSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.OU1HSTANUMMER = (BigDecimal) dis.readObject();
					
						this.OU1HSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.OU1HSTVOORNAMEN = readString(dis);
					
					this.OU1HSTVOORLETTERS = readString(dis);
					
					this.OU1HSTADELLIJKETITELCODE = readString(dis);
					
					this.OU1HSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.OU1HSTGESLACHTSNAAM = readString(dis);
					
					this.OU1HSTGEBOORTEDATUM = readDate(dis);
					
					this.OU1HSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.OU1HSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.OU1HSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.OU1HSTGEBOORTELANDCODE = readString(dis);
					
					this.OU1HSTGESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING = readDate(dis);
					
					this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = readString(dis);
					
					this.OU1HSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OU1HSTAKTENUMMER = readString(dis);
					
					this.OU1HSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OU1HSTDATUMDOCUMENT = readDate(dis);
					
					this.OU1HSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OU1HSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OU1HSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OU1HSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.OU1HSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OU1HSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.OU1HSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OU1HSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OU1HSTDATUMVANOPNEMING = readDate(dis);
					
					this.OU1HSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.OU1HSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.OU1HSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.OU1HSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.OU1HSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU1HSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OU1HSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.OU1HSTGESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR,dos);
					
					// String
				
						writeString(this.OU1HSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OU1HSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.OU1HSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OU1HSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1HSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1HSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OU1HSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",OU1HSTSLEUTELGELDIGDATUM="+String.valueOf(OU1HSTSLEUTELGELDIGDATUM));
		sb.append(",OU1HSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(OU1HSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",OU1HSTANUMMER="+String.valueOf(OU1HSTANUMMER));
		sb.append(",OU1HSTBURGERSERVICENUMMER="+String.valueOf(OU1HSTBURGERSERVICENUMMER));
		sb.append(",OU1HSTVOORNAMEN="+OU1HSTVOORNAMEN);
		sb.append(",OU1HSTVOORLETTERS="+OU1HSTVOORLETTERS);
		sb.append(",OU1HSTADELLIJKETITELCODE="+OU1HSTADELLIJKETITELCODE);
		sb.append(",OU1HSTVOORVOEGSELGESLACHTSNAAM="+OU1HSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",OU1HSTGESLACHTSNAAM="+OU1HSTGESLACHTSNAAM);
		sb.append(",OU1HSTGEBOORTEDATUM="+String.valueOf(OU1HSTGEBOORTEDATUM));
		sb.append(",OU1HSTGEBOORTEDATUMINDICATOR="+OU1HSTGEBOORTEDATUMINDICATOR);
		sb.append(",OU1HSTGEBOORTEPLAATSCODE="+OU1HSTGEBOORTEPLAATSCODE);
		sb.append(",OU1HSTGEBOORTEPLAATSOMSCHRIJVING="+OU1HSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",OU1HSTGEBOORTELANDCODE="+OU1HSTGEBOORTELANDCODE);
		sb.append(",OU1HSTGESLACHTSAANDUIDINGCODE="+OU1HSTGESLACHTSAANDUIDINGCODE);
		sb.append(",OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING="+String.valueOf(OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING));
		sb.append(",OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR="+OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR);
		sb.append(",OU1HSTREGISTERGEMEENTEAKTECODE="+OU1HSTREGISTERGEMEENTEAKTECODE);
		sb.append(",OU1HSTAKTENUMMER="+OU1HSTAKTENUMMER);
		sb.append(",OU1HSTGEMEENTEDOCUMENTCODE="+OU1HSTGEMEENTEDOCUMENTCODE);
		sb.append(",OU1HSTDATUMDOCUMENT="+String.valueOf(OU1HSTDATUMDOCUMENT));
		sb.append(",OU1HSTDATUMDOCUMENTINDICATOR="+OU1HSTDATUMDOCUMENTINDICATOR);
		sb.append(",OU1HSTBESCHRIJVINGDOCUMENT="+OU1HSTBESCHRIJVINGDOCUMENT);
		sb.append(",OU1HSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OU1HSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OU1HSTDATUMINGANGONDERZOEK="+String.valueOf(OU1HSTDATUMINGANGONDERZOEK));
		sb.append(",OU1HSTDATUMINGANGONDERZOEKINDICATOR="+OU1HSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OU1HSTDATUMEINDEONDERZOEK="+String.valueOf(OU1HSTDATUMEINDEONDERZOEK));
		sb.append(",OU1HSTDATUMEINDEONDERZOEKINDICATOR="+OU1HSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OU1HSTINGANGSDATUMGELDIGHEID="+String.valueOf(OU1HSTINGANGSDATUMGELDIGHEID));
		sb.append(",OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR="+OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OU1HSTDATUMVANOPNEMING="+String.valueOf(OU1HSTDATUMVANOPNEMING));
		sb.append(",OU1HSTDATUMVANOPNEMINGINDICATOR="+OU1HSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_4Process(globalMap);
		tPostgresqlInput_5Process(globalMap);

		cipers_ouder1_historieStruct cipers_ouder1_historie = new cipers_ouder1_historieStruct();
ldf_ouder1_historieStruct ldf_ouder1_historie = new ldf_ouder1_historieStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_ouder1_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_ouder1_historie";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_ouder1_historie";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"ou1hstsleutelgeldigdatum\",\"ou1hstsleutelgeldigvolgnummer\",\"ou1hstanummer\",\"ou1hstburgerservicenummer\",\"ou1hstvoornamen\",\"ou1hstvoorletters\",\"ou1hstadellijketitelcode\",\"ou1hstadellijketitelomschrijving\",\"ou1hstvoorvoegselgeslachtsnaam\",\"ou1hstgeslachtsnaam\",\"ou1hstgeboortedatum\",\"ou1hstgeboortedatumindicator\",\"ou1hstgeboorteplaatscode\",\"ou1hstgeboorteplaatsomschrijving\",\"ou1hstgeboortelandcode\",\"ou1hstgeboortelandomschrijving\",\"ou1hstgeslachtsaanduidingcode\",\"ou1hstgeslachtsaanduidingomschrijving\",\"ou1hstdatumingangfamilierechtelijkebetrekking\",\"ou1hstdatumingangfamilierechtelijkebetrekkingindicator\",\"ou1hstregistergemeenteaktecode\",\"ou1hstregistergemeenteakteomschrijving\",\"ou1hstaktenummer\",\"ou1hstgemeentedocumentcode\",\"ou1hstgemeentedocumentomschrijving\",\"ou1hstdatumdocument\",\"ou1hstdatumdocumentindicator\",\"ou1hstbeschrijvingdocument\",\"ou1hstaanduidinggegevensonderzoek\",\"ou1hstdatumingangonderzoek\",\"ou1hstdatumingangonderzoekindicator\",\"ou1hstdatumeindeonderzoek\",\"ou1hstdatumeindeonderzoekindicator\",\"ou1hstingangsdatumgeldigheid\",\"ou1hstingangsdatumgeldigheidindicator\",\"ou1hstdatumvanopneming\",\"ou1hstdatumvanopnemingindicator\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_ouder1_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct> tHash_Lookup_ldf_titels_predikaten_ouder1_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_ouder1_naam" ))
					;					
					
	

ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naamHashKey = new ldf_titels_predikaten_ouder1_naamStruct();
ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naamDefault = new ldf_titels_predikaten_ouder1_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct> tHash_Lookup_ldf_landen_ouder1_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_ouder1_geboorte" ))
					;					
					
	

ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorteHashKey = new ldf_landen_ouder1_geboorteStruct();
ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorteDefault = new ldf_landen_ouder1_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct>) 
					globalMap.get( "tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht" ))
					;					
					
	

ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslachtHashKey = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();
ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslachtDefault = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct> tHash_Lookup_ldf_gemeenten_ouder1_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_ouder1_akte" ))
					;					
					
	

ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akteHashKey = new ldf_gemeenten_ouder1_akteStruct();
ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akteDefault = new ldf_gemeenten_ouder1_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct> tHash_Lookup_ldf_gemeenten_ouder1_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_ouder1_document" ))
					;					
					
	

ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_documentHashKey = new ldf_gemeenten_ouder1_documentStruct();
ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_documentDefault = new ldf_gemeenten_ouder1_documentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_ouder1_historieStruct ldf_ouder1_historie_tmp = new ldf_ouder1_historieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\n prsAnummer,\n ou1hstSleutelGeldigDatum,\n ou1hstSleutelGeldigVolgnummer,\n ou1hstAnummer,\n ou1hstBurgerservicenummer,\n rtrim(ou1hstVoornamen) as ou1hstVoornamen,\n rtrim(ou1hstVoorletters) as ou1hstVoorletters,\n rtrim(ou1hstAdellijketitelCode) as ou1hstAdellijketitelCode,\n rtrim(ou1hstVoorvoegselGeslachtsnaam) as ou1hstVoorvoegselGeslachtsnaam,\n rtrim(ou1hstGeslachtsnaam) as ou1hstGeslachtsnaam,\n ou1hstGeboortedatum,\n ou1hstGeboortedatumIndicator,\n rtrim(ou1hstGeboorteplaatsCode) as ou1hstGeboorteplaatsCode,\n rtrim(ou1hstGeboorteplaatsOmschrijving) as ou1hstGeboorteplaatsOmschrijving,\n rtrim(ou1hstGeboortelandCode) as ou1hstGeboortelandCode,\n rtrim(ou1hstGeslachtsaanduidingCode) as ou1hstGeslachtsaanduidingCode,\n ou1hstDatumIngangFamilierechtelijkeBetrekking,\n ou1hstDatumIngangFamilierechtelijkeBetrekkingIndicator,\n rtrim(ou1hstRegistergemeenteAkteCode) as ou1hstRegistergemeenteAkteCode,\n rtrim(ou1hstAktenummer) as ou1hstAktenummer,\n rtrim(ou1hstGemeenteDocumentCode) as ou1hstGemeenteDocumentCode,\n ou1hstDatumDocument,\n ou1hstDatumDocumentIndicator,\n rtrim(ou1hstBeschrijvingDocument) as ou1hstBeschrijvingDocument,\n ou1hstAanduidingGegevensOnderzoek,\n ou1hstDatumIngangOnderzoek,\n ou1hstDatumIngangOnderzoekIndicator,\n ou1hstDatumEindeOnderzoek,\n ou1hstDatumEindeOnderzoekIndicator,\n ou1hstIngangsdatumGeldigheid,\n ou1hstIngangsdatumGeldigheidIndicator,\n ou1hstDatumVanOpneming,\n ou1hstDatumVanOpnemingIndicator\n  from bzsc52q00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_ouder1_historie.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_ouder1_historie.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_ouder1_historie.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_ouder1_historie.OU1HSTSLEUTELGELDIGDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_ouder1_historie.OU1HSTSLEUTELGELDIGDATUM = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_ouder1_historie.OU1HSTSLEUTELGELDIGDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_ouder1_historie.OU1HSTSLEUTELGELDIGVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(3) != null) {
                cipers_ouder1_historie.OU1HSTSLEUTELGELDIGVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(3);
            } else {
                    cipers_ouder1_historie.OU1HSTSLEUTELGELDIGVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_ouder1_historie.OU1HSTANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(4) != null) {
                cipers_ouder1_historie.OU1HSTANUMMER = rs_tAS400Input_1.getBigDecimal(4);
            } else {
                    cipers_ouder1_historie.OU1HSTANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_ouder1_historie.OU1HSTBURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(5) != null) {
                cipers_ouder1_historie.OU1HSTBURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(5);
            } else {
                    cipers_ouder1_historie.OU1HSTBURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_ouder1_historie.OU1HSTVOORNAMEN = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTVOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 6, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_ouder1_historie.OU1HSTVOORLETTERS = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTVOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 7, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_ouder1_historie.OU1HSTADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_ouder1_historie.OU1HSTVOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTVOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 9, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_ouder1_historie.OU1HSTGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 10, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_ouder1_historie.OU1HSTGEBOORTEDATUM = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTGEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 11);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_ouder1_historie.OU1HSTGEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 12, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_ouder1_historie.OU1HSTGEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 13, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_ouder1_historie.OU1HSTGEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_ouder1_historie.OU1HSTGEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 15, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_ouder1_historie.OU1HSTGESLACHTSAANDUIDINGCODE = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGESLACHTSAANDUIDINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 16, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_ouder1_historie.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 17);
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_ouder1_historie.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 18, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_ouder1_historie.OU1HSTREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 19, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_ouder1_historie.OU1HSTAKTENUMMER = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 20, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_ouder1_historie.OU1HSTGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 21, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_ouder1_historie.OU1HSTDATUMDOCUMENT = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 22);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_ouder1_historie.OU1HSTDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 23, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 24) {
								cipers_ouder1_historie.OU1HSTBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 24, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 25) {
								cipers_ouder1_historie.OU1HSTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(25) != null) {
                cipers_ouder1_historie.OU1HSTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(25);
            } else {
                    cipers_ouder1_historie.OU1HSTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 26) {
								cipers_ouder1_historie.OU1HSTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 26);
		                    }
							if(colQtyInRs_tAS400Input_1 < 27) {
								cipers_ouder1_historie.OU1HSTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 27, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 28) {
								cipers_ouder1_historie.OU1HSTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 28);
		                    }
							if(colQtyInRs_tAS400Input_1 < 29) {
								cipers_ouder1_historie.OU1HSTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 29, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 30) {
								cipers_ouder1_historie.OU1HSTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 30);
		                    }
							if(colQtyInRs_tAS400Input_1 < 31) {
								cipers_ouder1_historie.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 31, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 32) {
								cipers_ouder1_historie.OU1HSTDATUMVANOPNEMING = null;
							} else {
										
			cipers_ouder1_historie.OU1HSTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 32);
		                    }
							if(colQtyInRs_tAS400Input_1 < 33) {
								cipers_ouder1_historie.OU1HSTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_ouder1_historie.OU1HSTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 33, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_ouder1_historie
			//cipers_ouder1_historie


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_ouder1_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_ouder1_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_ouder1_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_ouder1_naamHashKey.adellijketitelcode = cipers_ouder1_historie.OU1HSTADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_ouder1_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_ouder1_naam.lookup( ldf_titels_predikaten_ouder1_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_ouder1_naam != null && tHash_Lookup_ldf_titels_predikaten_ouder1_naam.getCount(ldf_titels_predikaten_ouder1_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_ouder1_naam' and it contains more one result from keys :  ldf_titels_predikaten_ouder1_naam.adellijketitelcode = '" + ldf_titels_predikaten_ouder1_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_ouder1_naamStruct fromLookup_ldf_titels_predikaten_ouder1_naam = null;
							ldf_titels_predikaten_ouder1_naam = ldf_titels_predikaten_ouder1_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_ouder1_naam !=null && tHash_Lookup_ldf_titels_predikaten_ouder1_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_ouder1_naam = tHash_Lookup_ldf_titels_predikaten_ouder1_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_ouder1_naam != null) {
								ldf_titels_predikaten_ouder1_naam = fromLookup_ldf_titels_predikaten_ouder1_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_ouder1_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_ouder1_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_ouder1_geboorteHashKey.landcode = cipers_ouder1_historie.OU1HSTGEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_ouder1_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_ouder1_geboorte.lookup( ldf_landen_ouder1_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_ouder1_geboorte != null && tHash_Lookup_ldf_landen_ouder1_geboorte.getCount(ldf_landen_ouder1_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_ouder1_geboorte' and it contains more one result from keys :  ldf_landen_ouder1_geboorte.landcode = '" + ldf_landen_ouder1_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_ouder1_geboorteStruct fromLookup_ldf_landen_ouder1_geboorte = null;
							ldf_landen_ouder1_geboorte = ldf_landen_ouder1_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_ouder1_geboorte !=null && tHash_Lookup_ldf_landen_ouder1_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_ouder1_geboorte = tHash_Lookup_ldf_landen_ouder1_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_ouder1_geboorte != null) {
								ldf_landen_ouder1_geboorte = fromLookup_ldf_landen_ouder1_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_geslachtsaanduidingen_ouder1_geslacht" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_geslachtsaanduidingen_ouder1_geslacht = false;
       		  	    	
       		  	    	
 							ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslachtObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_geslachtsaanduidingen_ouder1_geslachtHashKey.geslachtsaanduidingcode = cipers_ouder1_historie.OU1HSTGESLACHTSAANDUIDINGCODE ;
                        		    		

								
		                        	ldf_geslachtsaanduidingen_ouder1_geslachtHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.lookup( ldf_geslachtsaanduidingen_ouder1_geslachtHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht != null && tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.getCount(ldf_geslachtsaanduidingen_ouder1_geslachtHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_geslachtsaanduidingen_ouder1_geslacht' and it contains more one result from keys :  ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode = '" + ldf_geslachtsaanduidingen_ouder1_geslachtHashKey.geslachtsaanduidingcode + "'");
								} // G 071
							

							ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslacht = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_geslachtsaanduidingen_ouder1_geslachtStruct fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht = null;
							ldf_geslachtsaanduidingen_ouder1_geslacht = ldf_geslachtsaanduidingen_ouder1_geslachtDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht !=null && tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht = tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht != null) {
								ldf_geslachtsaanduidingen_ouder1_geslacht = fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_ouder1_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_ouder1_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_ouder1_akteHashKey.gemeentecode = cipers_ouder1_historie.OU1HSTREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_ouder1_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_ouder1_akte.lookup( ldf_gemeenten_ouder1_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_ouder1_akte != null && tHash_Lookup_ldf_gemeenten_ouder1_akte.getCount(ldf_gemeenten_ouder1_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_ouder1_akte' and it contains more one result from keys :  ldf_gemeenten_ouder1_akte.gemeentecode = '" + ldf_gemeenten_ouder1_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_ouder1_akteStruct fromLookup_ldf_gemeenten_ouder1_akte = null;
							ldf_gemeenten_ouder1_akte = ldf_gemeenten_ouder1_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_ouder1_akte !=null && tHash_Lookup_ldf_gemeenten_ouder1_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_ouder1_akte = tHash_Lookup_ldf_gemeenten_ouder1_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_ouder1_akte != null) {
								ldf_gemeenten_ouder1_akte = fromLookup_ldf_gemeenten_ouder1_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_ouder1_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_ouder1_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_ouder1_documentHashKey.gemeentecode = cipers_ouder1_historie.OU1HSTGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_ouder1_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_ouder1_document.lookup( ldf_gemeenten_ouder1_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_ouder1_document != null && tHash_Lookup_ldf_gemeenten_ouder1_document.getCount(ldf_gemeenten_ouder1_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_ouder1_document' and it contains more one result from keys :  ldf_gemeenten_ouder1_document.gemeentecode = '" + ldf_gemeenten_ouder1_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_ouder1_documentStruct fromLookup_ldf_gemeenten_ouder1_document = null;
							ldf_gemeenten_ouder1_document = ldf_gemeenten_ouder1_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_ouder1_document !=null && tHash_Lookup_ldf_gemeenten_ouder1_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_ouder1_document = tHash_Lookup_ldf_gemeenten_ouder1_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_ouder1_document != null) {
								ldf_gemeenten_ouder1_document = fromLookup_ldf_gemeenten_ouder1_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_ouder1_historie = null;


// # Output table : 'ldf_ouder1_historie'
ldf_ouder1_historie_tmp.prsanummer = cipers_ouder1_historie.PRSANUMMER;
ldf_ouder1_historie_tmp.ou1hstsleutelgeldigdatum = cipers_ouder1_historie.OU1HSTSLEUTELGELDIGDATUM;
ldf_ouder1_historie_tmp.ou1hstsleutelgeldigvolgnummer = cipers_ouder1_historie.OU1HSTSLEUTELGELDIGVOLGNUMMER;
ldf_ouder1_historie_tmp.ou1hstanummer = cipers_ouder1_historie.OU1HSTANUMMER;
ldf_ouder1_historie_tmp.ou1hstburgerservicenummer = cipers_ouder1_historie.OU1HSTBURGERSERVICENUMMER;
ldf_ouder1_historie_tmp.ou1hstvoornamen = cipers_ouder1_historie.OU1HSTVOORNAMEN;
ldf_ouder1_historie_tmp.ou1hstvoorletters = cipers_ouder1_historie.OU1HSTVOORLETTERS;
ldf_ouder1_historie_tmp.ou1hstadellijketitelcode = cipers_ouder1_historie.OU1HSTADELLIJKETITELCODE;
ldf_ouder1_historie_tmp.ou1hstadellijketitelomschrijving = ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving ;
ldf_ouder1_historie_tmp.ou1hstvoorvoegselgeslachtsnaam = cipers_ouder1_historie.OU1HSTVOORVOEGSELGESLACHTSNAAM;
ldf_ouder1_historie_tmp.ou1hstgeslachtsnaam = cipers_ouder1_historie.OU1HSTGESLACHTSNAAM;
ldf_ouder1_historie_tmp.ou1hstgeboortedatum = cipers_ouder1_historie.OU1HSTGEBOORTEDATUM;
ldf_ouder1_historie_tmp.ou1hstgeboortedatumindicator = cipers_ouder1_historie.OU1HSTGEBOORTEDATUMINDICATOR;
ldf_ouder1_historie_tmp.ou1hstgeboorteplaatscode = cipers_ouder1_historie.OU1HSTGEBOORTEPLAATSCODE;
ldf_ouder1_historie_tmp.ou1hstgeboorteplaatsomschrijving = cipers_ouder1_historie.OU1HSTGEBOORTEPLAATSOMSCHRIJVING;
ldf_ouder1_historie_tmp.ou1hstgeboortelandcode = cipers_ouder1_historie.OU1HSTGEBOORTELANDCODE;
ldf_ouder1_historie_tmp.ou1hstgeboortelandomschrijving = ldf_landen_ouder1_geboorte.landomschrijving ;
ldf_ouder1_historie_tmp.ou1hstgeslachtsaanduidingcode = cipers_ouder1_historie.OU1HSTGESLACHTSAANDUIDINGCODE;
ldf_ouder1_historie_tmp.ou1hstgeslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving ;
ldf_ouder1_historie_tmp.ou1hstdatumingangfamilierechtelijkebetrekking = cipers_ouder1_historie.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKING;
ldf_ouder1_historie_tmp.ou1hstdatumingangfamilierechtelijkebetrekkingindicator = cipers_ouder1_historie.OU1HSTDATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
ldf_ouder1_historie_tmp.ou1hstregistergemeenteaktecode = cipers_ouder1_historie.OU1HSTREGISTERGEMEENTEAKTECODE;
ldf_ouder1_historie_tmp.ou1hstregistergemeenteakteomschrijving = ldf_gemeenten_ouder1_akte.gemeenteomschrijving ;
ldf_ouder1_historie_tmp.ou1hstaktenummer = cipers_ouder1_historie.OU1HSTAKTENUMMER;
ldf_ouder1_historie_tmp.ou1hstgemeentedocumentcode = cipers_ouder1_historie.OU1HSTGEMEENTEDOCUMENTCODE;
ldf_ouder1_historie_tmp.ou1hstgemeentedocumentomschrijving = ldf_gemeenten_ouder1_document.gemeenteomschrijving ;
ldf_ouder1_historie_tmp.ou1hstdatumdocument = cipers_ouder1_historie.OU1HSTDATUMDOCUMENT;
ldf_ouder1_historie_tmp.ou1hstdatumdocumentindicator = cipers_ouder1_historie.OU1HSTDATUMDOCUMENTINDICATOR;
ldf_ouder1_historie_tmp.ou1hstbeschrijvingdocument = cipers_ouder1_historie.OU1HSTBESCHRIJVINGDOCUMENT;
ldf_ouder1_historie_tmp.ou1hstaanduidinggegevensonderzoek = cipers_ouder1_historie.OU1HSTAANDUIDINGGEGEVENSONDERZOEK;
ldf_ouder1_historie_tmp.ou1hstdatumingangonderzoek = cipers_ouder1_historie.OU1HSTDATUMINGANGONDERZOEK;
ldf_ouder1_historie_tmp.ou1hstdatumingangonderzoekindicator = cipers_ouder1_historie.OU1HSTDATUMINGANGONDERZOEKINDICATOR;
ldf_ouder1_historie_tmp.ou1hstdatumeindeonderzoek = cipers_ouder1_historie.OU1HSTDATUMEINDEONDERZOEK;
ldf_ouder1_historie_tmp.ou1hstdatumeindeonderzoekindicator = cipers_ouder1_historie.OU1HSTDATUMEINDEONDERZOEKINDICATOR;
ldf_ouder1_historie_tmp.ou1hstingangsdatumgeldigheid = cipers_ouder1_historie.OU1HSTINGANGSDATUMGELDIGHEID;
ldf_ouder1_historie_tmp.ou1hstingangsdatumgeldigheidindicator = cipers_ouder1_historie.OU1HSTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_ouder1_historie_tmp.ou1hstdatumvanopneming = cipers_ouder1_historie.OU1HSTDATUMVANOPNEMING;
ldf_ouder1_historie_tmp.ou1hstdatumvanopnemingindicator = cipers_ouder1_historie.OU1HSTDATUMVANOPNEMINGINDICATOR;
ldf_ouder1_historie = ldf_ouder1_historie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_ouder1_historie"
if(ldf_ouder1_historie != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_ouder1_historie
			//ldf_ouder1_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_ouder1_historie"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_ouder1_historie.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_ouder1_historie.ou1hstsleutelgeldigdatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, ldf_ouder1_historie.ou1hstsleutelgeldigvolgnummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(4, ldf_ouder1_historie.ou1hstanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(5, ldf_ouder1_historie.ou1hstburgerservicenummer);

                    if(ldf_ouder1_historie.ou1hstvoornamen == null) {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(6, ldf_ouder1_historie.ou1hstvoornamen);
}

                    if(ldf_ouder1_historie.ou1hstvoorletters == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, ldf_ouder1_historie.ou1hstvoorletters);
}

                    if(ldf_ouder1_historie.ou1hstadellijketitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(8, ldf_ouder1_historie.ou1hstadellijketitelcode);
}

                    if(ldf_ouder1_historie.ou1hstadellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(9, ldf_ouder1_historie.ou1hstadellijketitelomschrijving);
}

                    if(ldf_ouder1_historie.ou1hstvoorvoegselgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(10, ldf_ouder1_historie.ou1hstvoorvoegselgeslachtsnaam);
}

                    if(ldf_ouder1_historie.ou1hstgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, ldf_ouder1_historie.ou1hstgeslachtsnaam);
}

                    if(ldf_ouder1_historie.ou1hstgeboortedatum != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(12, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstgeboortedatum.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstgeboortedatumindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(13, ldf_ouder1_historie.ou1hstgeboortedatumindicator);
}

                    if(ldf_ouder1_historie.ou1hstgeboorteplaatscode == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(14, ldf_ouder1_historie.ou1hstgeboorteplaatscode);
}

                    if(ldf_ouder1_historie.ou1hstgeboorteplaatsomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(15, ldf_ouder1_historie.ou1hstgeboorteplaatsomschrijving);
}

                    if(ldf_ouder1_historie.ou1hstgeboortelandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(16, ldf_ouder1_historie.ou1hstgeboortelandcode);
}

                    if(ldf_ouder1_historie.ou1hstgeboortelandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, ldf_ouder1_historie.ou1hstgeboortelandomschrijving);
}

                    if(ldf_ouder1_historie.ou1hstgeslachtsaanduidingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(18, ldf_ouder1_historie.ou1hstgeslachtsaanduidingcode);
}

                    if(ldf_ouder1_historie.ou1hstgeslachtsaanduidingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(19, ldf_ouder1_historie.ou1hstgeslachtsaanduidingomschrijving);
}

                    if(ldf_ouder1_historie.ou1hstdatumingangfamilierechtelijkebetrekking != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(20, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstdatumingangfamilierechtelijkebetrekking.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstdatumingangfamilierechtelijkebetrekkingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(21, ldf_ouder1_historie.ou1hstdatumingangfamilierechtelijkebetrekkingindicator);
}

                    if(ldf_ouder1_historie.ou1hstregistergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(22, ldf_ouder1_historie.ou1hstregistergemeenteaktecode);
}

                    if(ldf_ouder1_historie.ou1hstregistergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(23, ldf_ouder1_historie.ou1hstregistergemeenteakteomschrijving);
}

                    if(ldf_ouder1_historie.ou1hstaktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(24, ldf_ouder1_historie.ou1hstaktenummer);
}

                    if(ldf_ouder1_historie.ou1hstgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(25, ldf_ouder1_historie.ou1hstgemeentedocumentcode);
}

                    if(ldf_ouder1_historie.ou1hstgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(26, ldf_ouder1_historie.ou1hstgemeentedocumentomschrijving);
}

                    if(ldf_ouder1_historie.ou1hstdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(27, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(28, ldf_ouder1_historie.ou1hstdatumdocumentindicator);
}

                    if(ldf_ouder1_historie.ou1hstbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(29, ldf_ouder1_historie.ou1hstbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(30, ldf_ouder1_historie.ou1hstaanduidinggegevensonderzoek);

                    if(ldf_ouder1_historie.ou1hstdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(31, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(31, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(32, ldf_ouder1_historie.ou1hstdatumingangonderzoekindicator);
}

                    if(ldf_ouder1_historie.ou1hstdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(33, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(33, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(34, ldf_ouder1_historie.ou1hstdatumeindeonderzoekindicator);
}

                    if(ldf_ouder1_historie.ou1hstingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(35, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(35, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(36, ldf_ouder1_historie.ou1hstingangsdatumgeldigheidindicator);
}

                    if(ldf_ouder1_historie.ou1hstdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(37, new java.sql.Timestamp(ldf_ouder1_historie.ou1hstdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(37, java.sql.Types.TIMESTAMP);
}

                    if(ldf_ouder1_historie.ou1hstdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(38, ldf_ouder1_historie.ou1hstdatumvanopnemingindicator);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_ouder1_historie"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_titels_predikaten_ouder1_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_ouder1_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_ouder1_naam" );

					
					
				
					if(tHash_Lookup_ldf_landen_ouder1_geboorte != null) {
						tHash_Lookup_ldf_landen_ouder1_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_ouder1_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht != null) {
						tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_ouder1_akte != null) {
						tHash_Lookup_ldf_gemeenten_ouder1_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_ouder1_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_ouder1_document != null) {
						tHash_Lookup_ldf_gemeenten_ouder1_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_ouder1_document" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_ouder1_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_ouder1_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_ouder1_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_ouder1_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_ouder1_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_ouder1_document"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_ouder1_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_ouder1_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_ouder1_naamStruct other = (ldf_titels_predikaten_ouder1_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_ouder1_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_ouder1_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_ouder1_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naam = new ldf_titels_predikaten_ouder1_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_ouder1_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_ouder1_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_ouder1_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_ouder1_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_ouder1_naam
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder1_naam) | target node:tAdvancedHash_ldf_titels_predikaten_ouder1_naam - inputs:(ldf_titels_predikaten_ouder1_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_ouder1_historie,ldf_titels_predikaten_ouder1_naam,ldf_landen_ouder1_geboorte,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document) outputs:(ldf_ouder1_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_ouder1_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct> tHash_Lookup_ldf_titels_predikaten_ouder1_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_ouder1_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_ouder1_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_ouder1_naam", tHash_Lookup_ldf_titels_predikaten_ouder1_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_titels_predikaten_ouder1_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_ouder1_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	

			//ldf_titels_predikaten_ouder1_naam
			//ldf_titels_predikaten_ouder1_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_ouder1_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naam_HashRow = new ldf_titels_predikaten_ouder1_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_ouder1_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_ouder1_naam.adellijketitelcode;
				
				ldf_titels_predikaten_ouder1_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_ouder1_naam.put(ldf_titels_predikaten_ouder1_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_ouder1_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	

tHash_Lookup_ldf_titels_predikaten_ouder1_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_ouder1_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_ouder1_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_ouder1_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_ouder1_geboorteStruct other = (ldf_landen_ouder1_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_ouder1_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_ouder1_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_ouder1_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorte = new ldf_landen_ouder1_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_ouder1_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_ouder1_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_ouder1_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_ouder1_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_ouder1_geboorte
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_ouder1_geboorte,ldf_landen_ouder1_geboorte) | target node:tAdvancedHash_ldf_landen_ouder1_geboorte - inputs:(ldf_landen_ouder1_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_ouder1_historie,ldf_titels_predikaten_ouder1_naam,ldf_landen_ouder1_geboorte,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document) outputs:(ldf_ouder1_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_ouder1_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct> tHash_Lookup_ldf_landen_ouder1_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_ouder1_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_ouder1_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_ouder1_geboorte", tHash_Lookup_ldf_landen_ouder1_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_landen_ouder1_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_ouder1_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_landen_ouder1_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_ouder1_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	

			//ldf_landen_ouder1_geboorte
			//ldf_landen_ouder1_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_ouder1_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorte_HashRow = new ldf_landen_ouder1_geboorteStruct();
		   	   	   
				
				ldf_landen_ouder1_geboorte_HashRow.landcode = ldf_landen_ouder1_geboorte.landcode;
				
				ldf_landen_ouder1_geboorte_HashRow.landomschrijving = ldf_landen_ouder1_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_ouder1_geboorte.put(ldf_landen_ouder1_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_ouder1_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	

tHash_Lookup_ldf_landen_ouder1_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_ouder1_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_geslachtsaanduidingen_ouder1_geslachtStruct implements routines.system.IPersistableComparableLookupRow<ldf_geslachtsaanduidingen_ouder1_geslachtStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String geslachtsaanduidingcode;

				public String getGeslachtsaanduidingcode () {
					return this.geslachtsaanduidingcode;
				}
				
			    public String geslachtsaanduidingomschrijving;

				public String getGeslachtsaanduidingomschrijving () {
					return this.geslachtsaanduidingomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.geslachtsaanduidingcode == null) ? 0 : this.geslachtsaanduidingcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_geslachtsaanduidingen_ouder1_geslachtStruct other = (ldf_geslachtsaanduidingen_ouder1_geslachtStruct) obj;
		
						if (this.geslachtsaanduidingcode == null) {
							if (other.geslachtsaanduidingcode != null)
								return false;
						
						} else if (!this.geslachtsaanduidingcode.equals(other.geslachtsaanduidingcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_geslachtsaanduidingen_ouder1_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            other.geslachtsaanduidingomschrijving = this.geslachtsaanduidingomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_geslachtsaanduidingen_ouder1_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.geslachtsaanduidingcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.geslachtsaanduidingcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.geslachtsaanduidingomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.geslachtsaanduidingomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("geslachtsaanduidingcode="+geslachtsaanduidingcode);
		sb.append(",geslachtsaanduidingomschrijving="+geslachtsaanduidingomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_geslachtsaanduidingen_ouder1_geslachtStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.geslachtsaanduidingcode, other.geslachtsaanduidingcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslacht = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();




	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", false);
		start_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder1_geslacht" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht().limitLog4jByte();

			   		// connection name:ldf_geslachtsaanduidingen_ouder1_geslacht
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht) | target node:tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht - inputs:(ldf_geslachtsaanduidingen_ouder1_geslacht) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_ouder1_historie,ldf_titels_predikaten_ouder1_naam,ldf_landen_ouder1_geboorte,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document) outputs:(ldf_ouder1_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_geslachtsaanduidingen_ouder1_geslacht = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_geslachtsaanduidingen_ouder1_geslachtStruct>getLookup(matchingModeEnum_ldf_geslachtsaanduidingen_ouder1_geslacht);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht", tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\ngeslachtsaanduidingcode,\ngeslachtsaanduidingomschrijving\nfrom ibz_cip_geslachtsaanduidingen";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	

			//ldf_geslachtsaanduidingen_ouder1_geslacht
			//ldf_geslachtsaanduidingen_ouder1_geslacht


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder1_geslacht"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();
		   	   	   
				
				ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow.geslachtsaanduidingcode = ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode;
				
				ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow.geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving;
				
			tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.put(ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht++;

/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	

tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder1_geslacht"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", true);
end_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_ouder1_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_ouder1_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_ouder1_akteStruct other = (ldf_gemeenten_ouder1_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_ouder1_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_ouder1_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_ouder1_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akte = new ldf_gemeenten_ouder1_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_ouder1_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_ouder1_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_ouder1_akte
			   		// source node:tPostgresqlInput_4 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_akte) | target node:tAdvancedHash_ldf_gemeenten_ouder1_akte - inputs:(ldf_gemeenten_ouder1_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_ouder1_historie,ldf_titels_predikaten_ouder1_naam,ldf_landen_ouder1_geboorte,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document) outputs:(ldf_ouder1_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_ouder1_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct> tHash_Lookup_ldf_gemeenten_ouder1_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_ouder1_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_ouder1_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_ouder1_akte", tHash_Lookup_ldf_gemeenten_ouder1_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_4);
			   	String dbUser_tPostgresqlInput_4 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;
		        
				
			String url_tPostgresqlInput_4 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_4,dbUser_tPostgresqlInput_4,dbPwd_tPostgresqlInput_4);
		        
				conn_tPostgresqlInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);

		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;
		try{
		    rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								ldf_gemeenten_ouder1_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								ldf_gemeenten_ouder1_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	

			//ldf_gemeenten_ouder1_akte
			//ldf_gemeenten_ouder1_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_ouder1_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akte_HashRow = new ldf_gemeenten_ouder1_akteStruct();
		   	   	   
				
				ldf_gemeenten_ouder1_akte_HashRow.gemeentecode = ldf_gemeenten_ouder1_akte.gemeentecode;
				
				ldf_gemeenten_ouder1_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_ouder1_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_ouder1_akte.put(ldf_gemeenten_ouder1_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_ouder1_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	stmt_tPostgresqlInput_4.close();

	if(conn_tPostgresqlInput_4 != null && !conn_tPostgresqlInput_4.isClosed()) {
		
			conn_tPostgresqlInput_4.commit();
			
		
			conn_tPostgresqlInput_4.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	

tHash_Lookup_ldf_gemeenten_ouder1_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_ouder1_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_ouder1_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_ouder1_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_ouder1_documentStruct other = (ldf_gemeenten_ouder1_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_ouder1_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_ouder1_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_ouder1_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_ouder1_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_document = new ldf_gemeenten_ouder1_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_ouder1_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_ouder1_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_ouder1_document
			   		// source node:tPostgresqlInput_5 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder1_document) | target node:tAdvancedHash_ldf_gemeenten_ouder1_document - inputs:(ldf_gemeenten_ouder1_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_ouder1_historie,ldf_titels_predikaten_ouder1_naam,ldf_landen_ouder1_geboorte,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document) outputs:(ldf_ouder1_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_ouder1_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct> tHash_Lookup_ldf_gemeenten_ouder1_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_ouder1_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_ouder1_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_ouder1_document", tHash_Lookup_ldf_gemeenten_ouder1_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_5);
			   	String dbUser_tPostgresqlInput_5 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;
		        
				
			String url_tPostgresqlInput_5 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_5,dbUser_tPostgresqlInput_5,dbPwd_tPostgresqlInput_5);
		        
				conn_tPostgresqlInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);

		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;
		try{
		    rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								ldf_gemeenten_ouder1_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								ldf_gemeenten_ouder1_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	

			//ldf_gemeenten_ouder1_document
			//ldf_gemeenten_ouder1_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_ouder1_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_document_HashRow = new ldf_gemeenten_ouder1_documentStruct();
		   	   	   
				
				ldf_gemeenten_ouder1_document_HashRow.gemeentecode = ldf_gemeenten_ouder1_document.gemeentecode;
				
				ldf_gemeenten_ouder1_document_HashRow.gemeenteomschrijving = ldf_gemeenten_ouder1_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_ouder1_document.put(ldf_gemeenten_ouder1_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_ouder1_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	stmt_tPostgresqlInput_5.close();

	if(conn_tPostgresqlInput_5 != null && !conn_tPostgresqlInput_5.isClosed()) {
		
			conn_tPostgresqlInput_5.commit();
			
		
			conn_tPostgresqlInput_5.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	

tHash_Lookup_ldf_gemeenten_ouder1_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_ouder1_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_ouder1_historie ibz_cipers_fill_ldf_ouder1_historieClass = new ibz_cipers_fill_ldf_ouder1_historie();

        int exitCode = ibz_cipers_fill_ldf_ouder1_historieClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_ouder1_historie.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_ouder1_historie_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_ouder1_historie");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     266724 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:51 CET
 ************************************************************************************************/