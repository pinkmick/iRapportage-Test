// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_overlijden_historie_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_overlijden_historie Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_overlijden_historie implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_overlijden_historie";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_overlijden_historie.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_overlijden_historie.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_overlijden_overlijden_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_overlijden_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_overlijden_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_overlijden_historieStruct implements routines.system.IPersistableRow<ldf_overlijden_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal ovlhstsleutelgeldigdatum;

				public BigDecimal getOvlhstsleutelgeldigdatum () {
					return this.ovlhstsleutelgeldigdatum;
				}
				
			    public BigDecimal ovlhstsleutelgeldigvolgnummer;

				public BigDecimal getOvlhstsleutelgeldigvolgnummer () {
					return this.ovlhstsleutelgeldigvolgnummer;
				}
				
			    public java.util.Date ovlhstdatumoverlijden;

				public java.util.Date getOvlhstdatumoverlijden () {
					return this.ovlhstdatumoverlijden;
				}
				
			    public String ovlhstdatumoverlijdenindicator;

				public String getOvlhstdatumoverlijdenindicator () {
					return this.ovlhstdatumoverlijdenindicator;
				}
				
			    public String ovlhstplaatsoverlijdencode;

				public String getOvlhstplaatsoverlijdencode () {
					return this.ovlhstplaatsoverlijdencode;
				}
				
			    public String ovlhstplaatsoverlijdenomschrijving;

				public String getOvlhstplaatsoverlijdenomschrijving () {
					return this.ovlhstplaatsoverlijdenomschrijving;
				}
				
			    public String ovlhstlandoverlijdencode;

				public String getOvlhstlandoverlijdencode () {
					return this.ovlhstlandoverlijdencode;
				}
				
			    public String ovlhstlandoverlijdenomschrijving;

				public String getOvlhstlandoverlijdenomschrijving () {
					return this.ovlhstlandoverlijdenomschrijving;
				}
				
			    public String ovlhstregistergemeenteaktecode;

				public String getOvlhstregistergemeenteaktecode () {
					return this.ovlhstregistergemeenteaktecode;
				}
				
			    public String ovlhstregistergemeenteakteomschrijving;

				public String getOvlhstregistergemeenteakteomschrijving () {
					return this.ovlhstregistergemeenteakteomschrijving;
				}
				
			    public String ovlhstaktenummer;

				public String getOvlhstaktenummer () {
					return this.ovlhstaktenummer;
				}
				
			    public String ovlhstgemeentedocumentcode;

				public String getOvlhstgemeentedocumentcode () {
					return this.ovlhstgemeentedocumentcode;
				}
				
			    public String ovlhstgemeentedocumentomschrijving;

				public String getOvlhstgemeentedocumentomschrijving () {
					return this.ovlhstgemeentedocumentomschrijving;
				}
				
			    public java.util.Date ovlhstdatumdocument;

				public java.util.Date getOvlhstdatumdocument () {
					return this.ovlhstdatumdocument;
				}
				
			    public String ovlhstdatumdocumentindicator;

				public String getOvlhstdatumdocumentindicator () {
					return this.ovlhstdatumdocumentindicator;
				}
				
			    public String ovlhstbeschrijvingdocument;

				public String getOvlhstbeschrijvingdocument () {
					return this.ovlhstbeschrijvingdocument;
				}
				
			    public BigDecimal ovlhstaanduidinggegevensonderzoek;

				public BigDecimal getOvlhstaanduidinggegevensonderzoek () {
					return this.ovlhstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ovlhstdatumingangonderzoek;

				public java.util.Date getOvlhstdatumingangonderzoek () {
					return this.ovlhstdatumingangonderzoek;
				}
				
			    public String ovlhstdatumingangonderzoekindicator;

				public String getOvlhstdatumingangonderzoekindicator () {
					return this.ovlhstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date ovlhstdatumeindeonderzoek;

				public java.util.Date getOvlhstdatumeindeonderzoek () {
					return this.ovlhstdatumeindeonderzoek;
				}
				
			    public String ovlhstdatumeindeonderzoekindicator;

				public String getOvlhstdatumeindeonderzoekindicator () {
					return this.ovlhstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date ovlhstingangsdatumgeldigheid;

				public java.util.Date getOvlhstingangsdatumgeldigheid () {
					return this.ovlhstingangsdatumgeldigheid;
				}
				
			    public String ovlhstingangsdatumgeldigheidindicator;

				public String getOvlhstingangsdatumgeldigheidindicator () {
					return this.ovlhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ovlhstdatumvanopneming;

				public java.util.Date getOvlhstdatumvanopneming () {
					return this.ovlhstdatumvanopneming;
				}
				
			    public String ovlhstdatumvanopnemingindicator;

				public String getOvlhstdatumvanopnemingindicator () {
					return this.ovlhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.ovlhstsleutelgeldigdatum == null) ? 0 : this.ovlhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.ovlhstsleutelgeldigvolgnummer == null) ? 0 : this.ovlhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_overlijden_historieStruct other = (ldf_overlijden_historieStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.ovlhstsleutelgeldigdatum == null) {
							if (other.ovlhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.ovlhstsleutelgeldigdatum.equals(other.ovlhstsleutelgeldigdatum))
						
							return false;
					
						if (this.ovlhstsleutelgeldigvolgnummer == null) {
							if (other.ovlhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.ovlhstsleutelgeldigvolgnummer.equals(other.ovlhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_overlijden_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            other.ovlhstsleutelgeldigdatum = this.ovlhstsleutelgeldigdatum;
	            other.ovlhstsleutelgeldigvolgnummer = this.ovlhstsleutelgeldigvolgnummer;
	            other.ovlhstdatumoverlijden = this.ovlhstdatumoverlijden;
	            other.ovlhstdatumoverlijdenindicator = this.ovlhstdatumoverlijdenindicator;
	            other.ovlhstplaatsoverlijdencode = this.ovlhstplaatsoverlijdencode;
	            other.ovlhstplaatsoverlijdenomschrijving = this.ovlhstplaatsoverlijdenomschrijving;
	            other.ovlhstlandoverlijdencode = this.ovlhstlandoverlijdencode;
	            other.ovlhstlandoverlijdenomschrijving = this.ovlhstlandoverlijdenomschrijving;
	            other.ovlhstregistergemeenteaktecode = this.ovlhstregistergemeenteaktecode;
	            other.ovlhstregistergemeenteakteomschrijving = this.ovlhstregistergemeenteakteomschrijving;
	            other.ovlhstaktenummer = this.ovlhstaktenummer;
	            other.ovlhstgemeentedocumentcode = this.ovlhstgemeentedocumentcode;
	            other.ovlhstgemeentedocumentomschrijving = this.ovlhstgemeentedocumentomschrijving;
	            other.ovlhstdatumdocument = this.ovlhstdatumdocument;
	            other.ovlhstdatumdocumentindicator = this.ovlhstdatumdocumentindicator;
	            other.ovlhstbeschrijvingdocument = this.ovlhstbeschrijvingdocument;
	            other.ovlhstaanduidinggegevensonderzoek = this.ovlhstaanduidinggegevensonderzoek;
	            other.ovlhstdatumingangonderzoek = this.ovlhstdatumingangonderzoek;
	            other.ovlhstdatumingangonderzoekindicator = this.ovlhstdatumingangonderzoekindicator;
	            other.ovlhstdatumeindeonderzoek = this.ovlhstdatumeindeonderzoek;
	            other.ovlhstdatumeindeonderzoekindicator = this.ovlhstdatumeindeonderzoekindicator;
	            other.ovlhstingangsdatumgeldigheid = this.ovlhstingangsdatumgeldigheid;
	            other.ovlhstingangsdatumgeldigheidindicator = this.ovlhstingangsdatumgeldigheidindicator;
	            other.ovlhstdatumvanopneming = this.ovlhstdatumvanopneming;
	            other.ovlhstdatumvanopnemingindicator = this.ovlhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_overlijden_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.ovlhstsleutelgeldigdatum = this.ovlhstsleutelgeldigdatum;
	            	other.ovlhstsleutelgeldigvolgnummer = this.ovlhstsleutelgeldigvolgnummer;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.ovlhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.ovlhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.ovlhstdatumoverlijden = readDate(dis);
					
					this.ovlhstdatumoverlijdenindicator = readString(dis);
					
					this.ovlhstplaatsoverlijdencode = readString(dis);
					
					this.ovlhstplaatsoverlijdenomschrijving = readString(dis);
					
					this.ovlhstlandoverlijdencode = readString(dis);
					
					this.ovlhstlandoverlijdenomschrijving = readString(dis);
					
					this.ovlhstregistergemeenteaktecode = readString(dis);
					
					this.ovlhstregistergemeenteakteomschrijving = readString(dis);
					
					this.ovlhstaktenummer = readString(dis);
					
					this.ovlhstgemeentedocumentcode = readString(dis);
					
					this.ovlhstgemeentedocumentomschrijving = readString(dis);
					
					this.ovlhstdatumdocument = readDate(dis);
					
					this.ovlhstdatumdocumentindicator = readString(dis);
					
					this.ovlhstbeschrijvingdocument = readString(dis);
					
						this.ovlhstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ovlhstdatumingangonderzoek = readDate(dis);
					
					this.ovlhstdatumingangonderzoekindicator = readString(dis);
					
					this.ovlhstdatumeindeonderzoek = readDate(dis);
					
					this.ovlhstdatumeindeonderzoekindicator = readString(dis);
					
					this.ovlhstingangsdatumgeldigheid = readDate(dis);
					
					this.ovlhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.ovlhstdatumvanopneming = readDate(dis);
					
					this.ovlhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlhstsleutelgeldigvolgnummer);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumoverlijden,dos);
					
					// String
				
						writeString(this.ovlhstdatumoverlijdenindicator,dos);
					
					// String
				
						writeString(this.ovlhstplaatsoverlijdencode,dos);
					
					// String
				
						writeString(this.ovlhstplaatsoverlijdenomschrijving,dos);
					
					// String
				
						writeString(this.ovlhstlandoverlijdencode,dos);
					
					// String
				
						writeString(this.ovlhstlandoverlijdenomschrijving,dos);
					
					// String
				
						writeString(this.ovlhstregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ovlhstregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ovlhstaktenummer,dos);
					
					// String
				
						writeString(this.ovlhstgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ovlhstgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumdocument,dos);
					
					// String
				
						writeString(this.ovlhstdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.ovlhstbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlhstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.ovlhstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ovlhstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovlhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ovlhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.ovlhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",ovlhstsleutelgeldigdatum="+String.valueOf(ovlhstsleutelgeldigdatum));
		sb.append(",ovlhstsleutelgeldigvolgnummer="+String.valueOf(ovlhstsleutelgeldigvolgnummer));
		sb.append(",ovlhstdatumoverlijden="+String.valueOf(ovlhstdatumoverlijden));
		sb.append(",ovlhstdatumoverlijdenindicator="+ovlhstdatumoverlijdenindicator);
		sb.append(",ovlhstplaatsoverlijdencode="+ovlhstplaatsoverlijdencode);
		sb.append(",ovlhstplaatsoverlijdenomschrijving="+ovlhstplaatsoverlijdenomschrijving);
		sb.append(",ovlhstlandoverlijdencode="+ovlhstlandoverlijdencode);
		sb.append(",ovlhstlandoverlijdenomschrijving="+ovlhstlandoverlijdenomschrijving);
		sb.append(",ovlhstregistergemeenteaktecode="+ovlhstregistergemeenteaktecode);
		sb.append(",ovlhstregistergemeenteakteomschrijving="+ovlhstregistergemeenteakteomschrijving);
		sb.append(",ovlhstaktenummer="+ovlhstaktenummer);
		sb.append(",ovlhstgemeentedocumentcode="+ovlhstgemeentedocumentcode);
		sb.append(",ovlhstgemeentedocumentomschrijving="+ovlhstgemeentedocumentomschrijving);
		sb.append(",ovlhstdatumdocument="+String.valueOf(ovlhstdatumdocument));
		sb.append(",ovlhstdatumdocumentindicator="+ovlhstdatumdocumentindicator);
		sb.append(",ovlhstbeschrijvingdocument="+ovlhstbeschrijvingdocument);
		sb.append(",ovlhstaanduidinggegevensonderzoek="+String.valueOf(ovlhstaanduidinggegevensonderzoek));
		sb.append(",ovlhstdatumingangonderzoek="+String.valueOf(ovlhstdatumingangonderzoek));
		sb.append(",ovlhstdatumingangonderzoekindicator="+ovlhstdatumingangonderzoekindicator);
		sb.append(",ovlhstdatumeindeonderzoek="+String.valueOf(ovlhstdatumeindeonderzoek));
		sb.append(",ovlhstdatumeindeonderzoekindicator="+ovlhstdatumeindeonderzoekindicator);
		sb.append(",ovlhstingangsdatumgeldigheid="+String.valueOf(ovlhstingangsdatumgeldigheid));
		sb.append(",ovlhstingangsdatumgeldigheidindicator="+ovlhstingangsdatumgeldigheidindicator);
		sb.append(",ovlhstdatumvanopneming="+String.valueOf(ovlhstdatumvanopneming));
		sb.append(",ovlhstdatumvanopnemingindicator="+ovlhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_overlijden_historieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ovlhstsleutelgeldigdatum, other.ovlhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ovlhstsleutelgeldigvolgnummer, other.ovlhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_overlijden_historieStruct implements routines.system.IPersistableRow<cipers_overlijden_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal OVLHSTSLEUTELGELDIGDATUM;

				public BigDecimal getOVLHSTSLEUTELGELDIGDATUM () {
					return this.OVLHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal OVLHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getOVLHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.OVLHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public java.util.Date OVLHSTDATUMOVERLIJDEN;

				public java.util.Date getOVLHSTDATUMOVERLIJDEN () {
					return this.OVLHSTDATUMOVERLIJDEN;
				}
				
			    public String OVLHSTDATUMOVERLIJDENINDICATOR;

				public String getOVLHSTDATUMOVERLIJDENINDICATOR () {
					return this.OVLHSTDATUMOVERLIJDENINDICATOR;
				}
				
			    public String OVLHSTPLAATSOVERLIJDENCODE;

				public String getOVLHSTPLAATSOVERLIJDENCODE () {
					return this.OVLHSTPLAATSOVERLIJDENCODE;
				}
				
			    public String OVLHSTPLAATSOVERLIJDENOMSCHRIJVING;

				public String getOVLHSTPLAATSOVERLIJDENOMSCHRIJVING () {
					return this.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING;
				}
				
			    public String OVLHSTLANDOVERLIJDENCODE;

				public String getOVLHSTLANDOVERLIJDENCODE () {
					return this.OVLHSTLANDOVERLIJDENCODE;
				}
				
			    public String OVLHSTREGISTERGEMEENTEAKTECODE;

				public String getOVLHSTREGISTERGEMEENTEAKTECODE () {
					return this.OVLHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String OVLHSTAKTENUMMER;

				public String getOVLHSTAKTENUMMER () {
					return this.OVLHSTAKTENUMMER;
				}
				
			    public String OVLHSTGEMEENTEDOCUMENTCODE;

				public String getOVLHSTGEMEENTEDOCUMENTCODE () {
					return this.OVLHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OVLHSTDATUMDOCUMENT;

				public java.util.Date getOVLHSTDATUMDOCUMENT () {
					return this.OVLHSTDATUMDOCUMENT;
				}
				
			    public String OVLHSTDATUMDOCUMENTINDICATOR;

				public String getOVLHSTDATUMDOCUMENTINDICATOR () {
					return this.OVLHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String OVLHSTBESCHRIJVINGDOCUMENT;

				public String getOVLHSTBESCHRIJVINGDOCUMENT () {
					return this.OVLHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OVLHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOVLHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.OVLHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OVLHSTDATUMINGANGONDERZOEK;

				public java.util.Date getOVLHSTDATUMINGANGONDERZOEK () {
					return this.OVLHSTDATUMINGANGONDERZOEK;
				}
				
			    public String OVLHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getOVLHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.OVLHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLHSTDATUMEINDEONDERZOEK;

				public java.util.Date getOVLHSTDATUMEINDEONDERZOEK () {
					return this.OVLHSTDATUMEINDEONDERZOEK;
				}
				
			    public String OVLHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getOVLHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.OVLHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getOVLHSTINGANGSDATUMGELDIGHEID () {
					return this.OVLHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOVLHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OVLHSTDATUMVANOPNEMING;

				public java.util.Date getOVLHSTDATUMVANOPNEMING () {
					return this.OVLHSTDATUMVANOPNEMING;
				}
				
			    public String OVLHSTDATUMVANOPNEMINGINDICATOR;

				public String getOVLHSTDATUMVANOPNEMINGINDICATOR () {
					return this.OVLHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.OVLHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.OVLHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
					this.OVLHSTDATUMOVERLIJDEN = readDate(dis);
					
					this.OVLHSTDATUMOVERLIJDENINDICATOR = readString(dis);
					
					this.OVLHSTPLAATSOVERLIJDENCODE = readString(dis);
					
					this.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING = readString(dis);
					
					this.OVLHSTLANDOVERLIJDENCODE = readString(dis);
					
					this.OVLHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OVLHSTAKTENUMMER = readString(dis);
					
					this.OVLHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OVLHSTDATUMDOCUMENT = readDate(dis);
					
					this.OVLHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OVLHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OVLHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OVLHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.OVLHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OVLHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.OVLHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OVLHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OVLHSTDATUMVANOPNEMING = readDate(dis);
					
					this.OVLHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLHSTSLEUTELGELDIGVOLGNUMMER);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMOVERLIJDEN,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMOVERLIJDENINDICATOR,dos);
					
					// String
				
						writeString(this.OVLHSTPLAATSOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OVLHSTLANDOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OVLHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.OVLHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OVLHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",OVLHSTSLEUTELGELDIGDATUM="+String.valueOf(OVLHSTSLEUTELGELDIGDATUM));
		sb.append(",OVLHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(OVLHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",OVLHSTDATUMOVERLIJDEN="+String.valueOf(OVLHSTDATUMOVERLIJDEN));
		sb.append(",OVLHSTDATUMOVERLIJDENINDICATOR="+OVLHSTDATUMOVERLIJDENINDICATOR);
		sb.append(",OVLHSTPLAATSOVERLIJDENCODE="+OVLHSTPLAATSOVERLIJDENCODE);
		sb.append(",OVLHSTPLAATSOVERLIJDENOMSCHRIJVING="+OVLHSTPLAATSOVERLIJDENOMSCHRIJVING);
		sb.append(",OVLHSTLANDOVERLIJDENCODE="+OVLHSTLANDOVERLIJDENCODE);
		sb.append(",OVLHSTREGISTERGEMEENTEAKTECODE="+OVLHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",OVLHSTAKTENUMMER="+OVLHSTAKTENUMMER);
		sb.append(",OVLHSTGEMEENTEDOCUMENTCODE="+OVLHSTGEMEENTEDOCUMENTCODE);
		sb.append(",OVLHSTDATUMDOCUMENT="+String.valueOf(OVLHSTDATUMDOCUMENT));
		sb.append(",OVLHSTDATUMDOCUMENTINDICATOR="+OVLHSTDATUMDOCUMENTINDICATOR);
		sb.append(",OVLHSTBESCHRIJVINGDOCUMENT="+OVLHSTBESCHRIJVINGDOCUMENT);
		sb.append(",OVLHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OVLHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OVLHSTDATUMINGANGONDERZOEK="+String.valueOf(OVLHSTDATUMINGANGONDERZOEK));
		sb.append(",OVLHSTDATUMINGANGONDERZOEKINDICATOR="+OVLHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OVLHSTDATUMEINDEONDERZOEK="+String.valueOf(OVLHSTDATUMEINDEONDERZOEK));
		sb.append(",OVLHSTDATUMEINDEONDERZOEKINDICATOR="+OVLHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OVLHSTINGANGSDATUMGELDIGHEID="+String.valueOf(OVLHSTINGANGSDATUMGELDIGHEID));
		sb.append(",OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR="+OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OVLHSTDATUMVANOPNEMING="+String.valueOf(OVLHSTDATUMVANOPNEMING));
		sb.append(",OVLHSTDATUMVANOPNEMINGINDICATOR="+OVLHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_overlijden_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal OVLHSTSLEUTELGELDIGDATUM;

				public BigDecimal getOVLHSTSLEUTELGELDIGDATUM () {
					return this.OVLHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal OVLHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getOVLHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.OVLHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public java.util.Date OVLHSTDATUMOVERLIJDEN;

				public java.util.Date getOVLHSTDATUMOVERLIJDEN () {
					return this.OVLHSTDATUMOVERLIJDEN;
				}
				
			    public String OVLHSTDATUMOVERLIJDENINDICATOR;

				public String getOVLHSTDATUMOVERLIJDENINDICATOR () {
					return this.OVLHSTDATUMOVERLIJDENINDICATOR;
				}
				
			    public String OVLHSTPLAATSOVERLIJDENCODE;

				public String getOVLHSTPLAATSOVERLIJDENCODE () {
					return this.OVLHSTPLAATSOVERLIJDENCODE;
				}
				
			    public String OVLHSTPLAATSOVERLIJDENOMSCHRIJVING;

				public String getOVLHSTPLAATSOVERLIJDENOMSCHRIJVING () {
					return this.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING;
				}
				
			    public String OVLHSTLANDOVERLIJDENCODE;

				public String getOVLHSTLANDOVERLIJDENCODE () {
					return this.OVLHSTLANDOVERLIJDENCODE;
				}
				
			    public String OVLHSTREGISTERGEMEENTEAKTECODE;

				public String getOVLHSTREGISTERGEMEENTEAKTECODE () {
					return this.OVLHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String OVLHSTAKTENUMMER;

				public String getOVLHSTAKTENUMMER () {
					return this.OVLHSTAKTENUMMER;
				}
				
			    public String OVLHSTGEMEENTEDOCUMENTCODE;

				public String getOVLHSTGEMEENTEDOCUMENTCODE () {
					return this.OVLHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OVLHSTDATUMDOCUMENT;

				public java.util.Date getOVLHSTDATUMDOCUMENT () {
					return this.OVLHSTDATUMDOCUMENT;
				}
				
			    public String OVLHSTDATUMDOCUMENTINDICATOR;

				public String getOVLHSTDATUMDOCUMENTINDICATOR () {
					return this.OVLHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String OVLHSTBESCHRIJVINGDOCUMENT;

				public String getOVLHSTBESCHRIJVINGDOCUMENT () {
					return this.OVLHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OVLHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOVLHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.OVLHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OVLHSTDATUMINGANGONDERZOEK;

				public java.util.Date getOVLHSTDATUMINGANGONDERZOEK () {
					return this.OVLHSTDATUMINGANGONDERZOEK;
				}
				
			    public String OVLHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getOVLHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.OVLHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLHSTDATUMEINDEONDERZOEK;

				public java.util.Date getOVLHSTDATUMEINDEONDERZOEK () {
					return this.OVLHSTDATUMEINDEONDERZOEK;
				}
				
			    public String OVLHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getOVLHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.OVLHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getOVLHSTINGANGSDATUMGELDIGHEID () {
					return this.OVLHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOVLHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OVLHSTDATUMVANOPNEMING;

				public java.util.Date getOVLHSTDATUMVANOPNEMING () {
					return this.OVLHSTDATUMVANOPNEMING;
				}
				
			    public String OVLHSTDATUMVANOPNEMINGINDICATOR;

				public String getOVLHSTDATUMVANOPNEMINGINDICATOR () {
					return this.OVLHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.OVLHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.OVLHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
					this.OVLHSTDATUMOVERLIJDEN = readDate(dis);
					
					this.OVLHSTDATUMOVERLIJDENINDICATOR = readString(dis);
					
					this.OVLHSTPLAATSOVERLIJDENCODE = readString(dis);
					
					this.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING = readString(dis);
					
					this.OVLHSTLANDOVERLIJDENCODE = readString(dis);
					
					this.OVLHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OVLHSTAKTENUMMER = readString(dis);
					
					this.OVLHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OVLHSTDATUMDOCUMENT = readDate(dis);
					
					this.OVLHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OVLHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OVLHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OVLHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.OVLHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OVLHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.OVLHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OVLHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OVLHSTDATUMVANOPNEMING = readDate(dis);
					
					this.OVLHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLHSTSLEUTELGELDIGVOLGNUMMER);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMOVERLIJDEN,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMOVERLIJDENINDICATOR,dos);
					
					// String
				
						writeString(this.OVLHSTPLAATSOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OVLHSTLANDOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OVLHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.OVLHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OVLHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OVLHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",OVLHSTSLEUTELGELDIGDATUM="+String.valueOf(OVLHSTSLEUTELGELDIGDATUM));
		sb.append(",OVLHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(OVLHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",OVLHSTDATUMOVERLIJDEN="+String.valueOf(OVLHSTDATUMOVERLIJDEN));
		sb.append(",OVLHSTDATUMOVERLIJDENINDICATOR="+OVLHSTDATUMOVERLIJDENINDICATOR);
		sb.append(",OVLHSTPLAATSOVERLIJDENCODE="+OVLHSTPLAATSOVERLIJDENCODE);
		sb.append(",OVLHSTPLAATSOVERLIJDENOMSCHRIJVING="+OVLHSTPLAATSOVERLIJDENOMSCHRIJVING);
		sb.append(",OVLHSTLANDOVERLIJDENCODE="+OVLHSTLANDOVERLIJDENCODE);
		sb.append(",OVLHSTREGISTERGEMEENTEAKTECODE="+OVLHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",OVLHSTAKTENUMMER="+OVLHSTAKTENUMMER);
		sb.append(",OVLHSTGEMEENTEDOCUMENTCODE="+OVLHSTGEMEENTEDOCUMENTCODE);
		sb.append(",OVLHSTDATUMDOCUMENT="+String.valueOf(OVLHSTDATUMDOCUMENT));
		sb.append(",OVLHSTDATUMDOCUMENTINDICATOR="+OVLHSTDATUMDOCUMENTINDICATOR);
		sb.append(",OVLHSTBESCHRIJVINGDOCUMENT="+OVLHSTBESCHRIJVINGDOCUMENT);
		sb.append(",OVLHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OVLHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OVLHSTDATUMINGANGONDERZOEK="+String.valueOf(OVLHSTDATUMINGANGONDERZOEK));
		sb.append(",OVLHSTDATUMINGANGONDERZOEKINDICATOR="+OVLHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OVLHSTDATUMEINDEONDERZOEK="+String.valueOf(OVLHSTDATUMEINDEONDERZOEK));
		sb.append(",OVLHSTDATUMEINDEONDERZOEKINDICATOR="+OVLHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OVLHSTINGANGSDATUMGELDIGHEID="+String.valueOf(OVLHSTINGANGSDATUMGELDIGHEID));
		sb.append(",OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR="+OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OVLHSTDATUMVANOPNEMING="+String.valueOf(OVLHSTDATUMVANOPNEMING));
		sb.append(",OVLHSTDATUMVANOPNEMINGINDICATOR="+OVLHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_3Process(globalMap);

		cipers_overlijden_historieStruct cipers_overlijden_historie = new cipers_overlijden_historieStruct();
ldf_overlijden_historieStruct ldf_overlijden_historie = new ldf_overlijden_historieStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_overlijden_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_overlijden_historie";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_overlijden_historie";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"ovlhstsleutelgeldigdatum\",\"ovlhstsleutelgeldigvolgnummer\",\"ovlhstdatumoverlijden\",\"ovlhstdatumoverlijdenindicator\",\"ovlhstplaatsoverlijdencode\",\"ovlhstplaatsoverlijdenomschrijving\",\"ovlhstlandoverlijdencode\",\"ovlhstlandoverlijdenomschrijving\",\"ovlhstregistergemeenteaktecode\",\"ovlhstregistergemeenteakteomschrijving\",\"ovlhstaktenummer\",\"ovlhstgemeentedocumentcode\",\"ovlhstgemeentedocumentomschrijving\",\"ovlhstdatumdocument\",\"ovlhstdatumdocumentindicator\",\"ovlhstbeschrijvingdocument\",\"ovlhstaanduidinggegevensonderzoek\",\"ovlhstdatumingangonderzoek\",\"ovlhstdatumingangonderzoekindicator\",\"ovlhstdatumeindeonderzoek\",\"ovlhstdatumeindeonderzoekindicator\",\"ovlhstingangsdatumgeldigheid\",\"ovlhstingangsdatumgeldigheidindicator\",\"ovlhstdatumvanopneming\",\"ovlhstdatumvanopnemingindicator\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_overlijden_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijden_overlijdenStruct> tHash_Lookup_ldf_landen_overlijden_overlijden = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijden_overlijdenStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijden_overlijdenStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_overlijden_overlijden" ))
					;					
					
	

ldf_landen_overlijden_overlijdenStruct ldf_landen_overlijden_overlijdenHashKey = new ldf_landen_overlijden_overlijdenStruct();
ldf_landen_overlijden_overlijdenStruct ldf_landen_overlijden_overlijdenDefault = new ldf_landen_overlijden_overlijdenStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct> tHash_Lookup_ldf_gemeenten_overlijden_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_overlijden_akte" ))
					;					
					
	

ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akteHashKey = new ldf_gemeenten_overlijden_akteStruct();
ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akteDefault = new ldf_gemeenten_overlijden_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct> tHash_Lookup_ldf_gemeenten_overlijden_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_overlijden_document" ))
					;					
					
	

ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_documentHashKey = new ldf_gemeenten_overlijden_documentStruct();
ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_documentDefault = new ldf_gemeenten_overlijden_documentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_overlijden_historieStruct ldf_overlijden_historie_tmp = new ldf_overlijden_historieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\n prsAnummer,\n ovlhstSleutelGeldigDatum,\n ovlhstSleutelGeldigVolgnummer,\n ovlhstDatumOverlijden,\n ovlhstDatumOverlijdenIndicator,\n rtrim(ovlhstPlaatsOverlijdenCode) as ovlhstPlaatsOverlijdenCode,\n rtrim(ovlhstPlaatsOverlijdenOmschrijving) as ovlhstPlaatsOverlijdenOmschrijving,\n rtrim(ovlhstLandOverlijdenCode) as ovlhstLandOverlijdenCode,\n rtrim(ovlhstRegistergemeenteAkteCode) as ovlhstRegistergemeenteAkteCode,\n rtrim(ovlhstAktenummer) as ovlhstAktenummer,\n rtrim(ovlhstGemeenteDocumentCode) as ovlhstGemeenteDocumentCode,\n ovlhstDatumDocument,\n ovlhstDatumDocumentIndicator,\n rtrim(ovlhstBeschrijvingDocument) as ovlhstBeschrijvingDocument,\n ovlhstAanduidingGegevensOnderzoek,\n ovlhstDatumIngangOnderzoek,\n ovlhstDatumIngangOnderzoekIndicator,\n ovlhstDatumEindeOnderzoek,\n ovlhstDatumEindeOnderzoekIndicator,\n ovlhstIngangsdatumGeldigheid,\n ovlhstIngangsdatumGeldigheidIndicator,\n ovlhstDatumVanOpneming,\n ovlhstDatumVanOpnemingIndicator\n  from bzsc56q00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_overlijden_historie.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_overlijden_historie.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_overlijden_historie.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_overlijden_historie.OVLHSTSLEUTELGELDIGDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_overlijden_historie.OVLHSTSLEUTELGELDIGDATUM = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_overlijden_historie.OVLHSTSLEUTELGELDIGDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_overlijden_historie.OVLHSTSLEUTELGELDIGVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(3) != null) {
                cipers_overlijden_historie.OVLHSTSLEUTELGELDIGVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(3);
            } else {
                    cipers_overlijden_historie.OVLHSTSLEUTELGELDIGVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_overlijden_historie.OVLHSTDATUMOVERLIJDEN = null;
							} else {
										
			cipers_overlijden_historie.OVLHSTDATUMOVERLIJDEN = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 4);
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_overlijden_historie.OVLHSTDATUMOVERLIJDENINDICATOR = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTDATUMOVERLIJDENINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 5, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_overlijden_historie.OVLHSTPLAATSOVERLIJDENCODE = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTPLAATSOVERLIJDENCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 6, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_overlijden_historie.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 7, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_overlijden_historie.OVLHSTLANDOVERLIJDENCODE = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTLANDOVERLIJDENCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_overlijden_historie.OVLHSTREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 9, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_overlijden_historie.OVLHSTAKTENUMMER = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 10, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_overlijden_historie.OVLHSTGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 11, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_overlijden_historie.OVLHSTDATUMDOCUMENT = null;
							} else {
										
			cipers_overlijden_historie.OVLHSTDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 12);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_overlijden_historie.OVLHSTDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 13, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_overlijden_historie.OVLHSTBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_overlijden_historie.OVLHSTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(15) != null) {
                cipers_overlijden_historie.OVLHSTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(15);
            } else {
                    cipers_overlijden_historie.OVLHSTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_overlijden_historie.OVLHSTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_overlijden_historie.OVLHSTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 16);
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_overlijden_historie.OVLHSTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 17, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_overlijden_historie.OVLHSTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_overlijden_historie.OVLHSTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 18);
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_overlijden_historie.OVLHSTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 19, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_overlijden_historie.OVLHSTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_overlijden_historie.OVLHSTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 20);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_overlijden_historie.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 21, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_overlijden_historie.OVLHSTDATUMVANOPNEMING = null;
							} else {
										
			cipers_overlijden_historie.OVLHSTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 22);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_overlijden_historie.OVLHSTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_overlijden_historie.OVLHSTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 23, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_overlijden_historie
			//cipers_overlijden_historie


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_overlijden_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_overlijden_overlijden" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_overlijden_overlijden = false;
       		  	    	
       		  	    	
 							ldf_landen_overlijden_overlijdenStruct ldf_landen_overlijden_overlijdenObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_overlijden_overlijdenHashKey.landcode = cipers_overlijden_historie.OVLHSTLANDOVERLIJDENCODE ;
                        		    		

								
		                        	ldf_landen_overlijden_overlijdenHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_overlijden_overlijden.lookup( ldf_landen_overlijden_overlijdenHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_overlijden_overlijden != null && tHash_Lookup_ldf_landen_overlijden_overlijden.getCount(ldf_landen_overlijden_overlijdenHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_overlijden_overlijden' and it contains more one result from keys :  ldf_landen_overlijden_overlijden.landcode = '" + ldf_landen_overlijden_overlijdenHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_overlijden_overlijdenStruct ldf_landen_overlijden_overlijden = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_overlijden_overlijdenStruct fromLookup_ldf_landen_overlijden_overlijden = null;
							ldf_landen_overlijden_overlijden = ldf_landen_overlijden_overlijdenDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_overlijden_overlijden !=null && tHash_Lookup_ldf_landen_overlijden_overlijden.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_overlijden_overlijden = tHash_Lookup_ldf_landen_overlijden_overlijden.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_overlijden_overlijden != null) {
								ldf_landen_overlijden_overlijden = fromLookup_ldf_landen_overlijden_overlijden;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_overlijden_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_overlijden_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_overlijden_akteHashKey.gemeentecode = cipers_overlijden_historie.OVLHSTREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_overlijden_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_overlijden_akte.lookup( ldf_gemeenten_overlijden_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_overlijden_akte != null && tHash_Lookup_ldf_gemeenten_overlijden_akte.getCount(ldf_gemeenten_overlijden_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_overlijden_akte' and it contains more one result from keys :  ldf_gemeenten_overlijden_akte.gemeentecode = '" + ldf_gemeenten_overlijden_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_overlijden_akteStruct fromLookup_ldf_gemeenten_overlijden_akte = null;
							ldf_gemeenten_overlijden_akte = ldf_gemeenten_overlijden_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_overlijden_akte !=null && tHash_Lookup_ldf_gemeenten_overlijden_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_overlijden_akte = tHash_Lookup_ldf_gemeenten_overlijden_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_overlijden_akte != null) {
								ldf_gemeenten_overlijden_akte = fromLookup_ldf_gemeenten_overlijden_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_overlijden_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_overlijden_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_overlijden_documentHashKey.gemeentecode = cipers_overlijden_historie.OVLHSTGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_overlijden_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_overlijden_document.lookup( ldf_gemeenten_overlijden_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_overlijden_document != null && tHash_Lookup_ldf_gemeenten_overlijden_document.getCount(ldf_gemeenten_overlijden_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_overlijden_document' and it contains more one result from keys :  ldf_gemeenten_overlijden_document.gemeentecode = '" + ldf_gemeenten_overlijden_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_overlijden_documentStruct fromLookup_ldf_gemeenten_overlijden_document = null;
							ldf_gemeenten_overlijden_document = ldf_gemeenten_overlijden_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_overlijden_document !=null && tHash_Lookup_ldf_gemeenten_overlijden_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_overlijden_document = tHash_Lookup_ldf_gemeenten_overlijden_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_overlijden_document != null) {
								ldf_gemeenten_overlijden_document = fromLookup_ldf_gemeenten_overlijden_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_overlijden_historie = null;


// # Output table : 'ldf_overlijden_historie'
ldf_overlijden_historie_tmp.prsanummer = cipers_overlijden_historie.PRSANUMMER;
ldf_overlijden_historie_tmp.ovlhstsleutelgeldigdatum = cipers_overlijden_historie.OVLHSTSLEUTELGELDIGDATUM;
ldf_overlijden_historie_tmp.ovlhstsleutelgeldigvolgnummer = cipers_overlijden_historie.OVLHSTSLEUTELGELDIGVOLGNUMMER;
ldf_overlijden_historie_tmp.ovlhstdatumoverlijden = cipers_overlijden_historie.OVLHSTDATUMOVERLIJDEN;
ldf_overlijden_historie_tmp.ovlhstdatumoverlijdenindicator = cipers_overlijden_historie.OVLHSTDATUMOVERLIJDENINDICATOR;
ldf_overlijden_historie_tmp.ovlhstplaatsoverlijdencode = cipers_overlijden_historie.OVLHSTPLAATSOVERLIJDENCODE;
ldf_overlijden_historie_tmp.ovlhstplaatsoverlijdenomschrijving = cipers_overlijden_historie.OVLHSTPLAATSOVERLIJDENOMSCHRIJVING;
ldf_overlijden_historie_tmp.ovlhstlandoverlijdencode = cipers_overlijden_historie.OVLHSTLANDOVERLIJDENCODE;
ldf_overlijden_historie_tmp.ovlhstlandoverlijdenomschrijving = ldf_landen_overlijden_overlijden.landomschrijving ;
ldf_overlijden_historie_tmp.ovlhstregistergemeenteaktecode = cipers_overlijden_historie.OVLHSTREGISTERGEMEENTEAKTECODE;
ldf_overlijden_historie_tmp.ovlhstregistergemeenteakteomschrijving = ldf_gemeenten_overlijden_akte.gemeenteomschrijving ;
ldf_overlijden_historie_tmp.ovlhstaktenummer = cipers_overlijden_historie.OVLHSTAKTENUMMER;
ldf_overlijden_historie_tmp.ovlhstgemeentedocumentcode = cipers_overlijden_historie.OVLHSTGEMEENTEDOCUMENTCODE;
ldf_overlijden_historie_tmp.ovlhstgemeentedocumentomschrijving = ldf_gemeenten_overlijden_document.gemeenteomschrijving ;
ldf_overlijden_historie_tmp.ovlhstdatumdocument = cipers_overlijden_historie.OVLHSTDATUMDOCUMENT;
ldf_overlijden_historie_tmp.ovlhstdatumdocumentindicator = cipers_overlijden_historie.OVLHSTDATUMDOCUMENTINDICATOR;
ldf_overlijden_historie_tmp.ovlhstbeschrijvingdocument = cipers_overlijden_historie.OVLHSTBESCHRIJVINGDOCUMENT;
ldf_overlijden_historie_tmp.ovlhstaanduidinggegevensonderzoek = cipers_overlijden_historie.OVLHSTAANDUIDINGGEGEVENSONDERZOEK;
ldf_overlijden_historie_tmp.ovlhstdatumingangonderzoek = cipers_overlijden_historie.OVLHSTDATUMINGANGONDERZOEK;
ldf_overlijden_historie_tmp.ovlhstdatumingangonderzoekindicator = cipers_overlijden_historie.OVLHSTDATUMINGANGONDERZOEKINDICATOR;
ldf_overlijden_historie_tmp.ovlhstdatumeindeonderzoek = cipers_overlijden_historie.OVLHSTDATUMEINDEONDERZOEK;
ldf_overlijden_historie_tmp.ovlhstdatumeindeonderzoekindicator = cipers_overlijden_historie.OVLHSTDATUMEINDEONDERZOEKINDICATOR;
ldf_overlijden_historie_tmp.ovlhstingangsdatumgeldigheid = cipers_overlijden_historie.OVLHSTINGANGSDATUMGELDIGHEID;
ldf_overlijden_historie_tmp.ovlhstingangsdatumgeldigheidindicator = cipers_overlijden_historie.OVLHSTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_overlijden_historie_tmp.ovlhstdatumvanopneming = cipers_overlijden_historie.OVLHSTDATUMVANOPNEMING;
ldf_overlijden_historie_tmp.ovlhstdatumvanopnemingindicator = cipers_overlijden_historie.OVLHSTDATUMVANOPNEMINGINDICATOR;
ldf_overlijden_historie = ldf_overlijden_historie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_overlijden_historie"
if(ldf_overlijden_historie != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_overlijden_historie
			//ldf_overlijden_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_overlijden_historie"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_overlijden_historie.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_overlijden_historie.ovlhstsleutelgeldigdatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, ldf_overlijden_historie.ovlhstsleutelgeldigvolgnummer);

                    if(ldf_overlijden_historie.ovlhstdatumoverlijden != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(4, new java.sql.Timestamp(ldf_overlijden_historie.ovlhstdatumoverlijden.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(ldf_overlijden_historie.ovlhstdatumoverlijdenindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(5, ldf_overlijden_historie.ovlhstdatumoverlijdenindicator);
}

                    if(ldf_overlijden_historie.ovlhstplaatsoverlijdencode == null) {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(6, ldf_overlijden_historie.ovlhstplaatsoverlijdencode);
}

                    if(ldf_overlijden_historie.ovlhstplaatsoverlijdenomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, ldf_overlijden_historie.ovlhstplaatsoverlijdenomschrijving);
}

                    if(ldf_overlijden_historie.ovlhstlandoverlijdencode == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(8, ldf_overlijden_historie.ovlhstlandoverlijdencode);
}

                    if(ldf_overlijden_historie.ovlhstlandoverlijdenomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(9, ldf_overlijden_historie.ovlhstlandoverlijdenomschrijving);
}

                    if(ldf_overlijden_historie.ovlhstregistergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(10, ldf_overlijden_historie.ovlhstregistergemeenteaktecode);
}

                    if(ldf_overlijden_historie.ovlhstregistergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, ldf_overlijden_historie.ovlhstregistergemeenteakteomschrijving);
}

                    if(ldf_overlijden_historie.ovlhstaktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(12, ldf_overlijden_historie.ovlhstaktenummer);
}

                    if(ldf_overlijden_historie.ovlhstgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(13, ldf_overlijden_historie.ovlhstgemeentedocumentcode);
}

                    if(ldf_overlijden_historie.ovlhstgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(14, ldf_overlijden_historie.ovlhstgemeentedocumentomschrijving);
}

                    if(ldf_overlijden_historie.ovlhstdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(15, new java.sql.Timestamp(ldf_overlijden_historie.ovlhstdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.TIMESTAMP);
}

                    if(ldf_overlijden_historie.ovlhstdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(16, ldf_overlijden_historie.ovlhstdatumdocumentindicator);
}

                    if(ldf_overlijden_historie.ovlhstbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, ldf_overlijden_historie.ovlhstbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(18, ldf_overlijden_historie.ovlhstaanduidinggegevensonderzoek);

                    if(ldf_overlijden_historie.ovlhstdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(19, new java.sql.Timestamp(ldf_overlijden_historie.ovlhstdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(19, java.sql.Types.TIMESTAMP);
}

                    if(ldf_overlijden_historie.ovlhstdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(20, ldf_overlijden_historie.ovlhstdatumingangonderzoekindicator);
}

                    if(ldf_overlijden_historie.ovlhstdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(21, new java.sql.Timestamp(ldf_overlijden_historie.ovlhstdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(ldf_overlijden_historie.ovlhstdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(22, ldf_overlijden_historie.ovlhstdatumeindeonderzoekindicator);
}

                    if(ldf_overlijden_historie.ovlhstingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(23, new java.sql.Timestamp(ldf_overlijden_historie.ovlhstingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(ldf_overlijden_historie.ovlhstingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(24, ldf_overlijden_historie.ovlhstingangsdatumgeldigheidindicator);
}

                    if(ldf_overlijden_historie.ovlhstdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(25, new java.sql.Timestamp(ldf_overlijden_historie.ovlhstdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(25, java.sql.Types.TIMESTAMP);
}

                    if(ldf_overlijden_historie.ovlhstdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(26, ldf_overlijden_historie.ovlhstdatumvanopnemingindicator);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_overlijden_historie"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_landen_overlijden_overlijden != null) {
						tHash_Lookup_ldf_landen_overlijden_overlijden.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_overlijden_overlijden" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_overlijden_akte != null) {
						tHash_Lookup_ldf_gemeenten_overlijden_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_overlijden_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_overlijden_document != null) {
						tHash_Lookup_ldf_gemeenten_overlijden_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_overlijden_document" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_overlijden_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_overlijden_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_overlijden_overlijden"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_overlijden_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_overlijden_document"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_overlijden_overlijdenStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_overlijden_overlijdenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_overlijden_overlijdenStruct other = (ldf_landen_overlijden_overlijdenStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_overlijden_overlijdenStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_overlijden_overlijdenStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_overlijden_overlijdenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_overlijden_overlijdenStruct ldf_landen_overlijden_overlijden = new ldf_landen_overlijden_overlijdenStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden_overlijden begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_overlijden_overlijden", false);
		start_Hash.put("tAdvancedHash_ldf_landen_overlijden_overlijden", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden_overlijden";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_overlijden_overlijden" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_overlijden_overlijden = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_overlijden_overlijden{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_overlijden_overlijden().limitLog4jByte();

			   		// connection name:ldf_landen_overlijden_overlijden
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_overlijden_overlijden,ldf_landen_overlijden_overlijden) | target node:tAdvancedHash_ldf_landen_overlijden_overlijden - inputs:(ldf_landen_overlijden_overlijden) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_overlijden_historie,ldf_landen_overlijden_overlijden,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_overlijden_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_overlijden_overlijden = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijden_overlijdenStruct> tHash_Lookup_ldf_landen_overlijden_overlijden =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_overlijden_overlijdenStruct>getLookup(matchingModeEnum_ldf_landen_overlijden_overlijden);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_overlijden_overlijden", tHash_Lookup_ldf_landen_overlijden_overlijden);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_overlijden_overlijden begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_landen_overlijden_overlijden.landcode = null;
							} else {
	                         		
        	ldf_landen_overlijden_overlijden.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_landen_overlijden_overlijden.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_overlijden_overlijden.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden_overlijden main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden_overlijden";

	

			//ldf_landen_overlijden_overlijden
			//ldf_landen_overlijden_overlijden


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_overlijden_overlijden"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_overlijden_overlijdenStruct ldf_landen_overlijden_overlijden_HashRow = new ldf_landen_overlijden_overlijdenStruct();
		   	   	   
				
				ldf_landen_overlijden_overlijden_HashRow.landcode = ldf_landen_overlijden_overlijden.landcode;
				
				ldf_landen_overlijden_overlijden_HashRow.landomschrijving = ldf_landen_overlijden_overlijden.landomschrijving;
				
			tHash_Lookup_ldf_landen_overlijden_overlijden.put(ldf_landen_overlijden_overlijden_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_overlijden_overlijden++;

/**
 * [tAdvancedHash_ldf_landen_overlijden_overlijden main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden_overlijden end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden_overlijden";

	

tHash_Lookup_ldf_landen_overlijden_overlijden.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_overlijden_overlijden"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_overlijden_overlijden", true);
end_Hash.put("tAdvancedHash_ldf_landen_overlijden_overlijden", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_overlijden_overlijden end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden_overlijden finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden_overlijden";

	

 



/**
 * [tAdvancedHash_ldf_landen_overlijden_overlijden finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_overlijden_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_overlijden_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_overlijden_akteStruct other = (ldf_gemeenten_overlijden_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_overlijden_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_overlijden_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_overlijden_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akte = new ldf_gemeenten_overlijden_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_overlijden_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_overlijden_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_overlijden_akte
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_akte) | target node:tAdvancedHash_ldf_gemeenten_overlijden_akte - inputs:(ldf_gemeenten_overlijden_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_overlijden_historie,ldf_landen_overlijden_overlijden,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_overlijden_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_overlijden_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct> tHash_Lookup_ldf_gemeenten_overlijden_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_overlijden_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_overlijden_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_overlijden_akte", tHash_Lookup_ldf_gemeenten_overlijden_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_gemeenten_overlijden_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_gemeenten_overlijden_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	

			//ldf_gemeenten_overlijden_akte
			//ldf_gemeenten_overlijden_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_overlijden_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akte_HashRow = new ldf_gemeenten_overlijden_akteStruct();
		   	   	   
				
				ldf_gemeenten_overlijden_akte_HashRow.gemeentecode = ldf_gemeenten_overlijden_akte.gemeentecode;
				
				ldf_gemeenten_overlijden_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_overlijden_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_overlijden_akte.put(ldf_gemeenten_overlijden_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_overlijden_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	

tHash_Lookup_ldf_gemeenten_overlijden_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_overlijden_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_overlijden_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_overlijden_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_overlijden_documentStruct other = (ldf_gemeenten_overlijden_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_overlijden_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_overlijden_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_overlijden_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_overlijden_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_document = new ldf_gemeenten_overlijden_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_overlijden_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_overlijden_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_overlijden_document
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_overlijden_document,ldf_gemeenten_overlijden_document) | target node:tAdvancedHash_ldf_gemeenten_overlijden_document - inputs:(ldf_gemeenten_overlijden_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_overlijden_historie,ldf_landen_overlijden_overlijden,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_overlijden_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_overlijden_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct> tHash_Lookup_ldf_gemeenten_overlijden_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_overlijden_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_overlijden_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_overlijden_document", tHash_Lookup_ldf_gemeenten_overlijden_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_gemeenten_overlijden_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_gemeenten_overlijden_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	

			//ldf_gemeenten_overlijden_document
			//ldf_gemeenten_overlijden_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_overlijden_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_document_HashRow = new ldf_gemeenten_overlijden_documentStruct();
		   	   	   
				
				ldf_gemeenten_overlijden_document_HashRow.gemeentecode = ldf_gemeenten_overlijden_document.gemeentecode;
				
				ldf_gemeenten_overlijden_document_HashRow.gemeenteomschrijving = ldf_gemeenten_overlijden_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_overlijden_document.put(ldf_gemeenten_overlijden_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_overlijden_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	

tHash_Lookup_ldf_gemeenten_overlijden_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_overlijden_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_overlijden_historie ibz_cipers_fill_ldf_overlijden_historieClass = new ibz_cipers_fill_ldf_overlijden_historie();

        int exitCode = ibz_cipers_fill_ldf_overlijden_historieClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_overlijden_historie.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_overlijden_historie_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_overlijden_historie");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     202089 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:52 CET
 ************************************************************************************************/