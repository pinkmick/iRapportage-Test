// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_drop_ldf_tabellen_0_1;

import routines.CustomSettings;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.PasswordReader;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_drop_ldf_tabellen Purpose: <br>
 * Description: Drop all tables of iRapportage from the LDF. <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_drop_ldf_tabellen implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_drop_ldf_tabellen";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_drop_ldf_tabellen.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_drop_ldf_tabellen.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_drop_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlRow_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_1().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
			String driverClass_tPostgresqlRow_1 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_1);
		
			String url_tPostgresqlRow_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_1 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_1 = decryptedPassword_tPostgresqlRow_1;
	        
					
			conn_tPostgresqlRow_1 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_1,dbUser_tPostgresqlRow_1,dbPwd_tPostgresqlRow_1);
		
					if(conn_tPostgresqlRow_1.getAutoCommit()) {
						
				conn_tPostgresqlRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_1 = 10000;
					int commitCounter_tPostgresqlRow_1 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
	


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "drop table if exists ldf.ibz_cip_persoon cascade";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_1) {
		
	}
	
		commitCounter_tPostgresqlRow_1++;
		if(commitEvery_tPostgresqlRow_1 <= commitCounter_tPostgresqlRow_1) {
			
			conn_tPostgresqlRow_1.commit();
			
			commitCounter_tPostgresqlRow_1=0;
		}
		

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
	stmt_tPostgresqlRow_1.close();	
		if(commitEvery_tPostgresqlRow_1>commitCounter_tPostgresqlRow_1){

			
			conn_tPostgresqlRow_1.commit();
			
	
			commitCounter_tPostgresqlRow_1=0;
	
		}
			conn_tPostgresqlRow_1.close();
			

 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tPostgresqlRow_2Process(globalMap);



/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_2", false);
		start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_2";

	
		int tos_count_tPostgresqlRow_2 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_2().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_2 = null;
	String query_tPostgresqlRow_2 = "";
	boolean whetherReject_tPostgresqlRow_2 = false;
			String driverClass_tPostgresqlRow_2 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_2);
		
			String url_tPostgresqlRow_2 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_2 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_2 = decryptedPassword_tPostgresqlRow_2;
	        
					
			conn_tPostgresqlRow_2 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_2,dbUser_tPostgresqlRow_2,dbPwd_tPostgresqlRow_2);
		
					if(conn_tPostgresqlRow_2.getAutoCommit()) {
						
				conn_tPostgresqlRow_2.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_2 = 10000;
					int commitCounter_tPostgresqlRow_2 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2.createStatement();
	


 



/**
 * [tPostgresqlRow_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

query_tPostgresqlRow_2 = "drop table if exists ldf.ibz_cip_nationaliteit cascade";
whetherReject_tPostgresqlRow_2 = false;
globalMap.put("tPostgresqlRow_2_QUERY",query_tPostgresqlRow_2);
try {
		stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_2) {
		
	}
	
		commitCounter_tPostgresqlRow_2++;
		if(commitEvery_tPostgresqlRow_2 <= commitCounter_tPostgresqlRow_2) {
			
			conn_tPostgresqlRow_2.commit();
			
			commitCounter_tPostgresqlRow_2=0;
		}
		

 


	tos_count_tPostgresqlRow_2++;

/**
 * [tPostgresqlRow_2 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

	
	stmt_tPostgresqlRow_2.close();	
		if(commitEvery_tPostgresqlRow_2>commitCounter_tPostgresqlRow_2){

			
			conn_tPostgresqlRow_2.commit();
			
	
			commitCounter_tPostgresqlRow_2=0;
	
		}
			conn_tPostgresqlRow_2.close();
			

 

ok_Hash.put("tPostgresqlRow_2", true);
end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tPostgresqlRow_3Process(globalMap);



/**
 * [tPostgresqlRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_2";

	

 



/**
 * [tPostgresqlRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_3", false);
		start_Hash.put("tPostgresqlRow_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_3";

	
		int tos_count_tPostgresqlRow_3 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_3().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_3 = null;
	String query_tPostgresqlRow_3 = "";
	boolean whetherReject_tPostgresqlRow_3 = false;
			String driverClass_tPostgresqlRow_3 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_3);
		
			String url_tPostgresqlRow_3 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_3 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_3 = decryptedPassword_tPostgresqlRow_3;
	        
					
			conn_tPostgresqlRow_3 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_3,dbUser_tPostgresqlRow_3,dbPwd_tPostgresqlRow_3);
		
					if(conn_tPostgresqlRow_3.getAutoCommit()) {
						
				conn_tPostgresqlRow_3.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_3 = 10000;
					int commitCounter_tPostgresqlRow_3 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_3 = conn_tPostgresqlRow_3.createStatement();
	


 



/**
 * [tPostgresqlRow_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_3";

	

query_tPostgresqlRow_3 = "drop table if exists ldf.ibz_cip_huwelijk cascade";
whetherReject_tPostgresqlRow_3 = false;
globalMap.put("tPostgresqlRow_3_QUERY",query_tPostgresqlRow_3);
try {
		stmt_tPostgresqlRow_3.execute(query_tPostgresqlRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_3) {
		
	}
	
		commitCounter_tPostgresqlRow_3++;
		if(commitEvery_tPostgresqlRow_3 <= commitCounter_tPostgresqlRow_3) {
			
			conn_tPostgresqlRow_3.commit();
			
			commitCounter_tPostgresqlRow_3=0;
		}
		

 


	tos_count_tPostgresqlRow_3++;

/**
 * [tPostgresqlRow_3 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_3";

	

	
	stmt_tPostgresqlRow_3.close();	
		if(commitEvery_tPostgresqlRow_3>commitCounter_tPostgresqlRow_3){

			
			conn_tPostgresqlRow_3.commit();
			
	
			commitCounter_tPostgresqlRow_3=0;
	
		}
			conn_tPostgresqlRow_3.close();
			

 

ok_Hash.put("tPostgresqlRow_3", true);
end_Hash.put("tPostgresqlRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tPostgresqlRow_4Process(globalMap);



/**
 * [tPostgresqlRow_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_3";

	

 



/**
 * [tPostgresqlRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_3_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_4", false);
		start_Hash.put("tPostgresqlRow_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_4";

	
		int tos_count_tPostgresqlRow_4 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_4().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_4 = null;
	String query_tPostgresqlRow_4 = "";
	boolean whetherReject_tPostgresqlRow_4 = false;
			String driverClass_tPostgresqlRow_4 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_4);
		
			String url_tPostgresqlRow_4 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_4 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_4 = decryptedPassword_tPostgresqlRow_4;
	        
					
			conn_tPostgresqlRow_4 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_4,dbUser_tPostgresqlRow_4,dbPwd_tPostgresqlRow_4);
		
					if(conn_tPostgresqlRow_4.getAutoCommit()) {
						
				conn_tPostgresqlRow_4.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_4 = 10000;
					int commitCounter_tPostgresqlRow_4 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_4 = conn_tPostgresqlRow_4.createStatement();
	


 



/**
 * [tPostgresqlRow_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_4";

	

query_tPostgresqlRow_4 = "drop table if exists ldf.ibz_cip_kind cascade";
whetherReject_tPostgresqlRow_4 = false;
globalMap.put("tPostgresqlRow_4_QUERY",query_tPostgresqlRow_4);
try {
		stmt_tPostgresqlRow_4.execute(query_tPostgresqlRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_4) {
		
	}
	
		commitCounter_tPostgresqlRow_4++;
		if(commitEvery_tPostgresqlRow_4 <= commitCounter_tPostgresqlRow_4) {
			
			conn_tPostgresqlRow_4.commit();
			
			commitCounter_tPostgresqlRow_4=0;
		}
		

 


	tos_count_tPostgresqlRow_4++;

/**
 * [tPostgresqlRow_4 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_4";

	

	
	stmt_tPostgresqlRow_4.close();	
		if(commitEvery_tPostgresqlRow_4>commitCounter_tPostgresqlRow_4){

			
			conn_tPostgresqlRow_4.commit();
			
	
			commitCounter_tPostgresqlRow_4=0;
	
		}
			conn_tPostgresqlRow_4.close();
			

 

ok_Hash.put("tPostgresqlRow_4", true);
end_Hash.put("tPostgresqlRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tPostgresqlRow_5Process(globalMap);



/**
 * [tPostgresqlRow_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_4";

	

 



/**
 * [tPostgresqlRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_5", false);
		start_Hash.put("tPostgresqlRow_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_5";

	
		int tos_count_tPostgresqlRow_5 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_5().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_5 = null;
	String query_tPostgresqlRow_5 = "";
	boolean whetherReject_tPostgresqlRow_5 = false;
			String driverClass_tPostgresqlRow_5 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_5);
		
			String url_tPostgresqlRow_5 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_5 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_5 = decryptedPassword_tPostgresqlRow_5;
	        
					
			conn_tPostgresqlRow_5 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_5,dbUser_tPostgresqlRow_5,dbPwd_tPostgresqlRow_5);
		
					if(conn_tPostgresqlRow_5.getAutoCommit()) {
						
				conn_tPostgresqlRow_5.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_5 = 10000;
					int commitCounter_tPostgresqlRow_5 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_5 = conn_tPostgresqlRow_5.createStatement();
	


 



/**
 * [tPostgresqlRow_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_5";

	

query_tPostgresqlRow_5 = "drop table if exists ldf.ibz_cip_reisdocument cascade";
whetherReject_tPostgresqlRow_5 = false;
globalMap.put("tPostgresqlRow_5_QUERY",query_tPostgresqlRow_5);
try {
		stmt_tPostgresqlRow_5.execute(query_tPostgresqlRow_5);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_5 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_5) {
		
	}
	
		commitCounter_tPostgresqlRow_5++;
		if(commitEvery_tPostgresqlRow_5 <= commitCounter_tPostgresqlRow_5) {
			
			conn_tPostgresqlRow_5.commit();
			
			commitCounter_tPostgresqlRow_5=0;
		}
		

 


	tos_count_tPostgresqlRow_5++;

/**
 * [tPostgresqlRow_5 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_5";

	

	
	stmt_tPostgresqlRow_5.close();	
		if(commitEvery_tPostgresqlRow_5>commitCounter_tPostgresqlRow_5){

			
			conn_tPostgresqlRow_5.commit();
			
	
			commitCounter_tPostgresqlRow_5=0;
	
		}
			conn_tPostgresqlRow_5.close();
			

 

ok_Hash.put("tPostgresqlRow_5", true);
end_Hash.put("tPostgresqlRow_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tPostgresqlRow_6Process(globalMap);



/**
 * [tPostgresqlRow_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_5";

	

 



/**
 * [tPostgresqlRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_5_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_6", false);
		start_Hash.put("tPostgresqlRow_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_6";

	
		int tos_count_tPostgresqlRow_6 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_6().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_6 = null;
	String query_tPostgresqlRow_6 = "";
	boolean whetherReject_tPostgresqlRow_6 = false;
			String driverClass_tPostgresqlRow_6 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_6);
		
			String url_tPostgresqlRow_6 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_6 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_6 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_6 = decryptedPassword_tPostgresqlRow_6;
	        
					
			conn_tPostgresqlRow_6 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_6,dbUser_tPostgresqlRow_6,dbPwd_tPostgresqlRow_6);
		
					if(conn_tPostgresqlRow_6.getAutoCommit()) {
						
				conn_tPostgresqlRow_6.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_6 = 10000;
					int commitCounter_tPostgresqlRow_6 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_6 = conn_tPostgresqlRow_6.createStatement();
	


 



/**
 * [tPostgresqlRow_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

query_tPostgresqlRow_6 = "drop table if exists ldf.ibz_cip_persoon_historie cascade";
whetherReject_tPostgresqlRow_6 = false;
globalMap.put("tPostgresqlRow_6_QUERY",query_tPostgresqlRow_6);
try {
		stmt_tPostgresqlRow_6.execute(query_tPostgresqlRow_6);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_6 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_6) {
		
	}
	
		commitCounter_tPostgresqlRow_6++;
		if(commitEvery_tPostgresqlRow_6 <= commitCounter_tPostgresqlRow_6) {
			
			conn_tPostgresqlRow_6.commit();
			
			commitCounter_tPostgresqlRow_6=0;
		}
		

 


	tos_count_tPostgresqlRow_6++;

/**
 * [tPostgresqlRow_6 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

	
	stmt_tPostgresqlRow_6.close();	
		if(commitEvery_tPostgresqlRow_6>commitCounter_tPostgresqlRow_6){

			
			conn_tPostgresqlRow_6.commit();
			
	
			commitCounter_tPostgresqlRow_6=0;
	
		}
			conn_tPostgresqlRow_6.close();
			

 

ok_Hash.put("tPostgresqlRow_6", true);
end_Hash.put("tPostgresqlRow_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tPostgresqlRow_7Process(globalMap);



/**
 * [tPostgresqlRow_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_6";

	

 



/**
 * [tPostgresqlRow_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_6_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_7", false);
		start_Hash.put("tPostgresqlRow_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_7";

	
		int tos_count_tPostgresqlRow_7 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_7().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_7 = null;
	String query_tPostgresqlRow_7 = "";
	boolean whetherReject_tPostgresqlRow_7 = false;
			String driverClass_tPostgresqlRow_7 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_7);
		
			String url_tPostgresqlRow_7 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_7 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_7 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_7 = decryptedPassword_tPostgresqlRow_7;
	        
					
			conn_tPostgresqlRow_7 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_7,dbUser_tPostgresqlRow_7,dbPwd_tPostgresqlRow_7);
		
					if(conn_tPostgresqlRow_7.getAutoCommit()) {
						
				conn_tPostgresqlRow_7.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_7 = 10000;
					int commitCounter_tPostgresqlRow_7 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_7 = conn_tPostgresqlRow_7.createStatement();
	


 



/**
 * [tPostgresqlRow_7 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_7";

	

query_tPostgresqlRow_7 = "drop table if exists ldf.ibz_cip_ouder1_historie cascade";
whetherReject_tPostgresqlRow_7 = false;
globalMap.put("tPostgresqlRow_7_QUERY",query_tPostgresqlRow_7);
try {
		stmt_tPostgresqlRow_7.execute(query_tPostgresqlRow_7);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_7 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_7) {
		
	}
	
		commitCounter_tPostgresqlRow_7++;
		if(commitEvery_tPostgresqlRow_7 <= commitCounter_tPostgresqlRow_7) {
			
			conn_tPostgresqlRow_7.commit();
			
			commitCounter_tPostgresqlRow_7=0;
		}
		

 


	tos_count_tPostgresqlRow_7++;

/**
 * [tPostgresqlRow_7 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_7";

	

	
	stmt_tPostgresqlRow_7.close();	
		if(commitEvery_tPostgresqlRow_7>commitCounter_tPostgresqlRow_7){

			
			conn_tPostgresqlRow_7.commit();
			
	
			commitCounter_tPostgresqlRow_7=0;
	
		}
			conn_tPostgresqlRow_7.close();
			

 

ok_Hash.put("tPostgresqlRow_7", true);
end_Hash.put("tPostgresqlRow_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tPostgresqlRow_8Process(globalMap);



/**
 * [tPostgresqlRow_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_7";

	

 



/**
 * [tPostgresqlRow_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_7_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_8", false);
		start_Hash.put("tPostgresqlRow_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_8";

	
		int tos_count_tPostgresqlRow_8 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_8().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_8 = null;
	String query_tPostgresqlRow_8 = "";
	boolean whetherReject_tPostgresqlRow_8 = false;
			String driverClass_tPostgresqlRow_8 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_8);
		
			String url_tPostgresqlRow_8 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_8 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_8 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_8 = decryptedPassword_tPostgresqlRow_8;
	        
					
			conn_tPostgresqlRow_8 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_8,dbUser_tPostgresqlRow_8,dbPwd_tPostgresqlRow_8);
		
					if(conn_tPostgresqlRow_8.getAutoCommit()) {
						
				conn_tPostgresqlRow_8.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_8 = 10000;
					int commitCounter_tPostgresqlRow_8 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_8 = conn_tPostgresqlRow_8.createStatement();
	


 



/**
 * [tPostgresqlRow_8 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_8";

	

query_tPostgresqlRow_8 = "drop table if exists ldf.ibz_cip_ouder2_historie cascade";
whetherReject_tPostgresqlRow_8 = false;
globalMap.put("tPostgresqlRow_8_QUERY",query_tPostgresqlRow_8);
try {
		stmt_tPostgresqlRow_8.execute(query_tPostgresqlRow_8);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_8 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_8) {
		
	}
	
		commitCounter_tPostgresqlRow_8++;
		if(commitEvery_tPostgresqlRow_8 <= commitCounter_tPostgresqlRow_8) {
			
			conn_tPostgresqlRow_8.commit();
			
			commitCounter_tPostgresqlRow_8=0;
		}
		

 


	tos_count_tPostgresqlRow_8++;

/**
 * [tPostgresqlRow_8 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_8";

	

	
	stmt_tPostgresqlRow_8.close();	
		if(commitEvery_tPostgresqlRow_8>commitCounter_tPostgresqlRow_8){

			
			conn_tPostgresqlRow_8.commit();
			
	
			commitCounter_tPostgresqlRow_8=0;
	
		}
			conn_tPostgresqlRow_8.close();
			

 

ok_Hash.put("tPostgresqlRow_8", true);
end_Hash.put("tPostgresqlRow_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tPostgresqlRow_9Process(globalMap);



/**
 * [tPostgresqlRow_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_8";

	

 



/**
 * [tPostgresqlRow_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_8_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_9", false);
		start_Hash.put("tPostgresqlRow_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_9";

	
		int tos_count_tPostgresqlRow_9 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_9().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_9 = null;
	String query_tPostgresqlRow_9 = "";
	boolean whetherReject_tPostgresqlRow_9 = false;
			String driverClass_tPostgresqlRow_9 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_9);
		
			String url_tPostgresqlRow_9 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_9 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_9 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_9 = decryptedPassword_tPostgresqlRow_9;
	        
					
			conn_tPostgresqlRow_9 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_9,dbUser_tPostgresqlRow_9,dbPwd_tPostgresqlRow_9);
		
					if(conn_tPostgresqlRow_9.getAutoCommit()) {
						
				conn_tPostgresqlRow_9.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_9 = 10000;
					int commitCounter_tPostgresqlRow_9 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_9 = conn_tPostgresqlRow_9.createStatement();
	


 



/**
 * [tPostgresqlRow_9 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_9";

	

query_tPostgresqlRow_9 = "drop table if exists ldf.ibz_cip_nationaliteit_historie cascade";
whetherReject_tPostgresqlRow_9 = false;
globalMap.put("tPostgresqlRow_9_QUERY",query_tPostgresqlRow_9);
try {
		stmt_tPostgresqlRow_9.execute(query_tPostgresqlRow_9);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_9 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_9) {
		
	}
	
		commitCounter_tPostgresqlRow_9++;
		if(commitEvery_tPostgresqlRow_9 <= commitCounter_tPostgresqlRow_9) {
			
			conn_tPostgresqlRow_9.commit();
			
			commitCounter_tPostgresqlRow_9=0;
		}
		

 


	tos_count_tPostgresqlRow_9++;

/**
 * [tPostgresqlRow_9 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_9";

	

	
	stmt_tPostgresqlRow_9.close();	
		if(commitEvery_tPostgresqlRow_9>commitCounter_tPostgresqlRow_9){

			
			conn_tPostgresqlRow_9.commit();
			
	
			commitCounter_tPostgresqlRow_9=0;
	
		}
			conn_tPostgresqlRow_9.close();
			

 

ok_Hash.put("tPostgresqlRow_9", true);
end_Hash.put("tPostgresqlRow_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tPostgresqlRow_10Process(globalMap);



/**
 * [tPostgresqlRow_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_9";

	

 



/**
 * [tPostgresqlRow_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_9_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_10", false);
		start_Hash.put("tPostgresqlRow_10", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_10";

	
		int tos_count_tPostgresqlRow_10 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_10().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_10 = null;
	String query_tPostgresqlRow_10 = "";
	boolean whetherReject_tPostgresqlRow_10 = false;
			String driverClass_tPostgresqlRow_10 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_10);
		
			String url_tPostgresqlRow_10 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_10 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_10 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_10 = decryptedPassword_tPostgresqlRow_10;
	        
					
			conn_tPostgresqlRow_10 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_10,dbUser_tPostgresqlRow_10,dbPwd_tPostgresqlRow_10);
		
					if(conn_tPostgresqlRow_10.getAutoCommit()) {
						
				conn_tPostgresqlRow_10.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_10 = 10000;
					int commitCounter_tPostgresqlRow_10 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_10 = conn_tPostgresqlRow_10.createStatement();
	


 



/**
 * [tPostgresqlRow_10 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_10 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_10";

	

query_tPostgresqlRow_10 = "drop table if exists ldf.ibz_cip_huwelijk_historie cascade";
whetherReject_tPostgresqlRow_10 = false;
globalMap.put("tPostgresqlRow_10_QUERY",query_tPostgresqlRow_10);
try {
		stmt_tPostgresqlRow_10.execute(query_tPostgresqlRow_10);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_10 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_10) {
		
	}
	
		commitCounter_tPostgresqlRow_10++;
		if(commitEvery_tPostgresqlRow_10 <= commitCounter_tPostgresqlRow_10) {
			
			conn_tPostgresqlRow_10.commit();
			
			commitCounter_tPostgresqlRow_10=0;
		}
		

 


	tos_count_tPostgresqlRow_10++;

/**
 * [tPostgresqlRow_10 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_10 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_10";

	

	
	stmt_tPostgresqlRow_10.close();	
		if(commitEvery_tPostgresqlRow_10>commitCounter_tPostgresqlRow_10){

			
			conn_tPostgresqlRow_10.commit();
			
	
			commitCounter_tPostgresqlRow_10=0;
	
		}
			conn_tPostgresqlRow_10.close();
			

 

ok_Hash.put("tPostgresqlRow_10", true);
end_Hash.put("tPostgresqlRow_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tPostgresqlRow_11Process(globalMap);



/**
 * [tPostgresqlRow_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_10 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_10";

	

 



/**
 * [tPostgresqlRow_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_10_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_11", false);
		start_Hash.put("tPostgresqlRow_11", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_11";

	
		int tos_count_tPostgresqlRow_11 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_11().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_11 = null;
	String query_tPostgresqlRow_11 = "";
	boolean whetherReject_tPostgresqlRow_11 = false;
			String driverClass_tPostgresqlRow_11 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_11);
		
			String url_tPostgresqlRow_11 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_11 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_11 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_11 = decryptedPassword_tPostgresqlRow_11;
	        
					
			conn_tPostgresqlRow_11 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_11,dbUser_tPostgresqlRow_11,dbPwd_tPostgresqlRow_11);
		
					if(conn_tPostgresqlRow_11.getAutoCommit()) {
						
				conn_tPostgresqlRow_11.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_11 = 10000;
					int commitCounter_tPostgresqlRow_11 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_11 = conn_tPostgresqlRow_11.createStatement();
	


 



/**
 * [tPostgresqlRow_11 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_11 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_11";

	

query_tPostgresqlRow_11 = "drop table if exists ldf.ibz_cip_overlijden_historie cascade";
whetherReject_tPostgresqlRow_11 = false;
globalMap.put("tPostgresqlRow_11_QUERY",query_tPostgresqlRow_11);
try {
		stmt_tPostgresqlRow_11.execute(query_tPostgresqlRow_11);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_11 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_11) {
		
	}
	
		commitCounter_tPostgresqlRow_11++;
		if(commitEvery_tPostgresqlRow_11 <= commitCounter_tPostgresqlRow_11) {
			
			conn_tPostgresqlRow_11.commit();
			
			commitCounter_tPostgresqlRow_11=0;
		}
		

 


	tos_count_tPostgresqlRow_11++;

/**
 * [tPostgresqlRow_11 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_11 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_11";

	

	
	stmt_tPostgresqlRow_11.close();	
		if(commitEvery_tPostgresqlRow_11>commitCounter_tPostgresqlRow_11){

			
			conn_tPostgresqlRow_11.commit();
			
	
			commitCounter_tPostgresqlRow_11=0;
	
		}
			conn_tPostgresqlRow_11.close();
			

 

ok_Hash.put("tPostgresqlRow_11", true);
end_Hash.put("tPostgresqlRow_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tPostgresqlRow_12Process(globalMap);



/**
 * [tPostgresqlRow_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_11 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_11";

	

 



/**
 * [tPostgresqlRow_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_11_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_12", false);
		start_Hash.put("tPostgresqlRow_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_12";

	
		int tos_count_tPostgresqlRow_12 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_12().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_12 = null;
	String query_tPostgresqlRow_12 = "";
	boolean whetherReject_tPostgresqlRow_12 = false;
			String driverClass_tPostgresqlRow_12 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_12);
		
			String url_tPostgresqlRow_12 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_12 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_12 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_12 = decryptedPassword_tPostgresqlRow_12;
	        
					
			conn_tPostgresqlRow_12 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_12,dbUser_tPostgresqlRow_12,dbPwd_tPostgresqlRow_12);
		
					if(conn_tPostgresqlRow_12.getAutoCommit()) {
						
				conn_tPostgresqlRow_12.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_12 = 10000;
					int commitCounter_tPostgresqlRow_12 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_12 = conn_tPostgresqlRow_12.createStatement();
	


 



/**
 * [tPostgresqlRow_12 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_12";

	

query_tPostgresqlRow_12 = "drop table if exists ldf.ibz_cip_verblijfplaats_historie cascade";
whetherReject_tPostgresqlRow_12 = false;
globalMap.put("tPostgresqlRow_12_QUERY",query_tPostgresqlRow_12);
try {
		stmt_tPostgresqlRow_12.execute(query_tPostgresqlRow_12);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_12 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_12) {
		
	}
	
		commitCounter_tPostgresqlRow_12++;
		if(commitEvery_tPostgresqlRow_12 <= commitCounter_tPostgresqlRow_12) {
			
			conn_tPostgresqlRow_12.commit();
			
			commitCounter_tPostgresqlRow_12=0;
		}
		

 


	tos_count_tPostgresqlRow_12++;

/**
 * [tPostgresqlRow_12 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_12";

	

	
	stmt_tPostgresqlRow_12.close();	
		if(commitEvery_tPostgresqlRow_12>commitCounter_tPostgresqlRow_12){

			
			conn_tPostgresqlRow_12.commit();
			
	
			commitCounter_tPostgresqlRow_12=0;
	
		}
			conn_tPostgresqlRow_12.close();
			

 

ok_Hash.put("tPostgresqlRow_12", true);
end_Hash.put("tPostgresqlRow_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tPostgresqlRow_13Process(globalMap);



/**
 * [tPostgresqlRow_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_12";

	

 



/**
 * [tPostgresqlRow_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_12_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_13", false);
		start_Hash.put("tPostgresqlRow_13", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_13";

	
		int tos_count_tPostgresqlRow_13 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_13().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_13 = null;
	String query_tPostgresqlRow_13 = "";
	boolean whetherReject_tPostgresqlRow_13 = false;
			String driverClass_tPostgresqlRow_13 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_13);
		
			String url_tPostgresqlRow_13 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_13 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_13 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_13 = decryptedPassword_tPostgresqlRow_13;
	        
					
			conn_tPostgresqlRow_13 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_13,dbUser_tPostgresqlRow_13,dbPwd_tPostgresqlRow_13);
		
					if(conn_tPostgresqlRow_13.getAutoCommit()) {
						
				conn_tPostgresqlRow_13.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_13 = 10000;
					int commitCounter_tPostgresqlRow_13 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_13 = conn_tPostgresqlRow_13.createStatement();
	


 



/**
 * [tPostgresqlRow_13 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_13 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_13";

	

query_tPostgresqlRow_13 = "drop table if exists ldf.ibz_cip_kind_historie cascade";
whetherReject_tPostgresqlRow_13 = false;
globalMap.put("tPostgresqlRow_13_QUERY",query_tPostgresqlRow_13);
try {
		stmt_tPostgresqlRow_13.execute(query_tPostgresqlRow_13);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_13 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_13) {
		
	}
	
		commitCounter_tPostgresqlRow_13++;
		if(commitEvery_tPostgresqlRow_13 <= commitCounter_tPostgresqlRow_13) {
			
			conn_tPostgresqlRow_13.commit();
			
			commitCounter_tPostgresqlRow_13=0;
		}
		

 


	tos_count_tPostgresqlRow_13++;

/**
 * [tPostgresqlRow_13 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_13 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_13";

	

	
	stmt_tPostgresqlRow_13.close();	
		if(commitEvery_tPostgresqlRow_13>commitCounter_tPostgresqlRow_13){

			
			conn_tPostgresqlRow_13.commit();
			
	
			commitCounter_tPostgresqlRow_13=0;
	
		}
			conn_tPostgresqlRow_13.close();
			

 

ok_Hash.put("tPostgresqlRow_13", true);
end_Hash.put("tPostgresqlRow_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tPostgresqlRow_14Process(globalMap);



/**
 * [tPostgresqlRow_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_13 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_13";

	

 



/**
 * [tPostgresqlRow_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_13_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_14", false);
		start_Hash.put("tPostgresqlRow_14", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_14";

	
		int tos_count_tPostgresqlRow_14 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_14().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_14 = null;
	String query_tPostgresqlRow_14 = "";
	boolean whetherReject_tPostgresqlRow_14 = false;
			String driverClass_tPostgresqlRow_14 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_14);
		
			String url_tPostgresqlRow_14 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_14 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_14 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_14 = decryptedPassword_tPostgresqlRow_14;
	        
					
			conn_tPostgresqlRow_14 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_14,dbUser_tPostgresqlRow_14,dbPwd_tPostgresqlRow_14);
		
					if(conn_tPostgresqlRow_14.getAutoCommit()) {
						
				conn_tPostgresqlRow_14.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_14 = 10000;
					int commitCounter_tPostgresqlRow_14 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_14 = conn_tPostgresqlRow_14.createStatement();
	


 



/**
 * [tPostgresqlRow_14 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_14 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_14";

	

query_tPostgresqlRow_14 = "drop table if exists ldf.ibz_cip_verblijfstitel_historie cascade";
whetherReject_tPostgresqlRow_14 = false;
globalMap.put("tPostgresqlRow_14_QUERY",query_tPostgresqlRow_14);
try {
		stmt_tPostgresqlRow_14.execute(query_tPostgresqlRow_14);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_14 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tPostgresqlRow_14) {
		
	}
	
		commitCounter_tPostgresqlRow_14++;
		if(commitEvery_tPostgresqlRow_14 <= commitCounter_tPostgresqlRow_14) {
			
			conn_tPostgresqlRow_14.commit();
			
			commitCounter_tPostgresqlRow_14=0;
		}
		

 


	tos_count_tPostgresqlRow_14++;

/**
 * [tPostgresqlRow_14 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_14 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_14";

	

	
	stmt_tPostgresqlRow_14.close();	
		if(commitEvery_tPostgresqlRow_14>commitCounter_tPostgresqlRow_14){

			
			conn_tPostgresqlRow_14.commit();
			
	
			commitCounter_tPostgresqlRow_14=0;
	
		}
			conn_tPostgresqlRow_14.close();
			

 

ok_Hash.put("tPostgresqlRow_14", true);
end_Hash.put("tPostgresqlRow_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tPostgresqlRow_15Process(globalMap);



/**
 * [tPostgresqlRow_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_14 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_14";

	

 



/**
 * [tPostgresqlRow_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_14_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_15", false);
		start_Hash.put("tPostgresqlRow_15", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_15";

	
		int tos_count_tPostgresqlRow_15 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_15().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_15 = null;
	String query_tPostgresqlRow_15 = "";
	boolean whetherReject_tPostgresqlRow_15 = false;
			String driverClass_tPostgresqlRow_15 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_15);
		
			String url_tPostgresqlRow_15 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_15 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_15 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_15 = decryptedPassword_tPostgresqlRow_15;
	        
					
			conn_tPostgresqlRow_15 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_15,dbUser_tPostgresqlRow_15,dbPwd_tPostgresqlRow_15);
		
					if(conn_tPostgresqlRow_15.getAutoCommit()) {
						
				conn_tPostgresqlRow_15.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_15 = 10000;
					int commitCounter_tPostgresqlRow_15 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_15 = conn_tPostgresqlRow_15.createStatement();
	


 



/**
 * [tPostgresqlRow_15 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_15 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_15";

	

query_tPostgresqlRow_15 = "drop table if exists ldf.ibz_cip_gezagsverhouding_historie cascade";
whetherReject_tPostgresqlRow_15 = false;
globalMap.put("tPostgresqlRow_15_QUERY",query_tPostgresqlRow_15);
try {
		stmt_tPostgresqlRow_15.execute(query_tPostgresqlRow_15);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_15 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tPostgresqlRow_15++;
		if(commitEvery_tPostgresqlRow_15 <= commitCounter_tPostgresqlRow_15) {
			
			conn_tPostgresqlRow_15.commit();
			
			commitCounter_tPostgresqlRow_15=0;
		}
		

 


	tos_count_tPostgresqlRow_15++;

/**
 * [tPostgresqlRow_15 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_15 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_15";

	

	
	stmt_tPostgresqlRow_15.close();	
		if(commitEvery_tPostgresqlRow_15>commitCounter_tPostgresqlRow_15){

			
			conn_tPostgresqlRow_15.commit();
			
	
			commitCounter_tPostgresqlRow_15=0;
	
		}
			conn_tPostgresqlRow_15.close();
			

 

ok_Hash.put("tPostgresqlRow_15", true);
end_Hash.put("tPostgresqlRow_15", System.currentTimeMillis());




/**
 * [tPostgresqlRow_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_15 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_15";

	

 



/**
 * [tPostgresqlRow_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_15_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_drop_ldf_tabellen ibz_cipers_drop_ldf_tabellenClass = new ibz_cipers_drop_ldf_tabellen();

        int exitCode = ibz_cipers_drop_ldf_tabellenClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_drop_ldf_tabellen.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_drop_ldf_tabellen_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_drop_ldf_tabellen");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     116002 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:49 CET
 ************************************************************************************************/