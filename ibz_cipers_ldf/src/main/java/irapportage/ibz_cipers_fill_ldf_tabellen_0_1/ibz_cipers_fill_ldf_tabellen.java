// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_tabellen_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_tabellen Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_tabellen implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_tabellen";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_tabellen.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_tabellen.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landenStruct implements routines.system.IPersistableRow<ldf_landenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landenStruct other = (ldf_landenStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landenStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landenStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
					this.landomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
					// String
				
						writeString(this.landomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_landenStruct implements routines.system.IPersistableRow<cipers_landenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String LANDCODE;

				public String getLANDCODE () {
					return this.LANDCODE;
				}
				
			    public String LANDOMSCHRIJVING;

				public String getLANDOMSCHRIJVING () {
					return this.LANDOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.LANDCODE = readString(dis);
					
					this.LANDOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.LANDCODE,dos);
					
					// String
				
						writeString(this.LANDOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LANDCODE="+LANDCODE);
		sb.append(",LANDOMSCHRIJVING="+LANDOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_landenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_landenStruct cipers_landen = new cipers_landenStruct();
ldf_landenStruct ldf_landen = new ldf_landenStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_landen";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_landen";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_1 = false;
                                String defaultSchema_tPostgresqlOutput_1 = "public";
                                if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_1 = stmtSchema_tPostgresqlOutput_1.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_1.next()){
                                        defaultSchema_tPostgresqlOutput_1 = rsSchema_tPostgresqlOutput_1.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_1.close();
                                    stmtSchema_tPostgresqlOutput_1.close();
                                }
                                while(rsTable_tPostgresqlOutput_1.next()) {
                                    String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_1.equals("ibz_cip_landen")
                                        && (schema_tPostgresqlOutput_1.equals(dbschema_tPostgresqlOutput_1) || ((dbschema_tPostgresqlOutput_1 ==null || dbschema_tPostgresqlOutput_1.trim().length() ==0) && defaultSchema_tPostgresqlOutput_1.equals(schema_tPostgresqlOutput_1)))) {
                                        whetherExist_tPostgresqlOutput_1 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_1.close();
                                if(whetherExist_tPostgresqlOutput_1) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.createStatement();
                                    stmtDrop_tPostgresqlOutput_1.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_1 + "\"" );
                                    stmtDrop_tPostgresqlOutput_1.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.createStatement();
                                    stmtCreate_tPostgresqlOutput_1.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_1 + "\"(\"landcode\" VARCHAR(4)   not null ,\"landomschrijving\" VARCHAR(40)   not null ,primary key(\"landcode\"))");
                                stmtCreate_tPostgresqlOutput_1.close();
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"landcode\",\"landomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_landen" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_landenStruct ldf_landen_tmp = new ldf_landenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\nrtrim(LandCode) as LandCode,\nrtrim(LandOmschrijving) as LandOmschrijving\n  from bzslndt00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_landen.LANDCODE = null;
							} else {
	                         		
        	cipers_landen.LANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_landen.LANDOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_landen.LANDOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 2, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//cipers_landen
			//cipers_landen


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_landen"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

ldf_landen = null;


// # Output table : 'ldf_landen'
ldf_landen_tmp.landcode = cipers_landen.LANDCODE;
ldf_landen_tmp.landomschrijving = cipers_landen.LANDOMSCHRIJVING;
ldf_landen = ldf_landen_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
// Start of branch "ldf_landen"
if(ldf_landen != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_landen
			//ldf_landen


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    if(ldf_landen.landcode == null) {
pstmt_tPostgresqlOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(1, ldf_landen.landcode);
}

                    if(ldf_landen.landomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(2, ldf_landen.landomschrijving);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
            if(!whetherReject_tPostgresqlOutput_1) {
            }
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_landen"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_landen"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tAS400Input_3Process(globalMap);



/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeentenStruct implements routines.system.IPersistableRow<ldf_gemeentenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeentenStruct other = (ldf_gemeentenStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeentenStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeentenStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
					this.gemeenteomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
					// String
				
						writeString(this.gemeenteomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeentenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_gemeentenStruct implements routines.system.IPersistableRow<cipers_gemeentenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String GEMEENTECODE;

				public String getGEMEENTECODE () {
					return this.GEMEENTECODE;
				}
				
			    public String GEMEENTEOMSCHRIJVING;

				public String getGEMEENTEOMSCHRIJVING () {
					return this.GEMEENTEOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.GEMEENTECODE = readString(dis);
					
					this.GEMEENTEOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GEMEENTECODE,dos);
					
					// String
				
						writeString(this.GEMEENTEOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GEMEENTECODE="+GEMEENTECODE);
		sb.append(",GEMEENTEOMSCHRIJVING="+GEMEENTEOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_gemeentenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_gemeentenStruct cipers_gemeenten = new cipers_gemeentenStruct();
ldf_gemeentenStruct ldf_gemeenten = new ldf_gemeentenStruct();





	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_3().limitLog4jByte();





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = "ldf";
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "ibz_cip_gemeenten";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "ibz_cip_gemeenten";
}

int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_3 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_3 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_3 = decryptedPassword_tPostgresqlOutput_3;

    conn_tPostgresqlOutput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_3,dbUser_tPostgresqlOutput_3,dbPwd_tPostgresqlOutput_3);
	
	resourceMap.put("conn_tPostgresqlOutput_3", conn_tPostgresqlOutput_3);
        conn_tPostgresqlOutput_3.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_3 = 10000;
        int commitCounter_tPostgresqlOutput_3 = 0;


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_3 = dbMetaData_tPostgresqlOutput_3.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_3 = false;
                                String defaultSchema_tPostgresqlOutput_3 = "public";
                                if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_3 = stmtSchema_tPostgresqlOutput_3.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_3.next()){
                                        defaultSchema_tPostgresqlOutput_3 = rsSchema_tPostgresqlOutput_3.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_3.close();
                                    stmtSchema_tPostgresqlOutput_3.close();
                                }
                                while(rsTable_tPostgresqlOutput_3.next()) {
                                    String table_tPostgresqlOutput_3 = rsTable_tPostgresqlOutput_3.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_3 = rsTable_tPostgresqlOutput_3.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_3.equals("ibz_cip_gemeenten")
                                        && (schema_tPostgresqlOutput_3.equals(dbschema_tPostgresqlOutput_3) || ((dbschema_tPostgresqlOutput_3 ==null || dbschema_tPostgresqlOutput_3.trim().length() ==0) && defaultSchema_tPostgresqlOutput_3.equals(schema_tPostgresqlOutput_3)))) {
                                        whetherExist_tPostgresqlOutput_3 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_3.close();
                                if(whetherExist_tPostgresqlOutput_3) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.createStatement();
                                    stmtDrop_tPostgresqlOutput_3.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_3 + "\"" );
                                    stmtDrop_tPostgresqlOutput_3.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.createStatement();
                                    stmtCreate_tPostgresqlOutput_3.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_3 + "\"(\"gemeentecode\" VARCHAR(4)   not null ,\"gemeenteomschrijving\" VARCHAR(40)   not null ,primary key(\"gemeentecode\"))");
                                stmtCreate_tPostgresqlOutput_3.close();
	    String insert_tPostgresqlOutput_3 = "INSERT INTO \"" + tableName_tPostgresqlOutput_3 + "\" (\"gemeentecode\",\"gemeenteomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(insert_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_gemeenten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_gemeentenStruct ldf_gemeenten_tmp = new ldf_gemeentenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tAS400Input_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_3", false);
		start_Hash.put("tAS400Input_3", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_3";

	
		int tos_count_tAS400Input_3 = 0;
		
    	class BytesLimit65535_tAS400Input_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_3().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_3 = 0;
		    java.sql.Connection conn_tAS400Input_3 = null;
				String driverClass_tAS400Input_3 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_3);
			   	String dbUser_tAS400Input_3 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_3 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_3 = decryptedPassword_tAS400Input_3;
		        
				  
				String url_tAS400Input_3 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;date format=iso;time format=iso";
				
				conn_tAS400Input_3 = java.sql.DriverManager.getConnection(url_tAS400Input_3,dbUser_tAS400Input_3,dbPwd_tAS400Input_3);
		        
		    
			java.sql.Statement stmt_tAS400Input_3 = conn_tAS400Input_3.createStatement();

		    String dbquery_tAS400Input_3 = "select\nrtrim(GemeenteCode) as GemeenteCode,\nrtrim(GemeenteOmschrijving) as GemeenteOmschrijving\n  from bzsgemt00";
			

                       globalMap.put("tAS400Input_3_QUERY",dbquery_tAS400Input_3);

		    java.sql.ResultSet rs_tAS400Input_3 = null;
		try{
		    rs_tAS400Input_3 = stmt_tAS400Input_3.executeQuery(dbquery_tAS400Input_3);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_3 = rs_tAS400Input_3.getMetaData();
		    int colQtyInRs_tAS400Input_3 = rsmd_tAS400Input_3.getColumnCount();

		    String tmpContent_tAS400Input_3 = null;
		    
		    
		    while (rs_tAS400Input_3.next()) {
		        nb_line_tAS400Input_3++;
		        
							if(colQtyInRs_tAS400Input_3 < 1) {
								cipers_gemeenten.GEMEENTECODE = null;
							} else {
	                         		
        	cipers_gemeenten.GEMEENTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_3, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_3 < 2) {
								cipers_gemeenten.GEMEENTEOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_gemeenten.GEMEENTEOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_3, 2, false);
		                    }
					



 



/**
 * [tAS400Input_3 begin ] stop
 */
	
	/**
	 * [tAS400Input_3 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_3";

	

 


	tos_count_tAS400Input_3++;

/**
 * [tAS400Input_3 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//cipers_gemeenten
			//cipers_gemeenten


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_gemeenten"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

ldf_gemeenten = null;


// # Output table : 'ldf_gemeenten'
ldf_gemeenten_tmp.gemeentecode = cipers_gemeenten.GEMEENTECODE;
ldf_gemeenten_tmp.gemeenteomschrijving = cipers_gemeenten.GEMEENTEOMSCHRIJVING;
ldf_gemeenten = ldf_gemeenten_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "ldf_gemeenten"
if(ldf_gemeenten != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//ldf_gemeenten
			//ldf_gemeenten


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
                    if(ldf_gemeenten.gemeentecode == null) {
pstmt_tPostgresqlOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(1, ldf_gemeenten.gemeentecode);
}

                    if(ldf_gemeenten.gemeenteomschrijving == null) {
pstmt_tPostgresqlOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_3.setString(2, ldf_gemeenten.gemeenteomschrijving);
}

			
    		pstmt_tPostgresqlOutput_3.addBatch();
    		nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		  
            if(!whetherReject_tPostgresqlOutput_3) {
            }
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_3 = 0;
					for(int countEach_tPostgresqlOutput_3: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
					
			    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_3++;
                if(commitEvery_tPostgresqlOutput_3 <= commitCounter_tPostgresqlOutput_3) {
                if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSizeCounter_tPostgresqlOutput_3 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_3 = 0;
                		    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
            	    	
                batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_3.commit();
                	
                	commitCounter_tPostgresqlOutput_3=0;
                }

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */

} // End of branch "ldf_gemeenten"







	
	/**
	 * [tAS400Input_3 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_3";

	

	}
}finally{
	stmt_tAS400Input_3.close();

		if(conn_tAS400Input_3 != null && !conn_tAS400Input_3.isClosed()) {
			
			conn_tAS400Input_3.close();
			
		}
}
globalMap.put("tAS400Input_3_NB_LINE",nb_line_tAS400Input_3);

 

ok_Hash.put("tAS400Input_3", true);
end_Hash.put("tAS400Input_3", System.currentTimeMillis());




/**
 * [tAS400Input_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_gemeenten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    		insertedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
            pstmt_tPostgresqlOutput_3.close();
        }

			
			conn_tPostgresqlOutput_3.commit();
			
		
    	conn_tPostgresqlOutput_3 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_3", true);
    	

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tAS400Input_2Process(globalMap);



/**
 * [tPostgresqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_3 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_3";

	

 



/**
 * [tAS400Input_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_3")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_3")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_3")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_3) {
					String errorMessage_tPostgresqlOutput_3 = "failed to close the connection in tPostgresqlOutput_3 :" + sqlEx_tPostgresqlOutput_3.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_3);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikatenStruct implements routines.system.IPersistableRow<ldf_titels_predikatenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikatenStruct other = (ldf_titels_predikatenStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikatenStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikatenStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
					this.adellijketitelomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
					// String
				
						writeString(this.adellijketitelomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikatenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_titel_predikatenStruct implements routines.system.IPersistableRow<cipers_titel_predikatenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String ADELLIJKETITELCODE;

				public String getADELLIJKETITELCODE () {
					return this.ADELLIJKETITELCODE;
				}
				
			    public String ADELLIJKETITELOMSCHRIJVING;

				public String getADELLIJKETITELOMSCHRIJVING () {
					return this.ADELLIJKETITELOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.ADELLIJKETITELCODE = readString(dis);
					
					this.ADELLIJKETITELOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.ADELLIJKETITELOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ADELLIJKETITELCODE="+ADELLIJKETITELCODE);
		sb.append(",ADELLIJKETITELOMSCHRIJVING="+ADELLIJKETITELOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_titel_predikatenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_titel_predikatenStruct cipers_titel_predikaten = new cipers_titel_predikatenStruct();
ldf_titels_predikatenStruct ldf_titels_predikaten = new ldf_titels_predikatenStruct();





	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_2().limitLog4jByte();





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = "ldf";
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "ibz_cip_titels_predikaten";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "ibz_cip_titels_predikaten";
}

int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_2 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_2 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

    conn_tPostgresqlOutput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_2,dbUser_tPostgresqlOutput_2,dbPwd_tPostgresqlOutput_2);
	
	resourceMap.put("conn_tPostgresqlOutput_2", conn_tPostgresqlOutput_2);
        conn_tPostgresqlOutput_2.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_2 = 10000;
        int commitCounter_tPostgresqlOutput_2 = 0;


   int batchSize_tPostgresqlOutput_2 = 10000;
   int batchSizeCounter_tPostgresqlOutput_2=0;

int count_tPostgresqlOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_2 = dbMetaData_tPostgresqlOutput_2.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_2 = false;
                                String defaultSchema_tPostgresqlOutput_2 = "public";
                                if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_2 = stmtSchema_tPostgresqlOutput_2.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_2.next()){
                                        defaultSchema_tPostgresqlOutput_2 = rsSchema_tPostgresqlOutput_2.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_2.close();
                                    stmtSchema_tPostgresqlOutput_2.close();
                                }
                                while(rsTable_tPostgresqlOutput_2.next()) {
                                    String table_tPostgresqlOutput_2 = rsTable_tPostgresqlOutput_2.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_2 = rsTable_tPostgresqlOutput_2.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_2.equals("ibz_cip_titels_predikaten")
                                        && (schema_tPostgresqlOutput_2.equals(dbschema_tPostgresqlOutput_2) || ((dbschema_tPostgresqlOutput_2 ==null || dbschema_tPostgresqlOutput_2.trim().length() ==0) && defaultSchema_tPostgresqlOutput_2.equals(schema_tPostgresqlOutput_2)))) {
                                        whetherExist_tPostgresqlOutput_2 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_2.close();
                                if(whetherExist_tPostgresqlOutput_2) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.createStatement();
                                    stmtDrop_tPostgresqlOutput_2.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_2 + "\"" );
                                    stmtDrop_tPostgresqlOutput_2.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.createStatement();
                                    stmtCreate_tPostgresqlOutput_2.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_2 + "\"(\"adellijketitelcode\" VARCHAR(2)   not null ,\"adellijketitelomschrijving\" VARCHAR(20)   not null ,primary key(\"adellijketitelcode\"))");
                                stmtCreate_tPostgresqlOutput_2.close();
	    String insert_tPostgresqlOutput_2 = "INSERT INTO \"" + tableName_tPostgresqlOutput_2 + "\" (\"adellijketitelcode\",\"adellijketitelomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(insert_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_titel_predikaten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_titels_predikatenStruct ldf_titels_predikaten_tmp = new ldf_titels_predikatenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_2", false);
		start_Hash.put("tAS400Input_2", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_2";

	
		int tos_count_tAS400Input_2 = 0;
		
    	class BytesLimit65535_tAS400Input_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_2().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_2 = 0;
		    java.sql.Connection conn_tAS400Input_2 = null;
				String driverClass_tAS400Input_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_2);
			   	String dbUser_tAS400Input_2 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_2 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_2 = decryptedPassword_tAS400Input_2;
		        
				  
				String url_tAS400Input_2 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;date format=iso;time format=iso";
				
				conn_tAS400Input_2 = java.sql.DriverManager.getConnection(url_tAS400Input_2,dbUser_tAS400Input_2,dbPwd_tAS400Input_2);
		        
		    
			java.sql.Statement stmt_tAS400Input_2 = conn_tAS400Input_2.createStatement();

		    String dbquery_tAS400Input_2 = "select\nrtrim(AdellijketitelCode) as AdellijketitelCode,\nrtrim(AdellijketitelOmschrijving) as AdellijketitelOmschrijving\n  from bzsadlt00";
			

                       globalMap.put("tAS400Input_2_QUERY",dbquery_tAS400Input_2);

		    java.sql.ResultSet rs_tAS400Input_2 = null;
		try{
		    rs_tAS400Input_2 = stmt_tAS400Input_2.executeQuery(dbquery_tAS400Input_2);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_2 = rs_tAS400Input_2.getMetaData();
		    int colQtyInRs_tAS400Input_2 = rsmd_tAS400Input_2.getColumnCount();

		    String tmpContent_tAS400Input_2 = null;
		    
		    
		    while (rs_tAS400Input_2.next()) {
		        nb_line_tAS400Input_2++;
		        
							if(colQtyInRs_tAS400Input_2 < 1) {
								cipers_titel_predikaten.ADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_titel_predikaten.ADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_2, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_2 < 2) {
								cipers_titel_predikaten.ADELLIJKETITELOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_titel_predikaten.ADELLIJKETITELOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_2, 2, false);
		                    }
					



 



/**
 * [tAS400Input_2 begin ] stop
 */
	
	/**
	 * [tAS400Input_2 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_2";

	

 


	tos_count_tAS400Input_2++;

/**
 * [tAS400Input_2 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_titel_predikaten
			//cipers_titel_predikaten


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_titel_predikaten"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_titels_predikaten = null;


// # Output table : 'ldf_titels_predikaten'
ldf_titels_predikaten_tmp.adellijketitelcode = cipers_titel_predikaten.ADELLIJKETITELCODE;
ldf_titels_predikaten_tmp.adellijketitelomschrijving = cipers_titel_predikaten.ADELLIJKETITELOMSCHRIJVING;
ldf_titels_predikaten = ldf_titels_predikaten_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_titels_predikaten"
if(ldf_titels_predikaten != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//ldf_titels_predikaten
			//ldf_titels_predikaten


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
                    if(ldf_titels_predikaten.adellijketitelcode == null) {
pstmt_tPostgresqlOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(1, ldf_titels_predikaten.adellijketitelcode);
}

                    if(ldf_titels_predikaten.adellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_2.setString(2, ldf_titels_predikaten.adellijketitelomschrijving);
}

			
    		pstmt_tPostgresqlOutput_2.addBatch();
    		nb_line_tPostgresqlOutput_2++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_2++;
    		  
            if(!whetherReject_tPostgresqlOutput_2) {
            }
    			if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
                try {
						int countSum_tPostgresqlOutput_2 = 0;
						    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
				    	
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_2 = 0;
					for(int countEach_tPostgresqlOutput_2: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
					
			    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_2++;
                if(commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {
                if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSizeCounter_tPostgresqlOutput_2 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_2 = 0;
                		    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
            	    	
                batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_2 = 0;
						for(int countEach_tPostgresqlOutput_2: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
						
				    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_2.commit();
                	
                	commitCounter_tPostgresqlOutput_2=0;
                }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */

} // End of branch "ldf_titels_predikaten"







	
	/**
	 * [tAS400Input_2 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_2";

	

	}
}finally{
	stmt_tAS400Input_2.close();

		if(conn_tAS400Input_2 != null && !conn_tAS400Input_2.isClosed()) {
			
			conn_tAS400Input_2.close();
			
		}
}
globalMap.put("tAS400Input_2_NB_LINE",nb_line_tAS400Input_2);

 

ok_Hash.put("tAS400Input_2", true);
end_Hash.put("tAS400Input_2", System.currentTimeMillis());




/**
 * [tAS400Input_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_titel_predikaten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	    try {
				int countSum_tPostgresqlOutput_2 = 0;
				if (pstmt_tPostgresqlOutput_2 != null && batchSizeCounter_tPostgresqlOutput_2 > 0) {
						
					for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_2 = 0;
			for(int countEach_tPostgresqlOutput_2: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
			}
			
	    		insertedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_2 != null) {
            pstmt_tPostgresqlOutput_2.close();
        }

			
			conn_tPostgresqlOutput_2.commit();
			
		
    	conn_tPostgresqlOutput_2 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_2", true);
    	

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tAS400Input_4Process(globalMap);



/**
 * [tPostgresqlOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_2 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_2";

	

 



/**
 * [tAS400Input_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_2")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_2")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_2")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
					String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :" + sqlEx_tPostgresqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_2);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_nationaliteitenStruct implements routines.system.IPersistableRow<ldf_nationaliteitenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String nationaliteitcode;

				public String getNationaliteitcode () {
					return this.nationaliteitcode;
				}
				
			    public String nationaliteitomschrijving;

				public String getNationaliteitomschrijving () {
					return this.nationaliteitomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.nationaliteitcode == null) ? 0 : this.nationaliteitcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_nationaliteitenStruct other = (ldf_nationaliteitenStruct) obj;
		
						if (this.nationaliteitcode == null) {
							if (other.nationaliteitcode != null)
								return false;
						
						} else if (!this.nationaliteitcode.equals(other.nationaliteitcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_nationaliteitenStruct other) {

		other.nationaliteitcode = this.nationaliteitcode;
	            other.nationaliteitomschrijving = this.nationaliteitomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_nationaliteitenStruct other) {

		other.nationaliteitcode = this.nationaliteitcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.nationaliteitcode = readString(dis);
					
					this.nationaliteitomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nationaliteitcode,dos);
					
					// String
				
						writeString(this.nationaliteitomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nationaliteitcode="+nationaliteitcode);
		sb.append(",nationaliteitomschrijving="+nationaliteitomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_nationaliteitenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.nationaliteitcode, other.nationaliteitcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_nationaliteitenStruct implements routines.system.IPersistableRow<cipers_nationaliteitenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String NATIONALITEITCODE;

				public String getNATIONALITEITCODE () {
					return this.NATIONALITEITCODE;
				}
				
			    public String NATIONALITEITOMSCHRIJVING;

				public String getNATIONALITEITOMSCHRIJVING () {
					return this.NATIONALITEITOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.NATIONALITEITCODE = readString(dis);
					
					this.NATIONALITEITOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NATIONALITEITCODE,dos);
					
					// String
				
						writeString(this.NATIONALITEITOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NATIONALITEITCODE="+NATIONALITEITCODE);
		sb.append(",NATIONALITEITOMSCHRIJVING="+NATIONALITEITOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_nationaliteitenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_nationaliteitenStruct cipers_nationaliteiten = new cipers_nationaliteitenStruct();
ldf_nationaliteitenStruct ldf_nationaliteiten = new ldf_nationaliteitenStruct();





	
	/**
	 * [tPostgresqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_4", false);
		start_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_nationaliteiten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_4().limitLog4jByte();





String dbschema_tPostgresqlOutput_4 = null;
	dbschema_tPostgresqlOutput_4 = "ldf";
	

String tableName_tPostgresqlOutput_4 = null;
if(dbschema_tPostgresqlOutput_4 == null || dbschema_tPostgresqlOutput_4.trim().length() == 0) {
	tableName_tPostgresqlOutput_4 = "ibz_cip_nationaliteiten";
} else {
	tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4 + "\".\"" + "ibz_cip_nationaliteiten";
}

int nb_line_tPostgresqlOutput_4 = 0;
int nb_line_update_tPostgresqlOutput_4 = 0;
int nb_line_inserted_tPostgresqlOutput_4 = 0;
int nb_line_deleted_tPostgresqlOutput_4 = 0;
int nb_line_rejected_tPostgresqlOutput_4 = 0;

int deletedCount_tPostgresqlOutput_4=0;
int updatedCount_tPostgresqlOutput_4=0;
int insertedCount_tPostgresqlOutput_4=0;
int rejectedCount_tPostgresqlOutput_4=0;

boolean whetherReject_tPostgresqlOutput_4 = false;

java.sql.Connection conn_tPostgresqlOutput_4 = null;
String dbUser_tPostgresqlOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_4 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_4 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_4 = decryptedPassword_tPostgresqlOutput_4;

    conn_tPostgresqlOutput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_4,dbUser_tPostgresqlOutput_4,dbPwd_tPostgresqlOutput_4);
	
	resourceMap.put("conn_tPostgresqlOutput_4", conn_tPostgresqlOutput_4);
        conn_tPostgresqlOutput_4.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_4 = 10000;
        int commitCounter_tPostgresqlOutput_4 = 0;


   int batchSize_tPostgresqlOutput_4 = 10000;
   int batchSizeCounter_tPostgresqlOutput_4=0;

int count_tPostgresqlOutput_4=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_4 = dbMetaData_tPostgresqlOutput_4.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_4 = false;
                                String defaultSchema_tPostgresqlOutput_4 = "public";
                                if(dbschema_tPostgresqlOutput_4 == null || dbschema_tPostgresqlOutput_4.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_4 = stmtSchema_tPostgresqlOutput_4.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_4.next()){
                                        defaultSchema_tPostgresqlOutput_4 = rsSchema_tPostgresqlOutput_4.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_4.close();
                                    stmtSchema_tPostgresqlOutput_4.close();
                                }
                                while(rsTable_tPostgresqlOutput_4.next()) {
                                    String table_tPostgresqlOutput_4 = rsTable_tPostgresqlOutput_4.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_4 = rsTable_tPostgresqlOutput_4.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_4.equals("ibz_cip_nationaliteiten")
                                        && (schema_tPostgresqlOutput_4.equals(dbschema_tPostgresqlOutput_4) || ((dbschema_tPostgresqlOutput_4 ==null || dbschema_tPostgresqlOutput_4.trim().length() ==0) && defaultSchema_tPostgresqlOutput_4.equals(schema_tPostgresqlOutput_4)))) {
                                        whetherExist_tPostgresqlOutput_4 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_4.close();
                                if(whetherExist_tPostgresqlOutput_4) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement();
                                    stmtDrop_tPostgresqlOutput_4.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_4 + "\"" );
                                    stmtDrop_tPostgresqlOutput_4.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.createStatement();
                                    stmtCreate_tPostgresqlOutput_4.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_4 + "\"(\"nationaliteitcode\" VARCHAR(4)  ,\"nationaliteitomschrijving\" VARCHAR(42)  ,primary key(\"nationaliteitcode\"))");
                                stmtCreate_tPostgresqlOutput_4.close();
	    String insert_tPostgresqlOutput_4 = "INSERT INTO \"" + tableName_tPostgresqlOutput_4 + "\" (\"nationaliteitcode\",\"nationaliteitomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.prepareStatement(insert_tPostgresqlOutput_4);
	    

 



/**
 * [tPostgresqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_nationaliteiten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_nationaliteitenStruct ldf_nationaliteiten_tmp = new ldf_nationaliteitenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tAS400Input_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_4", false);
		start_Hash.put("tAS400Input_4", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_4";

	
		int tos_count_tAS400Input_4 = 0;
		
    	class BytesLimit65535_tAS400Input_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_4().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_4 = 0;
		    java.sql.Connection conn_tAS400Input_4 = null;
				String driverClass_tAS400Input_4 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_4);
			   	String dbUser_tAS400Input_4 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_4 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_4 = decryptedPassword_tAS400Input_4;
		        
				  
				String url_tAS400Input_4 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;date format=iso;time format=iso";
				
				conn_tAS400Input_4 = java.sql.DriverManager.getConnection(url_tAS400Input_4,dbUser_tAS400Input_4,dbPwd_tAS400Input_4);
		        
		    
			java.sql.Statement stmt_tAS400Input_4 = conn_tAS400Input_4.createStatement();

		    String dbquery_tAS400Input_4 = "select\nrtrim(NationaliteitCode) as NationaliteitCode,\nrtrim(NationaliteitOmschrijving) as NationaliteitOmschrijving\n  from bzsnatt00";
			

                       globalMap.put("tAS400Input_4_QUERY",dbquery_tAS400Input_4);

		    java.sql.ResultSet rs_tAS400Input_4 = null;
		try{
		    rs_tAS400Input_4 = stmt_tAS400Input_4.executeQuery(dbquery_tAS400Input_4);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_4 = rs_tAS400Input_4.getMetaData();
		    int colQtyInRs_tAS400Input_4 = rsmd_tAS400Input_4.getColumnCount();

		    String tmpContent_tAS400Input_4 = null;
		    
		    
		    while (rs_tAS400Input_4.next()) {
		        nb_line_tAS400Input_4++;
		        
							if(colQtyInRs_tAS400Input_4 < 1) {
								cipers_nationaliteiten.NATIONALITEITCODE = null;
							} else {
	                         		
        	cipers_nationaliteiten.NATIONALITEITCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_4, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_4 < 2) {
								cipers_nationaliteiten.NATIONALITEITOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_nationaliteiten.NATIONALITEITOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_4, 2, false);
		                    }
					



 



/**
 * [tAS400Input_4 begin ] stop
 */
	
	/**
	 * [tAS400Input_4 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_4";

	

 


	tos_count_tAS400Input_4++;

/**
 * [tAS400Input_4 main ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//cipers_nationaliteiten
			//cipers_nationaliteiten


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_nationaliteiten"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

ldf_nationaliteiten = null;


// # Output table : 'ldf_nationaliteiten'
ldf_nationaliteiten_tmp.nationaliteitcode = cipers_nationaliteiten.NATIONALITEITCODE;
ldf_nationaliteiten_tmp.nationaliteitomschrijving = cipers_nationaliteiten.NATIONALITEITOMSCHRIJVING;
ldf_nationaliteiten = ldf_nationaliteiten_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
// Start of branch "ldf_nationaliteiten"
if(ldf_nationaliteiten != null) { 



	
	/**
	 * [tPostgresqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

			//ldf_nationaliteiten
			//ldf_nationaliteiten


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_nationaliteiten"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_4 = false;
                    if(ldf_nationaliteiten.nationaliteitcode == null) {
pstmt_tPostgresqlOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(1, ldf_nationaliteiten.nationaliteitcode);
}

                    if(ldf_nationaliteiten.nationaliteitomschrijving == null) {
pstmt_tPostgresqlOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_4.setString(2, ldf_nationaliteiten.nationaliteitomschrijving);
}

			
    		pstmt_tPostgresqlOutput_4.addBatch();
    		nb_line_tPostgresqlOutput_4++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_4++;
    		  
            if(!whetherReject_tPostgresqlOutput_4) {
            }
    			if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4)) {
                try {
						int countSum_tPostgresqlOutput_4 = 0;
						    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
				    	
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_4 = 0;
					for(int countEach_tPostgresqlOutput_4: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
					
			    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_4++;
                if(commitEvery_tPostgresqlOutput_4 <= commitCounter_tPostgresqlOutput_4) {
                if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSizeCounter_tPostgresqlOutput_4 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_4 = 0;
                		    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
            	    	
                batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_4 = 0;
						for(int countEach_tPostgresqlOutput_4: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
						
				    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_4.commit();
                	
                	commitCounter_tPostgresqlOutput_4=0;
                }

 


	tos_count_tPostgresqlOutput_4++;

/**
 * [tPostgresqlOutput_4 main ] stop
 */

} // End of branch "ldf_nationaliteiten"







	
	/**
	 * [tAS400Input_4 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_4";

	

	}
}finally{
	stmt_tAS400Input_4.close();

		if(conn_tAS400Input_4 != null && !conn_tAS400Input_4.isClosed()) {
			
			conn_tAS400Input_4.close();
			
		}
}
globalMap.put("tAS400Input_4_NB_LINE",nb_line_tAS400Input_4);

 

ok_Hash.put("tAS400Input_4", true);
end_Hash.put("tAS400Input_4", System.currentTimeMillis());




/**
 * [tAS400Input_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_nationaliteiten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	    try {
				int countSum_tPostgresqlOutput_4 = 0;
				if (pstmt_tPostgresqlOutput_4 != null && batchSizeCounter_tPostgresqlOutput_4 > 0) {
						
					for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_4 = 0;
			for(int countEach_tPostgresqlOutput_4: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
			}
			
	    		insertedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_4 != null) {
            pstmt_tPostgresqlOutput_4.close();
        }

			
			conn_tPostgresqlOutput_4.commit();
			
		
    	conn_tPostgresqlOutput_4 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_4", true);
    	

	nb_line_deleted_tPostgresqlOutput_4=nb_line_deleted_tPostgresqlOutput_4+ deletedCount_tPostgresqlOutput_4;
	nb_line_update_tPostgresqlOutput_4=nb_line_update_tPostgresqlOutput_4 + updatedCount_tPostgresqlOutput_4;
	nb_line_inserted_tPostgresqlOutput_4=nb_line_inserted_tPostgresqlOutput_4 + insertedCount_tPostgresqlOutput_4;
	nb_line_rejected_tPostgresqlOutput_4=nb_line_rejected_tPostgresqlOutput_4 + rejectedCount_tPostgresqlOutput_4;
	
        globalMap.put("tPostgresqlOutput_4_NB_LINE",nb_line_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_nationaliteiten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_4", true);
end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tAS400Input_5Process(globalMap);



/**
 * [tPostgresqlOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_4 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_4";

	

 



/**
 * [tAS400Input_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_4")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_4")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_4")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_4) {
					String errorMessage_tPostgresqlOutput_4 = "failed to close the connection in tPostgresqlOutput_4 :" + sqlEx_tPostgresqlOutput_4.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_4);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_4_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_reden_nationaliteitenStruct implements routines.system.IPersistableRow<ldf_reden_nationaliteitenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String redennationaliteitcode;

				public String getRedennationaliteitcode () {
					return this.redennationaliteitcode;
				}
				
			    public String redennationaliteitomschrijving;

				public String getRedennationaliteitomschrijving () {
					return this.redennationaliteitomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.redennationaliteitcode == null) ? 0 : this.redennationaliteitcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_reden_nationaliteitenStruct other = (ldf_reden_nationaliteitenStruct) obj;
		
						if (this.redennationaliteitcode == null) {
							if (other.redennationaliteitcode != null)
								return false;
						
						} else if (!this.redennationaliteitcode.equals(other.redennationaliteitcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_reden_nationaliteitenStruct other) {

		other.redennationaliteitcode = this.redennationaliteitcode;
	            other.redennationaliteitomschrijving = this.redennationaliteitomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_reden_nationaliteitenStruct other) {

		other.redennationaliteitcode = this.redennationaliteitcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.redennationaliteitcode = readString(dis);
					
					this.redennationaliteitomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.redennationaliteitcode,dos);
					
					// String
				
						writeString(this.redennationaliteitomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("redennationaliteitcode="+redennationaliteitcode);
		sb.append(",redennationaliteitomschrijving="+redennationaliteitomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_reden_nationaliteitenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.redennationaliteitcode, other.redennationaliteitcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_reden_nationaliteitenStruct implements routines.system.IPersistableRow<cipers_reden_nationaliteitenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String REDENNATIONALITEITCODE;

				public String getREDENNATIONALITEITCODE () {
					return this.REDENNATIONALITEITCODE;
				}
				
			    public String REDENNATIONALITEITOMSCHRIJVING;

				public String getREDENNATIONALITEITOMSCHRIJVING () {
					return this.REDENNATIONALITEITOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.REDENNATIONALITEITCODE = readString(dis);
					
					this.REDENNATIONALITEITOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.REDENNATIONALITEITCODE,dos);
					
					// String
				
						writeString(this.REDENNATIONALITEITOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REDENNATIONALITEITCODE="+REDENNATIONALITEITCODE);
		sb.append(",REDENNATIONALITEITOMSCHRIJVING="+REDENNATIONALITEITOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_reden_nationaliteitenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_reden_nationaliteitenStruct cipers_reden_nationaliteiten = new cipers_reden_nationaliteitenStruct();
ldf_reden_nationaliteitenStruct ldf_reden_nationaliteiten = new ldf_reden_nationaliteitenStruct();





	
	/**
	 * [tPostgresqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_5", false);
		start_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_reden_nationaliteiten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_5().limitLog4jByte();





String dbschema_tPostgresqlOutput_5 = null;
	dbschema_tPostgresqlOutput_5 = "ldf";
	

String tableName_tPostgresqlOutput_5 = null;
if(dbschema_tPostgresqlOutput_5 == null || dbschema_tPostgresqlOutput_5.trim().length() == 0) {
	tableName_tPostgresqlOutput_5 = "ibz_cip_reden_nationaliteiten";
} else {
	tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5 + "\".\"" + "ibz_cip_reden_nationaliteiten";
}

int nb_line_tPostgresqlOutput_5 = 0;
int nb_line_update_tPostgresqlOutput_5 = 0;
int nb_line_inserted_tPostgresqlOutput_5 = 0;
int nb_line_deleted_tPostgresqlOutput_5 = 0;
int nb_line_rejected_tPostgresqlOutput_5 = 0;

int deletedCount_tPostgresqlOutput_5=0;
int updatedCount_tPostgresqlOutput_5=0;
int insertedCount_tPostgresqlOutput_5=0;
int rejectedCount_tPostgresqlOutput_5=0;

boolean whetherReject_tPostgresqlOutput_5 = false;

java.sql.Connection conn_tPostgresqlOutput_5 = null;
String dbUser_tPostgresqlOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_5 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_5 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_5 = decryptedPassword_tPostgresqlOutput_5;

    conn_tPostgresqlOutput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_5,dbUser_tPostgresqlOutput_5,dbPwd_tPostgresqlOutput_5);
	
	resourceMap.put("conn_tPostgresqlOutput_5", conn_tPostgresqlOutput_5);
        conn_tPostgresqlOutput_5.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_5 = 10000;
        int commitCounter_tPostgresqlOutput_5 = 0;


   int batchSize_tPostgresqlOutput_5 = 10000;
   int batchSizeCounter_tPostgresqlOutput_5=0;

int count_tPostgresqlOutput_5=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_5 = dbMetaData_tPostgresqlOutput_5.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_5 = false;
                                String defaultSchema_tPostgresqlOutput_5 = "public";
                                if(dbschema_tPostgresqlOutput_5 == null || dbschema_tPostgresqlOutput_5.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_5 = stmtSchema_tPostgresqlOutput_5.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_5.next()){
                                        defaultSchema_tPostgresqlOutput_5 = rsSchema_tPostgresqlOutput_5.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_5.close();
                                    stmtSchema_tPostgresqlOutput_5.close();
                                }
                                while(rsTable_tPostgresqlOutput_5.next()) {
                                    String table_tPostgresqlOutput_5 = rsTable_tPostgresqlOutput_5.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_5 = rsTable_tPostgresqlOutput_5.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_5.equals("ibz_cip_reden_nationaliteiten")
                                        && (schema_tPostgresqlOutput_5.equals(dbschema_tPostgresqlOutput_5) || ((dbschema_tPostgresqlOutput_5 ==null || dbschema_tPostgresqlOutput_5.trim().length() ==0) && defaultSchema_tPostgresqlOutput_5.equals(schema_tPostgresqlOutput_5)))) {
                                        whetherExist_tPostgresqlOutput_5 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_5.close();
                                if(whetherExist_tPostgresqlOutput_5) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.createStatement();
                                    stmtDrop_tPostgresqlOutput_5.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_5 + "\"" );
                                    stmtDrop_tPostgresqlOutput_5.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.createStatement();
                                    stmtCreate_tPostgresqlOutput_5.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_5 + "\"(\"redennationaliteitcode\" VARCHAR(3)  ,\"redennationaliteitomschrijving\" VARCHAR(80)  ,primary key(\"redennationaliteitcode\"))");
                                stmtCreate_tPostgresqlOutput_5.close();
	    String insert_tPostgresqlOutput_5 = "INSERT INTO \"" + tableName_tPostgresqlOutput_5 + "\" (\"redennationaliteitcode\",\"redennationaliteitomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.prepareStatement(insert_tPostgresqlOutput_5);
	    

 



/**
 * [tPostgresqlOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_reden_nationaliteiten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		
    	class BytesLimit65535_tMap_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_5().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_reden_nationaliteitenStruct ldf_reden_nationaliteiten_tmp = new ldf_reden_nationaliteitenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tAS400Input_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_5", false);
		start_Hash.put("tAS400Input_5", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_5";

	
		int tos_count_tAS400Input_5 = 0;
		
    	class BytesLimit65535_tAS400Input_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_5().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_5 = 0;
		    java.sql.Connection conn_tAS400Input_5 = null;
				String driverClass_tAS400Input_5 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_5);
			   	String dbUser_tAS400Input_5 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_5 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_5 = decryptedPassword_tAS400Input_5;
		        
				  
				String url_tAS400Input_5 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;date format=iso;time format=iso";
				
				conn_tAS400Input_5 = java.sql.DriverManager.getConnection(url_tAS400Input_5,dbUser_tAS400Input_5,dbPwd_tAS400Input_5);
		        
		    
			java.sql.Statement stmt_tAS400Input_5 = conn_tAS400Input_5.createStatement();

		    String dbquery_tAS400Input_5 = "select\nrtrim(RedenNationaliteitCode) as RedenNationaliteitCode,\nrtrim(RedenNationaliteitOmschrijving) as RedenNationaliteitOmschrijving\n  from bzsrvvt00";
			

                       globalMap.put("tAS400Input_5_QUERY",dbquery_tAS400Input_5);

		    java.sql.ResultSet rs_tAS400Input_5 = null;
		try{
		    rs_tAS400Input_5 = stmt_tAS400Input_5.executeQuery(dbquery_tAS400Input_5);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_5 = rs_tAS400Input_5.getMetaData();
		    int colQtyInRs_tAS400Input_5 = rsmd_tAS400Input_5.getColumnCount();

		    String tmpContent_tAS400Input_5 = null;
		    
		    
		    while (rs_tAS400Input_5.next()) {
		        nb_line_tAS400Input_5++;
		        
							if(colQtyInRs_tAS400Input_5 < 1) {
								cipers_reden_nationaliteiten.REDENNATIONALITEITCODE = null;
							} else {
	                         		
        	cipers_reden_nationaliteiten.REDENNATIONALITEITCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_5, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_5 < 2) {
								cipers_reden_nationaliteiten.REDENNATIONALITEITOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_reden_nationaliteiten.REDENNATIONALITEITOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_5, 2, false);
		                    }
					



 



/**
 * [tAS400Input_5 begin ] stop
 */
	
	/**
	 * [tAS400Input_5 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_5";

	

 


	tos_count_tAS400Input_5++;

/**
 * [tAS400Input_5 main ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//cipers_reden_nationaliteiten
			//cipers_reden_nationaliteiten


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_reden_nationaliteiten"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

ldf_reden_nationaliteiten = null;


// # Output table : 'ldf_reden_nationaliteiten'
ldf_reden_nationaliteiten_tmp.redennationaliteitcode = cipers_reden_nationaliteiten.REDENNATIONALITEITCODE;
ldf_reden_nationaliteiten_tmp.redennationaliteitomschrijving = cipers_reden_nationaliteiten.REDENNATIONALITEITOMSCHRIJVING;
ldf_reden_nationaliteiten = ldf_reden_nationaliteiten_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
// Start of branch "ldf_reden_nationaliteiten"
if(ldf_reden_nationaliteiten != null) { 



	
	/**
	 * [tPostgresqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

			//ldf_reden_nationaliteiten
			//ldf_reden_nationaliteiten


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_reden_nationaliteiten"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_5 = false;
                    if(ldf_reden_nationaliteiten.redennationaliteitcode == null) {
pstmt_tPostgresqlOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_5.setString(1, ldf_reden_nationaliteiten.redennationaliteitcode);
}

                    if(ldf_reden_nationaliteiten.redennationaliteitomschrijving == null) {
pstmt_tPostgresqlOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_5.setString(2, ldf_reden_nationaliteiten.redennationaliteitomschrijving);
}

			
    		pstmt_tPostgresqlOutput_5.addBatch();
    		nb_line_tPostgresqlOutput_5++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_5++;
    		  
            if(!whetherReject_tPostgresqlOutput_5) {
            }
    			if ((batchSize_tPostgresqlOutput_5 > 0) && (batchSize_tPostgresqlOutput_5 <= batchSizeCounter_tPostgresqlOutput_5)) {
                try {
						int countSum_tPostgresqlOutput_5 = 0;
						    
						for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
				    	
				    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_5 = 0;
					for(int countEach_tPostgresqlOutput_5: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
					}
					
			    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_5++;
                if(commitEvery_tPostgresqlOutput_5 <= commitCounter_tPostgresqlOutput_5) {
                if ((batchSize_tPostgresqlOutput_5 > 0) && (batchSizeCounter_tPostgresqlOutput_5 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_5 = 0;
                		    
						for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
            	    	
                batchSizeCounter_tPostgresqlOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_5 = 0;
						for(int countEach_tPostgresqlOutput_5: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
						
				    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_5.commit();
                	
                	commitCounter_tPostgresqlOutput_5=0;
                }

 


	tos_count_tPostgresqlOutput_5++;

/**
 * [tPostgresqlOutput_5 main ] stop
 */

} // End of branch "ldf_reden_nationaliteiten"







	
	/**
	 * [tAS400Input_5 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_5";

	

	}
}finally{
	stmt_tAS400Input_5.close();

		if(conn_tAS400Input_5 != null && !conn_tAS400Input_5.isClosed()) {
			
			conn_tAS400Input_5.close();
			
		}
}
globalMap.put("tAS400Input_5_NB_LINE",nb_line_tAS400Input_5);

 

ok_Hash.put("tAS400Input_5", true);
end_Hash.put("tAS400Input_5", System.currentTimeMillis());




/**
 * [tAS400Input_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_reden_nationaliteiten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



	    try {
				int countSum_tPostgresqlOutput_5 = 0;
				if (pstmt_tPostgresqlOutput_5 != null && batchSizeCounter_tPostgresqlOutput_5 > 0) {
						
					for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
						countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_5 = 0;
			for(int countEach_tPostgresqlOutput_5: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
			}
			
	    		insertedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_5 != null) {
            pstmt_tPostgresqlOutput_5.close();
        }

			
			conn_tPostgresqlOutput_5.commit();
			
		
    	conn_tPostgresqlOutput_5 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_5", true);
    	

	nb_line_deleted_tPostgresqlOutput_5=nb_line_deleted_tPostgresqlOutput_5+ deletedCount_tPostgresqlOutput_5;
	nb_line_update_tPostgresqlOutput_5=nb_line_update_tPostgresqlOutput_5 + updatedCount_tPostgresqlOutput_5;
	nb_line_inserted_tPostgresqlOutput_5=nb_line_inserted_tPostgresqlOutput_5 + insertedCount_tPostgresqlOutput_5;
	nb_line_rejected_tPostgresqlOutput_5=nb_line_rejected_tPostgresqlOutput_5 + rejectedCount_tPostgresqlOutput_5;
	
        globalMap.put("tPostgresqlOutput_5_NB_LINE",nb_line_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_5);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_reden_nationaliteiten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_5", true);
end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tAS400Input_6Process(globalMap);



/**
 * [tPostgresqlOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_5 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_5";

	

 



/**
 * [tAS400Input_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_5")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_5")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_5")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_5) {
					String errorMessage_tPostgresqlOutput_5 = "failed to close the connection in tPostgresqlOutput_5 :" + sqlEx_tPostgresqlOutput_5.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_5);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_5_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_verblijfstitelsStruct implements routines.system.IPersistableRow<ldf_verblijfstitelsStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String verblijfstitelcode;

				public String getVerblijfstitelcode () {
					return this.verblijfstitelcode;
				}
				
			    public String verblijfstitelomschrijving;

				public String getVerblijfstitelomschrijving () {
					return this.verblijfstitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.verblijfstitelcode == null) ? 0 : this.verblijfstitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_verblijfstitelsStruct other = (ldf_verblijfstitelsStruct) obj;
		
						if (this.verblijfstitelcode == null) {
							if (other.verblijfstitelcode != null)
								return false;
						
						} else if (!this.verblijfstitelcode.equals(other.verblijfstitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_verblijfstitelsStruct other) {

		other.verblijfstitelcode = this.verblijfstitelcode;
	            other.verblijfstitelomschrijving = this.verblijfstitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_verblijfstitelsStruct other) {

		other.verblijfstitelcode = this.verblijfstitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.verblijfstitelcode = readString(dis);
					
					this.verblijfstitelomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.verblijfstitelcode,dos);
					
					// String
				
						writeString(this.verblijfstitelomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("verblijfstitelcode="+verblijfstitelcode);
		sb.append(",verblijfstitelomschrijving="+verblijfstitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_verblijfstitelsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.verblijfstitelcode, other.verblijfstitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_verblijfstitelsStruct implements routines.system.IPersistableRow<cipers_verblijfstitelsStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String VERBLIJFSTITELCODE;

				public String getVERBLIJFSTITELCODE () {
					return this.VERBLIJFSTITELCODE;
				}
				
			    public String VERBLIJFSTITELOMSCHRIJVING;

				public String getVERBLIJFSTITELOMSCHRIJVING () {
					return this.VERBLIJFSTITELOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.VERBLIJFSTITELCODE = readString(dis);
					
					this.VERBLIJFSTITELOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VERBLIJFSTITELCODE,dos);
					
					// String
				
						writeString(this.VERBLIJFSTITELOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VERBLIJFSTITELCODE="+VERBLIJFSTITELCODE);
		sb.append(",VERBLIJFSTITELOMSCHRIJVING="+VERBLIJFSTITELOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_verblijfstitelsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_verblijfstitelsStruct cipers_verblijfstitels = new cipers_verblijfstitelsStruct();
ldf_verblijfstitelsStruct ldf_verblijfstitels = new ldf_verblijfstitelsStruct();





	
	/**
	 * [tPostgresqlOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_6", false);
		start_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_verblijfstitels" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_6 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_6().limitLog4jByte();





String dbschema_tPostgresqlOutput_6 = null;
	dbschema_tPostgresqlOutput_6 = "ldf";
	

String tableName_tPostgresqlOutput_6 = null;
if(dbschema_tPostgresqlOutput_6 == null || dbschema_tPostgresqlOutput_6.trim().length() == 0) {
	tableName_tPostgresqlOutput_6 = "ibz_cip_verblijfstitels";
} else {
	tableName_tPostgresqlOutput_6 = dbschema_tPostgresqlOutput_6 + "\".\"" + "ibz_cip_verblijfstitels";
}

int nb_line_tPostgresqlOutput_6 = 0;
int nb_line_update_tPostgresqlOutput_6 = 0;
int nb_line_inserted_tPostgresqlOutput_6 = 0;
int nb_line_deleted_tPostgresqlOutput_6 = 0;
int nb_line_rejected_tPostgresqlOutput_6 = 0;

int deletedCount_tPostgresqlOutput_6=0;
int updatedCount_tPostgresqlOutput_6=0;
int insertedCount_tPostgresqlOutput_6=0;
int rejectedCount_tPostgresqlOutput_6=0;

boolean whetherReject_tPostgresqlOutput_6 = false;

java.sql.Connection conn_tPostgresqlOutput_6 = null;
String dbUser_tPostgresqlOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_6 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_6 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_6 = decryptedPassword_tPostgresqlOutput_6;

    conn_tPostgresqlOutput_6 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_6,dbUser_tPostgresqlOutput_6,dbPwd_tPostgresqlOutput_6);
	
	resourceMap.put("conn_tPostgresqlOutput_6", conn_tPostgresqlOutput_6);
        conn_tPostgresqlOutput_6.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_6 = 10000;
        int commitCounter_tPostgresqlOutput_6 = 0;


   int batchSize_tPostgresqlOutput_6 = 10000;
   int batchSizeCounter_tPostgresqlOutput_6=0;

int count_tPostgresqlOutput_6=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_6 = dbMetaData_tPostgresqlOutput_6.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_6 = false;
                                String defaultSchema_tPostgresqlOutput_6 = "public";
                                if(dbschema_tPostgresqlOutput_6 == null || dbschema_tPostgresqlOutput_6.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_6 = stmtSchema_tPostgresqlOutput_6.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_6.next()){
                                        defaultSchema_tPostgresqlOutput_6 = rsSchema_tPostgresqlOutput_6.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_6.close();
                                    stmtSchema_tPostgresqlOutput_6.close();
                                }
                                while(rsTable_tPostgresqlOutput_6.next()) {
                                    String table_tPostgresqlOutput_6 = rsTable_tPostgresqlOutput_6.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_6 = rsTable_tPostgresqlOutput_6.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_6.equals("ibz_cip_verblijfstitels")
                                        && (schema_tPostgresqlOutput_6.equals(dbschema_tPostgresqlOutput_6) || ((dbschema_tPostgresqlOutput_6 ==null || dbschema_tPostgresqlOutput_6.trim().length() ==0) && defaultSchema_tPostgresqlOutput_6.equals(schema_tPostgresqlOutput_6)))) {
                                        whetherExist_tPostgresqlOutput_6 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_6.close();
                                if(whetherExist_tPostgresqlOutput_6) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.createStatement();
                                    stmtDrop_tPostgresqlOutput_6.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_6 + "\"" );
                                    stmtDrop_tPostgresqlOutput_6.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.createStatement();
                                    stmtCreate_tPostgresqlOutput_6.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_6 + "\"(\"verblijfstitelcode\" VARCHAR(2)   not null ,\"verblijfstitelomschrijving\" VARCHAR(80)   not null ,primary key(\"verblijfstitelcode\"))");
                                stmtCreate_tPostgresqlOutput_6.close();
	    String insert_tPostgresqlOutput_6 = "INSERT INTO \"" + tableName_tPostgresqlOutput_6 + "\" (\"verblijfstitelcode\",\"verblijfstitelomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.prepareStatement(insert_tPostgresqlOutput_6);
	    

 



/**
 * [tPostgresqlOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_verblijfstitels" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		
    	class BytesLimit65535_tMap_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_6().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_verblijfstitelsStruct ldf_verblijfstitels_tmp = new ldf_verblijfstitelsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tAS400Input_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_6", false);
		start_Hash.put("tAS400Input_6", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_6";

	
		int tos_count_tAS400Input_6 = 0;
		
    	class BytesLimit65535_tAS400Input_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_6().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_6 = 0;
		    java.sql.Connection conn_tAS400Input_6 = null;
				String driverClass_tAS400Input_6 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_6);
			   	String dbUser_tAS400Input_6 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_6 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_6 = decryptedPassword_tAS400Input_6;
		        
				  
				String url_tAS400Input_6 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_6 = java.sql.DriverManager.getConnection(url_tAS400Input_6,dbUser_tAS400Input_6,dbPwd_tAS400Input_6);
		        
		    
			java.sql.Statement stmt_tAS400Input_6 = conn_tAS400Input_6.createStatement();

		    String dbquery_tAS400Input_6 = "select\nrtrim(VerblijfstitelCode) as VerblijfstitelCode,\nrtrim(VerblijfstitelOmschrijving) as VerblijfstitelOmschrijving\n  from bzsvbtt00";
			

                       globalMap.put("tAS400Input_6_QUERY",dbquery_tAS400Input_6);

		    java.sql.ResultSet rs_tAS400Input_6 = null;
		try{
		    rs_tAS400Input_6 = stmt_tAS400Input_6.executeQuery(dbquery_tAS400Input_6);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_6 = rs_tAS400Input_6.getMetaData();
		    int colQtyInRs_tAS400Input_6 = rsmd_tAS400Input_6.getColumnCount();

		    String tmpContent_tAS400Input_6 = null;
		    
		    
		    while (rs_tAS400Input_6.next()) {
		        nb_line_tAS400Input_6++;
		        
							if(colQtyInRs_tAS400Input_6 < 1) {
								cipers_verblijfstitels.VERBLIJFSTITELCODE = null;
							} else {
	                         		
        	cipers_verblijfstitels.VERBLIJFSTITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_6, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_6 < 2) {
								cipers_verblijfstitels.VERBLIJFSTITELOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_verblijfstitels.VERBLIJFSTITELOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_6, 2, false);
		                    }
					



 



/**
 * [tAS400Input_6 begin ] stop
 */
	
	/**
	 * [tAS400Input_6 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_6";

	

 


	tos_count_tAS400Input_6++;

/**
 * [tAS400Input_6 main ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//cipers_verblijfstitels
			//cipers_verblijfstitels


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_verblijfstitels"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

ldf_verblijfstitels = null;


// # Output table : 'ldf_verblijfstitels'
ldf_verblijfstitels_tmp.verblijfstitelcode = cipers_verblijfstitels.VERBLIJFSTITELCODE;
ldf_verblijfstitels_tmp.verblijfstitelomschrijving = cipers_verblijfstitels.VERBLIJFSTITELOMSCHRIJVING;
ldf_verblijfstitels = ldf_verblijfstitels_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
// Start of branch "ldf_verblijfstitels"
if(ldf_verblijfstitels != null) { 



	
	/**
	 * [tPostgresqlOutput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	

			//ldf_verblijfstitels
			//ldf_verblijfstitels


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_verblijfstitels"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_6 = false;
                    if(ldf_verblijfstitels.verblijfstitelcode == null) {
pstmt_tPostgresqlOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_6.setString(1, ldf_verblijfstitels.verblijfstitelcode);
}

                    if(ldf_verblijfstitels.verblijfstitelomschrijving == null) {
pstmt_tPostgresqlOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_6.setString(2, ldf_verblijfstitels.verblijfstitelomschrijving);
}

			
    		pstmt_tPostgresqlOutput_6.addBatch();
    		nb_line_tPostgresqlOutput_6++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_6++;
    		  
            if(!whetherReject_tPostgresqlOutput_6) {
            }
    			if ((batchSize_tPostgresqlOutput_6 > 0) && (batchSize_tPostgresqlOutput_6 <= batchSizeCounter_tPostgresqlOutput_6)) {
                try {
						int countSum_tPostgresqlOutput_6 = 0;
						    
						for(int countEach_tPostgresqlOutput_6: pstmt_tPostgresqlOutput_6.executeBatch()) {
							countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
						}
				    	
				    		insertedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_6 = 0;
					for(int countEach_tPostgresqlOutput_6: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
					}
					
			    		insertedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_6++;
                if(commitEvery_tPostgresqlOutput_6 <= commitCounter_tPostgresqlOutput_6) {
                if ((batchSize_tPostgresqlOutput_6 > 0) && (batchSizeCounter_tPostgresqlOutput_6 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_6 = 0;
                		    
						for(int countEach_tPostgresqlOutput_6: pstmt_tPostgresqlOutput_6.executeBatch()) {
							countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
            	    	
                batchSizeCounter_tPostgresqlOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_6 = 0;
						for(int countEach_tPostgresqlOutput_6: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
						}
						
				    		insertedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_6.commit();
                	
                	commitCounter_tPostgresqlOutput_6=0;
                }

 


	tos_count_tPostgresqlOutput_6++;

/**
 * [tPostgresqlOutput_6 main ] stop
 */

} // End of branch "ldf_verblijfstitels"







	
	/**
	 * [tAS400Input_6 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_6";

	

	}
}finally{
	stmt_tAS400Input_6.close();

		if(conn_tAS400Input_6 != null && !conn_tAS400Input_6.isClosed()) {
			
			conn_tAS400Input_6.close();
			
		}
}
globalMap.put("tAS400Input_6_NB_LINE",nb_line_tAS400Input_6);

 

ok_Hash.put("tAS400Input_6", true);
end_Hash.put("tAS400Input_6", System.currentTimeMillis());




/**
 * [tAS400Input_6 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_verblijfstitels"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	



	    try {
				int countSum_tPostgresqlOutput_6 = 0;
				if (pstmt_tPostgresqlOutput_6 != null && batchSizeCounter_tPostgresqlOutput_6 > 0) {
						
					for(int countEach_tPostgresqlOutput_6: pstmt_tPostgresqlOutput_6.executeBatch()) {
						countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_6 = 0;
			for(int countEach_tPostgresqlOutput_6: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
			}
			
	    		insertedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_6 != null) {
            pstmt_tPostgresqlOutput_6.close();
        }

			
			conn_tPostgresqlOutput_6.commit();
			
		
    	conn_tPostgresqlOutput_6 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_6", true);
    	

	nb_line_deleted_tPostgresqlOutput_6=nb_line_deleted_tPostgresqlOutput_6+ deletedCount_tPostgresqlOutput_6;
	nb_line_update_tPostgresqlOutput_6=nb_line_update_tPostgresqlOutput_6 + updatedCount_tPostgresqlOutput_6;
	nb_line_inserted_tPostgresqlOutput_6=nb_line_inserted_tPostgresqlOutput_6 + insertedCount_tPostgresqlOutput_6;
	nb_line_rejected_tPostgresqlOutput_6=nb_line_rejected_tPostgresqlOutput_6 + rejectedCount_tPostgresqlOutput_6;
	
        globalMap.put("tPostgresqlOutput_6_NB_LINE",nb_line_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_6);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_verblijfstitels"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_6", true);
end_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tAS400Input_7Process(globalMap);



/**
 * [tPostgresqlOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_6 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_6";

	

 



/**
 * [tAS400Input_6 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_6")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_6")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_6")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_6) {
					String errorMessage_tPostgresqlOutput_6 = "failed to close the connection in tPostgresqlOutput_6 :" + sqlEx_tPostgresqlOutput_6.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_6);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_6_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_nederlandse_reisdocumentenStruct implements routines.system.IPersistableRow<ldf_nederlandse_reisdocumentenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String reisdocumentcode;

				public String getReisdocumentcode () {
					return this.reisdocumentcode;
				}
				
			    public String reisdocumentomschrijving;

				public String getReisdocumentomschrijving () {
					return this.reisdocumentomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.reisdocumentcode == null) ? 0 : this.reisdocumentcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_nederlandse_reisdocumentenStruct other = (ldf_nederlandse_reisdocumentenStruct) obj;
		
						if (this.reisdocumentcode == null) {
							if (other.reisdocumentcode != null)
								return false;
						
						} else if (!this.reisdocumentcode.equals(other.reisdocumentcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_nederlandse_reisdocumentenStruct other) {

		other.reisdocumentcode = this.reisdocumentcode;
	            other.reisdocumentomschrijving = this.reisdocumentomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_nederlandse_reisdocumentenStruct other) {

		other.reisdocumentcode = this.reisdocumentcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.reisdocumentcode = readString(dis);
					
					this.reisdocumentomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.reisdocumentcode,dos);
					
					// String
				
						writeString(this.reisdocumentomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("reisdocumentcode="+reisdocumentcode);
		sb.append(",reisdocumentomschrijving="+reisdocumentomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_nederlandse_reisdocumentenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.reisdocumentcode, other.reisdocumentcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_nederlandse_reisdocumentenStruct implements routines.system.IPersistableRow<cipers_nederlandse_reisdocumentenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[0];

	
			    public String REISDOCUMENTCODE;

				public String getREISDOCUMENTCODE () {
					return this.REISDOCUMENTCODE;
				}
				
			    public String REISDOCUMENTOMSCHRIJVING;

				public String getREISDOCUMENTOMSCHRIJVING () {
					return this.REISDOCUMENTOMSCHRIJVING;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.REISDOCUMENTCODE = readString(dis);
					
					this.REISDOCUMENTOMSCHRIJVING = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.REISDOCUMENTCODE,dos);
					
					// String
				
						writeString(this.REISDOCUMENTOMSCHRIJVING,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("REISDOCUMENTCODE="+REISDOCUMENTCODE);
		sb.append(",REISDOCUMENTOMSCHRIJVING="+REISDOCUMENTOMSCHRIJVING);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_nederlandse_reisdocumentenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipers_nederlandse_reisdocumentenStruct cipers_nederlandse_reisdocumenten = new cipers_nederlandse_reisdocumentenStruct();
ldf_nederlandse_reisdocumentenStruct ldf_nederlandse_reisdocumenten = new ldf_nederlandse_reisdocumentenStruct();





	
	/**
	 * [tPostgresqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_7", false);
		start_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_nederlandse_reisdocumenten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_7 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_7().limitLog4jByte();





String dbschema_tPostgresqlOutput_7 = null;
	dbschema_tPostgresqlOutput_7 = "ldf";
	

String tableName_tPostgresqlOutput_7 = null;
if(dbschema_tPostgresqlOutput_7 == null || dbschema_tPostgresqlOutput_7.trim().length() == 0) {
	tableName_tPostgresqlOutput_7 = "ibz_cip_nederlandse_reisdocumenten";
} else {
	tableName_tPostgresqlOutput_7 = dbschema_tPostgresqlOutput_7 + "\".\"" + "ibz_cip_nederlandse_reisdocumenten";
}

int nb_line_tPostgresqlOutput_7 = 0;
int nb_line_update_tPostgresqlOutput_7 = 0;
int nb_line_inserted_tPostgresqlOutput_7 = 0;
int nb_line_deleted_tPostgresqlOutput_7 = 0;
int nb_line_rejected_tPostgresqlOutput_7 = 0;

int deletedCount_tPostgresqlOutput_7=0;
int updatedCount_tPostgresqlOutput_7=0;
int insertedCount_tPostgresqlOutput_7=0;
int rejectedCount_tPostgresqlOutput_7=0;

boolean whetherReject_tPostgresqlOutput_7 = false;

java.sql.Connection conn_tPostgresqlOutput_7 = null;
String dbUser_tPostgresqlOutput_7 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_7 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_7 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_7 = decryptedPassword_tPostgresqlOutput_7;

    conn_tPostgresqlOutput_7 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_7,dbUser_tPostgresqlOutput_7,dbPwd_tPostgresqlOutput_7);
	
	resourceMap.put("conn_tPostgresqlOutput_7", conn_tPostgresqlOutput_7);
        conn_tPostgresqlOutput_7.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_7 = 10000;
        int commitCounter_tPostgresqlOutput_7 = 0;


   int batchSize_tPostgresqlOutput_7 = 10000;
   int batchSizeCounter_tPostgresqlOutput_7=0;

int count_tPostgresqlOutput_7=0;
                                java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.getMetaData();
                                java.sql.ResultSet rsTable_tPostgresqlOutput_7 = dbMetaData_tPostgresqlOutput_7.getTables(null, null, null, new String[]{"TABLE"});
                                boolean whetherExist_tPostgresqlOutput_7 = false;
                                String defaultSchema_tPostgresqlOutput_7 = "public";
                                if(dbschema_tPostgresqlOutput_7 == null || dbschema_tPostgresqlOutput_7.trim().length() == 0) {
                                    java.sql.Statement stmtSchema_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.createStatement();
                                    java.sql.ResultSet rsSchema_tPostgresqlOutput_7 = stmtSchema_tPostgresqlOutput_7.executeQuery("select current_schema() ");
                                    while(rsSchema_tPostgresqlOutput_7.next()){
                                        defaultSchema_tPostgresqlOutput_7 = rsSchema_tPostgresqlOutput_7.getString("current_schema");
                                    }
                                    rsSchema_tPostgresqlOutput_7.close();
                                    stmtSchema_tPostgresqlOutput_7.close();
                                }
                                while(rsTable_tPostgresqlOutput_7.next()) {
                                    String table_tPostgresqlOutput_7 = rsTable_tPostgresqlOutput_7.getString("TABLE_NAME");
                                    String schema_tPostgresqlOutput_7 = rsTable_tPostgresqlOutput_7.getString("TABLE_SCHEM");
                                    if(table_tPostgresqlOutput_7.equals("ibz_cip_nederlandse_reisdocumenten")
                                        && (schema_tPostgresqlOutput_7.equals(dbschema_tPostgresqlOutput_7) || ((dbschema_tPostgresqlOutput_7 ==null || dbschema_tPostgresqlOutput_7.trim().length() ==0) && defaultSchema_tPostgresqlOutput_7.equals(schema_tPostgresqlOutput_7)))) {
                                        whetherExist_tPostgresqlOutput_7 = true;
                                        break;
                                    }
                                }
                                rsTable_tPostgresqlOutput_7.close();
                                if(whetherExist_tPostgresqlOutput_7) {
                                    java.sql.Statement stmtDrop_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.createStatement();
                                    stmtDrop_tPostgresqlOutput_7.execute("DROP TABLE \"" + tableName_tPostgresqlOutput_7 + "\"" );
                                    stmtDrop_tPostgresqlOutput_7.close();
                                }
                                java.sql.Statement stmtCreate_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.createStatement();
                                    stmtCreate_tPostgresqlOutput_7.execute("CREATE TABLE \"" + tableName_tPostgresqlOutput_7 + "\"(\"reisdocumentcode\" VARCHAR(2)   not null ,\"reisdocumentomschrijving\" VARCHAR(80)   not null ,primary key(\"reisdocumentcode\"))");
                                stmtCreate_tPostgresqlOutput_7.close();
	    String insert_tPostgresqlOutput_7 = "INSERT INTO \"" + tableName_tPostgresqlOutput_7 + "\" (\"reisdocumentcode\",\"reisdocumentomschrijving\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.prepareStatement(insert_tPostgresqlOutput_7);
	    

 



/**
 * [tPostgresqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_nederlandse_reisdocumenten" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_7 = 0;
		
    	class BytesLimit65535_tMap_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_7().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_nederlandse_reisdocumentenStruct ldf_nederlandse_reisdocumenten_tmp = new ldf_nederlandse_reisdocumentenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tAS400Input_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_7", false);
		start_Hash.put("tAS400Input_7", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_7";

	
		int tos_count_tAS400Input_7 = 0;
		
    	class BytesLimit65535_tAS400Input_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_7().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_7 = 0;
		    java.sql.Connection conn_tAS400Input_7 = null;
				String driverClass_tAS400Input_7 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_7);
			   	String dbUser_tAS400Input_7 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_7 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_7 = decryptedPassword_tAS400Input_7;
		        
				  
				String url_tAS400Input_7 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_7 = java.sql.DriverManager.getConnection(url_tAS400Input_7,dbUser_tAS400Input_7,dbPwd_tAS400Input_7);
		        
		    
			java.sql.Statement stmt_tAS400Input_7 = conn_tAS400Input_7.createStatement();

		    String dbquery_tAS400Input_7 = "select\n rtrim(ReisdocumentCode) as ReisdocumentCode,\n rtrim(ReisdocumentOmschrijving) as ReisdocumentOmschrijving\n  from bzsnrdt00";
			

                       globalMap.put("tAS400Input_7_QUERY",dbquery_tAS400Input_7);

		    java.sql.ResultSet rs_tAS400Input_7 = null;
		try{
		    rs_tAS400Input_7 = stmt_tAS400Input_7.executeQuery(dbquery_tAS400Input_7);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_7 = rs_tAS400Input_7.getMetaData();
		    int colQtyInRs_tAS400Input_7 = rsmd_tAS400Input_7.getColumnCount();

		    String tmpContent_tAS400Input_7 = null;
		    
		    
		    while (rs_tAS400Input_7.next()) {
		        nb_line_tAS400Input_7++;
		        
							if(colQtyInRs_tAS400Input_7 < 1) {
								cipers_nederlandse_reisdocumenten.REISDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_nederlandse_reisdocumenten.REISDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_7, 1, false);
		                    }
							if(colQtyInRs_tAS400Input_7 < 2) {
								cipers_nederlandse_reisdocumenten.REISDOCUMENTOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_nederlandse_reisdocumenten.REISDOCUMENTOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_7, 2, false);
		                    }
					



 



/**
 * [tAS400Input_7 begin ] stop
 */
	
	/**
	 * [tAS400Input_7 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_7";

	

 


	tos_count_tAS400Input_7++;

/**
 * [tAS400Input_7 main ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

			//cipers_nederlandse_reisdocumenten
			//cipers_nederlandse_reisdocumenten


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_nederlandse_reisdocumenten"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

ldf_nederlandse_reisdocumenten = null;


// # Output table : 'ldf_nederlandse_reisdocumenten'
ldf_nederlandse_reisdocumenten_tmp.reisdocumentcode = cipers_nederlandse_reisdocumenten.REISDOCUMENTCODE;
ldf_nederlandse_reisdocumenten_tmp.reisdocumentomschrijving = cipers_nederlandse_reisdocumenten.REISDOCUMENTOMSCHRIJVING;
ldf_nederlandse_reisdocumenten = ldf_nederlandse_reisdocumenten_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
// Start of branch "ldf_nederlandse_reisdocumenten"
if(ldf_nederlandse_reisdocumenten != null) { 



	
	/**
	 * [tPostgresqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

			//ldf_nederlandse_reisdocumenten
			//ldf_nederlandse_reisdocumenten


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_nederlandse_reisdocumenten"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_7 = false;
                    if(ldf_nederlandse_reisdocumenten.reisdocumentcode == null) {
pstmt_tPostgresqlOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_7.setString(1, ldf_nederlandse_reisdocumenten.reisdocumentcode);
}

                    if(ldf_nederlandse_reisdocumenten.reisdocumentomschrijving == null) {
pstmt_tPostgresqlOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_7.setString(2, ldf_nederlandse_reisdocumenten.reisdocumentomschrijving);
}

			
    		pstmt_tPostgresqlOutput_7.addBatch();
    		nb_line_tPostgresqlOutput_7++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_7++;
    		  
            if(!whetherReject_tPostgresqlOutput_7) {
            }
    			if ((batchSize_tPostgresqlOutput_7 > 0) && (batchSize_tPostgresqlOutput_7 <= batchSizeCounter_tPostgresqlOutput_7)) {
                try {
						int countSum_tPostgresqlOutput_7 = 0;
						    
						for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
				    	
				    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_7 = 0;
					for(int countEach_tPostgresqlOutput_7: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
					}
					
			    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_7++;
                if(commitEvery_tPostgresqlOutput_7 <= commitCounter_tPostgresqlOutput_7) {
                if ((batchSize_tPostgresqlOutput_7 > 0) && (batchSizeCounter_tPostgresqlOutput_7 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_7 = 0;
                		    
						for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
            	    	
                batchSizeCounter_tPostgresqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_7 = 0;
						for(int countEach_tPostgresqlOutput_7: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
						
				    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_7.commit();
                	
                	commitCounter_tPostgresqlOutput_7=0;
                }

 


	tos_count_tPostgresqlOutput_7++;

/**
 * [tPostgresqlOutput_7 main ] stop
 */

} // End of branch "ldf_nederlandse_reisdocumenten"







	
	/**
	 * [tAS400Input_7 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_7";

	

	}
}finally{
	stmt_tAS400Input_7.close();

		if(conn_tAS400Input_7 != null && !conn_tAS400Input_7.isClosed()) {
			
			conn_tAS400Input_7.close();
			
		}
}
globalMap.put("tAS400Input_7_NB_LINE",nb_line_tAS400Input_7);

 

ok_Hash.put("tAS400Input_7", true);
end_Hash.put("tAS400Input_7", System.currentTimeMillis());




/**
 * [tAS400Input_7 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_nederlandse_reisdocumenten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



	    try {
				int countSum_tPostgresqlOutput_7 = 0;
				if (pstmt_tPostgresqlOutput_7 != null && batchSizeCounter_tPostgresqlOutput_7 > 0) {
						
					for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
						countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_7 = 0;
			for(int countEach_tPostgresqlOutput_7: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
			}
			
	    		insertedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_7 != null) {
            pstmt_tPostgresqlOutput_7.close();
        }

			
			conn_tPostgresqlOutput_7.commit();
			
		
    	conn_tPostgresqlOutput_7 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_7", true);
    	

	nb_line_deleted_tPostgresqlOutput_7=nb_line_deleted_tPostgresqlOutput_7+ deletedCount_tPostgresqlOutput_7;
	nb_line_update_tPostgresqlOutput_7=nb_line_update_tPostgresqlOutput_7 + updatedCount_tPostgresqlOutput_7;
	nb_line_inserted_tPostgresqlOutput_7=nb_line_inserted_tPostgresqlOutput_7 + insertedCount_tPostgresqlOutput_7;
	nb_line_rejected_tPostgresqlOutput_7=nb_line_rejected_tPostgresqlOutput_7 + rejectedCount_tPostgresqlOutput_7;
	
        globalMap.put("tPostgresqlOutput_7_NB_LINE",nb_line_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_7);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_nederlandse_reisdocumenten"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_7", true);
end_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tCreateTable_1Process(globalMap);



/**
 * [tPostgresqlOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAS400Input_7 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_7";

	

 



/**
 * [tAS400Input_7 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_7")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_7")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_7")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_7) {
					String errorMessage_tPostgresqlOutput_7 = "failed to close the connection in tPostgresqlOutput_7 :" + sqlEx_tPostgresqlOutput_7.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_7);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_7_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_1", false);
		start_Hash.put("tCreateTable_1", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_1";

	
		int tos_count_tCreateTable_1 = 0;
		
    	class BytesLimit65535_tCreateTable_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_1().limitLog4jByte();

 



/**
 * [tCreateTable_1 begin ] stop
 */
	
	/**
	 * [tCreateTable_1 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

    try{
            String driverClass_tCreateTable_1="org.postgresql.Driver";
String url_tCreateTable_1="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_1="mks_owner";

        String tableName_tCreateTable_1 = "ibz_cip_geslachtsaanduidingen";
String dbSchema_tCreateTable_1 = "ldf";
if(dbSchema_tCreateTable_1 != null && dbSchema_tCreateTable_1.trim().length() != 0) {tableName_tCreateTable_1 = dbSchema_tCreateTable_1 + "\".\"" + tableName_tCreateTable_1;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_1= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_1= java.sql.DriverManager.getConnection(url_tCreateTable_1,dbUser_tCreateTable_1, decryptedPassword_tCreateTable_1);

            boolean whetherExist_tCreateTable_1 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_1 = conn_tCreateTable_1.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_1 = dbMetaData_tCreateTable_1.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_1 = "public";
                if(dbSchema_tCreateTable_1 == null || dbSchema_tCreateTable_1.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_1 = stmtSchema_tCreateTable_1.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_1.next()){
                                defaultSchema_tCreateTable_1 = rsSchema_tCreateTable_1.getString("current_schema");
                	}
                	rsSchema_tCreateTable_1.close();
                	stmtSchema_tCreateTable_1.close();
                }
                while(rsTable_tCreateTable_1.next()) {
                    String table_tCreateTable_1 = rsTable_tCreateTable_1.getString("TABLE_NAME");
                    String schema_tCreateTable_1 = rsTable_tCreateTable_1.getString("TABLE_SCHEM");
                    if(table_tCreateTable_1.equals("ibz_cip_geslachtsaanduidingen") 
                        && (schema_tCreateTable_1.equals(dbSchema_tCreateTable_1) || ((dbSchema_tCreateTable_1 ==null || dbSchema_tCreateTable_1.trim().length() ==0) && defaultSchema_tCreateTable_1.equals(schema_tCreateTable_1)))) {
                        whetherExist_tCreateTable_1 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_1.close();
                if(whetherExist_tCreateTable_1) {
                    java.sql.Statement stmtDrop_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                    stmtDrop_tCreateTable_1.execute("DROP TABLE \"" + tableName_tCreateTable_1 + "\"");
                }
                java.sql.Statement stmt_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                stmt_tCreateTable_1.execute("CREATE TABLE \"" + tableName_tCreateTable_1 + "\"(\"geslachtsaanduidingcode\" VARCHAR(1)   not null ,\"geslachtsaanduidingomschrijving\" VARCHAR(10)   not null ,primary key(\"geslachtsaanduidingcode\"))"); 
	            
        if(conn_tCreateTable_1 != null && !conn_tCreateTable_1.isClosed()) {
conn_tCreateTable_1.close();
}

        globalMap.put("tCreateTable_1_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_1 + "\"(\"geslachtsaanduidingcode\" VARCHAR(1)   not null ,\"geslachtsaanduidingomschrijving\" VARCHAR(10)   not null ,primary key(\"geslachtsaanduidingcode\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_1_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_1++;

/**
 * [tCreateTable_1 main ] stop
 */
	
	/**
	 * [tCreateTable_1 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 

ok_Hash.put("tCreateTable_1", true);
end_Hash.put("tCreateTable_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tPostgresqlRow_1Process(globalMap);



/**
 * [tCreateTable_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_1 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 



/**
 * [tCreateTable_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostgresqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlRow_1", false);
		start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlRow_1";

	
		int tos_count_tPostgresqlRow_1 = 0;
		
    	class BytesLimit65535_tPostgresqlRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlRow_1().limitLog4jByte();

	java.sql.Connection conn_tPostgresqlRow_1 = null;
	String query_tPostgresqlRow_1 = "";
	boolean whetherReject_tPostgresqlRow_1 = false;
			String driverClass_tPostgresqlRow_1 = "org.postgresql.Driver";
		    java.lang.Class.forName(driverClass_tPostgresqlRow_1);
		
			String url_tPostgresqlRow_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
		
					String dbUser_tPostgresqlRow_1 = "mks_owner";
	        
            		
            		
            		 
	final String decryptedPassword_tPostgresqlRow_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
        		   	
        	        String dbPwd_tPostgresqlRow_1 = decryptedPassword_tPostgresqlRow_1;
	        
					
			conn_tPostgresqlRow_1 = java.sql.DriverManager.getConnection(url_tPostgresqlRow_1,dbUser_tPostgresqlRow_1,dbPwd_tPostgresqlRow_1);
		
					if(conn_tPostgresqlRow_1.getAutoCommit()) {
						
				conn_tPostgresqlRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tPostgresqlRow_1 = 10000;
					int commitCounter_tPostgresqlRow_1 = 0;
				
		java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1.createStatement();
	


 



/**
 * [tPostgresqlRow_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

query_tPostgresqlRow_1 = "insert\ninto ibz_cip_geslachtsaanduidingen \n(geslachtsaanduidingcode, geslachtsaanduidingomschrijving) \nvalues \n('M', 'Man'), ('V', 'Vrouw'), ('O', 'Onbekend')";
whetherReject_tPostgresqlRow_1 = false;
globalMap.put("tPostgresqlRow_1_QUERY",query_tPostgresqlRow_1);
try {
		stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tPostgresqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tPostgresqlRow_1++;
		if(commitEvery_tPostgresqlRow_1 <= commitCounter_tPostgresqlRow_1) {
			
			conn_tPostgresqlRow_1.commit();
			
			commitCounter_tPostgresqlRow_1=0;
		}
		

 


	tos_count_tPostgresqlRow_1++;

/**
 * [tPostgresqlRow_1 main ] stop
 */
	
	/**
	 * [tPostgresqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

	
	stmt_tPostgresqlRow_1.close();	
		if(commitEvery_tPostgresqlRow_1>commitCounter_tPostgresqlRow_1){

			
			conn_tPostgresqlRow_1.commit();
			
	
			commitCounter_tPostgresqlRow_1=0;
	
		}
			conn_tPostgresqlRow_1.close();
			

 

ok_Hash.put("tPostgresqlRow_1", true);
end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());




/**
 * [tPostgresqlRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlRow_1";

	

 



/**
 * [tPostgresqlRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_tabellen ibz_cipers_fill_ldf_tabellenClass = new ibz_cipers_fill_ldf_tabellen();

        int exitCode = ibz_cipers_fill_ldf_tabellenClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_tabellen.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_tabellen_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_tabellen");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     292289 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:49 CET
 ************************************************************************************************/