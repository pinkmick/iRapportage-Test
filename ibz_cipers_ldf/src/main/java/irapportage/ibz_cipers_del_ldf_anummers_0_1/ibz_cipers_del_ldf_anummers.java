// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_del_ldf_anummers_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_del_ldf_anummers Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_del_ldf_anummers implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_del_ldf_anummers";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_del_ldf_anummers.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_del_ldf_anummers.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlInput_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_persoon_keyStruct implements routines.system.IPersistableRow<ldf_anr_persoon_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal prsburgerservicenummer;

				public BigDecimal getPrsburgerservicenummer () {
					return this.prsburgerservicenummer;
				}
				
			    public String prsvoornamen;

				public String getPrsvoornamen () {
					return this.prsvoornamen;
				}
				
			    public String prseerstevoornaam;

				public String getPrseerstevoornaam () {
					return this.prseerstevoornaam;
				}
				
			    public String prsvoorletters;

				public String getPrsvoorletters () {
					return this.prsvoorletters;
				}
				
			    public String prsadellijketitelcode;

				public String getPrsadellijketitelcode () {
					return this.prsadellijketitelcode;
				}
				
			    public String prsadellijketitelomschrijving;

				public String getPrsadellijketitelomschrijving () {
					return this.prsadellijketitelomschrijving;
				}
				
			    public String prsvoorvoegselgeslachtsnaam;

				public String getPrsvoorvoegselgeslachtsnaam () {
					return this.prsvoorvoegselgeslachtsnaam;
				}
				
			    public String prsgeslachtsnaam;

				public String getPrsgeslachtsnaam () {
					return this.prsgeslachtsnaam;
				}
				
			    public String prsnaamopgemaakt;

				public String getPrsnaamopgemaakt () {
					return this.prsnaamopgemaakt;
				}
				
			    public java.util.Date prsgeboortedatum;

				public java.util.Date getPrsgeboortedatum () {
					return this.prsgeboortedatum;
				}
				
			    public String prsgeboortedatumindicator;

				public String getPrsgeboortedatumindicator () {
					return this.prsgeboortedatumindicator;
				}
				
			    public String prsgeboorteplaatscode;

				public String getPrsgeboorteplaatscode () {
					return this.prsgeboorteplaatscode;
				}
				
			    public String prsgeboorteplaatsomschrijving;

				public String getPrsgeboorteplaatsomschrijving () {
					return this.prsgeboorteplaatsomschrijving;
				}
				
			    public String prsgeboortelandcode;

				public String getPrsgeboortelandcode () {
					return this.prsgeboortelandcode;
				}
				
			    public String prsgeboortelandomschrijving;

				public String getPrsgeboortelandomschrijving () {
					return this.prsgeboortelandomschrijving;
				}
				
			    public String prsgeslachtsaanduidingcode;

				public String getPrsgeslachtsaanduidingcode () {
					return this.prsgeslachtsaanduidingcode;
				}
				
			    public String prsgeslachtsaanduidingomschrijving;

				public String getPrsgeslachtsaanduidingomschrijving () {
					return this.prsgeslachtsaanduidingomschrijving;
				}
				
			    public String prsaanduidingnaamgebruik;

				public String getPrsaanduidingnaamgebruik () {
					return this.prsaanduidingnaamgebruik;
				}
				
			    public String prsregistergemeenteaktecode;

				public String getPrsregistergemeenteaktecode () {
					return this.prsregistergemeenteaktecode;
				}
				
			    public String prsregistergemeenteakteomschrijving;

				public String getPrsregistergemeenteakteomschrijving () {
					return this.prsregistergemeenteakteomschrijving;
				}
				
			    public String prsaktenummer;

				public String getPrsaktenummer () {
					return this.prsaktenummer;
				}
				
			    public String prsgemeentedocumentcode;

				public String getPrsgemeentedocumentcode () {
					return this.prsgemeentedocumentcode;
				}
				
			    public String prsgemeentedocumentomschrijving;

				public String getPrsgemeentedocumentomschrijving () {
					return this.prsgemeentedocumentomschrijving;
				}
				
			    public java.util.Date prsdatumdocument;

				public java.util.Date getPrsdatumdocument () {
					return this.prsdatumdocument;
				}
				
			    public String prsdatumdocumentindicator;

				public String getPrsdatumdocumentindicator () {
					return this.prsdatumdocumentindicator;
				}
				
			    public String prsbeschrijvingdocument;

				public String getPrsbeschrijvingdocument () {
					return this.prsbeschrijvingdocument;
				}
				
			    public BigDecimal prsaanduidinggegevensonderzoek;

				public BigDecimal getPrsaanduidinggegevensonderzoek () {
					return this.prsaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date prsdatumingangonderzoek;

				public java.util.Date getPrsdatumingangonderzoek () {
					return this.prsdatumingangonderzoek;
				}
				
			    public String prsdatumingangonderzoekindicator;

				public String getPrsdatumingangonderzoekindicator () {
					return this.prsdatumingangonderzoekindicator;
				}
				
			    public java.util.Date prsdatumeindeonderzoek;

				public java.util.Date getPrsdatumeindeonderzoek () {
					return this.prsdatumeindeonderzoek;
				}
				
			    public String prsdatumeindeonderzoekindicator;

				public String getPrsdatumeindeonderzoekindicator () {
					return this.prsdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date prsingangsdatumgeldigheid;

				public java.util.Date getPrsingangsdatumgeldigheid () {
					return this.prsingangsdatumgeldigheid;
				}
				
			    public String prsingangsdatumgeldigheidindicator;

				public String getPrsingangsdatumgeldigheidindicator () {
					return this.prsingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date prsdatumvanopneming;

				public java.util.Date getPrsdatumvanopneming () {
					return this.prsdatumvanopneming;
				}
				
			    public String prsdatumvanopnemingindicator;

				public String getPrsdatumvanopnemingindicator () {
					return this.prsdatumvanopnemingindicator;
				}
				
			    public BigDecimal prsstatuspersoon;

				public BigDecimal getPrsstatuspersoon () {
					return this.prsstatuspersoon;
				}
				
			    public BigDecimal prsrijkskodenationaliteit;

				public BigDecimal getPrsrijkskodenationaliteit () {
					return this.prsrijkskodenationaliteit;
				}
				
			    public BigDecimal prsgezinsverhouding;

				public BigDecimal getPrsgezinsverhouding () {
					return this.prsgezinsverhouding;
				}
				
			    public BigDecimal prsgezinssterkte;

				public BigDecimal getPrsgezinssterkte () {
					return this.prsgezinssterkte;
				}
				
			    public BigDecimal prsanummergezinshoofd;

				public BigDecimal getPrsanummergezinshoofd () {
					return this.prsanummergezinshoofd;
				}
				
			    public String prsburgerlijkestaat;

				public String getPrsburgerlijkestaat () {
					return this.prsburgerlijkestaat;
				}
				
			    public String prsnaamswijzigingindicatie;

				public String getPrsnaamswijzigingindicatie () {
					return this.prsnaamswijzigingindicatie;
				}
				
			    public java.util.Date prsdatumadreshoudingaaneengesloten;

				public java.util.Date getPrsdatumadreshoudingaaneengesloten () {
					return this.prsdatumadreshoudingaaneengesloten;
				}
				
			    public String prsdatumadreshoudingaaneengeslotenindicator;

				public String getPrsdatumadreshoudingaaneengeslotenindicator () {
					return this.prsdatumadreshoudingaaneengeslotenindicator;
				}
				
			    public BigDecimal ou1anummer;

				public BigDecimal getOu1anummer () {
					return this.ou1anummer;
				}
				
			    public BigDecimal ou1burgerservicenummer;

				public BigDecimal getOu1burgerservicenummer () {
					return this.ou1burgerservicenummer;
				}
				
			    public String ou1voornamen;

				public String getOu1voornamen () {
					return this.ou1voornamen;
				}
				
			    public String ou1voorletters;

				public String getOu1voorletters () {
					return this.ou1voorletters;
				}
				
			    public String ou1adellijketitelcode;

				public String getOu1adellijketitelcode () {
					return this.ou1adellijketitelcode;
				}
				
			    public String ou1adellijketitelomschrijving;

				public String getOu1adellijketitelomschrijving () {
					return this.ou1adellijketitelomschrijving;
				}
				
			    public String ou1voorvoegselgeslachtsnaam;

				public String getOu1voorvoegselgeslachtsnaam () {
					return this.ou1voorvoegselgeslachtsnaam;
				}
				
			    public String ou1geslachtsnaam;

				public String getOu1geslachtsnaam () {
					return this.ou1geslachtsnaam;
				}
				
			    public String ou1naamopgemaakt;

				public String getOu1naamopgemaakt () {
					return this.ou1naamopgemaakt;
				}
				
			    public java.util.Date ou1geboortedatum;

				public java.util.Date getOu1geboortedatum () {
					return this.ou1geboortedatum;
				}
				
			    public String ou1geboortedatumindicator;

				public String getOu1geboortedatumindicator () {
					return this.ou1geboortedatumindicator;
				}
				
			    public String ou1geboorteplaatscode;

				public String getOu1geboorteplaatscode () {
					return this.ou1geboorteplaatscode;
				}
				
			    public String ou1geboorteplaatsomschrijving;

				public String getOu1geboorteplaatsomschrijving () {
					return this.ou1geboorteplaatsomschrijving;
				}
				
			    public String ou1geboortelandcode;

				public String getOu1geboortelandcode () {
					return this.ou1geboortelandcode;
				}
				
			    public String ou1geboortelandomschrijving;

				public String getOu1geboortelandomschrijving () {
					return this.ou1geboortelandomschrijving;
				}
				
			    public String ou1geslachtsaanduidingcode;

				public String getOu1geslachtsaanduidingcode () {
					return this.ou1geslachtsaanduidingcode;
				}
				
			    public String ou1geslachtsaanduidingomschrijving;

				public String getOu1geslachtsaanduidingomschrijving () {
					return this.ou1geslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date ou1datumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu1datumingangfamilierechtelijkebetrekking () {
					return this.ou1datumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou1datumingangfamilierechtelijkebetrekkingindicator;

				public String getOu1datumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou1datumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public String ou1registergemeenteaktecode;

				public String getOu1registergemeenteaktecode () {
					return this.ou1registergemeenteaktecode;
				}
				
			    public String ou1registergemeenteakteomschrijving;

				public String getOu1registergemeenteakteomschrijving () {
					return this.ou1registergemeenteakteomschrijving;
				}
				
			    public String ou1aktenummer;

				public String getOu1aktenummer () {
					return this.ou1aktenummer;
				}
				
			    public String ou1gemeentedocumentcode;

				public String getOu1gemeentedocumentcode () {
					return this.ou1gemeentedocumentcode;
				}
				
			    public String ou1gemeentedocumentomschrijving;

				public String getOu1gemeentedocumentomschrijving () {
					return this.ou1gemeentedocumentomschrijving;
				}
				
			    public java.util.Date ou1datumdocument;

				public java.util.Date getOu1datumdocument () {
					return this.ou1datumdocument;
				}
				
			    public String ou1datumdocumentindicator;

				public String getOu1datumdocumentindicator () {
					return this.ou1datumdocumentindicator;
				}
				
			    public String ou1beschrijvingdocument;

				public String getOu1beschrijvingdocument () {
					return this.ou1beschrijvingdocument;
				}
				
			    public BigDecimal ou1aanduidinggegevensonderzoek;

				public BigDecimal getOu1aanduidinggegevensonderzoek () {
					return this.ou1aanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ou1datumingangonderzoek;

				public java.util.Date getOu1datumingangonderzoek () {
					return this.ou1datumingangonderzoek;
				}
				
			    public String ou1datumingangonderzoekindicator;

				public String getOu1datumingangonderzoekindicator () {
					return this.ou1datumingangonderzoekindicator;
				}
				
			    public java.util.Date ou1datumeindeonderzoek;

				public java.util.Date getOu1datumeindeonderzoek () {
					return this.ou1datumeindeonderzoek;
				}
				
			    public String ou1datumeindeonderzoekindicator;

				public String getOu1datumeindeonderzoekindicator () {
					return this.ou1datumeindeonderzoekindicator;
				}
				
			    public java.util.Date ou1ingangsdatumgeldigheid;

				public java.util.Date getOu1ingangsdatumgeldigheid () {
					return this.ou1ingangsdatumgeldigheid;
				}
				
			    public String ou1ingangsdatumgeldigheidindicator;

				public String getOu1ingangsdatumgeldigheidindicator () {
					return this.ou1ingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou1datumvanopneming;

				public java.util.Date getOu1datumvanopneming () {
					return this.ou1datumvanopneming;
				}
				
			    public String ou1datumvanopnemingindicator;

				public String getOu1datumvanopnemingindicator () {
					return this.ou1datumvanopnemingindicator;
				}
				
			    public BigDecimal ou2anummer;

				public BigDecimal getOu2anummer () {
					return this.ou2anummer;
				}
				
			    public BigDecimal ou2burgerservicenummer;

				public BigDecimal getOu2burgerservicenummer () {
					return this.ou2burgerservicenummer;
				}
				
			    public String ou2voornamen;

				public String getOu2voornamen () {
					return this.ou2voornamen;
				}
				
			    public String ou2voorletters;

				public String getOu2voorletters () {
					return this.ou2voorletters;
				}
				
			    public String ou2adellijketitelcode;

				public String getOu2adellijketitelcode () {
					return this.ou2adellijketitelcode;
				}
				
			    public String ou2adellijketitelomschrijving;

				public String getOu2adellijketitelomschrijving () {
					return this.ou2adellijketitelomschrijving;
				}
				
			    public String ou2voorvoegselgeslachtsnaam;

				public String getOu2voorvoegselgeslachtsnaam () {
					return this.ou2voorvoegselgeslachtsnaam;
				}
				
			    public String ou2geslachtsnaam;

				public String getOu2geslachtsnaam () {
					return this.ou2geslachtsnaam;
				}
				
			    public String ou2naamopgemaakt;

				public String getOu2naamopgemaakt () {
					return this.ou2naamopgemaakt;
				}
				
			    public java.util.Date ou2geboortedatum;

				public java.util.Date getOu2geboortedatum () {
					return this.ou2geboortedatum;
				}
				
			    public String ou2geboortedatumindicator;

				public String getOu2geboortedatumindicator () {
					return this.ou2geboortedatumindicator;
				}
				
			    public String ou2geboorteplaatscode;

				public String getOu2geboorteplaatscode () {
					return this.ou2geboorteplaatscode;
				}
				
			    public String ou2geboorteplaatsomschrijving;

				public String getOu2geboorteplaatsomschrijving () {
					return this.ou2geboorteplaatsomschrijving;
				}
				
			    public String ou2geboortelandcode;

				public String getOu2geboortelandcode () {
					return this.ou2geboortelandcode;
				}
				
			    public String ou2geboortelandomschrijving;

				public String getOu2geboortelandomschrijving () {
					return this.ou2geboortelandomschrijving;
				}
				
			    public String ou2geslachtsaanduidingcode;

				public String getOu2geslachtsaanduidingcode () {
					return this.ou2geslachtsaanduidingcode;
				}
				
			    public String ou2geslachtsaanduidingomschrijving;

				public String getOu2geslachtsaanduidingomschrijving () {
					return this.ou2geslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date ou2datumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu2datumingangfamilierechtelijkebetrekking () {
					return this.ou2datumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou2datumingangfamilierechtelijkebetrekkingindicator;

				public String getOu2datumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou2datumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public String ou2registergemeenteaktecode;

				public String getOu2registergemeenteaktecode () {
					return this.ou2registergemeenteaktecode;
				}
				
			    public String ou2registergemeenteakteomschrijving;

				public String getOu2registergemeenteakteomschrijving () {
					return this.ou2registergemeenteakteomschrijving;
				}
				
			    public String ou2aktenummer;

				public String getOu2aktenummer () {
					return this.ou2aktenummer;
				}
				
			    public String ou2gemeentedocumentcode;

				public String getOu2gemeentedocumentcode () {
					return this.ou2gemeentedocumentcode;
				}
				
			    public String ou2gemeentedocumentomschrijving;

				public String getOu2gemeentedocumentomschrijving () {
					return this.ou2gemeentedocumentomschrijving;
				}
				
			    public java.util.Date ou2datumdocument;

				public java.util.Date getOu2datumdocument () {
					return this.ou2datumdocument;
				}
				
			    public String ou2datumdocumentindicator;

				public String getOu2datumdocumentindicator () {
					return this.ou2datumdocumentindicator;
				}
				
			    public String ou2beschrijvingdocument;

				public String getOu2beschrijvingdocument () {
					return this.ou2beschrijvingdocument;
				}
				
			    public BigDecimal ou2aanduidinggegevensonderzoek;

				public BigDecimal getOu2aanduidinggegevensonderzoek () {
					return this.ou2aanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ou2datumingangonderzoek;

				public java.util.Date getOu2datumingangonderzoek () {
					return this.ou2datumingangonderzoek;
				}
				
			    public String ou2datumingangonderzoekindicator;

				public String getOu2datumingangonderzoekindicator () {
					return this.ou2datumingangonderzoekindicator;
				}
				
			    public java.util.Date ou2datumeindeonderzoek;

				public java.util.Date getOu2datumeindeonderzoek () {
					return this.ou2datumeindeonderzoek;
				}
				
			    public String ou2datumeindeonderzoekindicator;

				public String getOu2datumeindeonderzoekindicator () {
					return this.ou2datumeindeonderzoekindicator;
				}
				
			    public java.util.Date ou2ingangsdatumgeldigheid;

				public java.util.Date getOu2ingangsdatumgeldigheid () {
					return this.ou2ingangsdatumgeldigheid;
				}
				
			    public String ou2ingangsdatumgeldigheidindicator;

				public String getOu2ingangsdatumgeldigheidindicator () {
					return this.ou2ingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou2datumvanopneming;

				public java.util.Date getOu2datumvanopneming () {
					return this.ou2datumvanopneming;
				}
				
			    public String ou2datumvanopnemingindicator;

				public String getOu2datumvanopnemingindicator () {
					return this.ou2datumvanopnemingindicator;
				}
				
			    public java.util.Date ovldatumoverlijden;

				public java.util.Date getOvldatumoverlijden () {
					return this.ovldatumoverlijden;
				}
				
			    public String ovldatumoverlijdenindicator;

				public String getOvldatumoverlijdenindicator () {
					return this.ovldatumoverlijdenindicator;
				}
				
			    public String ovlplaatsoverlijdencode;

				public String getOvlplaatsoverlijdencode () {
					return this.ovlplaatsoverlijdencode;
				}
				
			    public String ovlplaatsoverlijdenomschrijving;

				public String getOvlplaatsoverlijdenomschrijving () {
					return this.ovlplaatsoverlijdenomschrijving;
				}
				
			    public String ovllandoverlijdencode;

				public String getOvllandoverlijdencode () {
					return this.ovllandoverlijdencode;
				}
				
			    public String ovllandoverlijdenomschrijving;

				public String getOvllandoverlijdenomschrijving () {
					return this.ovllandoverlijdenomschrijving;
				}
				
			    public BigDecimal ovlaanduidinggegevensonderzoek;

				public BigDecimal getOvlaanduidinggegevensonderzoek () {
					return this.ovlaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ovldatumingangonderzoek;

				public java.util.Date getOvldatumingangonderzoek () {
					return this.ovldatumingangonderzoek;
				}
				
			    public String ovldatumingangonderzoekindicator;

				public String getOvldatumingangonderzoekindicator () {
					return this.ovldatumingangonderzoekindicator;
				}
				
			    public java.util.Date ovldatumeindeonderzoek;

				public java.util.Date getOvldatumeindeonderzoek () {
					return this.ovldatumeindeonderzoek;
				}
				
			    public String ovldatumeindeonderzoekindicator;

				public String getOvldatumeindeonderzoekindicator () {
					return this.ovldatumeindeonderzoekindicator;
				}
				
			    public java.util.Date ovlingangsdatumgeldigheid;

				public java.util.Date getOvlingangsdatumgeldigheid () {
					return this.ovlingangsdatumgeldigheid;
				}
				
			    public String ovlingangsdatumgeldigheidindicator;

				public String getOvlingangsdatumgeldigheidindicator () {
					return this.ovlingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ovldatumvanopneming;

				public java.util.Date getOvldatumvanopneming () {
					return this.ovldatumvanopneming;
				}
				
			    public String ovldatumvanopnemingindicator;

				public String getOvldatumvanopnemingindicator () {
					return this.ovldatumvanopnemingindicator;
				}
				
			    public java.util.Date insdatumingangblokkeringpl;

				public java.util.Date getInsdatumingangblokkeringpl () {
					return this.insdatumingangblokkeringpl;
				}
				
			    public String insdatumingangblokkeringplindicator;

				public String getInsdatumingangblokkeringplindicator () {
					return this.insdatumingangblokkeringplindicator;
				}
				
			    public java.util.Date insdatumopschortingbijhouding;

				public java.util.Date getInsdatumopschortingbijhouding () {
					return this.insdatumopschortingbijhouding;
				}
				
			    public String insdatumopschortingbijhoudingindicator;

				public String getInsdatumopschortingbijhoudingindicator () {
					return this.insdatumopschortingbijhoudingindicator;
				}
				
			    public String insomschrijvingredenopschortingbijhouding;

				public String getInsomschrijvingredenopschortingbijhouding () {
					return this.insomschrijvingredenopschortingbijhouding;
				}
				
			    public java.util.Date insdatumeersteinschrijvinggba;

				public java.util.Date getInsdatumeersteinschrijvinggba () {
					return this.insdatumeersteinschrijvinggba;
				}
				
			    public String insdatumeersteinschrijvingindicator;

				public String getInsdatumeersteinschrijvingindicator () {
					return this.insdatumeersteinschrijvingindicator;
				}
				
			    public String insgemeentewaarpkzichbevindtcode;

				public String getInsgemeentewaarpkzichbevindtcode () {
					return this.insgemeentewaarpkzichbevindtcode;
				}
				
			    public String insgemeentewaarpkzichbevindtomschrijving;

				public String getInsgemeentewaarpkzichbevindtomschrijving () {
					return this.insgemeentewaarpkzichbevindtomschrijving;
				}
				
			    public String insindicatiegeheim;

				public String getInsindicatiegeheim () {
					return this.insindicatiegeheim;
				}
				
			    public BigDecimal insversienummer;

				public BigDecimal getInsversienummer () {
					return this.insversienummer;
				}
				
			    public String insdatumtijdstempel;

				public String getInsdatumtijdstempel () {
					return this.insdatumtijdstempel;
				}
				
			    public String inspkgegevensvolledigmeegeconverteerd;

				public String getInspkgegevensvolledigmeegeconverteerd () {
					return this.inspkgegevensvolledigmeegeconverteerd;
				}
				
			    public String vblgemeentevaninschrijvingcode;

				public String getVblgemeentevaninschrijvingcode () {
					return this.vblgemeentevaninschrijvingcode;
				}
				
			    public String vblgemeentevaninschrijvingomschrijving;

				public String getVblgemeentevaninschrijvingomschrijving () {
					return this.vblgemeentevaninschrijvingomschrijving;
				}
				
			    public java.util.Date vbldatuminschrijving;

				public java.util.Date getVbldatuminschrijving () {
					return this.vbldatuminschrijving;
				}
				
			    public String vbldatuminschrijvingindicator;

				public String getVbldatuminschrijvingindicator () {
					return this.vbldatuminschrijvingindicator;
				}
				
			    public String vblfunctieadres;

				public String getVblfunctieadres () {
					return this.vblfunctieadres;
				}
				
			    public String vblgemeentedeel;

				public String getVblgemeentedeel () {
					return this.vblgemeentedeel;
				}
				
			    public java.util.Date vbldatumaanvangadreshouding;

				public java.util.Date getVbldatumaanvangadreshouding () {
					return this.vbldatumaanvangadreshouding;
				}
				
			    public String vbldatumaanvangadreshoudingindicator;

				public String getVbldatumaanvangadreshoudingindicator () {
					return this.vbldatumaanvangadreshoudingindicator;
				}
				
			    public String vblstraatnaam;

				public String getVblstraatnaam () {
					return this.vblstraatnaam;
				}
				
			    public String vblnaamopenbareruimte;

				public String getVblnaamopenbareruimte () {
					return this.vblnaamopenbareruimte;
				}
				
			    public String vbladresopgemaakt;

				public String getVbladresopgemaakt () {
					return this.vbladresopgemaakt;
				}
				
			    public String vblwoonplaatsopgemaakt;

				public String getVblwoonplaatsopgemaakt () {
					return this.vblwoonplaatsopgemaakt;
				}
				
			    public BigDecimal vblhuisnummer;

				public BigDecimal getVblhuisnummer () {
					return this.vblhuisnummer;
				}
				
			    public String vblhuisletter;

				public String getVblhuisletter () {
					return this.vblhuisletter;
				}
				
			    public String vblhuisnummertoevoeging;

				public String getVblhuisnummertoevoeging () {
					return this.vblhuisnummertoevoeging;
				}
				
			    public String vblaanduidingbijhuisnummer;

				public String getVblaanduidingbijhuisnummer () {
					return this.vblaanduidingbijhuisnummer;
				}
				
			    public String vblpostcode;

				public String getVblpostcode () {
					return this.vblpostcode;
				}
				
			    public String vblwoonplaatsnaam;

				public String getVblwoonplaatsnaam () {
					return this.vblwoonplaatsnaam;
				}
				
			    public String vblidentificatiecodeverblijfplaats;

				public String getVblidentificatiecodeverblijfplaats () {
					return this.vblidentificatiecodeverblijfplaats;
				}
				
			    public String vblidentificatiecodenummeraanduiding;

				public String getVblidentificatiecodenummeraanduiding () {
					return this.vblidentificatiecodenummeraanduiding;
				}
				
			    public String vbllocatiebeschrijving;

				public String getVbllocatiebeschrijving () {
					return this.vbllocatiebeschrijving;
				}
				
			    public String vbllandadresbuitenlandcode;

				public String getVbllandadresbuitenlandcode () {
					return this.vbllandadresbuitenlandcode;
				}
				
			    public String vbllandadresbuitenlandomschrijving;

				public String getVbllandadresbuitenlandomschrijving () {
					return this.vbllandadresbuitenlandomschrijving;
				}
				
			    public java.util.Date vbldatumaanvangadresbuitenland;

				public java.util.Date getVbldatumaanvangadresbuitenland () {
					return this.vbldatumaanvangadresbuitenland;
				}
				
			    public String vbldatumaanvangadresbuitenlandindicator;

				public String getVbldatumaanvangadresbuitenlandindicator () {
					return this.vbldatumaanvangadresbuitenlandindicator;
				}
				
			    public String vblregel1adresbuitenland;

				public String getVblregel1adresbuitenland () {
					return this.vblregel1adresbuitenland;
				}
				
			    public String vblregel2adresbuitenland;

				public String getVblregel2adresbuitenland () {
					return this.vblregel2adresbuitenland;
				}
				
			    public String vblregel3adresbuitenland;

				public String getVblregel3adresbuitenland () {
					return this.vblregel3adresbuitenland;
				}
				
			    public String vbllandvanwaaringeschrevencode;

				public String getVbllandvanwaaringeschrevencode () {
					return this.vbllandvanwaaringeschrevencode;
				}
				
			    public String vbllandvanwaaringeschrevenomschrijving;

				public String getVbllandvanwaaringeschrevenomschrijving () {
					return this.vbllandvanwaaringeschrevenomschrijving;
				}
				
			    public java.util.Date vbldatumvestiginginnederland;

				public java.util.Date getVbldatumvestiginginnederland () {
					return this.vbldatumvestiginginnederland;
				}
				
			    public String vbldatumvestiginginnederlandindicator;

				public String getVbldatumvestiginginnederlandindicator () {
					return this.vbldatumvestiginginnederlandindicator;
				}
				
			    public String vblomschrijvingvanaangifteadreshouding;

				public String getVblomschrijvingvanaangifteadreshouding () {
					return this.vblomschrijvingvanaangifteadreshouding;
				}
				
			    public BigDecimal vblindicatiedocument;

				public BigDecimal getVblindicatiedocument () {
					return this.vblindicatiedocument;
				}
				
			    public BigDecimal vblaanduidinggegevensonderzoek;

				public BigDecimal getVblaanduidinggegevensonderzoek () {
					return this.vblaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vbldatumingangonderzoek;

				public java.util.Date getVbldatumingangonderzoek () {
					return this.vbldatumingangonderzoek;
				}
				
			    public String vbldatumingangonderzoekindicator;

				public String getVbldatumingangonderzoekindicator () {
					return this.vbldatumingangonderzoekindicator;
				}
				
			    public java.util.Date vbldatumeindeonderzoek;

				public java.util.Date getVbldatumeindeonderzoek () {
					return this.vbldatumeindeonderzoek;
				}
				
			    public String vbldatumeindeonderzoekindicator;

				public String getVbldatumeindeonderzoekindicator () {
					return this.vbldatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vblingangsdatumgeldigheid;

				public java.util.Date getVblingangsdatumgeldigheid () {
					return this.vblingangsdatumgeldigheid;
				}
				
			    public String vblingangsdatumgeldigheidindicator;

				public String getVblingangsdatumgeldigheidindicator () {
					return this.vblingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vbldatumvanopneming;

				public java.util.Date getVbldatumvanopneming () {
					return this.vbldatumvanopneming;
				}
				
			    public String vbldatumvanopnemingindicator;

				public String getVbldatumvanopnemingindicator () {
					return this.vbldatumvanopnemingindicator;
				}
				
			    public String vblsoortpandcode;

				public String getVblsoortpandcode () {
					return this.vblsoortpandcode;
				}
				
			    public String vblsoortpandomschrijving;

				public String getVblsoortpandomschrijving () {
					return this.vblsoortpandomschrijving;
				}
				
			    public String vblwijkcode;

				public String getVblwijkcode () {
					return this.vblwijkcode;
				}
				
			    public String vblwijkomschrijving;

				public String getVblwijkomschrijving () {
					return this.vblwijkomschrijving;
				}
				
			    public String vblplanalogischewijkcode;

				public String getVblplanalogischewijkcode () {
					return this.vblplanalogischewijkcode;
				}
				
			    public String vblplanalogischewijkomschrijving;

				public String getVblplanalogischewijkomschrijving () {
					return this.vblplanalogischewijkomschrijving;
				}
				
			    public BigDecimal vblanummerhoofdbewoner;

				public BigDecimal getVblanummerhoofdbewoner () {
					return this.vblanummerhoofdbewoner;
				}
				
			    public String vbtaanduidingverblijfstitelcode;

				public String getVbtaanduidingverblijfstitelcode () {
					return this.vbtaanduidingverblijfstitelcode;
				}
				
			    public String vbtverblijfstitelvervallen;

				public String getVbtverblijfstitelvervallen () {
					return this.vbtverblijfstitelvervallen;
				}
				
			    public String vbtaanduidingverblijfstitelomschrijving;

				public String getVbtaanduidingverblijfstitelomschrijving () {
					return this.vbtaanduidingverblijfstitelomschrijving;
				}
				
			    public java.util.Date vbtdatumeindeverblijfstitel;

				public java.util.Date getVbtdatumeindeverblijfstitel () {
					return this.vbtdatumeindeverblijfstitel;
				}
				
			    public String vbtdatumeindeverblijfstitelindicator;

				public String getVbtdatumeindeverblijfstitelindicator () {
					return this.vbtdatumeindeverblijfstitelindicator;
				}
				
			    public java.util.Date vbtingangsdatumverblijfstitel;

				public java.util.Date getVbtingangsdatumverblijfstitel () {
					return this.vbtingangsdatumverblijfstitel;
				}
				
			    public String vbtingangsdatumverblijfstitelindicator;

				public String getVbtingangsdatumverblijfstitelindicator () {
					return this.vbtingangsdatumverblijfstitelindicator;
				}
				
			    public BigDecimal vbtaanduidinggegevensonderzoek;

				public BigDecimal getVbtaanduidinggegevensonderzoek () {
					return this.vbtaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vbtdatumingangonderzoek;

				public java.util.Date getVbtdatumingangonderzoek () {
					return this.vbtdatumingangonderzoek;
				}
				
			    public String vbtdatumingangonderzoekindicator;

				public String getVbtdatumingangonderzoekindicator () {
					return this.vbtdatumingangonderzoekindicator;
				}
				
			    public java.util.Date vbtdatumeindeonderzoek;

				public java.util.Date getVbtdatumeindeonderzoek () {
					return this.vbtdatumeindeonderzoek;
				}
				
			    public String vbtdatumeindeonderzoekindicator;

				public String getVbtdatumeindeonderzoekindicator () {
					return this.vbtdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vbtingangsdatumgeldigheid;

				public java.util.Date getVbtingangsdatumgeldigheid () {
					return this.vbtingangsdatumgeldigheid;
				}
				
			    public String vbtingangsdatumgeldigheidindicator;

				public String getVbtingangsdatumgeldigheidindicator () {
					return this.vbtingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vbtdatumvanopneming;

				public java.util.Date getVbtdatumvanopneming () {
					return this.vbtdatumvanopneming;
				}
				
			    public String vbtdatumvanopnemingindicator;

				public String getVbtdatumvanopnemingindicator () {
					return this.vbtdatumvanopnemingindicator;
				}
				
			    public String gzvindicatiegezagminderjarige;

				public String getGzvindicatiegezagminderjarige () {
					return this.gzvindicatiegezagminderjarige;
				}
				
			    public String gzvindicatiecurateleregister;

				public String getGzvindicatiecurateleregister () {
					return this.gzvindicatiecurateleregister;
				}
				
			    public String gzvgemeentedocumentcode;

				public String getGzvgemeentedocumentcode () {
					return this.gzvgemeentedocumentcode;
				}
				
			    public String gzvgemeentedocumentomschrijving;

				public String getGzvgemeentedocumentomschrijving () {
					return this.gzvgemeentedocumentomschrijving;
				}
				
			    public java.util.Date gzvdatumdocument;

				public java.util.Date getGzvdatumdocument () {
					return this.gzvdatumdocument;
				}
				
			    public String gzvdatumdocumentindicator;

				public String getGzvdatumdocumentindicator () {
					return this.gzvdatumdocumentindicator;
				}
				
			    public String gzvbeschrijvingdocument;

				public String getGzvbeschrijvingdocument () {
					return this.gzvbeschrijvingdocument;
				}
				
			    public BigDecimal gzvaanduidinggegevensonderzoek;

				public BigDecimal getGzvaanduidinggegevensonderzoek () {
					return this.gzvaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date gzvdatumingangonderzoek;

				public java.util.Date getGzvdatumingangonderzoek () {
					return this.gzvdatumingangonderzoek;
				}
				
			    public String gzvdatumingangonderzoekindicator;

				public String getGzvdatumingangonderzoekindicator () {
					return this.gzvdatumingangonderzoekindicator;
				}
				
			    public java.util.Date gzvdatumeindeonderzoek;

				public java.util.Date getGzvdatumeindeonderzoek () {
					return this.gzvdatumeindeonderzoek;
				}
				
			    public String gzvdatumeindeonderzoekindicator;

				public String getGzvdatumeindeonderzoekindicator () {
					return this.gzvdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date gzvingangsdatumgeldigheid;

				public java.util.Date getGzvingangsdatumgeldigheid () {
					return this.gzvingangsdatumgeldigheid;
				}
				
			    public String gzvingangsdatumgeldigheidindicator;

				public String getGzvingangsdatumgeldigheidindicator () {
					return this.gzvingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date gzvdatumvanopneming;

				public java.util.Date getGzvdatumvanopneming () {
					return this.gzvdatumvanopneming;
				}
				
			    public String gzvdatumvanopnemingindicator;

				public String getGzvdatumvanopnemingindicator () {
					return this.gzvdatumvanopnemingindicator;
				}
				
			    public BigDecimal ksraanduidingeuropeeskiesrecht;

				public BigDecimal getKsraanduidingeuropeeskiesrecht () {
					return this.ksraanduidingeuropeeskiesrecht;
				}
				
			    public java.util.Date ksrdatumverzoekofmededelingeuropeeskiesrecht;

				public java.util.Date getKsrdatumverzoekofmededelingeuropeeskiesrecht () {
					return this.ksrdatumverzoekofmededelingeuropeeskiesrecht;
				}
				
			    public String ksrdatumverzoekofmededelingeuropeeskiesrechtindicator;

				public String getKsrdatumverzoekofmededelingeuropeeskiesrechtindicator () {
					return this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator;
				}
				
			    public java.util.Date ksreinddatumuitsluitingeuropeeskiesrecht;

				public java.util.Date getKsreinddatumuitsluitingeuropeeskiesrecht () {
					return this.ksreinddatumuitsluitingeuropeeskiesrecht;
				}
				
			    public String ksreinddatumuitsluitingeuropeeskiesrechtindicator;

				public String getKsreinddatumuitsluitingeuropeeskiesrechtindicator () {
					return this.ksreinddatumuitsluitingeuropeeskiesrechtindicator;
				}
				
			    public String ksraanduidinguitgeslotenkiesrecht;

				public String getKsraanduidinguitgeslotenkiesrecht () {
					return this.ksraanduidinguitgeslotenkiesrecht;
				}
				
			    public java.util.Date ksreinddatumuitsluitingkiesrecht;

				public java.util.Date getKsreinddatumuitsluitingkiesrecht () {
					return this.ksreinddatumuitsluitingkiesrecht;
				}
				
			    public String ksreinddatumuitsluitingkiesrechtindicator;

				public String getKsreinddatumuitsluitingkiesrechtindicator () {
					return this.ksreinddatumuitsluitingkiesrechtindicator;
				}
				
			    public String ksrgemeentedocumentcode;

				public String getKsrgemeentedocumentcode () {
					return this.ksrgemeentedocumentcode;
				}
				
			    public String ksrgemeentedocumentomschrijving;

				public String getKsrgemeentedocumentomschrijving () {
					return this.ksrgemeentedocumentomschrijving;
				}
				
			    public java.util.Date ksrdatumdocument;

				public java.util.Date getKsrdatumdocument () {
					return this.ksrdatumdocument;
				}
				
			    public String ksrdatumdocumentindicator;

				public String getKsrdatumdocumentindicator () {
					return this.ksrdatumdocumentindicator;
				}
				
			    public String ksrbeschrijvingdocument;

				public String getKsrbeschrijvingdocument () {
					return this.ksrbeschrijvingdocument;
				}
				
			    public String vwsgemeentevaninschrijvingcode;

				public String getVwsgemeentevaninschrijvingcode () {
					return this.vwsgemeentevaninschrijvingcode;
				}
				
			    public String vwsgemeentevaninschrijvingomschrijving;

				public String getVwsgemeentevaninschrijvingomschrijving () {
					return this.vwsgemeentevaninschrijvingomschrijving;
				}
				
			    public java.util.Date vwsdatuminschrijving;

				public java.util.Date getVwsdatuminschrijving () {
					return this.vwsdatuminschrijving;
				}
				
			    public String vwsdatuminschrijvingindicator;

				public String getVwsdatuminschrijvingindicator () {
					return this.vwsdatuminschrijvingindicator;
				}
				
			    public String vwsindicatiegeheim;

				public String getVwsindicatiegeheim () {
					return this.vwsindicatiegeheim;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_persoon_keyStruct other = (ldf_anr_persoon_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_persoon_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.prsburgerservicenummer = this.prsburgerservicenummer;
	            other.prsvoornamen = this.prsvoornamen;
	            other.prseerstevoornaam = this.prseerstevoornaam;
	            other.prsvoorletters = this.prsvoorletters;
	            other.prsadellijketitelcode = this.prsadellijketitelcode;
	            other.prsadellijketitelomschrijving = this.prsadellijketitelomschrijving;
	            other.prsvoorvoegselgeslachtsnaam = this.prsvoorvoegselgeslachtsnaam;
	            other.prsgeslachtsnaam = this.prsgeslachtsnaam;
	            other.prsnaamopgemaakt = this.prsnaamopgemaakt;
	            other.prsgeboortedatum = this.prsgeboortedatum;
	            other.prsgeboortedatumindicator = this.prsgeboortedatumindicator;
	            other.prsgeboorteplaatscode = this.prsgeboorteplaatscode;
	            other.prsgeboorteplaatsomschrijving = this.prsgeboorteplaatsomschrijving;
	            other.prsgeboortelandcode = this.prsgeboortelandcode;
	            other.prsgeboortelandomschrijving = this.prsgeboortelandomschrijving;
	            other.prsgeslachtsaanduidingcode = this.prsgeslachtsaanduidingcode;
	            other.prsgeslachtsaanduidingomschrijving = this.prsgeslachtsaanduidingomschrijving;
	            other.prsaanduidingnaamgebruik = this.prsaanduidingnaamgebruik;
	            other.prsregistergemeenteaktecode = this.prsregistergemeenteaktecode;
	            other.prsregistergemeenteakteomschrijving = this.prsregistergemeenteakteomschrijving;
	            other.prsaktenummer = this.prsaktenummer;
	            other.prsgemeentedocumentcode = this.prsgemeentedocumentcode;
	            other.prsgemeentedocumentomschrijving = this.prsgemeentedocumentomschrijving;
	            other.prsdatumdocument = this.prsdatumdocument;
	            other.prsdatumdocumentindicator = this.prsdatumdocumentindicator;
	            other.prsbeschrijvingdocument = this.prsbeschrijvingdocument;
	            other.prsaanduidinggegevensonderzoek = this.prsaanduidinggegevensonderzoek;
	            other.prsdatumingangonderzoek = this.prsdatumingangonderzoek;
	            other.prsdatumingangonderzoekindicator = this.prsdatumingangonderzoekindicator;
	            other.prsdatumeindeonderzoek = this.prsdatumeindeonderzoek;
	            other.prsdatumeindeonderzoekindicator = this.prsdatumeindeonderzoekindicator;
	            other.prsingangsdatumgeldigheid = this.prsingangsdatumgeldigheid;
	            other.prsingangsdatumgeldigheidindicator = this.prsingangsdatumgeldigheidindicator;
	            other.prsdatumvanopneming = this.prsdatumvanopneming;
	            other.prsdatumvanopnemingindicator = this.prsdatumvanopnemingindicator;
	            other.prsstatuspersoon = this.prsstatuspersoon;
	            other.prsrijkskodenationaliteit = this.prsrijkskodenationaliteit;
	            other.prsgezinsverhouding = this.prsgezinsverhouding;
	            other.prsgezinssterkte = this.prsgezinssterkte;
	            other.prsanummergezinshoofd = this.prsanummergezinshoofd;
	            other.prsburgerlijkestaat = this.prsburgerlijkestaat;
	            other.prsnaamswijzigingindicatie = this.prsnaamswijzigingindicatie;
	            other.prsdatumadreshoudingaaneengesloten = this.prsdatumadreshoudingaaneengesloten;
	            other.prsdatumadreshoudingaaneengeslotenindicator = this.prsdatumadreshoudingaaneengeslotenindicator;
	            other.ou1anummer = this.ou1anummer;
	            other.ou1burgerservicenummer = this.ou1burgerservicenummer;
	            other.ou1voornamen = this.ou1voornamen;
	            other.ou1voorletters = this.ou1voorletters;
	            other.ou1adellijketitelcode = this.ou1adellijketitelcode;
	            other.ou1adellijketitelomschrijving = this.ou1adellijketitelomschrijving;
	            other.ou1voorvoegselgeslachtsnaam = this.ou1voorvoegselgeslachtsnaam;
	            other.ou1geslachtsnaam = this.ou1geslachtsnaam;
	            other.ou1naamopgemaakt = this.ou1naamopgemaakt;
	            other.ou1geboortedatum = this.ou1geboortedatum;
	            other.ou1geboortedatumindicator = this.ou1geboortedatumindicator;
	            other.ou1geboorteplaatscode = this.ou1geboorteplaatscode;
	            other.ou1geboorteplaatsomschrijving = this.ou1geboorteplaatsomschrijving;
	            other.ou1geboortelandcode = this.ou1geboortelandcode;
	            other.ou1geboortelandomschrijving = this.ou1geboortelandomschrijving;
	            other.ou1geslachtsaanduidingcode = this.ou1geslachtsaanduidingcode;
	            other.ou1geslachtsaanduidingomschrijving = this.ou1geslachtsaanduidingomschrijving;
	            other.ou1datumingangfamilierechtelijkebetrekking = this.ou1datumingangfamilierechtelijkebetrekking;
	            other.ou1datumingangfamilierechtelijkebetrekkingindicator = this.ou1datumingangfamilierechtelijkebetrekkingindicator;
	            other.ou1registergemeenteaktecode = this.ou1registergemeenteaktecode;
	            other.ou1registergemeenteakteomschrijving = this.ou1registergemeenteakteomschrijving;
	            other.ou1aktenummer = this.ou1aktenummer;
	            other.ou1gemeentedocumentcode = this.ou1gemeentedocumentcode;
	            other.ou1gemeentedocumentomschrijving = this.ou1gemeentedocumentomschrijving;
	            other.ou1datumdocument = this.ou1datumdocument;
	            other.ou1datumdocumentindicator = this.ou1datumdocumentindicator;
	            other.ou1beschrijvingdocument = this.ou1beschrijvingdocument;
	            other.ou1aanduidinggegevensonderzoek = this.ou1aanduidinggegevensonderzoek;
	            other.ou1datumingangonderzoek = this.ou1datumingangonderzoek;
	            other.ou1datumingangonderzoekindicator = this.ou1datumingangonderzoekindicator;
	            other.ou1datumeindeonderzoek = this.ou1datumeindeonderzoek;
	            other.ou1datumeindeonderzoekindicator = this.ou1datumeindeonderzoekindicator;
	            other.ou1ingangsdatumgeldigheid = this.ou1ingangsdatumgeldigheid;
	            other.ou1ingangsdatumgeldigheidindicator = this.ou1ingangsdatumgeldigheidindicator;
	            other.ou1datumvanopneming = this.ou1datumvanopneming;
	            other.ou1datumvanopnemingindicator = this.ou1datumvanopnemingindicator;
	            other.ou2anummer = this.ou2anummer;
	            other.ou2burgerservicenummer = this.ou2burgerservicenummer;
	            other.ou2voornamen = this.ou2voornamen;
	            other.ou2voorletters = this.ou2voorletters;
	            other.ou2adellijketitelcode = this.ou2adellijketitelcode;
	            other.ou2adellijketitelomschrijving = this.ou2adellijketitelomschrijving;
	            other.ou2voorvoegselgeslachtsnaam = this.ou2voorvoegselgeslachtsnaam;
	            other.ou2geslachtsnaam = this.ou2geslachtsnaam;
	            other.ou2naamopgemaakt = this.ou2naamopgemaakt;
	            other.ou2geboortedatum = this.ou2geboortedatum;
	            other.ou2geboortedatumindicator = this.ou2geboortedatumindicator;
	            other.ou2geboorteplaatscode = this.ou2geboorteplaatscode;
	            other.ou2geboorteplaatsomschrijving = this.ou2geboorteplaatsomschrijving;
	            other.ou2geboortelandcode = this.ou2geboortelandcode;
	            other.ou2geboortelandomschrijving = this.ou2geboortelandomschrijving;
	            other.ou2geslachtsaanduidingcode = this.ou2geslachtsaanduidingcode;
	            other.ou2geslachtsaanduidingomschrijving = this.ou2geslachtsaanduidingomschrijving;
	            other.ou2datumingangfamilierechtelijkebetrekking = this.ou2datumingangfamilierechtelijkebetrekking;
	            other.ou2datumingangfamilierechtelijkebetrekkingindicator = this.ou2datumingangfamilierechtelijkebetrekkingindicator;
	            other.ou2registergemeenteaktecode = this.ou2registergemeenteaktecode;
	            other.ou2registergemeenteakteomschrijving = this.ou2registergemeenteakteomschrijving;
	            other.ou2aktenummer = this.ou2aktenummer;
	            other.ou2gemeentedocumentcode = this.ou2gemeentedocumentcode;
	            other.ou2gemeentedocumentomschrijving = this.ou2gemeentedocumentomschrijving;
	            other.ou2datumdocument = this.ou2datumdocument;
	            other.ou2datumdocumentindicator = this.ou2datumdocumentindicator;
	            other.ou2beschrijvingdocument = this.ou2beschrijvingdocument;
	            other.ou2aanduidinggegevensonderzoek = this.ou2aanduidinggegevensonderzoek;
	            other.ou2datumingangonderzoek = this.ou2datumingangonderzoek;
	            other.ou2datumingangonderzoekindicator = this.ou2datumingangonderzoekindicator;
	            other.ou2datumeindeonderzoek = this.ou2datumeindeonderzoek;
	            other.ou2datumeindeonderzoekindicator = this.ou2datumeindeonderzoekindicator;
	            other.ou2ingangsdatumgeldigheid = this.ou2ingangsdatumgeldigheid;
	            other.ou2ingangsdatumgeldigheidindicator = this.ou2ingangsdatumgeldigheidindicator;
	            other.ou2datumvanopneming = this.ou2datumvanopneming;
	            other.ou2datumvanopnemingindicator = this.ou2datumvanopnemingindicator;
	            other.ovldatumoverlijden = this.ovldatumoverlijden;
	            other.ovldatumoverlijdenindicator = this.ovldatumoverlijdenindicator;
	            other.ovlplaatsoverlijdencode = this.ovlplaatsoverlijdencode;
	            other.ovlplaatsoverlijdenomschrijving = this.ovlplaatsoverlijdenomschrijving;
	            other.ovllandoverlijdencode = this.ovllandoverlijdencode;
	            other.ovllandoverlijdenomschrijving = this.ovllandoverlijdenomschrijving;
	            other.ovlaanduidinggegevensonderzoek = this.ovlaanduidinggegevensonderzoek;
	            other.ovldatumingangonderzoek = this.ovldatumingangonderzoek;
	            other.ovldatumingangonderzoekindicator = this.ovldatumingangonderzoekindicator;
	            other.ovldatumeindeonderzoek = this.ovldatumeindeonderzoek;
	            other.ovldatumeindeonderzoekindicator = this.ovldatumeindeonderzoekindicator;
	            other.ovlingangsdatumgeldigheid = this.ovlingangsdatumgeldigheid;
	            other.ovlingangsdatumgeldigheidindicator = this.ovlingangsdatumgeldigheidindicator;
	            other.ovldatumvanopneming = this.ovldatumvanopneming;
	            other.ovldatumvanopnemingindicator = this.ovldatumvanopnemingindicator;
	            other.insdatumingangblokkeringpl = this.insdatumingangblokkeringpl;
	            other.insdatumingangblokkeringplindicator = this.insdatumingangblokkeringplindicator;
	            other.insdatumopschortingbijhouding = this.insdatumopschortingbijhouding;
	            other.insdatumopschortingbijhoudingindicator = this.insdatumopschortingbijhoudingindicator;
	            other.insomschrijvingredenopschortingbijhouding = this.insomschrijvingredenopschortingbijhouding;
	            other.insdatumeersteinschrijvinggba = this.insdatumeersteinschrijvinggba;
	            other.insdatumeersteinschrijvingindicator = this.insdatumeersteinschrijvingindicator;
	            other.insgemeentewaarpkzichbevindtcode = this.insgemeentewaarpkzichbevindtcode;
	            other.insgemeentewaarpkzichbevindtomschrijving = this.insgemeentewaarpkzichbevindtomschrijving;
	            other.insindicatiegeheim = this.insindicatiegeheim;
	            other.insversienummer = this.insversienummer;
	            other.insdatumtijdstempel = this.insdatumtijdstempel;
	            other.inspkgegevensvolledigmeegeconverteerd = this.inspkgegevensvolledigmeegeconverteerd;
	            other.vblgemeentevaninschrijvingcode = this.vblgemeentevaninschrijvingcode;
	            other.vblgemeentevaninschrijvingomschrijving = this.vblgemeentevaninschrijvingomschrijving;
	            other.vbldatuminschrijving = this.vbldatuminschrijving;
	            other.vbldatuminschrijvingindicator = this.vbldatuminschrijvingindicator;
	            other.vblfunctieadres = this.vblfunctieadres;
	            other.vblgemeentedeel = this.vblgemeentedeel;
	            other.vbldatumaanvangadreshouding = this.vbldatumaanvangadreshouding;
	            other.vbldatumaanvangadreshoudingindicator = this.vbldatumaanvangadreshoudingindicator;
	            other.vblstraatnaam = this.vblstraatnaam;
	            other.vblnaamopenbareruimte = this.vblnaamopenbareruimte;
	            other.vbladresopgemaakt = this.vbladresopgemaakt;
	            other.vblwoonplaatsopgemaakt = this.vblwoonplaatsopgemaakt;
	            other.vblhuisnummer = this.vblhuisnummer;
	            other.vblhuisletter = this.vblhuisletter;
	            other.vblhuisnummertoevoeging = this.vblhuisnummertoevoeging;
	            other.vblaanduidingbijhuisnummer = this.vblaanduidingbijhuisnummer;
	            other.vblpostcode = this.vblpostcode;
	            other.vblwoonplaatsnaam = this.vblwoonplaatsnaam;
	            other.vblidentificatiecodeverblijfplaats = this.vblidentificatiecodeverblijfplaats;
	            other.vblidentificatiecodenummeraanduiding = this.vblidentificatiecodenummeraanduiding;
	            other.vbllocatiebeschrijving = this.vbllocatiebeschrijving;
	            other.vbllandadresbuitenlandcode = this.vbllandadresbuitenlandcode;
	            other.vbllandadresbuitenlandomschrijving = this.vbllandadresbuitenlandomschrijving;
	            other.vbldatumaanvangadresbuitenland = this.vbldatumaanvangadresbuitenland;
	            other.vbldatumaanvangadresbuitenlandindicator = this.vbldatumaanvangadresbuitenlandindicator;
	            other.vblregel1adresbuitenland = this.vblregel1adresbuitenland;
	            other.vblregel2adresbuitenland = this.vblregel2adresbuitenland;
	            other.vblregel3adresbuitenland = this.vblregel3adresbuitenland;
	            other.vbllandvanwaaringeschrevencode = this.vbllandvanwaaringeschrevencode;
	            other.vbllandvanwaaringeschrevenomschrijving = this.vbllandvanwaaringeschrevenomschrijving;
	            other.vbldatumvestiginginnederland = this.vbldatumvestiginginnederland;
	            other.vbldatumvestiginginnederlandindicator = this.vbldatumvestiginginnederlandindicator;
	            other.vblomschrijvingvanaangifteadreshouding = this.vblomschrijvingvanaangifteadreshouding;
	            other.vblindicatiedocument = this.vblindicatiedocument;
	            other.vblaanduidinggegevensonderzoek = this.vblaanduidinggegevensonderzoek;
	            other.vbldatumingangonderzoek = this.vbldatumingangonderzoek;
	            other.vbldatumingangonderzoekindicator = this.vbldatumingangonderzoekindicator;
	            other.vbldatumeindeonderzoek = this.vbldatumeindeonderzoek;
	            other.vbldatumeindeonderzoekindicator = this.vbldatumeindeonderzoekindicator;
	            other.vblingangsdatumgeldigheid = this.vblingangsdatumgeldigheid;
	            other.vblingangsdatumgeldigheidindicator = this.vblingangsdatumgeldigheidindicator;
	            other.vbldatumvanopneming = this.vbldatumvanopneming;
	            other.vbldatumvanopnemingindicator = this.vbldatumvanopnemingindicator;
	            other.vblsoortpandcode = this.vblsoortpandcode;
	            other.vblsoortpandomschrijving = this.vblsoortpandomschrijving;
	            other.vblwijkcode = this.vblwijkcode;
	            other.vblwijkomschrijving = this.vblwijkomschrijving;
	            other.vblplanalogischewijkcode = this.vblplanalogischewijkcode;
	            other.vblplanalogischewijkomschrijving = this.vblplanalogischewijkomschrijving;
	            other.vblanummerhoofdbewoner = this.vblanummerhoofdbewoner;
	            other.vbtaanduidingverblijfstitelcode = this.vbtaanduidingverblijfstitelcode;
	            other.vbtverblijfstitelvervallen = this.vbtverblijfstitelvervallen;
	            other.vbtaanduidingverblijfstitelomschrijving = this.vbtaanduidingverblijfstitelomschrijving;
	            other.vbtdatumeindeverblijfstitel = this.vbtdatumeindeverblijfstitel;
	            other.vbtdatumeindeverblijfstitelindicator = this.vbtdatumeindeverblijfstitelindicator;
	            other.vbtingangsdatumverblijfstitel = this.vbtingangsdatumverblijfstitel;
	            other.vbtingangsdatumverblijfstitelindicator = this.vbtingangsdatumverblijfstitelindicator;
	            other.vbtaanduidinggegevensonderzoek = this.vbtaanduidinggegevensonderzoek;
	            other.vbtdatumingangonderzoek = this.vbtdatumingangonderzoek;
	            other.vbtdatumingangonderzoekindicator = this.vbtdatumingangonderzoekindicator;
	            other.vbtdatumeindeonderzoek = this.vbtdatumeindeonderzoek;
	            other.vbtdatumeindeonderzoekindicator = this.vbtdatumeindeonderzoekindicator;
	            other.vbtingangsdatumgeldigheid = this.vbtingangsdatumgeldigheid;
	            other.vbtingangsdatumgeldigheidindicator = this.vbtingangsdatumgeldigheidindicator;
	            other.vbtdatumvanopneming = this.vbtdatumvanopneming;
	            other.vbtdatumvanopnemingindicator = this.vbtdatumvanopnemingindicator;
	            other.gzvindicatiegezagminderjarige = this.gzvindicatiegezagminderjarige;
	            other.gzvindicatiecurateleregister = this.gzvindicatiecurateleregister;
	            other.gzvgemeentedocumentcode = this.gzvgemeentedocumentcode;
	            other.gzvgemeentedocumentomschrijving = this.gzvgemeentedocumentomschrijving;
	            other.gzvdatumdocument = this.gzvdatumdocument;
	            other.gzvdatumdocumentindicator = this.gzvdatumdocumentindicator;
	            other.gzvbeschrijvingdocument = this.gzvbeschrijvingdocument;
	            other.gzvaanduidinggegevensonderzoek = this.gzvaanduidinggegevensonderzoek;
	            other.gzvdatumingangonderzoek = this.gzvdatumingangonderzoek;
	            other.gzvdatumingangonderzoekindicator = this.gzvdatumingangonderzoekindicator;
	            other.gzvdatumeindeonderzoek = this.gzvdatumeindeonderzoek;
	            other.gzvdatumeindeonderzoekindicator = this.gzvdatumeindeonderzoekindicator;
	            other.gzvingangsdatumgeldigheid = this.gzvingangsdatumgeldigheid;
	            other.gzvingangsdatumgeldigheidindicator = this.gzvingangsdatumgeldigheidindicator;
	            other.gzvdatumvanopneming = this.gzvdatumvanopneming;
	            other.gzvdatumvanopnemingindicator = this.gzvdatumvanopnemingindicator;
	            other.ksraanduidingeuropeeskiesrecht = this.ksraanduidingeuropeeskiesrecht;
	            other.ksrdatumverzoekofmededelingeuropeeskiesrecht = this.ksrdatumverzoekofmededelingeuropeeskiesrecht;
	            other.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator = this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator;
	            other.ksreinddatumuitsluitingeuropeeskiesrecht = this.ksreinddatumuitsluitingeuropeeskiesrecht;
	            other.ksreinddatumuitsluitingeuropeeskiesrechtindicator = this.ksreinddatumuitsluitingeuropeeskiesrechtindicator;
	            other.ksraanduidinguitgeslotenkiesrecht = this.ksraanduidinguitgeslotenkiesrecht;
	            other.ksreinddatumuitsluitingkiesrecht = this.ksreinddatumuitsluitingkiesrecht;
	            other.ksreinddatumuitsluitingkiesrechtindicator = this.ksreinddatumuitsluitingkiesrechtindicator;
	            other.ksrgemeentedocumentcode = this.ksrgemeentedocumentcode;
	            other.ksrgemeentedocumentomschrijving = this.ksrgemeentedocumentomschrijving;
	            other.ksrdatumdocument = this.ksrdatumdocument;
	            other.ksrdatumdocumentindicator = this.ksrdatumdocumentindicator;
	            other.ksrbeschrijvingdocument = this.ksrbeschrijvingdocument;
	            other.vwsgemeentevaninschrijvingcode = this.vwsgemeentevaninschrijvingcode;
	            other.vwsgemeentevaninschrijvingomschrijving = this.vwsgemeentevaninschrijvingomschrijving;
	            other.vwsdatuminschrijving = this.vwsdatuminschrijving;
	            other.vwsdatuminschrijvingindicator = this.vwsdatuminschrijvingindicator;
	            other.vwsindicatiegeheim = this.vwsindicatiegeheim;
	            
	}

	public void copyKeysDataTo(ldf_anr_persoon_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.prsburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.prsvoornamen = readString(dis);
					
					this.prseerstevoornaam = readString(dis);
					
					this.prsvoorletters = readString(dis);
					
					this.prsadellijketitelcode = readString(dis);
					
					this.prsadellijketitelomschrijving = readString(dis);
					
					this.prsvoorvoegselgeslachtsnaam = readString(dis);
					
					this.prsgeslachtsnaam = readString(dis);
					
					this.prsnaamopgemaakt = readString(dis);
					
					this.prsgeboortedatum = readDate(dis);
					
					this.prsgeboortedatumindicator = readString(dis);
					
					this.prsgeboorteplaatscode = readString(dis);
					
					this.prsgeboorteplaatsomschrijving = readString(dis);
					
					this.prsgeboortelandcode = readString(dis);
					
					this.prsgeboortelandomschrijving = readString(dis);
					
					this.prsgeslachtsaanduidingcode = readString(dis);
					
					this.prsgeslachtsaanduidingomschrijving = readString(dis);
					
					this.prsaanduidingnaamgebruik = readString(dis);
					
					this.prsregistergemeenteaktecode = readString(dis);
					
					this.prsregistergemeenteakteomschrijving = readString(dis);
					
					this.prsaktenummer = readString(dis);
					
					this.prsgemeentedocumentcode = readString(dis);
					
					this.prsgemeentedocumentomschrijving = readString(dis);
					
					this.prsdatumdocument = readDate(dis);
					
					this.prsdatumdocumentindicator = readString(dis);
					
					this.prsbeschrijvingdocument = readString(dis);
					
						this.prsaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.prsdatumingangonderzoek = readDate(dis);
					
					this.prsdatumingangonderzoekindicator = readString(dis);
					
					this.prsdatumeindeonderzoek = readDate(dis);
					
					this.prsdatumeindeonderzoekindicator = readString(dis);
					
					this.prsingangsdatumgeldigheid = readDate(dis);
					
					this.prsingangsdatumgeldigheidindicator = readString(dis);
					
					this.prsdatumvanopneming = readDate(dis);
					
					this.prsdatumvanopnemingindicator = readString(dis);
					
						this.prsstatuspersoon = (BigDecimal) dis.readObject();
					
						this.prsrijkskodenationaliteit = (BigDecimal) dis.readObject();
					
						this.prsgezinsverhouding = (BigDecimal) dis.readObject();
					
						this.prsgezinssterkte = (BigDecimal) dis.readObject();
					
						this.prsanummergezinshoofd = (BigDecimal) dis.readObject();
					
					this.prsburgerlijkestaat = readString(dis);
					
					this.prsnaamswijzigingindicatie = readString(dis);
					
					this.prsdatumadreshoudingaaneengesloten = readDate(dis);
					
					this.prsdatumadreshoudingaaneengeslotenindicator = readString(dis);
					
						this.ou1anummer = (BigDecimal) dis.readObject();
					
						this.ou1burgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou1voornamen = readString(dis);
					
					this.ou1voorletters = readString(dis);
					
					this.ou1adellijketitelcode = readString(dis);
					
					this.ou1adellijketitelomschrijving = readString(dis);
					
					this.ou1voorvoegselgeslachtsnaam = readString(dis);
					
					this.ou1geslachtsnaam = readString(dis);
					
					this.ou1naamopgemaakt = readString(dis);
					
					this.ou1geboortedatum = readDate(dis);
					
					this.ou1geboortedatumindicator = readString(dis);
					
					this.ou1geboorteplaatscode = readString(dis);
					
					this.ou1geboorteplaatsomschrijving = readString(dis);
					
					this.ou1geboortelandcode = readString(dis);
					
					this.ou1geboortelandomschrijving = readString(dis);
					
					this.ou1geslachtsaanduidingcode = readString(dis);
					
					this.ou1geslachtsaanduidingomschrijving = readString(dis);
					
					this.ou1datumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou1datumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou1registergemeenteaktecode = readString(dis);
					
					this.ou1registergemeenteakteomschrijving = readString(dis);
					
					this.ou1aktenummer = readString(dis);
					
					this.ou1gemeentedocumentcode = readString(dis);
					
					this.ou1gemeentedocumentomschrijving = readString(dis);
					
					this.ou1datumdocument = readDate(dis);
					
					this.ou1datumdocumentindicator = readString(dis);
					
					this.ou1beschrijvingdocument = readString(dis);
					
						this.ou1aanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ou1datumingangonderzoek = readDate(dis);
					
					this.ou1datumingangonderzoekindicator = readString(dis);
					
					this.ou1datumeindeonderzoek = readDate(dis);
					
					this.ou1datumeindeonderzoekindicator = readString(dis);
					
					this.ou1ingangsdatumgeldigheid = readDate(dis);
					
					this.ou1ingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou1datumvanopneming = readDate(dis);
					
					this.ou1datumvanopnemingindicator = readString(dis);
					
						this.ou2anummer = (BigDecimal) dis.readObject();
					
						this.ou2burgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou2voornamen = readString(dis);
					
					this.ou2voorletters = readString(dis);
					
					this.ou2adellijketitelcode = readString(dis);
					
					this.ou2adellijketitelomschrijving = readString(dis);
					
					this.ou2voorvoegselgeslachtsnaam = readString(dis);
					
					this.ou2geslachtsnaam = readString(dis);
					
					this.ou2naamopgemaakt = readString(dis);
					
					this.ou2geboortedatum = readDate(dis);
					
					this.ou2geboortedatumindicator = readString(dis);
					
					this.ou2geboorteplaatscode = readString(dis);
					
					this.ou2geboorteplaatsomschrijving = readString(dis);
					
					this.ou2geboortelandcode = readString(dis);
					
					this.ou2geboortelandomschrijving = readString(dis);
					
					this.ou2geslachtsaanduidingcode = readString(dis);
					
					this.ou2geslachtsaanduidingomschrijving = readString(dis);
					
					this.ou2datumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou2datumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou2registergemeenteaktecode = readString(dis);
					
					this.ou2registergemeenteakteomschrijving = readString(dis);
					
					this.ou2aktenummer = readString(dis);
					
					this.ou2gemeentedocumentcode = readString(dis);
					
					this.ou2gemeentedocumentomschrijving = readString(dis);
					
					this.ou2datumdocument = readDate(dis);
					
					this.ou2datumdocumentindicator = readString(dis);
					
					this.ou2beschrijvingdocument = readString(dis);
					
						this.ou2aanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ou2datumingangonderzoek = readDate(dis);
					
					this.ou2datumingangonderzoekindicator = readString(dis);
					
					this.ou2datumeindeonderzoek = readDate(dis);
					
					this.ou2datumeindeonderzoekindicator = readString(dis);
					
					this.ou2ingangsdatumgeldigheid = readDate(dis);
					
					this.ou2ingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou2datumvanopneming = readDate(dis);
					
					this.ou2datumvanopnemingindicator = readString(dis);
					
					this.ovldatumoverlijden = readDate(dis);
					
					this.ovldatumoverlijdenindicator = readString(dis);
					
					this.ovlplaatsoverlijdencode = readString(dis);
					
					this.ovlplaatsoverlijdenomschrijving = readString(dis);
					
					this.ovllandoverlijdencode = readString(dis);
					
					this.ovllandoverlijdenomschrijving = readString(dis);
					
						this.ovlaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ovldatumingangonderzoek = readDate(dis);
					
					this.ovldatumingangonderzoekindicator = readString(dis);
					
					this.ovldatumeindeonderzoek = readDate(dis);
					
					this.ovldatumeindeonderzoekindicator = readString(dis);
					
					this.ovlingangsdatumgeldigheid = readDate(dis);
					
					this.ovlingangsdatumgeldigheidindicator = readString(dis);
					
					this.ovldatumvanopneming = readDate(dis);
					
					this.ovldatumvanopnemingindicator = readString(dis);
					
					this.insdatumingangblokkeringpl = readDate(dis);
					
					this.insdatumingangblokkeringplindicator = readString(dis);
					
					this.insdatumopschortingbijhouding = readDate(dis);
					
					this.insdatumopschortingbijhoudingindicator = readString(dis);
					
					this.insomschrijvingredenopschortingbijhouding = readString(dis);
					
					this.insdatumeersteinschrijvinggba = readDate(dis);
					
					this.insdatumeersteinschrijvingindicator = readString(dis);
					
					this.insgemeentewaarpkzichbevindtcode = readString(dis);
					
					this.insgemeentewaarpkzichbevindtomschrijving = readString(dis);
					
					this.insindicatiegeheim = readString(dis);
					
						this.insversienummer = (BigDecimal) dis.readObject();
					
					this.insdatumtijdstempel = readString(dis);
					
					this.inspkgegevensvolledigmeegeconverteerd = readString(dis);
					
					this.vblgemeentevaninschrijvingcode = readString(dis);
					
					this.vblgemeentevaninschrijvingomschrijving = readString(dis);
					
					this.vbldatuminschrijving = readDate(dis);
					
					this.vbldatuminschrijvingindicator = readString(dis);
					
					this.vblfunctieadres = readString(dis);
					
					this.vblgemeentedeel = readString(dis);
					
					this.vbldatumaanvangadreshouding = readDate(dis);
					
					this.vbldatumaanvangadreshoudingindicator = readString(dis);
					
					this.vblstraatnaam = readString(dis);
					
					this.vblnaamopenbareruimte = readString(dis);
					
					this.vbladresopgemaakt = readString(dis);
					
					this.vblwoonplaatsopgemaakt = readString(dis);
					
						this.vblhuisnummer = (BigDecimal) dis.readObject();
					
					this.vblhuisletter = readString(dis);
					
					this.vblhuisnummertoevoeging = readString(dis);
					
					this.vblaanduidingbijhuisnummer = readString(dis);
					
					this.vblpostcode = readString(dis);
					
					this.vblwoonplaatsnaam = readString(dis);
					
					this.vblidentificatiecodeverblijfplaats = readString(dis);
					
					this.vblidentificatiecodenummeraanduiding = readString(dis);
					
					this.vbllocatiebeschrijving = readString(dis);
					
					this.vbllandadresbuitenlandcode = readString(dis);
					
					this.vbllandadresbuitenlandomschrijving = readString(dis);
					
					this.vbldatumaanvangadresbuitenland = readDate(dis);
					
					this.vbldatumaanvangadresbuitenlandindicator = readString(dis);
					
					this.vblregel1adresbuitenland = readString(dis);
					
					this.vblregel2adresbuitenland = readString(dis);
					
					this.vblregel3adresbuitenland = readString(dis);
					
					this.vbllandvanwaaringeschrevencode = readString(dis);
					
					this.vbllandvanwaaringeschrevenomschrijving = readString(dis);
					
					this.vbldatumvestiginginnederland = readDate(dis);
					
					this.vbldatumvestiginginnederlandindicator = readString(dis);
					
					this.vblomschrijvingvanaangifteadreshouding = readString(dis);
					
						this.vblindicatiedocument = (BigDecimal) dis.readObject();
					
						this.vblaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vbldatumingangonderzoek = readDate(dis);
					
					this.vbldatumingangonderzoekindicator = readString(dis);
					
					this.vbldatumeindeonderzoek = readDate(dis);
					
					this.vbldatumeindeonderzoekindicator = readString(dis);
					
					this.vblingangsdatumgeldigheid = readDate(dis);
					
					this.vblingangsdatumgeldigheidindicator = readString(dis);
					
					this.vbldatumvanopneming = readDate(dis);
					
					this.vbldatumvanopnemingindicator = readString(dis);
					
					this.vblsoortpandcode = readString(dis);
					
					this.vblsoortpandomschrijving = readString(dis);
					
					this.vblwijkcode = readString(dis);
					
					this.vblwijkomschrijving = readString(dis);
					
					this.vblplanalogischewijkcode = readString(dis);
					
					this.vblplanalogischewijkomschrijving = readString(dis);
					
						this.vblanummerhoofdbewoner = (BigDecimal) dis.readObject();
					
					this.vbtaanduidingverblijfstitelcode = readString(dis);
					
					this.vbtverblijfstitelvervallen = readString(dis);
					
					this.vbtaanduidingverblijfstitelomschrijving = readString(dis);
					
					this.vbtdatumeindeverblijfstitel = readDate(dis);
					
					this.vbtdatumeindeverblijfstitelindicator = readString(dis);
					
					this.vbtingangsdatumverblijfstitel = readDate(dis);
					
					this.vbtingangsdatumverblijfstitelindicator = readString(dis);
					
						this.vbtaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vbtdatumingangonderzoek = readDate(dis);
					
					this.vbtdatumingangonderzoekindicator = readString(dis);
					
					this.vbtdatumeindeonderzoek = readDate(dis);
					
					this.vbtdatumeindeonderzoekindicator = readString(dis);
					
					this.vbtingangsdatumgeldigheid = readDate(dis);
					
					this.vbtingangsdatumgeldigheidindicator = readString(dis);
					
					this.vbtdatumvanopneming = readDate(dis);
					
					this.vbtdatumvanopnemingindicator = readString(dis);
					
					this.gzvindicatiegezagminderjarige = readString(dis);
					
					this.gzvindicatiecurateleregister = readString(dis);
					
					this.gzvgemeentedocumentcode = readString(dis);
					
					this.gzvgemeentedocumentomschrijving = readString(dis);
					
					this.gzvdatumdocument = readDate(dis);
					
					this.gzvdatumdocumentindicator = readString(dis);
					
					this.gzvbeschrijvingdocument = readString(dis);
					
						this.gzvaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.gzvdatumingangonderzoek = readDate(dis);
					
					this.gzvdatumingangonderzoekindicator = readString(dis);
					
					this.gzvdatumeindeonderzoek = readDate(dis);
					
					this.gzvdatumeindeonderzoekindicator = readString(dis);
					
					this.gzvingangsdatumgeldigheid = readDate(dis);
					
					this.gzvingangsdatumgeldigheidindicator = readString(dis);
					
					this.gzvdatumvanopneming = readDate(dis);
					
					this.gzvdatumvanopnemingindicator = readString(dis);
					
						this.ksraanduidingeuropeeskiesrecht = (BigDecimal) dis.readObject();
					
					this.ksrdatumverzoekofmededelingeuropeeskiesrecht = readDate(dis);
					
					this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator = readString(dis);
					
					this.ksreinddatumuitsluitingeuropeeskiesrecht = readDate(dis);
					
					this.ksreinddatumuitsluitingeuropeeskiesrechtindicator = readString(dis);
					
					this.ksraanduidinguitgeslotenkiesrecht = readString(dis);
					
					this.ksreinddatumuitsluitingkiesrecht = readDate(dis);
					
					this.ksreinddatumuitsluitingkiesrechtindicator = readString(dis);
					
					this.ksrgemeentedocumentcode = readString(dis);
					
					this.ksrgemeentedocumentomschrijving = readString(dis);
					
					this.ksrdatumdocument = readDate(dis);
					
					this.ksrdatumdocumentindicator = readString(dis);
					
					this.ksrbeschrijvingdocument = readString(dis);
					
					this.vwsgemeentevaninschrijvingcode = readString(dis);
					
					this.vwsgemeentevaninschrijvingomschrijving = readString(dis);
					
					this.vwsdatuminschrijving = readDate(dis);
					
					this.vwsdatuminschrijvingindicator = readString(dis);
					
					this.vwsindicatiegeheim = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsburgerservicenummer);
					
					// String
				
						writeString(this.prsvoornamen,dos);
					
					// String
				
						writeString(this.prseerstevoornaam,dos);
					
					// String
				
						writeString(this.prsvoorletters,dos);
					
					// String
				
						writeString(this.prsadellijketitelcode,dos);
					
					// String
				
						writeString(this.prsadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.prsvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prsgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prsnaamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.prsgeboortedatum,dos);
					
					// String
				
						writeString(this.prsgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.prsgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.prsgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.prsgeboortelandcode,dos);
					
					// String
				
						writeString(this.prsgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.prsgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.prsgeslachtsaanduidingomschrijving,dos);
					
					// String
				
						writeString(this.prsaanduidingnaamgebruik,dos);
					
					// String
				
						writeString(this.prsregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.prsregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.prsaktenummer,dos);
					
					// String
				
						writeString(this.prsgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.prsgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumdocument,dos);
					
					// String
				
						writeString(this.prsdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.prsbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.prsdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.prsdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.prsdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prsingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.prsingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumvanopneming,dos);
					
					// String
				
						writeString(this.prsdatumvanopnemingindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsstatuspersoon);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsrijkskodenationaliteit);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsgezinsverhouding);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsgezinssterkte);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummergezinshoofd);
					
					// String
				
						writeString(this.prsburgerlijkestaat,dos);
					
					// String
				
						writeString(this.prsnaamswijzigingindicatie,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumadreshoudingaaneengesloten,dos);
					
					// String
				
						writeString(this.prsdatumadreshoudingaaneengeslotenindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1anummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1burgerservicenummer);
					
					// String
				
						writeString(this.ou1voornamen,dos);
					
					// String
				
						writeString(this.ou1voorletters,dos);
					
					// String
				
						writeString(this.ou1adellijketitelcode,dos);
					
					// String
				
						writeString(this.ou1adellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou1voorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou1geslachtsnaam,dos);
					
					// String
				
						writeString(this.ou1naamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.ou1geboortedatum,dos);
					
					// String
				
						writeString(this.ou1geboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou1geboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou1geboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou1geboortelandcode,dos);
					
					// String
				
						writeString(this.ou1geboortelandomschrijving,dos);
					
					// String
				
						writeString(this.ou1geslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.ou1geslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou1datumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// String
				
						writeString(this.ou1registergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ou1registergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ou1aktenummer,dos);
					
					// String
				
						writeString(this.ou1gemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ou1gemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumdocument,dos);
					
					// String
				
						writeString(this.ou1datumdocumentindicator,dos);
					
					// String
				
						writeString(this.ou1beschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1aanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ou1datumingangonderzoek,dos);
					
					// String
				
						writeString(this.ou1datumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ou1datumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1ingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou1ingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumvanopneming,dos);
					
					// String
				
						writeString(this.ou1datumvanopnemingindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2anummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2burgerservicenummer);
					
					// String
				
						writeString(this.ou2voornamen,dos);
					
					// String
				
						writeString(this.ou2voorletters,dos);
					
					// String
				
						writeString(this.ou2adellijketitelcode,dos);
					
					// String
				
						writeString(this.ou2adellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou2voorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou2geslachtsnaam,dos);
					
					// String
				
						writeString(this.ou2naamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.ou2geboortedatum,dos);
					
					// String
				
						writeString(this.ou2geboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou2geboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou2geboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou2geboortelandcode,dos);
					
					// String
				
						writeString(this.ou2geboortelandomschrijving,dos);
					
					// String
				
						writeString(this.ou2geslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.ou2geslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou2datumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// String
				
						writeString(this.ou2registergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ou2registergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ou2aktenummer,dos);
					
					// String
				
						writeString(this.ou2gemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ou2gemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumdocument,dos);
					
					// String
				
						writeString(this.ou2datumdocumentindicator,dos);
					
					// String
				
						writeString(this.ou2beschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2aanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ou2datumingangonderzoek,dos);
					
					// String
				
						writeString(this.ou2datumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ou2datumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2ingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou2ingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumvanopneming,dos);
					
					// String
				
						writeString(this.ou2datumvanopnemingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumoverlijden,dos);
					
					// String
				
						writeString(this.ovldatumoverlijdenindicator,dos);
					
					// String
				
						writeString(this.ovlplaatsoverlijdencode,dos);
					
					// String
				
						writeString(this.ovlplaatsoverlijdenomschrijving,dos);
					
					// String
				
						writeString(this.ovllandoverlijdencode,dos);
					
					// String
				
						writeString(this.ovllandoverlijdenomschrijving,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ovldatumingangonderzoek,dos);
					
					// String
				
						writeString(this.ovldatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ovldatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovlingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ovlingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumvanopneming,dos);
					
					// String
				
						writeString(this.ovldatumvanopnemingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.insdatumingangblokkeringpl,dos);
					
					// String
				
						writeString(this.insdatumingangblokkeringplindicator,dos);
					
					// java.util.Date
				
						writeDate(this.insdatumopschortingbijhouding,dos);
					
					// String
				
						writeString(this.insdatumopschortingbijhoudingindicator,dos);
					
					// String
				
						writeString(this.insomschrijvingredenopschortingbijhouding,dos);
					
					// java.util.Date
				
						writeDate(this.insdatumeersteinschrijvinggba,dos);
					
					// String
				
						writeString(this.insdatumeersteinschrijvingindicator,dos);
					
					// String
				
						writeString(this.insgemeentewaarpkzichbevindtcode,dos);
					
					// String
				
						writeString(this.insgemeentewaarpkzichbevindtomschrijving,dos);
					
					// String
				
						writeString(this.insindicatiegeheim,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.insversienummer);
					
					// String
				
						writeString(this.insdatumtijdstempel,dos);
					
					// String
				
						writeString(this.inspkgegevensvolledigmeegeconverteerd,dos);
					
					// String
				
						writeString(this.vblgemeentevaninschrijvingcode,dos);
					
					// String
				
						writeString(this.vblgemeentevaninschrijvingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatuminschrijving,dos);
					
					// String
				
						writeString(this.vbldatuminschrijvingindicator,dos);
					
					// String
				
						writeString(this.vblfunctieadres,dos);
					
					// String
				
						writeString(this.vblgemeentedeel,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumaanvangadreshouding,dos);
					
					// String
				
						writeString(this.vbldatumaanvangadreshoudingindicator,dos);
					
					// String
				
						writeString(this.vblstraatnaam,dos);
					
					// String
				
						writeString(this.vblnaamopenbareruimte,dos);
					
					// String
				
						writeString(this.vbladresopgemaakt,dos);
					
					// String
				
						writeString(this.vblwoonplaatsopgemaakt,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhuisnummer);
					
					// String
				
						writeString(this.vblhuisletter,dos);
					
					// String
				
						writeString(this.vblhuisnummertoevoeging,dos);
					
					// String
				
						writeString(this.vblaanduidingbijhuisnummer,dos);
					
					// String
				
						writeString(this.vblpostcode,dos);
					
					// String
				
						writeString(this.vblwoonplaatsnaam,dos);
					
					// String
				
						writeString(this.vblidentificatiecodeverblijfplaats,dos);
					
					// String
				
						writeString(this.vblidentificatiecodenummeraanduiding,dos);
					
					// String
				
						writeString(this.vbllocatiebeschrijving,dos);
					
					// String
				
						writeString(this.vbllandadresbuitenlandcode,dos);
					
					// String
				
						writeString(this.vbllandadresbuitenlandomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumaanvangadresbuitenland,dos);
					
					// String
				
						writeString(this.vbldatumaanvangadresbuitenlandindicator,dos);
					
					// String
				
						writeString(this.vblregel1adresbuitenland,dos);
					
					// String
				
						writeString(this.vblregel2adresbuitenland,dos);
					
					// String
				
						writeString(this.vblregel3adresbuitenland,dos);
					
					// String
				
						writeString(this.vbllandvanwaaringeschrevencode,dos);
					
					// String
				
						writeString(this.vbllandvanwaaringeschrevenomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumvestiginginnederland,dos);
					
					// String
				
						writeString(this.vbldatumvestiginginnederlandindicator,dos);
					
					// String
				
						writeString(this.vblomschrijvingvanaangifteadreshouding,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblindicatiedocument);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vbldatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vbldatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vbldatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vblingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumvanopneming,dos);
					
					// String
				
						writeString(this.vbldatumvanopnemingindicator,dos);
					
					// String
				
						writeString(this.vblsoortpandcode,dos);
					
					// String
				
						writeString(this.vblsoortpandomschrijving,dos);
					
					// String
				
						writeString(this.vblwijkcode,dos);
					
					// String
				
						writeString(this.vblwijkomschrijving,dos);
					
					// String
				
						writeString(this.vblplanalogischewijkcode,dos);
					
					// String
				
						writeString(this.vblplanalogischewijkomschrijving,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblanummerhoofdbewoner);
					
					// String
				
						writeString(this.vbtaanduidingverblijfstitelcode,dos);
					
					// String
				
						writeString(this.vbtverblijfstitelvervallen,dos);
					
					// String
				
						writeString(this.vbtaanduidingverblijfstitelomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbtdatumeindeverblijfstitel,dos);
					
					// String
				
						writeString(this.vbtdatumeindeverblijfstitelindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtingangsdatumverblijfstitel,dos);
					
					// String
				
						writeString(this.vbtingangsdatumverblijfstitelindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vbtaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vbtdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vbtdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vbtdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vbtingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtdatumvanopneming,dos);
					
					// String
				
						writeString(this.vbtdatumvanopnemingindicator,dos);
					
					// String
				
						writeString(this.gzvindicatiegezagminderjarige,dos);
					
					// String
				
						writeString(this.gzvindicatiecurateleregister,dos);
					
					// String
				
						writeString(this.gzvgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.gzvgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.gzvdatumdocument,dos);
					
					// String
				
						writeString(this.gzvdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.gzvbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gzvaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.gzvdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.gzvdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.gzvdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.gzvingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvdatumvanopneming,dos);
					
					// String
				
						writeString(this.gzvdatumvanopnemingindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ksraanduidingeuropeeskiesrecht);
					
					// java.util.Date
				
						writeDate(this.ksrdatumverzoekofmededelingeuropeeskiesrecht,dos);
					
					// String
				
						writeString(this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ksreinddatumuitsluitingeuropeeskiesrecht,dos);
					
					// String
				
						writeString(this.ksreinddatumuitsluitingeuropeeskiesrechtindicator,dos);
					
					// String
				
						writeString(this.ksraanduidinguitgeslotenkiesrecht,dos);
					
					// java.util.Date
				
						writeDate(this.ksreinddatumuitsluitingkiesrecht,dos);
					
					// String
				
						writeString(this.ksreinddatumuitsluitingkiesrechtindicator,dos);
					
					// String
				
						writeString(this.ksrgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ksrgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ksrdatumdocument,dos);
					
					// String
				
						writeString(this.ksrdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.ksrbeschrijvingdocument,dos);
					
					// String
				
						writeString(this.vwsgemeentevaninschrijvingcode,dos);
					
					// String
				
						writeString(this.vwsgemeentevaninschrijvingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vwsdatuminschrijving,dos);
					
					// String
				
						writeString(this.vwsdatuminschrijvingindicator,dos);
					
					// String
				
						writeString(this.vwsindicatiegeheim,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",prsburgerservicenummer="+String.valueOf(prsburgerservicenummer));
		sb.append(",prsvoornamen="+prsvoornamen);
		sb.append(",prseerstevoornaam="+prseerstevoornaam);
		sb.append(",prsvoorletters="+prsvoorletters);
		sb.append(",prsadellijketitelcode="+prsadellijketitelcode);
		sb.append(",prsadellijketitelomschrijving="+prsadellijketitelomschrijving);
		sb.append(",prsvoorvoegselgeslachtsnaam="+prsvoorvoegselgeslachtsnaam);
		sb.append(",prsgeslachtsnaam="+prsgeslachtsnaam);
		sb.append(",prsnaamopgemaakt="+prsnaamopgemaakt);
		sb.append(",prsgeboortedatum="+String.valueOf(prsgeboortedatum));
		sb.append(",prsgeboortedatumindicator="+prsgeboortedatumindicator);
		sb.append(",prsgeboorteplaatscode="+prsgeboorteplaatscode);
		sb.append(",prsgeboorteplaatsomschrijving="+prsgeboorteplaatsomschrijving);
		sb.append(",prsgeboortelandcode="+prsgeboortelandcode);
		sb.append(",prsgeboortelandomschrijving="+prsgeboortelandomschrijving);
		sb.append(",prsgeslachtsaanduidingcode="+prsgeslachtsaanduidingcode);
		sb.append(",prsgeslachtsaanduidingomschrijving="+prsgeslachtsaanduidingomschrijving);
		sb.append(",prsaanduidingnaamgebruik="+prsaanduidingnaamgebruik);
		sb.append(",prsregistergemeenteaktecode="+prsregistergemeenteaktecode);
		sb.append(",prsregistergemeenteakteomschrijving="+prsregistergemeenteakteomschrijving);
		sb.append(",prsaktenummer="+prsaktenummer);
		sb.append(",prsgemeentedocumentcode="+prsgemeentedocumentcode);
		sb.append(",prsgemeentedocumentomschrijving="+prsgemeentedocumentomschrijving);
		sb.append(",prsdatumdocument="+String.valueOf(prsdatumdocument));
		sb.append(",prsdatumdocumentindicator="+prsdatumdocumentindicator);
		sb.append(",prsbeschrijvingdocument="+prsbeschrijvingdocument);
		sb.append(",prsaanduidinggegevensonderzoek="+String.valueOf(prsaanduidinggegevensonderzoek));
		sb.append(",prsdatumingangonderzoek="+String.valueOf(prsdatumingangonderzoek));
		sb.append(",prsdatumingangonderzoekindicator="+prsdatumingangonderzoekindicator);
		sb.append(",prsdatumeindeonderzoek="+String.valueOf(prsdatumeindeonderzoek));
		sb.append(",prsdatumeindeonderzoekindicator="+prsdatumeindeonderzoekindicator);
		sb.append(",prsingangsdatumgeldigheid="+String.valueOf(prsingangsdatumgeldigheid));
		sb.append(",prsingangsdatumgeldigheidindicator="+prsingangsdatumgeldigheidindicator);
		sb.append(",prsdatumvanopneming="+String.valueOf(prsdatumvanopneming));
		sb.append(",prsdatumvanopnemingindicator="+prsdatumvanopnemingindicator);
		sb.append(",prsstatuspersoon="+String.valueOf(prsstatuspersoon));
		sb.append(",prsrijkskodenationaliteit="+String.valueOf(prsrijkskodenationaliteit));
		sb.append(",prsgezinsverhouding="+String.valueOf(prsgezinsverhouding));
		sb.append(",prsgezinssterkte="+String.valueOf(prsgezinssterkte));
		sb.append(",prsanummergezinshoofd="+String.valueOf(prsanummergezinshoofd));
		sb.append(",prsburgerlijkestaat="+prsburgerlijkestaat);
		sb.append(",prsnaamswijzigingindicatie="+prsnaamswijzigingindicatie);
		sb.append(",prsdatumadreshoudingaaneengesloten="+String.valueOf(prsdatumadreshoudingaaneengesloten));
		sb.append(",prsdatumadreshoudingaaneengeslotenindicator="+prsdatumadreshoudingaaneengeslotenindicator);
		sb.append(",ou1anummer="+String.valueOf(ou1anummer));
		sb.append(",ou1burgerservicenummer="+String.valueOf(ou1burgerservicenummer));
		sb.append(",ou1voornamen="+ou1voornamen);
		sb.append(",ou1voorletters="+ou1voorletters);
		sb.append(",ou1adellijketitelcode="+ou1adellijketitelcode);
		sb.append(",ou1adellijketitelomschrijving="+ou1adellijketitelomschrijving);
		sb.append(",ou1voorvoegselgeslachtsnaam="+ou1voorvoegselgeslachtsnaam);
		sb.append(",ou1geslachtsnaam="+ou1geslachtsnaam);
		sb.append(",ou1naamopgemaakt="+ou1naamopgemaakt);
		sb.append(",ou1geboortedatum="+String.valueOf(ou1geboortedatum));
		sb.append(",ou1geboortedatumindicator="+ou1geboortedatumindicator);
		sb.append(",ou1geboorteplaatscode="+ou1geboorteplaatscode);
		sb.append(",ou1geboorteplaatsomschrijving="+ou1geboorteplaatsomschrijving);
		sb.append(",ou1geboortelandcode="+ou1geboortelandcode);
		sb.append(",ou1geboortelandomschrijving="+ou1geboortelandomschrijving);
		sb.append(",ou1geslachtsaanduidingcode="+ou1geslachtsaanduidingcode);
		sb.append(",ou1geslachtsaanduidingomschrijving="+ou1geslachtsaanduidingomschrijving);
		sb.append(",ou1datumingangfamilierechtelijkebetrekking="+String.valueOf(ou1datumingangfamilierechtelijkebetrekking));
		sb.append(",ou1datumingangfamilierechtelijkebetrekkingindicator="+ou1datumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou1registergemeenteaktecode="+ou1registergemeenteaktecode);
		sb.append(",ou1registergemeenteakteomschrijving="+ou1registergemeenteakteomschrijving);
		sb.append(",ou1aktenummer="+ou1aktenummer);
		sb.append(",ou1gemeentedocumentcode="+ou1gemeentedocumentcode);
		sb.append(",ou1gemeentedocumentomschrijving="+ou1gemeentedocumentomschrijving);
		sb.append(",ou1datumdocument="+String.valueOf(ou1datumdocument));
		sb.append(",ou1datumdocumentindicator="+ou1datumdocumentindicator);
		sb.append(",ou1beschrijvingdocument="+ou1beschrijvingdocument);
		sb.append(",ou1aanduidinggegevensonderzoek="+String.valueOf(ou1aanduidinggegevensonderzoek));
		sb.append(",ou1datumingangonderzoek="+String.valueOf(ou1datumingangonderzoek));
		sb.append(",ou1datumingangonderzoekindicator="+ou1datumingangonderzoekindicator);
		sb.append(",ou1datumeindeonderzoek="+String.valueOf(ou1datumeindeonderzoek));
		sb.append(",ou1datumeindeonderzoekindicator="+ou1datumeindeonderzoekindicator);
		sb.append(",ou1ingangsdatumgeldigheid="+String.valueOf(ou1ingangsdatumgeldigheid));
		sb.append(",ou1ingangsdatumgeldigheidindicator="+ou1ingangsdatumgeldigheidindicator);
		sb.append(",ou1datumvanopneming="+String.valueOf(ou1datumvanopneming));
		sb.append(",ou1datumvanopnemingindicator="+ou1datumvanopnemingindicator);
		sb.append(",ou2anummer="+String.valueOf(ou2anummer));
		sb.append(",ou2burgerservicenummer="+String.valueOf(ou2burgerservicenummer));
		sb.append(",ou2voornamen="+ou2voornamen);
		sb.append(",ou2voorletters="+ou2voorletters);
		sb.append(",ou2adellijketitelcode="+ou2adellijketitelcode);
		sb.append(",ou2adellijketitelomschrijving="+ou2adellijketitelomschrijving);
		sb.append(",ou2voorvoegselgeslachtsnaam="+ou2voorvoegselgeslachtsnaam);
		sb.append(",ou2geslachtsnaam="+ou2geslachtsnaam);
		sb.append(",ou2naamopgemaakt="+ou2naamopgemaakt);
		sb.append(",ou2geboortedatum="+String.valueOf(ou2geboortedatum));
		sb.append(",ou2geboortedatumindicator="+ou2geboortedatumindicator);
		sb.append(",ou2geboorteplaatscode="+ou2geboorteplaatscode);
		sb.append(",ou2geboorteplaatsomschrijving="+ou2geboorteplaatsomschrijving);
		sb.append(",ou2geboortelandcode="+ou2geboortelandcode);
		sb.append(",ou2geboortelandomschrijving="+ou2geboortelandomschrijving);
		sb.append(",ou2geslachtsaanduidingcode="+ou2geslachtsaanduidingcode);
		sb.append(",ou2geslachtsaanduidingomschrijving="+ou2geslachtsaanduidingomschrijving);
		sb.append(",ou2datumingangfamilierechtelijkebetrekking="+String.valueOf(ou2datumingangfamilierechtelijkebetrekking));
		sb.append(",ou2datumingangfamilierechtelijkebetrekkingindicator="+ou2datumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou2registergemeenteaktecode="+ou2registergemeenteaktecode);
		sb.append(",ou2registergemeenteakteomschrijving="+ou2registergemeenteakteomschrijving);
		sb.append(",ou2aktenummer="+ou2aktenummer);
		sb.append(",ou2gemeentedocumentcode="+ou2gemeentedocumentcode);
		sb.append(",ou2gemeentedocumentomschrijving="+ou2gemeentedocumentomschrijving);
		sb.append(",ou2datumdocument="+String.valueOf(ou2datumdocument));
		sb.append(",ou2datumdocumentindicator="+ou2datumdocumentindicator);
		sb.append(",ou2beschrijvingdocument="+ou2beschrijvingdocument);
		sb.append(",ou2aanduidinggegevensonderzoek="+String.valueOf(ou2aanduidinggegevensonderzoek));
		sb.append(",ou2datumingangonderzoek="+String.valueOf(ou2datumingangonderzoek));
		sb.append(",ou2datumingangonderzoekindicator="+ou2datumingangonderzoekindicator);
		sb.append(",ou2datumeindeonderzoek="+String.valueOf(ou2datumeindeonderzoek));
		sb.append(",ou2datumeindeonderzoekindicator="+ou2datumeindeonderzoekindicator);
		sb.append(",ou2ingangsdatumgeldigheid="+String.valueOf(ou2ingangsdatumgeldigheid));
		sb.append(",ou2ingangsdatumgeldigheidindicator="+ou2ingangsdatumgeldigheidindicator);
		sb.append(",ou2datumvanopneming="+String.valueOf(ou2datumvanopneming));
		sb.append(",ou2datumvanopnemingindicator="+ou2datumvanopnemingindicator);
		sb.append(",ovldatumoverlijden="+String.valueOf(ovldatumoverlijden));
		sb.append(",ovldatumoverlijdenindicator="+ovldatumoverlijdenindicator);
		sb.append(",ovlplaatsoverlijdencode="+ovlplaatsoverlijdencode);
		sb.append(",ovlplaatsoverlijdenomschrijving="+ovlplaatsoverlijdenomschrijving);
		sb.append(",ovllandoverlijdencode="+ovllandoverlijdencode);
		sb.append(",ovllandoverlijdenomschrijving="+ovllandoverlijdenomschrijving);
		sb.append(",ovlaanduidinggegevensonderzoek="+String.valueOf(ovlaanduidinggegevensonderzoek));
		sb.append(",ovldatumingangonderzoek="+String.valueOf(ovldatumingangonderzoek));
		sb.append(",ovldatumingangonderzoekindicator="+ovldatumingangonderzoekindicator);
		sb.append(",ovldatumeindeonderzoek="+String.valueOf(ovldatumeindeonderzoek));
		sb.append(",ovldatumeindeonderzoekindicator="+ovldatumeindeonderzoekindicator);
		sb.append(",ovlingangsdatumgeldigheid="+String.valueOf(ovlingangsdatumgeldigheid));
		sb.append(",ovlingangsdatumgeldigheidindicator="+ovlingangsdatumgeldigheidindicator);
		sb.append(",ovldatumvanopneming="+String.valueOf(ovldatumvanopneming));
		sb.append(",ovldatumvanopnemingindicator="+ovldatumvanopnemingindicator);
		sb.append(",insdatumingangblokkeringpl="+String.valueOf(insdatumingangblokkeringpl));
		sb.append(",insdatumingangblokkeringplindicator="+insdatumingangblokkeringplindicator);
		sb.append(",insdatumopschortingbijhouding="+String.valueOf(insdatumopschortingbijhouding));
		sb.append(",insdatumopschortingbijhoudingindicator="+insdatumopschortingbijhoudingindicator);
		sb.append(",insomschrijvingredenopschortingbijhouding="+insomschrijvingredenopschortingbijhouding);
		sb.append(",insdatumeersteinschrijvinggba="+String.valueOf(insdatumeersteinschrijvinggba));
		sb.append(",insdatumeersteinschrijvingindicator="+insdatumeersteinschrijvingindicator);
		sb.append(",insgemeentewaarpkzichbevindtcode="+insgemeentewaarpkzichbevindtcode);
		sb.append(",insgemeentewaarpkzichbevindtomschrijving="+insgemeentewaarpkzichbevindtomschrijving);
		sb.append(",insindicatiegeheim="+insindicatiegeheim);
		sb.append(",insversienummer="+String.valueOf(insversienummer));
		sb.append(",insdatumtijdstempel="+insdatumtijdstempel);
		sb.append(",inspkgegevensvolledigmeegeconverteerd="+inspkgegevensvolledigmeegeconverteerd);
		sb.append(",vblgemeentevaninschrijvingcode="+vblgemeentevaninschrijvingcode);
		sb.append(",vblgemeentevaninschrijvingomschrijving="+vblgemeentevaninschrijvingomschrijving);
		sb.append(",vbldatuminschrijving="+String.valueOf(vbldatuminschrijving));
		sb.append(",vbldatuminschrijvingindicator="+vbldatuminschrijvingindicator);
		sb.append(",vblfunctieadres="+vblfunctieadres);
		sb.append(",vblgemeentedeel="+vblgemeentedeel);
		sb.append(",vbldatumaanvangadreshouding="+String.valueOf(vbldatumaanvangadreshouding));
		sb.append(",vbldatumaanvangadreshoudingindicator="+vbldatumaanvangadreshoudingindicator);
		sb.append(",vblstraatnaam="+vblstraatnaam);
		sb.append(",vblnaamopenbareruimte="+vblnaamopenbareruimte);
		sb.append(",vbladresopgemaakt="+vbladresopgemaakt);
		sb.append(",vblwoonplaatsopgemaakt="+vblwoonplaatsopgemaakt);
		sb.append(",vblhuisnummer="+String.valueOf(vblhuisnummer));
		sb.append(",vblhuisletter="+vblhuisletter);
		sb.append(",vblhuisnummertoevoeging="+vblhuisnummertoevoeging);
		sb.append(",vblaanduidingbijhuisnummer="+vblaanduidingbijhuisnummer);
		sb.append(",vblpostcode="+vblpostcode);
		sb.append(",vblwoonplaatsnaam="+vblwoonplaatsnaam);
		sb.append(",vblidentificatiecodeverblijfplaats="+vblidentificatiecodeverblijfplaats);
		sb.append(",vblidentificatiecodenummeraanduiding="+vblidentificatiecodenummeraanduiding);
		sb.append(",vbllocatiebeschrijving="+vbllocatiebeschrijving);
		sb.append(",vbllandadresbuitenlandcode="+vbllandadresbuitenlandcode);
		sb.append(",vbllandadresbuitenlandomschrijving="+vbllandadresbuitenlandomschrijving);
		sb.append(",vbldatumaanvangadresbuitenland="+String.valueOf(vbldatumaanvangadresbuitenland));
		sb.append(",vbldatumaanvangadresbuitenlandindicator="+vbldatumaanvangadresbuitenlandindicator);
		sb.append(",vblregel1adresbuitenland="+vblregel1adresbuitenland);
		sb.append(",vblregel2adresbuitenland="+vblregel2adresbuitenland);
		sb.append(",vblregel3adresbuitenland="+vblregel3adresbuitenland);
		sb.append(",vbllandvanwaaringeschrevencode="+vbllandvanwaaringeschrevencode);
		sb.append(",vbllandvanwaaringeschrevenomschrijving="+vbllandvanwaaringeschrevenomschrijving);
		sb.append(",vbldatumvestiginginnederland="+String.valueOf(vbldatumvestiginginnederland));
		sb.append(",vbldatumvestiginginnederlandindicator="+vbldatumvestiginginnederlandindicator);
		sb.append(",vblomschrijvingvanaangifteadreshouding="+vblomschrijvingvanaangifteadreshouding);
		sb.append(",vblindicatiedocument="+String.valueOf(vblindicatiedocument));
		sb.append(",vblaanduidinggegevensonderzoek="+String.valueOf(vblaanduidinggegevensonderzoek));
		sb.append(",vbldatumingangonderzoek="+String.valueOf(vbldatumingangonderzoek));
		sb.append(",vbldatumingangonderzoekindicator="+vbldatumingangonderzoekindicator);
		sb.append(",vbldatumeindeonderzoek="+String.valueOf(vbldatumeindeonderzoek));
		sb.append(",vbldatumeindeonderzoekindicator="+vbldatumeindeonderzoekindicator);
		sb.append(",vblingangsdatumgeldigheid="+String.valueOf(vblingangsdatumgeldigheid));
		sb.append(",vblingangsdatumgeldigheidindicator="+vblingangsdatumgeldigheidindicator);
		sb.append(",vbldatumvanopneming="+String.valueOf(vbldatumvanopneming));
		sb.append(",vbldatumvanopnemingindicator="+vbldatumvanopnemingindicator);
		sb.append(",vblsoortpandcode="+vblsoortpandcode);
		sb.append(",vblsoortpandomschrijving="+vblsoortpandomschrijving);
		sb.append(",vblwijkcode="+vblwijkcode);
		sb.append(",vblwijkomschrijving="+vblwijkomschrijving);
		sb.append(",vblplanalogischewijkcode="+vblplanalogischewijkcode);
		sb.append(",vblplanalogischewijkomschrijving="+vblplanalogischewijkomschrijving);
		sb.append(",vblanummerhoofdbewoner="+String.valueOf(vblanummerhoofdbewoner));
		sb.append(",vbtaanduidingverblijfstitelcode="+vbtaanduidingverblijfstitelcode);
		sb.append(",vbtverblijfstitelvervallen="+vbtverblijfstitelvervallen);
		sb.append(",vbtaanduidingverblijfstitelomschrijving="+vbtaanduidingverblijfstitelomschrijving);
		sb.append(",vbtdatumeindeverblijfstitel="+String.valueOf(vbtdatumeindeverblijfstitel));
		sb.append(",vbtdatumeindeverblijfstitelindicator="+vbtdatumeindeverblijfstitelindicator);
		sb.append(",vbtingangsdatumverblijfstitel="+String.valueOf(vbtingangsdatumverblijfstitel));
		sb.append(",vbtingangsdatumverblijfstitelindicator="+vbtingangsdatumverblijfstitelindicator);
		sb.append(",vbtaanduidinggegevensonderzoek="+String.valueOf(vbtaanduidinggegevensonderzoek));
		sb.append(",vbtdatumingangonderzoek="+String.valueOf(vbtdatumingangonderzoek));
		sb.append(",vbtdatumingangonderzoekindicator="+vbtdatumingangonderzoekindicator);
		sb.append(",vbtdatumeindeonderzoek="+String.valueOf(vbtdatumeindeonderzoek));
		sb.append(",vbtdatumeindeonderzoekindicator="+vbtdatumeindeonderzoekindicator);
		sb.append(",vbtingangsdatumgeldigheid="+String.valueOf(vbtingangsdatumgeldigheid));
		sb.append(",vbtingangsdatumgeldigheidindicator="+vbtingangsdatumgeldigheidindicator);
		sb.append(",vbtdatumvanopneming="+String.valueOf(vbtdatumvanopneming));
		sb.append(",vbtdatumvanopnemingindicator="+vbtdatumvanopnemingindicator);
		sb.append(",gzvindicatiegezagminderjarige="+gzvindicatiegezagminderjarige);
		sb.append(",gzvindicatiecurateleregister="+gzvindicatiecurateleregister);
		sb.append(",gzvgemeentedocumentcode="+gzvgemeentedocumentcode);
		sb.append(",gzvgemeentedocumentomschrijving="+gzvgemeentedocumentomschrijving);
		sb.append(",gzvdatumdocument="+String.valueOf(gzvdatumdocument));
		sb.append(",gzvdatumdocumentindicator="+gzvdatumdocumentindicator);
		sb.append(",gzvbeschrijvingdocument="+gzvbeschrijvingdocument);
		sb.append(",gzvaanduidinggegevensonderzoek="+String.valueOf(gzvaanduidinggegevensonderzoek));
		sb.append(",gzvdatumingangonderzoek="+String.valueOf(gzvdatumingangonderzoek));
		sb.append(",gzvdatumingangonderzoekindicator="+gzvdatumingangonderzoekindicator);
		sb.append(",gzvdatumeindeonderzoek="+String.valueOf(gzvdatumeindeonderzoek));
		sb.append(",gzvdatumeindeonderzoekindicator="+gzvdatumeindeonderzoekindicator);
		sb.append(",gzvingangsdatumgeldigheid="+String.valueOf(gzvingangsdatumgeldigheid));
		sb.append(",gzvingangsdatumgeldigheidindicator="+gzvingangsdatumgeldigheidindicator);
		sb.append(",gzvdatumvanopneming="+String.valueOf(gzvdatumvanopneming));
		sb.append(",gzvdatumvanopnemingindicator="+gzvdatumvanopnemingindicator);
		sb.append(",ksraanduidingeuropeeskiesrecht="+String.valueOf(ksraanduidingeuropeeskiesrecht));
		sb.append(",ksrdatumverzoekofmededelingeuropeeskiesrecht="+String.valueOf(ksrdatumverzoekofmededelingeuropeeskiesrecht));
		sb.append(",ksrdatumverzoekofmededelingeuropeeskiesrechtindicator="+ksrdatumverzoekofmededelingeuropeeskiesrechtindicator);
		sb.append(",ksreinddatumuitsluitingeuropeeskiesrecht="+String.valueOf(ksreinddatumuitsluitingeuropeeskiesrecht));
		sb.append(",ksreinddatumuitsluitingeuropeeskiesrechtindicator="+ksreinddatumuitsluitingeuropeeskiesrechtindicator);
		sb.append(",ksraanduidinguitgeslotenkiesrecht="+ksraanduidinguitgeslotenkiesrecht);
		sb.append(",ksreinddatumuitsluitingkiesrecht="+String.valueOf(ksreinddatumuitsluitingkiesrecht));
		sb.append(",ksreinddatumuitsluitingkiesrechtindicator="+ksreinddatumuitsluitingkiesrechtindicator);
		sb.append(",ksrgemeentedocumentcode="+ksrgemeentedocumentcode);
		sb.append(",ksrgemeentedocumentomschrijving="+ksrgemeentedocumentomschrijving);
		sb.append(",ksrdatumdocument="+String.valueOf(ksrdatumdocument));
		sb.append(",ksrdatumdocumentindicator="+ksrdatumdocumentindicator);
		sb.append(",ksrbeschrijvingdocument="+ksrbeschrijvingdocument);
		sb.append(",vwsgemeentevaninschrijvingcode="+vwsgemeentevaninschrijvingcode);
		sb.append(",vwsgemeentevaninschrijvingomschrijving="+vwsgemeentevaninschrijvingomschrijving);
		sb.append(",vwsdatuminschrijving="+String.valueOf(vwsdatuminschrijving));
		sb.append(",vwsdatuminschrijvingindicator="+vwsdatuminschrijvingindicator);
		sb.append(",vwsindicatiegeheim="+vwsindicatiegeheim);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_persoon_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_persoonStruct implements routines.system.IPersistableRow<ldf_anr_persoonStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_persoonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_persoonStruct ldf_anr_persoon = new ldf_anr_persoonStruct();
ldf_anr_persoon_keyStruct ldf_anr_persoon_key = new ldf_anr_persoon_keyStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_persoon_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_persoon";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_persoon";
}

        int deleteKeyCount_tPostgresqlOutput_1 = 1;
        if(deleteKeyCount_tPostgresqlOutput_1 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 1000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String delete_tPostgresqlOutput_1 = "DELETE FROM \"" + tableName_tPostgresqlOutput_1 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(delete_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_persoon" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_persoon_keyStruct ldf_anr_persoon_key_tmp = new ldf_anr_persoon_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_anr_persoon.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_1.getObject(1) != null) {
                ldf_anr_persoon.prsanummer = rs_tPostgresqlInput_1.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//ldf_anr_persoon
			//ldf_anr_persoon


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_persoon"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_anr_persoon_key = null;


// # Output table : 'ldf_anr_persoon_key'
ldf_anr_persoon_key_tmp.prsanummer = ldf_anr_persoon.prsanummer ;
ldf_anr_persoon_key_tmp.prsburgerservicenummer = null;
ldf_anr_persoon_key_tmp.prsvoornamen = null;
ldf_anr_persoon_key_tmp.prseerstevoornaam = null;
ldf_anr_persoon_key_tmp.prsvoorletters = null;
ldf_anr_persoon_key_tmp.prsadellijketitelcode = null;
ldf_anr_persoon_key_tmp.prsadellijketitelomschrijving = null;
ldf_anr_persoon_key_tmp.prsvoorvoegselgeslachtsnaam = null;
ldf_anr_persoon_key_tmp.prsgeslachtsnaam = null;
ldf_anr_persoon_key_tmp.prsnaamopgemaakt = null;
ldf_anr_persoon_key_tmp.prsgeboortedatum = null;
ldf_anr_persoon_key_tmp.prsgeboortedatumindicator = null;
ldf_anr_persoon_key_tmp.prsgeboorteplaatscode = null;
ldf_anr_persoon_key_tmp.prsgeboorteplaatsomschrijving = null;
ldf_anr_persoon_key_tmp.prsgeboortelandcode = null;
ldf_anr_persoon_key_tmp.prsgeboortelandomschrijving = null;
ldf_anr_persoon_key_tmp.prsgeslachtsaanduidingcode = null;
ldf_anr_persoon_key_tmp.prsgeslachtsaanduidingomschrijving = null;
ldf_anr_persoon_key_tmp.prsaanduidingnaamgebruik = null;
ldf_anr_persoon_key_tmp.prsregistergemeenteaktecode = null;
ldf_anr_persoon_key_tmp.prsregistergemeenteakteomschrijving = null;
ldf_anr_persoon_key_tmp.prsaktenummer = null;
ldf_anr_persoon_key_tmp.prsgemeentedocumentcode = null;
ldf_anr_persoon_key_tmp.prsgemeentedocumentomschrijving = null;
ldf_anr_persoon_key_tmp.prsdatumdocument = null;
ldf_anr_persoon_key_tmp.prsdatumdocumentindicator = null;
ldf_anr_persoon_key_tmp.prsbeschrijvingdocument = null;
ldf_anr_persoon_key_tmp.prsaanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.prsdatumingangonderzoek = null;
ldf_anr_persoon_key_tmp.prsdatumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.prsdatumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.prsdatumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.prsingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.prsingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.prsdatumvanopneming = null;
ldf_anr_persoon_key_tmp.prsdatumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.prsstatuspersoon = null;
ldf_anr_persoon_key_tmp.prsrijkskodenationaliteit = null;
ldf_anr_persoon_key_tmp.prsgezinsverhouding = null;
ldf_anr_persoon_key_tmp.prsgezinssterkte = null;
ldf_anr_persoon_key_tmp.prsanummergezinshoofd = null;
ldf_anr_persoon_key_tmp.prsburgerlijkestaat = null;
ldf_anr_persoon_key_tmp.prsnaamswijzigingindicatie = null;
ldf_anr_persoon_key_tmp.prsdatumadreshoudingaaneengesloten = null;
ldf_anr_persoon_key_tmp.prsdatumadreshoudingaaneengeslotenindicator = null;
ldf_anr_persoon_key_tmp.ou1anummer = null;
ldf_anr_persoon_key_tmp.ou1burgerservicenummer = null;
ldf_anr_persoon_key_tmp.ou1voornamen = null;
ldf_anr_persoon_key_tmp.ou1voorletters = null;
ldf_anr_persoon_key_tmp.ou1adellijketitelcode = null;
ldf_anr_persoon_key_tmp.ou1adellijketitelomschrijving = null;
ldf_anr_persoon_key_tmp.ou1voorvoegselgeslachtsnaam = null;
ldf_anr_persoon_key_tmp.ou1geslachtsnaam = null;
ldf_anr_persoon_key_tmp.ou1naamopgemaakt = null;
ldf_anr_persoon_key_tmp.ou1geboortedatum = null;
ldf_anr_persoon_key_tmp.ou1geboortedatumindicator = null;
ldf_anr_persoon_key_tmp.ou1geboorteplaatscode = null;
ldf_anr_persoon_key_tmp.ou1geboorteplaatsomschrijving = null;
ldf_anr_persoon_key_tmp.ou1geboortelandcode = null;
ldf_anr_persoon_key_tmp.ou1geboortelandomschrijving = null;
ldf_anr_persoon_key_tmp.ou1geslachtsaanduidingcode = null;
ldf_anr_persoon_key_tmp.ou1geslachtsaanduidingomschrijving = null;
ldf_anr_persoon_key_tmp.ou1datumingangfamilierechtelijkebetrekking = null;
ldf_anr_persoon_key_tmp.ou1datumingangfamilierechtelijkebetrekkingindicator = null;
ldf_anr_persoon_key_tmp.ou1registergemeenteaktecode = null;
ldf_anr_persoon_key_tmp.ou1registergemeenteakteomschrijving = null;
ldf_anr_persoon_key_tmp.ou1aktenummer = null;
ldf_anr_persoon_key_tmp.ou1gemeentedocumentcode = null;
ldf_anr_persoon_key_tmp.ou1gemeentedocumentomschrijving = null;
ldf_anr_persoon_key_tmp.ou1datumdocument = null;
ldf_anr_persoon_key_tmp.ou1datumdocumentindicator = null;
ldf_anr_persoon_key_tmp.ou1beschrijvingdocument = null;
ldf_anr_persoon_key_tmp.ou1aanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.ou1datumingangonderzoek = null;
ldf_anr_persoon_key_tmp.ou1datumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.ou1datumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.ou1datumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.ou1ingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.ou1ingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.ou1datumvanopneming = null;
ldf_anr_persoon_key_tmp.ou1datumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.ou2anummer = null;
ldf_anr_persoon_key_tmp.ou2burgerservicenummer = null;
ldf_anr_persoon_key_tmp.ou2voornamen = null;
ldf_anr_persoon_key_tmp.ou2voorletters = null;
ldf_anr_persoon_key_tmp.ou2adellijketitelcode = null;
ldf_anr_persoon_key_tmp.ou2adellijketitelomschrijving = null;
ldf_anr_persoon_key_tmp.ou2voorvoegselgeslachtsnaam = null;
ldf_anr_persoon_key_tmp.ou2geslachtsnaam = null;
ldf_anr_persoon_key_tmp.ou2naamopgemaakt = null;
ldf_anr_persoon_key_tmp.ou2geboortedatum = null;
ldf_anr_persoon_key_tmp.ou2geboortedatumindicator = null;
ldf_anr_persoon_key_tmp.ou2geboorteplaatscode = null;
ldf_anr_persoon_key_tmp.ou2geboorteplaatsomschrijving = null;
ldf_anr_persoon_key_tmp.ou2geboortelandcode = null;
ldf_anr_persoon_key_tmp.ou2geboortelandomschrijving = null;
ldf_anr_persoon_key_tmp.ou2geslachtsaanduidingcode = null;
ldf_anr_persoon_key_tmp.ou2geslachtsaanduidingomschrijving = null;
ldf_anr_persoon_key_tmp.ou2datumingangfamilierechtelijkebetrekking = null;
ldf_anr_persoon_key_tmp.ou2datumingangfamilierechtelijkebetrekkingindicator = null;
ldf_anr_persoon_key_tmp.ou2registergemeenteaktecode = null;
ldf_anr_persoon_key_tmp.ou2registergemeenteakteomschrijving = null;
ldf_anr_persoon_key_tmp.ou2aktenummer = null;
ldf_anr_persoon_key_tmp.ou2gemeentedocumentcode = null;
ldf_anr_persoon_key_tmp.ou2gemeentedocumentomschrijving = null;
ldf_anr_persoon_key_tmp.ou2datumdocument = null;
ldf_anr_persoon_key_tmp.ou2datumdocumentindicator = null;
ldf_anr_persoon_key_tmp.ou2beschrijvingdocument = null;
ldf_anr_persoon_key_tmp.ou2aanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.ou2datumingangonderzoek = null;
ldf_anr_persoon_key_tmp.ou2datumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.ou2datumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.ou2datumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.ou2ingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.ou2ingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.ou2datumvanopneming = null;
ldf_anr_persoon_key_tmp.ou2datumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.ovldatumoverlijden = null;
ldf_anr_persoon_key_tmp.ovldatumoverlijdenindicator = null;
ldf_anr_persoon_key_tmp.ovlplaatsoverlijdencode = null;
ldf_anr_persoon_key_tmp.ovlplaatsoverlijdenomschrijving = null;
ldf_anr_persoon_key_tmp.ovllandoverlijdencode = null;
ldf_anr_persoon_key_tmp.ovllandoverlijdenomschrijving = null;
ldf_anr_persoon_key_tmp.ovlaanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.ovldatumingangonderzoek = null;
ldf_anr_persoon_key_tmp.ovldatumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.ovldatumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.ovldatumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.ovlingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.ovlingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.ovldatumvanopneming = null;
ldf_anr_persoon_key_tmp.ovldatumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.insdatumingangblokkeringpl = null;
ldf_anr_persoon_key_tmp.insdatumingangblokkeringplindicator = null;
ldf_anr_persoon_key_tmp.insdatumopschortingbijhouding = null;
ldf_anr_persoon_key_tmp.insdatumopschortingbijhoudingindicator = null;
ldf_anr_persoon_key_tmp.insomschrijvingredenopschortingbijhouding = null;
ldf_anr_persoon_key_tmp.insdatumeersteinschrijvinggba = null;
ldf_anr_persoon_key_tmp.insdatumeersteinschrijvingindicator = null;
ldf_anr_persoon_key_tmp.insgemeentewaarpkzichbevindtcode = null;
ldf_anr_persoon_key_tmp.insgemeentewaarpkzichbevindtomschrijving = null;
ldf_anr_persoon_key_tmp.insindicatiegeheim = null;
ldf_anr_persoon_key_tmp.insversienummer = null;
ldf_anr_persoon_key_tmp.insdatumtijdstempel = null;
ldf_anr_persoon_key_tmp.inspkgegevensvolledigmeegeconverteerd = null;
ldf_anr_persoon_key_tmp.vblgemeentevaninschrijvingcode = null;
ldf_anr_persoon_key_tmp.vblgemeentevaninschrijvingomschrijving = null;
ldf_anr_persoon_key_tmp.vbldatuminschrijving = null;
ldf_anr_persoon_key_tmp.vbldatuminschrijvingindicator = null;
ldf_anr_persoon_key_tmp.vblfunctieadres = null;
ldf_anr_persoon_key_tmp.vblgemeentedeel = null;
ldf_anr_persoon_key_tmp.vbldatumaanvangadreshouding = null;
ldf_anr_persoon_key_tmp.vbldatumaanvangadreshoudingindicator = null;
ldf_anr_persoon_key_tmp.vblstraatnaam = null;
ldf_anr_persoon_key_tmp.vblnaamopenbareruimte = null;
ldf_anr_persoon_key_tmp.vbladresopgemaakt = null;
ldf_anr_persoon_key_tmp.vblwoonplaatsopgemaakt = null;
ldf_anr_persoon_key_tmp.vblhuisnummer = null;
ldf_anr_persoon_key_tmp.vblhuisletter = null;
ldf_anr_persoon_key_tmp.vblhuisnummertoevoeging = null;
ldf_anr_persoon_key_tmp.vblaanduidingbijhuisnummer = null;
ldf_anr_persoon_key_tmp.vblpostcode = null;
ldf_anr_persoon_key_tmp.vblwoonplaatsnaam = null;
ldf_anr_persoon_key_tmp.vblidentificatiecodeverblijfplaats = null;
ldf_anr_persoon_key_tmp.vblidentificatiecodenummeraanduiding = null;
ldf_anr_persoon_key_tmp.vbllocatiebeschrijving = null;
ldf_anr_persoon_key_tmp.vbllandadresbuitenlandcode = null;
ldf_anr_persoon_key_tmp.vbllandadresbuitenlandomschrijving = null;
ldf_anr_persoon_key_tmp.vbldatumaanvangadresbuitenland = null;
ldf_anr_persoon_key_tmp.vbldatumaanvangadresbuitenlandindicator = null;
ldf_anr_persoon_key_tmp.vblregel1adresbuitenland = null;
ldf_anr_persoon_key_tmp.vblregel2adresbuitenland = null;
ldf_anr_persoon_key_tmp.vblregel3adresbuitenland = null;
ldf_anr_persoon_key_tmp.vbllandvanwaaringeschrevencode = null;
ldf_anr_persoon_key_tmp.vbllandvanwaaringeschrevenomschrijving = null;
ldf_anr_persoon_key_tmp.vbldatumvestiginginnederland = null;
ldf_anr_persoon_key_tmp.vbldatumvestiginginnederlandindicator = null;
ldf_anr_persoon_key_tmp.vblomschrijvingvanaangifteadreshouding = null;
ldf_anr_persoon_key_tmp.vblindicatiedocument = null;
ldf_anr_persoon_key_tmp.vblaanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.vbldatumingangonderzoek = null;
ldf_anr_persoon_key_tmp.vbldatumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.vbldatumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.vbldatumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.vblingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.vblingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.vbldatumvanopneming = null;
ldf_anr_persoon_key_tmp.vbldatumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.vblsoortpandcode = null;
ldf_anr_persoon_key_tmp.vblsoortpandomschrijving = null;
ldf_anr_persoon_key_tmp.vblwijkcode = null;
ldf_anr_persoon_key_tmp.vblwijkomschrijving = null;
ldf_anr_persoon_key_tmp.vblplanalogischewijkcode = null;
ldf_anr_persoon_key_tmp.vblplanalogischewijkomschrijving = null;
ldf_anr_persoon_key_tmp.vblanummerhoofdbewoner = null;
ldf_anr_persoon_key_tmp.vbtaanduidingverblijfstitelcode = null;
ldf_anr_persoon_key_tmp.vbtverblijfstitelvervallen = null;
ldf_anr_persoon_key_tmp.vbtaanduidingverblijfstitelomschrijving = null;
ldf_anr_persoon_key_tmp.vbtdatumeindeverblijfstitel = null;
ldf_anr_persoon_key_tmp.vbtdatumeindeverblijfstitelindicator = null;
ldf_anr_persoon_key_tmp.vbtingangsdatumverblijfstitel = null;
ldf_anr_persoon_key_tmp.vbtingangsdatumverblijfstitelindicator = null;
ldf_anr_persoon_key_tmp.vbtaanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.vbtdatumingangonderzoek = null;
ldf_anr_persoon_key_tmp.vbtdatumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.vbtdatumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.vbtdatumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.vbtingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.vbtingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.vbtdatumvanopneming = null;
ldf_anr_persoon_key_tmp.vbtdatumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.gzvindicatiegezagminderjarige = null;
ldf_anr_persoon_key_tmp.gzvindicatiecurateleregister = null;
ldf_anr_persoon_key_tmp.gzvgemeentedocumentcode = null;
ldf_anr_persoon_key_tmp.gzvgemeentedocumentomschrijving = null;
ldf_anr_persoon_key_tmp.gzvdatumdocument = null;
ldf_anr_persoon_key_tmp.gzvdatumdocumentindicator = null;
ldf_anr_persoon_key_tmp.gzvbeschrijvingdocument = null;
ldf_anr_persoon_key_tmp.gzvaanduidinggegevensonderzoek = null;
ldf_anr_persoon_key_tmp.gzvdatumingangonderzoek = null;
ldf_anr_persoon_key_tmp.gzvdatumingangonderzoekindicator = null;
ldf_anr_persoon_key_tmp.gzvdatumeindeonderzoek = null;
ldf_anr_persoon_key_tmp.gzvdatumeindeonderzoekindicator = null;
ldf_anr_persoon_key_tmp.gzvingangsdatumgeldigheid = null;
ldf_anr_persoon_key_tmp.gzvingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_key_tmp.gzvdatumvanopneming = null;
ldf_anr_persoon_key_tmp.gzvdatumvanopnemingindicator = null;
ldf_anr_persoon_key_tmp.ksraanduidingeuropeeskiesrecht = null;
ldf_anr_persoon_key_tmp.ksrdatumverzoekofmededelingeuropeeskiesrecht = null;
ldf_anr_persoon_key_tmp.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator = null;
ldf_anr_persoon_key_tmp.ksreinddatumuitsluitingeuropeeskiesrecht = null;
ldf_anr_persoon_key_tmp.ksreinddatumuitsluitingeuropeeskiesrechtindicator = null;
ldf_anr_persoon_key_tmp.ksraanduidinguitgeslotenkiesrecht = null;
ldf_anr_persoon_key_tmp.ksreinddatumuitsluitingkiesrecht = null;
ldf_anr_persoon_key_tmp.ksreinddatumuitsluitingkiesrechtindicator = null;
ldf_anr_persoon_key_tmp.ksrgemeentedocumentcode = null;
ldf_anr_persoon_key_tmp.ksrgemeentedocumentomschrijving = null;
ldf_anr_persoon_key_tmp.ksrdatumdocument = null;
ldf_anr_persoon_key_tmp.ksrdatumdocumentindicator = null;
ldf_anr_persoon_key_tmp.ksrbeschrijvingdocument = null;
ldf_anr_persoon_key_tmp.vwsgemeentevaninschrijvingcode = null;
ldf_anr_persoon_key_tmp.vwsgemeentevaninschrijvingomschrijving = null;
ldf_anr_persoon_key_tmp.vwsdatuminschrijving = null;
ldf_anr_persoon_key_tmp.vwsdatuminschrijvingindicator = null;
ldf_anr_persoon_key_tmp.vwsindicatiegeheim = null;
ldf_anr_persoon_key = ldf_anr_persoon_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_anr_persoon_key"
if(ldf_anr_persoon_key != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_anr_persoon_key
			//ldf_anr_persoon_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_persoon_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
					
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_anr_persoon_key.prsanummer);

    		pstmt_tPostgresqlOutput_1.addBatch();
			nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		
            if(!whetherReject_tPostgresqlOutput_1) {
            }
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    	    deletedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    	    deletedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_anr_persoon_key"







	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_persoon"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    	    deletedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_persoon_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tPostgresqlInput_2Process(globalMap);



/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_nationaliteit_keyStruct implements routines.system.IPersistableRow<ldf_anr_nationaliteit_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public String natnationaliteitcode;

				public String getNatnationaliteitcode () {
					return this.natnationaliteitcode;
				}
				
			    public String natnationaliteitvervallen;

				public String getNatnationaliteitvervallen () {
					return this.natnationaliteitvervallen;
				}
				
			    public String natnationaliteitomschrijving;

				public String getNatnationaliteitomschrijving () {
					return this.natnationaliteitomschrijving;
				}
				
			    public String natredenopnamenationaliteitcode;

				public String getNatredenopnamenationaliteitcode () {
					return this.natredenopnamenationaliteitcode;
				}
				
			    public String natredenopnamenationaliteitomschrijving;

				public String getNatredenopnamenationaliteitomschrijving () {
					return this.natredenopnamenationaliteitomschrijving;
				}
				
			    public String natredenbeeindigennationaliteitcode;

				public String getNatredenbeeindigennationaliteitcode () {
					return this.natredenbeeindigennationaliteitcode;
				}
				
			    public String natredenbeeindigennationaliteitomschrijving;

				public String getNatredenbeeindigennationaliteitomschrijving () {
					return this.natredenbeeindigennationaliteitomschrijving;
				}
				
			    public String nataanduidingbijzondernederlanderschap;

				public String getNataanduidingbijzondernederlanderschap () {
					return this.nataanduidingbijzondernederlanderschap;
				}
				
			    public String nateupersoonsnummer;

				public String getNateupersoonsnummer () {
					return this.nateupersoonsnummer;
				}
				
			    public String natgemeentedocumentcode;

				public String getNatgemeentedocumentcode () {
					return this.natgemeentedocumentcode;
				}
				
			    public String natgemeentedocumentomschrijving;

				public String getNatgemeentedocumentomschrijving () {
					return this.natgemeentedocumentomschrijving;
				}
				
			    public java.util.Date natdatumdocument;

				public java.util.Date getNatdatumdocument () {
					return this.natdatumdocument;
				}
				
			    public String natdatumdocumentindicator;

				public String getNatdatumdocumentindicator () {
					return this.natdatumdocumentindicator;
				}
				
			    public String natbeschrijvingdocument;

				public String getNatbeschrijvingdocument () {
					return this.natbeschrijvingdocument;
				}
				
			    public BigDecimal nataanduidinggegevensonderzoek;

				public BigDecimal getNataanduidinggegevensonderzoek () {
					return this.nataanduidinggegevensonderzoek;
				}
				
			    public java.util.Date natdatumingangonderzoek;

				public java.util.Date getNatdatumingangonderzoek () {
					return this.natdatumingangonderzoek;
				}
				
			    public String natdatumingangonderzoekindicator;

				public String getNatdatumingangonderzoekindicator () {
					return this.natdatumingangonderzoekindicator;
				}
				
			    public java.util.Date natdatumeindeonderzoek;

				public java.util.Date getNatdatumeindeonderzoek () {
					return this.natdatumeindeonderzoek;
				}
				
			    public String natdatumeindeonderzoekindicator;

				public String getNatdatumeindeonderzoekindicator () {
					return this.natdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date natingangsdatumgeldigheid;

				public java.util.Date getNatingangsdatumgeldigheid () {
					return this.natingangsdatumgeldigheid;
				}
				
			    public String natingangsdatumgeldigheidindicator;

				public String getNatingangsdatumgeldigheidindicator () {
					return this.natingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date natdatumvanopneming;

				public java.util.Date getNatdatumvanopneming () {
					return this.natdatumvanopneming;
				}
				
			    public String natdatumvanopnemingindicator;

				public String getNatdatumvanopnemingindicator () {
					return this.natdatumvanopnemingindicator;
				}
				
			    public java.util.Date Natdatumverkrijging;

				public java.util.Date getNatdatumverkrijging () {
					return this.Natdatumverkrijging;
				}
				
			    public String natdatumverkrijgingindicator;

				public String getNatdatumverkrijgingindicator () {
					return this.natdatumverkrijgingindicator;
				}
				
			    public java.util.Date natdatumbeeindiging;

				public java.util.Date getNatdatumbeeindiging () {
					return this.natdatumbeeindiging;
				}
				
			    public String natdatumbeeindigingindicator;

				public String getNatdatumbeeindigingindicator () {
					return this.natdatumbeeindigingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.natnationaliteitcode == null) ? 0 : this.natnationaliteitcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_nationaliteit_keyStruct other = (ldf_anr_nationaliteit_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.natnationaliteitcode == null) {
							if (other.natnationaliteitcode != null)
								return false;
						
						} else if (!this.natnationaliteitcode.equals(other.natnationaliteitcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_nationaliteit_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.natnationaliteitcode = this.natnationaliteitcode;
	            other.natnationaliteitvervallen = this.natnationaliteitvervallen;
	            other.natnationaliteitomschrijving = this.natnationaliteitomschrijving;
	            other.natredenopnamenationaliteitcode = this.natredenopnamenationaliteitcode;
	            other.natredenopnamenationaliteitomschrijving = this.natredenopnamenationaliteitomschrijving;
	            other.natredenbeeindigennationaliteitcode = this.natredenbeeindigennationaliteitcode;
	            other.natredenbeeindigennationaliteitomschrijving = this.natredenbeeindigennationaliteitomschrijving;
	            other.nataanduidingbijzondernederlanderschap = this.nataanduidingbijzondernederlanderschap;
	            other.nateupersoonsnummer = this.nateupersoonsnummer;
	            other.natgemeentedocumentcode = this.natgemeentedocumentcode;
	            other.natgemeentedocumentomschrijving = this.natgemeentedocumentomschrijving;
	            other.natdatumdocument = this.natdatumdocument;
	            other.natdatumdocumentindicator = this.natdatumdocumentindicator;
	            other.natbeschrijvingdocument = this.natbeschrijvingdocument;
	            other.nataanduidinggegevensonderzoek = this.nataanduidinggegevensonderzoek;
	            other.natdatumingangonderzoek = this.natdatumingangonderzoek;
	            other.natdatumingangonderzoekindicator = this.natdatumingangonderzoekindicator;
	            other.natdatumeindeonderzoek = this.natdatumeindeonderzoek;
	            other.natdatumeindeonderzoekindicator = this.natdatumeindeonderzoekindicator;
	            other.natingangsdatumgeldigheid = this.natingangsdatumgeldigheid;
	            other.natingangsdatumgeldigheidindicator = this.natingangsdatumgeldigheidindicator;
	            other.natdatumvanopneming = this.natdatumvanopneming;
	            other.natdatumvanopnemingindicator = this.natdatumvanopnemingindicator;
	            other.Natdatumverkrijging = this.Natdatumverkrijging;
	            other.natdatumverkrijgingindicator = this.natdatumverkrijgingindicator;
	            other.natdatumbeeindiging = this.natdatumbeeindiging;
	            other.natdatumbeeindigingindicator = this.natdatumbeeindigingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_nationaliteit_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.natnationaliteitcode = this.natnationaliteitcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
					this.natnationaliteitcode = readString(dis);
					
					this.natnationaliteitvervallen = readString(dis);
					
					this.natnationaliteitomschrijving = readString(dis);
					
					this.natredenopnamenationaliteitcode = readString(dis);
					
					this.natredenopnamenationaliteitomschrijving = readString(dis);
					
					this.natredenbeeindigennationaliteitcode = readString(dis);
					
					this.natredenbeeindigennationaliteitomschrijving = readString(dis);
					
					this.nataanduidingbijzondernederlanderschap = readString(dis);
					
					this.nateupersoonsnummer = readString(dis);
					
					this.natgemeentedocumentcode = readString(dis);
					
					this.natgemeentedocumentomschrijving = readString(dis);
					
					this.natdatumdocument = readDate(dis);
					
					this.natdatumdocumentindicator = readString(dis);
					
					this.natbeschrijvingdocument = readString(dis);
					
						this.nataanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.natdatumingangonderzoek = readDate(dis);
					
					this.natdatumingangonderzoekindicator = readString(dis);
					
					this.natdatumeindeonderzoek = readDate(dis);
					
					this.natdatumeindeonderzoekindicator = readString(dis);
					
					this.natingangsdatumgeldigheid = readDate(dis);
					
					this.natingangsdatumgeldigheidindicator = readString(dis);
					
					this.natdatumvanopneming = readDate(dis);
					
					this.natdatumvanopnemingindicator = readString(dis);
					
					this.Natdatumverkrijging = readDate(dis);
					
					this.natdatumverkrijgingindicator = readString(dis);
					
					this.natdatumbeeindiging = readDate(dis);
					
					this.natdatumbeeindigingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// String
				
						writeString(this.natnationaliteitcode,dos);
					
					// String
				
						writeString(this.natnationaliteitvervallen,dos);
					
					// String
				
						writeString(this.natnationaliteitomschrijving,dos);
					
					// String
				
						writeString(this.natredenopnamenationaliteitcode,dos);
					
					// String
				
						writeString(this.natredenopnamenationaliteitomschrijving,dos);
					
					// String
				
						writeString(this.natredenbeeindigennationaliteitcode,dos);
					
					// String
				
						writeString(this.natredenbeeindigennationaliteitomschrijving,dos);
					
					// String
				
						writeString(this.nataanduidingbijzondernederlanderschap,dos);
					
					// String
				
						writeString(this.nateupersoonsnummer,dos);
					
					// String
				
						writeString(this.natgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.natgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.natdatumdocument,dos);
					
					// String
				
						writeString(this.natdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.natbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.nataanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.natdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.natdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.natdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.natdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.natingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.natingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.natdatumvanopneming,dos);
					
					// String
				
						writeString(this.natdatumvanopnemingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.Natdatumverkrijging,dos);
					
					// String
				
						writeString(this.natdatumverkrijgingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.natdatumbeeindiging,dos);
					
					// String
				
						writeString(this.natdatumbeeindigingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",natnationaliteitcode="+natnationaliteitcode);
		sb.append(",natnationaliteitvervallen="+natnationaliteitvervallen);
		sb.append(",natnationaliteitomschrijving="+natnationaliteitomschrijving);
		sb.append(",natredenopnamenationaliteitcode="+natredenopnamenationaliteitcode);
		sb.append(",natredenopnamenationaliteitomschrijving="+natredenopnamenationaliteitomschrijving);
		sb.append(",natredenbeeindigennationaliteitcode="+natredenbeeindigennationaliteitcode);
		sb.append(",natredenbeeindigennationaliteitomschrijving="+natredenbeeindigennationaliteitomschrijving);
		sb.append(",nataanduidingbijzondernederlanderschap="+nataanduidingbijzondernederlanderschap);
		sb.append(",nateupersoonsnummer="+nateupersoonsnummer);
		sb.append(",natgemeentedocumentcode="+natgemeentedocumentcode);
		sb.append(",natgemeentedocumentomschrijving="+natgemeentedocumentomschrijving);
		sb.append(",natdatumdocument="+String.valueOf(natdatumdocument));
		sb.append(",natdatumdocumentindicator="+natdatumdocumentindicator);
		sb.append(",natbeschrijvingdocument="+natbeschrijvingdocument);
		sb.append(",nataanduidinggegevensonderzoek="+String.valueOf(nataanduidinggegevensonderzoek));
		sb.append(",natdatumingangonderzoek="+String.valueOf(natdatumingangonderzoek));
		sb.append(",natdatumingangonderzoekindicator="+natdatumingangonderzoekindicator);
		sb.append(",natdatumeindeonderzoek="+String.valueOf(natdatumeindeonderzoek));
		sb.append(",natdatumeindeonderzoekindicator="+natdatumeindeonderzoekindicator);
		sb.append(",natingangsdatumgeldigheid="+String.valueOf(natingangsdatumgeldigheid));
		sb.append(",natingangsdatumgeldigheidindicator="+natingangsdatumgeldigheidindicator);
		sb.append(",natdatumvanopneming="+String.valueOf(natdatumvanopneming));
		sb.append(",natdatumvanopnemingindicator="+natdatumvanopnemingindicator);
		sb.append(",Natdatumverkrijging="+String.valueOf(Natdatumverkrijging));
		sb.append(",natdatumverkrijgingindicator="+natdatumverkrijgingindicator);
		sb.append(",natdatumbeeindiging="+String.valueOf(natdatumbeeindiging));
		sb.append(",natdatumbeeindigingindicator="+natdatumbeeindigingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_nationaliteit_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.natnationaliteitcode, other.natnationaliteitcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_nationaliteitStruct implements routines.system.IPersistableRow<ldf_anr_nationaliteitStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_nationaliteitStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_nationaliteitStruct ldf_anr_nationaliteit = new ldf_anr_nationaliteitStruct();
ldf_anr_nationaliteit_keyStruct ldf_anr_nationaliteit_key = new ldf_anr_nationaliteit_keyStruct();





	
	/**
	 * [tPostgresqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_2", false);
		start_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_nationaliteit_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_2().limitLog4jByte();





String dbschema_tPostgresqlOutput_2 = null;
	dbschema_tPostgresqlOutput_2 = "ldf";
	

String tableName_tPostgresqlOutput_2 = null;
if(dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2.trim().length() == 0) {
	tableName_tPostgresqlOutput_2 = "ibz_cip_nationaliteit";
} else {
	tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2 + "\".\"" + "ibz_cip_nationaliteit";
}

        int deleteKeyCount_tPostgresqlOutput_2 = 1;
        if(deleteKeyCount_tPostgresqlOutput_2 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_2 = 0;
int nb_line_update_tPostgresqlOutput_2 = 0;
int nb_line_inserted_tPostgresqlOutput_2 = 0;
int nb_line_deleted_tPostgresqlOutput_2 = 0;
int nb_line_rejected_tPostgresqlOutput_2 = 0;

int deletedCount_tPostgresqlOutput_2=0;
int updatedCount_tPostgresqlOutput_2=0;
int insertedCount_tPostgresqlOutput_2=0;
int rejectedCount_tPostgresqlOutput_2=0;

boolean whetherReject_tPostgresqlOutput_2 = false;

java.sql.Connection conn_tPostgresqlOutput_2 = null;
String dbUser_tPostgresqlOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_2 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_2 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_2 = decryptedPassword_tPostgresqlOutput_2;

    conn_tPostgresqlOutput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_2,dbUser_tPostgresqlOutput_2,dbPwd_tPostgresqlOutput_2);
	
	resourceMap.put("conn_tPostgresqlOutput_2", conn_tPostgresqlOutput_2);
        conn_tPostgresqlOutput_2.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_2 = 1000;
        int commitCounter_tPostgresqlOutput_2 = 0;


   int batchSize_tPostgresqlOutput_2 = 10000;
   int batchSizeCounter_tPostgresqlOutput_2=0;

int count_tPostgresqlOutput_2=0;
	    String delete_tPostgresqlOutput_2 = "DELETE FROM \"" + tableName_tPostgresqlOutput_2 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2.prepareStatement(delete_tPostgresqlOutput_2);
	    

 



/**
 * [tPostgresqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_nationaliteit" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_nationaliteit_keyStruct ldf_anr_nationaliteit_key_tmp = new ldf_anr_nationaliteit_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_anr_nationaliteit.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_2.getObject(1) != null) {
                ldf_anr_nationaliteit.prsanummer = rs_tPostgresqlInput_2.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//ldf_anr_nationaliteit
			//ldf_anr_nationaliteit


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_nationaliteit"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

ldf_anr_nationaliteit_key = null;


// # Output table : 'ldf_anr_nationaliteit_key'
ldf_anr_nationaliteit_key_tmp.prsanummer = ldf_anr_nationaliteit.prsanummer ;
ldf_anr_nationaliteit_key_tmp.natnationaliteitcode = null;
ldf_anr_nationaliteit_key_tmp.natnationaliteitvervallen = null;
ldf_anr_nationaliteit_key_tmp.natnationaliteitomschrijving = null;
ldf_anr_nationaliteit_key_tmp.natredenopnamenationaliteitcode = null;
ldf_anr_nationaliteit_key_tmp.natredenopnamenationaliteitomschrijving = null;
ldf_anr_nationaliteit_key_tmp.natredenbeeindigennationaliteitcode = null;
ldf_anr_nationaliteit_key_tmp.natredenbeeindigennationaliteitomschrijving = null;
ldf_anr_nationaliteit_key_tmp.nataanduidingbijzondernederlanderschap = null;
ldf_anr_nationaliteit_key_tmp.nateupersoonsnummer = null;
ldf_anr_nationaliteit_key_tmp.natgemeentedocumentcode = null;
ldf_anr_nationaliteit_key_tmp.natgemeentedocumentomschrijving = null;
ldf_anr_nationaliteit_key_tmp.natdatumdocument = null;
ldf_anr_nationaliteit_key_tmp.natdatumdocumentindicator = null;
ldf_anr_nationaliteit_key_tmp.natbeschrijvingdocument = null;
ldf_anr_nationaliteit_key_tmp.nataanduidinggegevensonderzoek = null;
ldf_anr_nationaliteit_key_tmp.natdatumingangonderzoek = null;
ldf_anr_nationaliteit_key_tmp.natdatumingangonderzoekindicator = null;
ldf_anr_nationaliteit_key_tmp.natdatumeindeonderzoek = null;
ldf_anr_nationaliteit_key_tmp.natdatumeindeonderzoekindicator = null;
ldf_anr_nationaliteit_key_tmp.natingangsdatumgeldigheid = null;
ldf_anr_nationaliteit_key_tmp.natingangsdatumgeldigheidindicator = null;
ldf_anr_nationaliteit_key_tmp.natdatumvanopneming = null;
ldf_anr_nationaliteit_key_tmp.natdatumvanopnemingindicator = null;
ldf_anr_nationaliteit_key_tmp.Natdatumverkrijging = null;
ldf_anr_nationaliteit_key_tmp.natdatumverkrijgingindicator = null;
ldf_anr_nationaliteit_key_tmp.natdatumbeeindiging = null;
ldf_anr_nationaliteit_key_tmp.natdatumbeeindigingindicator = null;
ldf_anr_nationaliteit_key = ldf_anr_nationaliteit_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "ldf_anr_nationaliteit_key"
if(ldf_anr_nationaliteit_key != null) { 



	
	/**
	 * [tPostgresqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	

			//ldf_anr_nationaliteit_key
			//ldf_anr_nationaliteit_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_nationaliteit_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_2 = false;
					
                    pstmt_tPostgresqlOutput_2.setBigDecimal(1, ldf_anr_nationaliteit_key.prsanummer);

    		pstmt_tPostgresqlOutput_2.addBatch();
			nb_line_tPostgresqlOutput_2++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_2++;
    		
            if(!whetherReject_tPostgresqlOutput_2) {
            }
    			if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2)) {
                try {
						int countSum_tPostgresqlOutput_2 = 0;
						    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_2 = 0;
					for(int countEach_tPostgresqlOutput_2: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
					
			    	    deletedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_2++;
                if(commitEvery_tPostgresqlOutput_2 <= commitCounter_tPostgresqlOutput_2) {
                if ((batchSize_tPostgresqlOutput_2 > 0) && (batchSizeCounter_tPostgresqlOutput_2 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_2 = 0;
                		    
						for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
            	    	
                batchSizeCounter_tPostgresqlOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_2 = 0;
						for(int countEach_tPostgresqlOutput_2: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
						}
						
				    	    deletedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_2.commit();
                	
                	commitCounter_tPostgresqlOutput_2=0;
                }

 


	tos_count_tPostgresqlOutput_2++;

/**
 * [tPostgresqlOutput_2 main ] stop
 */

} // End of branch "ldf_anr_nationaliteit_key"







	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_nationaliteit"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	    try {
				int countSum_tPostgresqlOutput_2 = 0;
				if (pstmt_tPostgresqlOutput_2 != null && batchSizeCounter_tPostgresqlOutput_2 > 0) {
						
					for(int countEach_tPostgresqlOutput_2: pstmt_tPostgresqlOutput_2.executeBatch()) {
						countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_2 = 0;
			for(int countEach_tPostgresqlOutput_2: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0 : countEach_tPostgresqlOutput_2);
			}
			
	    	    deletedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_2 != null) {
            pstmt_tPostgresqlOutput_2.close();
        }

			
			conn_tPostgresqlOutput_2.commit();
			
		
    	conn_tPostgresqlOutput_2 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_2", true);
    	

	nb_line_deleted_tPostgresqlOutput_2=nb_line_deleted_tPostgresqlOutput_2+ deletedCount_tPostgresqlOutput_2;
	nb_line_update_tPostgresqlOutput_2=nb_line_update_tPostgresqlOutput_2 + updatedCount_tPostgresqlOutput_2;
	nb_line_inserted_tPostgresqlOutput_2=nb_line_inserted_tPostgresqlOutput_2 + insertedCount_tPostgresqlOutput_2;
	nb_line_rejected_tPostgresqlOutput_2=nb_line_rejected_tPostgresqlOutput_2 + rejectedCount_tPostgresqlOutput_2;
	
        globalMap.put("tPostgresqlOutput_2_NB_LINE",nb_line_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_2);
        globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_nationaliteit_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_2", true);
end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tPostgresqlInput_3Process(globalMap);



/**
 * [tPostgresqlOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_2";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_2")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_2")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_2")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_2) {
					String errorMessage_tPostgresqlOutput_2 = "failed to close the connection in tPostgresqlOutput_2 :" + sqlEx_tPostgresqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_2);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_huwelijk_keyStruct implements routines.system.IPersistableRow<ldf_anr_huwelijk_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal huwsleuteldatum;

				public BigDecimal getHuwsleuteldatum () {
					return this.huwsleuteldatum;
				}
				
			    public BigDecimal huwsleutelvolgnummer;

				public BigDecimal getHuwsleutelvolgnummer () {
					return this.huwsleutelvolgnummer;
				}
				
			    public BigDecimal huwanummer;

				public BigDecimal getHuwanummer () {
					return this.huwanummer;
				}
				
			    public BigDecimal huwburgerservicenummer;

				public BigDecimal getHuwburgerservicenummer () {
					return this.huwburgerservicenummer;
				}
				
			    public String huwvoornamen;

				public String getHuwvoornamen () {
					return this.huwvoornamen;
				}
				
			    public String huwvoorletters;

				public String getHuwvoorletters () {
					return this.huwvoorletters;
				}
				
			    public String huwadellijketitelcode;

				public String getHuwadellijketitelcode () {
					return this.huwadellijketitelcode;
				}
				
			    public String huwadellijketitelomschrijving;

				public String getHuwadellijketitelomschrijving () {
					return this.huwadellijketitelomschrijving;
				}
				
			    public String huwvoorvoegselgeslachtsnaam;

				public String getHuwvoorvoegselgeslachtsnaam () {
					return this.huwvoorvoegselgeslachtsnaam;
				}
				
			    public String huwgeslachtsnaam;

				public String getHuwgeslachtsnaam () {
					return this.huwgeslachtsnaam;
				}
				
			    public String huwnaamopgemaakt;

				public String getHuwnaamopgemaakt () {
					return this.huwnaamopgemaakt;
				}
				
			    public java.util.Date huwgeboortedatum;

				public java.util.Date getHuwgeboortedatum () {
					return this.huwgeboortedatum;
				}
				
			    public String huwgeboortedatumindicator;

				public String getHuwgeboortedatumindicator () {
					return this.huwgeboortedatumindicator;
				}
				
			    public String huwgeboorteplaatscode;

				public String getHuwgeboorteplaatscode () {
					return this.huwgeboorteplaatscode;
				}
				
			    public String huwgeboorteplaatsomschrijving;

				public String getHuwgeboorteplaatsomschrijving () {
					return this.huwgeboorteplaatsomschrijving;
				}
				
			    public String huwgeboortelandcode;

				public String getHuwgeboortelandcode () {
					return this.huwgeboortelandcode;
				}
				
			    public String huwgeboortelandomschrijving;

				public String getHuwgeboortelandomschrijving () {
					return this.huwgeboortelandomschrijving;
				}
				
			    public String huwgeslachtsaanduidingcode;

				public String getHuwgeslachtsaanduidingcode () {
					return this.huwgeslachtsaanduidingcode;
				}
				
			    public String huwgeslachtsaanduidingomschrijving;

				public String getHuwgeslachtsaanduidingomschrijving () {
					return this.huwgeslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date huwdatumsluitinghuwelijkpartnerschap;

				public java.util.Date getHuwdatumsluitinghuwelijkpartnerschap () {
					return this.huwdatumsluitinghuwelijkpartnerschap;
				}
				
			    public String huwdatumsluitinghuwelijkpartnerschapindicator;

				public String getHuwdatumsluitinghuwelijkpartnerschapindicator () {
					return this.huwdatumsluitinghuwelijkpartnerschapindicator;
				}
				
			    public String huwplaatssluitinghuwelijkpartnerschapcode;

				public String getHuwplaatssluitinghuwelijkpartnerschapcode () {
					return this.huwplaatssluitinghuwelijkpartnerschapcode;
				}
				
			    public String huwplaatssluitinghuwelijkpartnerschapomschrijving;

				public String getHuwplaatssluitinghuwelijkpartnerschapomschrijving () {
					return this.huwplaatssluitinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwlandsluitinghuwelijkpartnerschapcode;

				public String getHuwlandsluitinghuwelijkpartnerschapcode () {
					return this.huwlandsluitinghuwelijkpartnerschapcode;
				}
				
			    public String huwlandsluitinghuwelijkpartnerschapomschrijving;

				public String getHuwlandsluitinghuwelijkpartnerschapomschrijving () {
					return this.huwlandsluitinghuwelijkpartnerschapomschrijving;
				}
				
			    public java.util.Date huwdatumontbindinghuwelijkpartnerschap;

				public java.util.Date getHuwdatumontbindinghuwelijkpartnerschap () {
					return this.huwdatumontbindinghuwelijkpartnerschap;
				}
				
			    public String huwdatumontbindinghuwelijkpartnerschapindicator;

				public String getHuwdatumontbindinghuwelijkpartnerschapindicator () {
					return this.huwdatumontbindinghuwelijkpartnerschapindicator;
				}
				
			    public String huwplaatsontbindinghuwelijkpartnerschapcode;

				public String getHuwplaatsontbindinghuwelijkpartnerschapcode () {
					return this.huwplaatsontbindinghuwelijkpartnerschapcode;
				}
				
			    public String huwplaatsontbindinghuwelijkpartnerschapomschrijving;

				public String getHuwplaatsontbindinghuwelijkpartnerschapomschrijving () {
					return this.huwplaatsontbindinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwlandontbindinghuwelijkpartnerschapcode;

				public String getHuwlandontbindinghuwelijkpartnerschapcode () {
					return this.huwlandontbindinghuwelijkpartnerschapcode;
				}
				
			    public String huwlandontbindinghuwelijkpartnerschapomschrijving;

				public String getHuwlandontbindinghuwelijkpartnerschapomschrijving () {
					return this.huwlandontbindinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwredenontbindinghuwelijkpartnerschap;

				public String getHuwredenontbindinghuwelijkpartnerschap () {
					return this.huwredenontbindinghuwelijkpartnerschap;
				}
				
			    public String huwsoortverbintenis;

				public String getHuwsoortverbintenis () {
					return this.huwsoortverbintenis;
				}
				
			    public String huwregistergemeenteaktecode;

				public String getHuwregistergemeenteaktecode () {
					return this.huwregistergemeenteaktecode;
				}
				
			    public String huwregistergemeenteakteomschrijving;

				public String getHuwregistergemeenteakteomschrijving () {
					return this.huwregistergemeenteakteomschrijving;
				}
				
			    public String huwaktenummer;

				public String getHuwaktenummer () {
					return this.huwaktenummer;
				}
				
			    public String huwgemeentedocumentcode;

				public String getHuwgemeentedocumentcode () {
					return this.huwgemeentedocumentcode;
				}
				
			    public String huwgemeentedocumentomschrijving;

				public String getHuwgemeentedocumentomschrijving () {
					return this.huwgemeentedocumentomschrijving;
				}
				
			    public java.util.Date huwdatumdocument;

				public java.util.Date getHuwdatumdocument () {
					return this.huwdatumdocument;
				}
				
			    public String huwdatumdocumentindicator;

				public String getHuwdatumdocumentindicator () {
					return this.huwdatumdocumentindicator;
				}
				
			    public String huwbeschrijvingdocument;

				public String getHuwbeschrijvingdocument () {
					return this.huwbeschrijvingdocument;
				}
				
			    public BigDecimal huwaanduidinggegevensonderzoek;

				public BigDecimal getHuwaanduidinggegevensonderzoek () {
					return this.huwaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date huwdatumingangonderzoek;

				public java.util.Date getHuwdatumingangonderzoek () {
					return this.huwdatumingangonderzoek;
				}
				
			    public String huwdatumingangonderzoekindicator;

				public String getHuwdatumingangonderzoekindicator () {
					return this.huwdatumingangonderzoekindicator;
				}
				
			    public java.util.Date huwdatumeindeonderzoek;

				public java.util.Date getHuwdatumeindeonderzoek () {
					return this.huwdatumeindeonderzoek;
				}
				
			    public String huwdatumeindeonderzoekindicator;

				public String getHuwdatumeindeonderzoekindicator () {
					return this.huwdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date huwingangsdatumgeldigheid;

				public java.util.Date getHuwingangsdatumgeldigheid () {
					return this.huwingangsdatumgeldigheid;
				}
				
			    public String huwingangsdatumgeldigheidindicator;

				public String getHuwingangsdatumgeldigheidindicator () {
					return this.huwingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date huwdatumvanopneming;

				public java.util.Date getHuwdatumvanopneming () {
					return this.huwdatumvanopneming;
				}
				
			    public String huwdatumvanopnemingindicator;

				public String getHuwdatumvanopnemingindicator () {
					return this.huwdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.huwsleuteldatum == null) ? 0 : this.huwsleuteldatum.hashCode());
					
						result = prime * result + ((this.huwsleutelvolgnummer == null) ? 0 : this.huwsleutelvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_huwelijk_keyStruct other = (ldf_anr_huwelijk_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.huwsleuteldatum == null) {
							if (other.huwsleuteldatum != null)
								return false;
						
						} else if (!this.huwsleuteldatum.equals(other.huwsleuteldatum))
						
							return false;
					
						if (this.huwsleutelvolgnummer == null) {
							if (other.huwsleutelvolgnummer != null)
								return false;
						
						} else if (!this.huwsleutelvolgnummer.equals(other.huwsleutelvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_huwelijk_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.huwsleuteldatum = this.huwsleuteldatum;
	            other.huwsleutelvolgnummer = this.huwsleutelvolgnummer;
	            other.huwanummer = this.huwanummer;
	            other.huwburgerservicenummer = this.huwburgerservicenummer;
	            other.huwvoornamen = this.huwvoornamen;
	            other.huwvoorletters = this.huwvoorletters;
	            other.huwadellijketitelcode = this.huwadellijketitelcode;
	            other.huwadellijketitelomschrijving = this.huwadellijketitelomschrijving;
	            other.huwvoorvoegselgeslachtsnaam = this.huwvoorvoegselgeslachtsnaam;
	            other.huwgeslachtsnaam = this.huwgeslachtsnaam;
	            other.huwnaamopgemaakt = this.huwnaamopgemaakt;
	            other.huwgeboortedatum = this.huwgeboortedatum;
	            other.huwgeboortedatumindicator = this.huwgeboortedatumindicator;
	            other.huwgeboorteplaatscode = this.huwgeboorteplaatscode;
	            other.huwgeboorteplaatsomschrijving = this.huwgeboorteplaatsomschrijving;
	            other.huwgeboortelandcode = this.huwgeboortelandcode;
	            other.huwgeboortelandomschrijving = this.huwgeboortelandomschrijving;
	            other.huwgeslachtsaanduidingcode = this.huwgeslachtsaanduidingcode;
	            other.huwgeslachtsaanduidingomschrijving = this.huwgeslachtsaanduidingomschrijving;
	            other.huwdatumsluitinghuwelijkpartnerschap = this.huwdatumsluitinghuwelijkpartnerschap;
	            other.huwdatumsluitinghuwelijkpartnerschapindicator = this.huwdatumsluitinghuwelijkpartnerschapindicator;
	            other.huwplaatssluitinghuwelijkpartnerschapcode = this.huwplaatssluitinghuwelijkpartnerschapcode;
	            other.huwplaatssluitinghuwelijkpartnerschapomschrijving = this.huwplaatssluitinghuwelijkpartnerschapomschrijving;
	            other.huwlandsluitinghuwelijkpartnerschapcode = this.huwlandsluitinghuwelijkpartnerschapcode;
	            other.huwlandsluitinghuwelijkpartnerschapomschrijving = this.huwlandsluitinghuwelijkpartnerschapomschrijving;
	            other.huwdatumontbindinghuwelijkpartnerschap = this.huwdatumontbindinghuwelijkpartnerschap;
	            other.huwdatumontbindinghuwelijkpartnerschapindicator = this.huwdatumontbindinghuwelijkpartnerschapindicator;
	            other.huwplaatsontbindinghuwelijkpartnerschapcode = this.huwplaatsontbindinghuwelijkpartnerschapcode;
	            other.huwplaatsontbindinghuwelijkpartnerschapomschrijving = this.huwplaatsontbindinghuwelijkpartnerschapomschrijving;
	            other.huwlandontbindinghuwelijkpartnerschapcode = this.huwlandontbindinghuwelijkpartnerschapcode;
	            other.huwlandontbindinghuwelijkpartnerschapomschrijving = this.huwlandontbindinghuwelijkpartnerschapomschrijving;
	            other.huwredenontbindinghuwelijkpartnerschap = this.huwredenontbindinghuwelijkpartnerschap;
	            other.huwsoortverbintenis = this.huwsoortverbintenis;
	            other.huwregistergemeenteaktecode = this.huwregistergemeenteaktecode;
	            other.huwregistergemeenteakteomschrijving = this.huwregistergemeenteakteomschrijving;
	            other.huwaktenummer = this.huwaktenummer;
	            other.huwgemeentedocumentcode = this.huwgemeentedocumentcode;
	            other.huwgemeentedocumentomschrijving = this.huwgemeentedocumentomschrijving;
	            other.huwdatumdocument = this.huwdatumdocument;
	            other.huwdatumdocumentindicator = this.huwdatumdocumentindicator;
	            other.huwbeschrijvingdocument = this.huwbeschrijvingdocument;
	            other.huwaanduidinggegevensonderzoek = this.huwaanduidinggegevensonderzoek;
	            other.huwdatumingangonderzoek = this.huwdatumingangonderzoek;
	            other.huwdatumingangonderzoekindicator = this.huwdatumingangonderzoekindicator;
	            other.huwdatumeindeonderzoek = this.huwdatumeindeonderzoek;
	            other.huwdatumeindeonderzoekindicator = this.huwdatumeindeonderzoekindicator;
	            other.huwingangsdatumgeldigheid = this.huwingangsdatumgeldigheid;
	            other.huwingangsdatumgeldigheidindicator = this.huwingangsdatumgeldigheidindicator;
	            other.huwdatumvanopneming = this.huwdatumvanopneming;
	            other.huwdatumvanopnemingindicator = this.huwdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_huwelijk_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.huwsleuteldatum = this.huwsleuteldatum;
	            	other.huwsleutelvolgnummer = this.huwsleutelvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.huwsleuteldatum = (BigDecimal) dis.readObject();
					
						this.huwsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.huwanummer = (BigDecimal) dis.readObject();
					
						this.huwburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.huwvoornamen = readString(dis);
					
					this.huwvoorletters = readString(dis);
					
					this.huwadellijketitelcode = readString(dis);
					
					this.huwadellijketitelomschrijving = readString(dis);
					
					this.huwvoorvoegselgeslachtsnaam = readString(dis);
					
					this.huwgeslachtsnaam = readString(dis);
					
					this.huwnaamopgemaakt = readString(dis);
					
					this.huwgeboortedatum = readDate(dis);
					
					this.huwgeboortedatumindicator = readString(dis);
					
					this.huwgeboorteplaatscode = readString(dis);
					
					this.huwgeboorteplaatsomschrijving = readString(dis);
					
					this.huwgeboortelandcode = readString(dis);
					
					this.huwgeboortelandomschrijving = readString(dis);
					
					this.huwgeslachtsaanduidingcode = readString(dis);
					
					this.huwgeslachtsaanduidingomschrijving = readString(dis);
					
					this.huwdatumsluitinghuwelijkpartnerschap = readDate(dis);
					
					this.huwdatumsluitinghuwelijkpartnerschapindicator = readString(dis);
					
					this.huwplaatssluitinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwplaatssluitinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwlandsluitinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwlandsluitinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwdatumontbindinghuwelijkpartnerschap = readDate(dis);
					
					this.huwdatumontbindinghuwelijkpartnerschapindicator = readString(dis);
					
					this.huwplaatsontbindinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwplaatsontbindinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwlandontbindinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwlandontbindinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwredenontbindinghuwelijkpartnerschap = readString(dis);
					
					this.huwsoortverbintenis = readString(dis);
					
					this.huwregistergemeenteaktecode = readString(dis);
					
					this.huwregistergemeenteakteomschrijving = readString(dis);
					
					this.huwaktenummer = readString(dis);
					
					this.huwgemeentedocumentcode = readString(dis);
					
					this.huwgemeentedocumentomschrijving = readString(dis);
					
					this.huwdatumdocument = readDate(dis);
					
					this.huwdatumdocumentindicator = readString(dis);
					
					this.huwbeschrijvingdocument = readString(dis);
					
						this.huwaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.huwdatumingangonderzoek = readDate(dis);
					
					this.huwdatumingangonderzoekindicator = readString(dis);
					
					this.huwdatumeindeonderzoek = readDate(dis);
					
					this.huwdatumeindeonderzoekindicator = readString(dis);
					
					this.huwingangsdatumgeldigheid = readDate(dis);
					
					this.huwingangsdatumgeldigheidindicator = readString(dis);
					
					this.huwdatumvanopneming = readDate(dis);
					
					this.huwdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwburgerservicenummer);
					
					// String
				
						writeString(this.huwvoornamen,dos);
					
					// String
				
						writeString(this.huwvoorletters,dos);
					
					// String
				
						writeString(this.huwadellijketitelcode,dos);
					
					// String
				
						writeString(this.huwadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.huwvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.huwgeslachtsnaam,dos);
					
					// String
				
						writeString(this.huwnaamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.huwgeboortedatum,dos);
					
					// String
				
						writeString(this.huwgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.huwgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.huwgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.huwgeboortelandcode,dos);
					
					// String
				
						writeString(this.huwgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.huwgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.huwgeslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwdatumsluitinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwdatumsluitinghuwelijkpartnerschapindicator,dos);
					
					// String
				
						writeString(this.huwplaatssluitinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwplaatssluitinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwlandsluitinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwlandsluitinghuwelijkpartnerschapomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwdatumontbindinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwdatumontbindinghuwelijkpartnerschapindicator,dos);
					
					// String
				
						writeString(this.huwplaatsontbindinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwplaatsontbindinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwlandontbindinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwlandontbindinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwredenontbindinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwsoortverbintenis,dos);
					
					// String
				
						writeString(this.huwregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.huwregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.huwaktenummer,dos);
					
					// String
				
						writeString(this.huwgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.huwgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwdatumdocument,dos);
					
					// String
				
						writeString(this.huwdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.huwbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.huwdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.huwdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.huwdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.huwingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwdatumvanopneming,dos);
					
					// String
				
						writeString(this.huwdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",huwsleuteldatum="+String.valueOf(huwsleuteldatum));
		sb.append(",huwsleutelvolgnummer="+String.valueOf(huwsleutelvolgnummer));
		sb.append(",huwanummer="+String.valueOf(huwanummer));
		sb.append(",huwburgerservicenummer="+String.valueOf(huwburgerservicenummer));
		sb.append(",huwvoornamen="+huwvoornamen);
		sb.append(",huwvoorletters="+huwvoorletters);
		sb.append(",huwadellijketitelcode="+huwadellijketitelcode);
		sb.append(",huwadellijketitelomschrijving="+huwadellijketitelomschrijving);
		sb.append(",huwvoorvoegselgeslachtsnaam="+huwvoorvoegselgeslachtsnaam);
		sb.append(",huwgeslachtsnaam="+huwgeslachtsnaam);
		sb.append(",huwnaamopgemaakt="+huwnaamopgemaakt);
		sb.append(",huwgeboortedatum="+String.valueOf(huwgeboortedatum));
		sb.append(",huwgeboortedatumindicator="+huwgeboortedatumindicator);
		sb.append(",huwgeboorteplaatscode="+huwgeboorteplaatscode);
		sb.append(",huwgeboorteplaatsomschrijving="+huwgeboorteplaatsomschrijving);
		sb.append(",huwgeboortelandcode="+huwgeboortelandcode);
		sb.append(",huwgeboortelandomschrijving="+huwgeboortelandomschrijving);
		sb.append(",huwgeslachtsaanduidingcode="+huwgeslachtsaanduidingcode);
		sb.append(",huwgeslachtsaanduidingomschrijving="+huwgeslachtsaanduidingomschrijving);
		sb.append(",huwdatumsluitinghuwelijkpartnerschap="+String.valueOf(huwdatumsluitinghuwelijkpartnerschap));
		sb.append(",huwdatumsluitinghuwelijkpartnerschapindicator="+huwdatumsluitinghuwelijkpartnerschapindicator);
		sb.append(",huwplaatssluitinghuwelijkpartnerschapcode="+huwplaatssluitinghuwelijkpartnerschapcode);
		sb.append(",huwplaatssluitinghuwelijkpartnerschapomschrijving="+huwplaatssluitinghuwelijkpartnerschapomschrijving);
		sb.append(",huwlandsluitinghuwelijkpartnerschapcode="+huwlandsluitinghuwelijkpartnerschapcode);
		sb.append(",huwlandsluitinghuwelijkpartnerschapomschrijving="+huwlandsluitinghuwelijkpartnerschapomschrijving);
		sb.append(",huwdatumontbindinghuwelijkpartnerschap="+String.valueOf(huwdatumontbindinghuwelijkpartnerschap));
		sb.append(",huwdatumontbindinghuwelijkpartnerschapindicator="+huwdatumontbindinghuwelijkpartnerschapindicator);
		sb.append(",huwplaatsontbindinghuwelijkpartnerschapcode="+huwplaatsontbindinghuwelijkpartnerschapcode);
		sb.append(",huwplaatsontbindinghuwelijkpartnerschapomschrijving="+huwplaatsontbindinghuwelijkpartnerschapomschrijving);
		sb.append(",huwlandontbindinghuwelijkpartnerschapcode="+huwlandontbindinghuwelijkpartnerschapcode);
		sb.append(",huwlandontbindinghuwelijkpartnerschapomschrijving="+huwlandontbindinghuwelijkpartnerschapomschrijving);
		sb.append(",huwredenontbindinghuwelijkpartnerschap="+huwredenontbindinghuwelijkpartnerschap);
		sb.append(",huwsoortverbintenis="+huwsoortverbintenis);
		sb.append(",huwregistergemeenteaktecode="+huwregistergemeenteaktecode);
		sb.append(",huwregistergemeenteakteomschrijving="+huwregistergemeenteakteomschrijving);
		sb.append(",huwaktenummer="+huwaktenummer);
		sb.append(",huwgemeentedocumentcode="+huwgemeentedocumentcode);
		sb.append(",huwgemeentedocumentomschrijving="+huwgemeentedocumentomschrijving);
		sb.append(",huwdatumdocument="+String.valueOf(huwdatumdocument));
		sb.append(",huwdatumdocumentindicator="+huwdatumdocumentindicator);
		sb.append(",huwbeschrijvingdocument="+huwbeschrijvingdocument);
		sb.append(",huwaanduidinggegevensonderzoek="+String.valueOf(huwaanduidinggegevensonderzoek));
		sb.append(",huwdatumingangonderzoek="+String.valueOf(huwdatumingangonderzoek));
		sb.append(",huwdatumingangonderzoekindicator="+huwdatumingangonderzoekindicator);
		sb.append(",huwdatumeindeonderzoek="+String.valueOf(huwdatumeindeonderzoek));
		sb.append(",huwdatumeindeonderzoekindicator="+huwdatumeindeonderzoekindicator);
		sb.append(",huwingangsdatumgeldigheid="+String.valueOf(huwingangsdatumgeldigheid));
		sb.append(",huwingangsdatumgeldigheidindicator="+huwingangsdatumgeldigheidindicator);
		sb.append(",huwdatumvanopneming="+String.valueOf(huwdatumvanopneming));
		sb.append(",huwdatumvanopnemingindicator="+huwdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_huwelijk_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwsleuteldatum, other.huwsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwsleutelvolgnummer, other.huwsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_huwelijkStruct implements routines.system.IPersistableRow<ldf_anr_huwelijkStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_huwelijkStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_huwelijkStruct ldf_anr_huwelijk = new ldf_anr_huwelijkStruct();
ldf_anr_huwelijk_keyStruct ldf_anr_huwelijk_key = new ldf_anr_huwelijk_keyStruct();





	
	/**
	 * [tPostgresqlOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_3", false);
		start_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_huwelijk_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_3().limitLog4jByte();





String dbschema_tPostgresqlOutput_3 = null;
	dbschema_tPostgresqlOutput_3 = "ldf";
	

String tableName_tPostgresqlOutput_3 = null;
if(dbschema_tPostgresqlOutput_3 == null || dbschema_tPostgresqlOutput_3.trim().length() == 0) {
	tableName_tPostgresqlOutput_3 = "ibz_cip_huwelijk";
} else {
	tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3 + "\".\"" + "ibz_cip_huwelijk";
}

        int deleteKeyCount_tPostgresqlOutput_3 = 1;
        if(deleteKeyCount_tPostgresqlOutput_3 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_3 = 0;
int nb_line_update_tPostgresqlOutput_3 = 0;
int nb_line_inserted_tPostgresqlOutput_3 = 0;
int nb_line_deleted_tPostgresqlOutput_3 = 0;
int nb_line_rejected_tPostgresqlOutput_3 = 0;

int deletedCount_tPostgresqlOutput_3=0;
int updatedCount_tPostgresqlOutput_3=0;
int insertedCount_tPostgresqlOutput_3=0;
int rejectedCount_tPostgresqlOutput_3=0;

boolean whetherReject_tPostgresqlOutput_3 = false;

java.sql.Connection conn_tPostgresqlOutput_3 = null;
String dbUser_tPostgresqlOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_3 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_3 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_3 = decryptedPassword_tPostgresqlOutput_3;

    conn_tPostgresqlOutput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_3,dbUser_tPostgresqlOutput_3,dbPwd_tPostgresqlOutput_3);
	
	resourceMap.put("conn_tPostgresqlOutput_3", conn_tPostgresqlOutput_3);
        conn_tPostgresqlOutput_3.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_3 = 1000;
        int commitCounter_tPostgresqlOutput_3 = 0;


   int batchSize_tPostgresqlOutput_3 = 10000;
   int batchSizeCounter_tPostgresqlOutput_3=0;

int count_tPostgresqlOutput_3=0;
	    String delete_tPostgresqlOutput_3 = "DELETE FROM \"" + tableName_tPostgresqlOutput_3 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3.prepareStatement(delete_tPostgresqlOutput_3);
	    

 



/**
 * [tPostgresqlOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_huwelijk" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		
    	class BytesLimit65535_tMap_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_3().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_huwelijk_keyStruct ldf_anr_huwelijk_key_tmp = new ldf_anr_huwelijk_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_anr_huwelijk.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_3.getObject(1) != null) {
                ldf_anr_huwelijk.prsanummer = rs_tPostgresqlInput_3.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//ldf_anr_huwelijk
			//ldf_anr_huwelijk


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_huwelijk"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

ldf_anr_huwelijk_key = null;


// # Output table : 'ldf_anr_huwelijk_key'
ldf_anr_huwelijk_key_tmp.prsanummer = ldf_anr_huwelijk.prsanummer ;
ldf_anr_huwelijk_key_tmp.huwsleuteldatum = null;
ldf_anr_huwelijk_key_tmp.huwsleutelvolgnummer = null;
ldf_anr_huwelijk_key_tmp.huwanummer = null;
ldf_anr_huwelijk_key_tmp.huwburgerservicenummer = null;
ldf_anr_huwelijk_key_tmp.huwvoornamen = null;
ldf_anr_huwelijk_key_tmp.huwvoorletters = null;
ldf_anr_huwelijk_key_tmp.huwadellijketitelcode = null;
ldf_anr_huwelijk_key_tmp.huwadellijketitelomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwvoorvoegselgeslachtsnaam = null;
ldf_anr_huwelijk_key_tmp.huwgeslachtsnaam = null;
ldf_anr_huwelijk_key_tmp.huwnaamopgemaakt = null;
ldf_anr_huwelijk_key_tmp.huwgeboortedatum = null;
ldf_anr_huwelijk_key_tmp.huwgeboortedatumindicator = null;
ldf_anr_huwelijk_key_tmp.huwgeboorteplaatscode = null;
ldf_anr_huwelijk_key_tmp.huwgeboorteplaatsomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwgeboortelandcode = null;
ldf_anr_huwelijk_key_tmp.huwgeboortelandomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwgeslachtsaanduidingcode = null;
ldf_anr_huwelijk_key_tmp.huwgeslachtsaanduidingomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwdatumsluitinghuwelijkpartnerschap = null;
ldf_anr_huwelijk_key_tmp.huwdatumsluitinghuwelijkpartnerschapindicator = null;
ldf_anr_huwelijk_key_tmp.huwplaatssluitinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_key_tmp.huwplaatssluitinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwlandsluitinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_key_tmp.huwlandsluitinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwdatumontbindinghuwelijkpartnerschap = null;
ldf_anr_huwelijk_key_tmp.huwdatumontbindinghuwelijkpartnerschapindicator = null;
ldf_anr_huwelijk_key_tmp.huwplaatsontbindinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_key_tmp.huwplaatsontbindinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwlandontbindinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_key_tmp.huwlandontbindinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwredenontbindinghuwelijkpartnerschap = null;
ldf_anr_huwelijk_key_tmp.huwsoortverbintenis = null;
ldf_anr_huwelijk_key_tmp.huwregistergemeenteaktecode = null;
ldf_anr_huwelijk_key_tmp.huwregistergemeenteakteomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwaktenummer = null;
ldf_anr_huwelijk_key_tmp.huwgemeentedocumentcode = null;
ldf_anr_huwelijk_key_tmp.huwgemeentedocumentomschrijving = null;
ldf_anr_huwelijk_key_tmp.huwdatumdocument = null;
ldf_anr_huwelijk_key_tmp.huwdatumdocumentindicator = null;
ldf_anr_huwelijk_key_tmp.huwbeschrijvingdocument = null;
ldf_anr_huwelijk_key_tmp.huwaanduidinggegevensonderzoek = null;
ldf_anr_huwelijk_key_tmp.huwdatumingangonderzoek = null;
ldf_anr_huwelijk_key_tmp.huwdatumingangonderzoekindicator = null;
ldf_anr_huwelijk_key_tmp.huwdatumeindeonderzoek = null;
ldf_anr_huwelijk_key_tmp.huwdatumeindeonderzoekindicator = null;
ldf_anr_huwelijk_key_tmp.huwingangsdatumgeldigheid = null;
ldf_anr_huwelijk_key_tmp.huwingangsdatumgeldigheidindicator = null;
ldf_anr_huwelijk_key_tmp.huwdatumvanopneming = null;
ldf_anr_huwelijk_key_tmp.huwdatumvanopnemingindicator = null;
ldf_anr_huwelijk_key = ldf_anr_huwelijk_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
// Start of branch "ldf_anr_huwelijk_key"
if(ldf_anr_huwelijk_key != null) { 



	
	/**
	 * [tPostgresqlOutput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	

			//ldf_anr_huwelijk_key
			//ldf_anr_huwelijk_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_huwelijk_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_3 = false;
					
                    pstmt_tPostgresqlOutput_3.setBigDecimal(1, ldf_anr_huwelijk_key.prsanummer);

    		pstmt_tPostgresqlOutput_3.addBatch();
			nb_line_tPostgresqlOutput_3++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_3++;
    		
            if(!whetherReject_tPostgresqlOutput_3) {
            }
    			if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
                try {
						int countSum_tPostgresqlOutput_3 = 0;
						    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_3 = 0;
					for(int countEach_tPostgresqlOutput_3: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
					
			    	    deletedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_3++;
                if(commitEvery_tPostgresqlOutput_3 <= commitCounter_tPostgresqlOutput_3) {
                if ((batchSize_tPostgresqlOutput_3 > 0) && (batchSizeCounter_tPostgresqlOutput_3 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_3 = 0;
                		    
						for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
            	    	
                batchSizeCounter_tPostgresqlOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_3 = 0;
						for(int countEach_tPostgresqlOutput_3: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
						}
						
				    	    deletedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_3.commit();
                	
                	commitCounter_tPostgresqlOutput_3=0;
                }

 


	tos_count_tPostgresqlOutput_3++;

/**
 * [tPostgresqlOutput_3 main ] stop
 */

} // End of branch "ldf_anr_huwelijk_key"







	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_huwelijk"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	    try {
				int countSum_tPostgresqlOutput_3 = 0;
				if (pstmt_tPostgresqlOutput_3 != null && batchSizeCounter_tPostgresqlOutput_3 > 0) {
						
					for(int countEach_tPostgresqlOutput_3: pstmt_tPostgresqlOutput_3.executeBatch()) {
						countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_3 = 0;
			for(int countEach_tPostgresqlOutput_3: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0 : countEach_tPostgresqlOutput_3);
			}
			
	    	    deletedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_3 != null) {
            pstmt_tPostgresqlOutput_3.close();
        }

			
			conn_tPostgresqlOutput_3.commit();
			
		
    	conn_tPostgresqlOutput_3 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_3", true);
    	

	nb_line_deleted_tPostgresqlOutput_3=nb_line_deleted_tPostgresqlOutput_3+ deletedCount_tPostgresqlOutput_3;
	nb_line_update_tPostgresqlOutput_3=nb_line_update_tPostgresqlOutput_3 + updatedCount_tPostgresqlOutput_3;
	nb_line_inserted_tPostgresqlOutput_3=nb_line_inserted_tPostgresqlOutput_3 + insertedCount_tPostgresqlOutput_3;
	nb_line_rejected_tPostgresqlOutput_3=nb_line_rejected_tPostgresqlOutput_3 + rejectedCount_tPostgresqlOutput_3;
	
        globalMap.put("tPostgresqlOutput_3_NB_LINE",nb_line_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_3);
        globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_huwelijk_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_3", true);
end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tPostgresqlInput_4Process(globalMap);



/**
 * [tPostgresqlOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_3";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_3")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_3")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_3")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_3) {
					String errorMessage_tPostgresqlOutput_3 = "failed to close the connection in tPostgresqlOutput_3 :" + sqlEx_tPostgresqlOutput_3.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_3);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_kind_keyStruct implements routines.system.IPersistableRow<ldf_anr_kind_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal kndsleuteldatum;

				public BigDecimal getKndsleuteldatum () {
					return this.kndsleuteldatum;
				}
				
			    public BigDecimal kndsleutelvolgnummer;

				public BigDecimal getKndsleutelvolgnummer () {
					return this.kndsleutelvolgnummer;
				}
				
			    public BigDecimal kndanummer;

				public BigDecimal getKndanummer () {
					return this.kndanummer;
				}
				
			    public BigDecimal kndburgerservicenummer;

				public BigDecimal getKndburgerservicenummer () {
					return this.kndburgerservicenummer;
				}
				
			    public String kndvoornamen;

				public String getKndvoornamen () {
					return this.kndvoornamen;
				}
				
			    public String kndvoorletters;

				public String getKndvoorletters () {
					return this.kndvoorletters;
				}
				
			    public String kndadellijketitelcode;

				public String getKndadellijketitelcode () {
					return this.kndadellijketitelcode;
				}
				
			    public String kndadellijketitelomschrijving;

				public String getKndadellijketitelomschrijving () {
					return this.kndadellijketitelomschrijving;
				}
				
			    public String kndvoorvoegselgeslachtsnaam;

				public String getKndvoorvoegselgeslachtsnaam () {
					return this.kndvoorvoegselgeslachtsnaam;
				}
				
			    public String kndgeslachtsnaam;

				public String getKndgeslachtsnaam () {
					return this.kndgeslachtsnaam;
				}
				
			    public String kndnaamopgemaakt;

				public String getKndnaamopgemaakt () {
					return this.kndnaamopgemaakt;
				}
				
			    public java.util.Date kndgeboortedatum;

				public java.util.Date getKndgeboortedatum () {
					return this.kndgeboortedatum;
				}
				
			    public String kndgeboortedatumindicator;

				public String getKndgeboortedatumindicator () {
					return this.kndgeboortedatumindicator;
				}
				
			    public String kndgeboorteplaatscode;

				public String getKndgeboorteplaatscode () {
					return this.kndgeboorteplaatscode;
				}
				
			    public String kndgeboorteplaatsomschrijving;

				public String getKndgeboorteplaatsomschrijving () {
					return this.kndgeboorteplaatsomschrijving;
				}
				
			    public String kndgeboortelandcode;

				public String getKndgeboortelandcode () {
					return this.kndgeboortelandcode;
				}
				
			    public String kndgeboortelandomschrijving;

				public String getKndgeboortelandomschrijving () {
					return this.kndgeboortelandomschrijving;
				}
				
			    public String kndregistergemeenteaktecode;

				public String getKndregistergemeenteaktecode () {
					return this.kndregistergemeenteaktecode;
				}
				
			    public String kndregistergemeenteakteomschrijving;

				public String getKndregistergemeenteakteomschrijving () {
					return this.kndregistergemeenteakteomschrijving;
				}
				
			    public String kndaktenummer;

				public String getKndaktenummer () {
					return this.kndaktenummer;
				}
				
			    public String kndgemeentedocumentcode;

				public String getKndgemeentedocumentcode () {
					return this.kndgemeentedocumentcode;
				}
				
			    public String kndgemeentedocumentomschrijving;

				public String getKndgemeentedocumentomschrijving () {
					return this.kndgemeentedocumentomschrijving;
				}
				
			    public java.util.Date knddatumdocument;

				public java.util.Date getKnddatumdocument () {
					return this.knddatumdocument;
				}
				
			    public String knddatumdocumentindicator;

				public String getKnddatumdocumentindicator () {
					return this.knddatumdocumentindicator;
				}
				
			    public String kndbeschrijvingdocument;

				public String getKndbeschrijvingdocument () {
					return this.kndbeschrijvingdocument;
				}
				
			    public BigDecimal kndaanduidinggegevensonderzoek;

				public BigDecimal getKndaanduidinggegevensonderzoek () {
					return this.kndaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date knddatumingangonderzoek;

				public java.util.Date getKnddatumingangonderzoek () {
					return this.knddatumingangonderzoek;
				}
				
			    public String knddatumingangonderzoekindicator;

				public String getKnddatumingangonderzoekindicator () {
					return this.knddatumingangonderzoekindicator;
				}
				
			    public java.util.Date knddatumeindeonderzoek;

				public java.util.Date getKnddatumeindeonderzoek () {
					return this.knddatumeindeonderzoek;
				}
				
			    public String knddatumeindeonderzoekindicator;

				public String getKnddatumeindeonderzoekindicator () {
					return this.knddatumeindeonderzoekindicator;
				}
				
			    public java.util.Date kndingangsdatumgeldigheid;

				public java.util.Date getKndingangsdatumgeldigheid () {
					return this.kndingangsdatumgeldigheid;
				}
				
			    public String kndingangsdatumgeldigheidindicator;

				public String getKndingangsdatumgeldigheidindicator () {
					return this.kndingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date knddatumvanopneming;

				public java.util.Date getKnddatumvanopneming () {
					return this.knddatumvanopneming;
				}
				
			    public String knddatumvanopnemingindicator;

				public String getKnddatumvanopnemingindicator () {
					return this.knddatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.kndsleuteldatum == null) ? 0 : this.kndsleuteldatum.hashCode());
					
						result = prime * result + ((this.kndsleutelvolgnummer == null) ? 0 : this.kndsleutelvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_kind_keyStruct other = (ldf_anr_kind_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.kndsleuteldatum == null) {
							if (other.kndsleuteldatum != null)
								return false;
						
						} else if (!this.kndsleuteldatum.equals(other.kndsleuteldatum))
						
							return false;
					
						if (this.kndsleutelvolgnummer == null) {
							if (other.kndsleutelvolgnummer != null)
								return false;
						
						} else if (!this.kndsleutelvolgnummer.equals(other.kndsleutelvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_kind_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.kndsleuteldatum = this.kndsleuteldatum;
	            other.kndsleutelvolgnummer = this.kndsleutelvolgnummer;
	            other.kndanummer = this.kndanummer;
	            other.kndburgerservicenummer = this.kndburgerservicenummer;
	            other.kndvoornamen = this.kndvoornamen;
	            other.kndvoorletters = this.kndvoorletters;
	            other.kndadellijketitelcode = this.kndadellijketitelcode;
	            other.kndadellijketitelomschrijving = this.kndadellijketitelomschrijving;
	            other.kndvoorvoegselgeslachtsnaam = this.kndvoorvoegselgeslachtsnaam;
	            other.kndgeslachtsnaam = this.kndgeslachtsnaam;
	            other.kndnaamopgemaakt = this.kndnaamopgemaakt;
	            other.kndgeboortedatum = this.kndgeboortedatum;
	            other.kndgeboortedatumindicator = this.kndgeboortedatumindicator;
	            other.kndgeboorteplaatscode = this.kndgeboorteplaatscode;
	            other.kndgeboorteplaatsomschrijving = this.kndgeboorteplaatsomschrijving;
	            other.kndgeboortelandcode = this.kndgeboortelandcode;
	            other.kndgeboortelandomschrijving = this.kndgeboortelandomschrijving;
	            other.kndregistergemeenteaktecode = this.kndregistergemeenteaktecode;
	            other.kndregistergemeenteakteomschrijving = this.kndregistergemeenteakteomschrijving;
	            other.kndaktenummer = this.kndaktenummer;
	            other.kndgemeentedocumentcode = this.kndgemeentedocumentcode;
	            other.kndgemeentedocumentomschrijving = this.kndgemeentedocumentomschrijving;
	            other.knddatumdocument = this.knddatumdocument;
	            other.knddatumdocumentindicator = this.knddatumdocumentindicator;
	            other.kndbeschrijvingdocument = this.kndbeschrijvingdocument;
	            other.kndaanduidinggegevensonderzoek = this.kndaanduidinggegevensonderzoek;
	            other.knddatumingangonderzoek = this.knddatumingangonderzoek;
	            other.knddatumingangonderzoekindicator = this.knddatumingangonderzoekindicator;
	            other.knddatumeindeonderzoek = this.knddatumeindeonderzoek;
	            other.knddatumeindeonderzoekindicator = this.knddatumeindeonderzoekindicator;
	            other.kndingangsdatumgeldigheid = this.kndingangsdatumgeldigheid;
	            other.kndingangsdatumgeldigheidindicator = this.kndingangsdatumgeldigheidindicator;
	            other.knddatumvanopneming = this.knddatumvanopneming;
	            other.knddatumvanopnemingindicator = this.knddatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_kind_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.kndsleuteldatum = this.kndsleuteldatum;
	            	other.kndsleutelvolgnummer = this.kndsleutelvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.kndsleuteldatum = (BigDecimal) dis.readObject();
					
						this.kndsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.kndanummer = (BigDecimal) dis.readObject();
					
						this.kndburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.kndvoornamen = readString(dis);
					
					this.kndvoorletters = readString(dis);
					
					this.kndadellijketitelcode = readString(dis);
					
					this.kndadellijketitelomschrijving = readString(dis);
					
					this.kndvoorvoegselgeslachtsnaam = readString(dis);
					
					this.kndgeslachtsnaam = readString(dis);
					
					this.kndnaamopgemaakt = readString(dis);
					
					this.kndgeboortedatum = readDate(dis);
					
					this.kndgeboortedatumindicator = readString(dis);
					
					this.kndgeboorteplaatscode = readString(dis);
					
					this.kndgeboorteplaatsomschrijving = readString(dis);
					
					this.kndgeboortelandcode = readString(dis);
					
					this.kndgeboortelandomschrijving = readString(dis);
					
					this.kndregistergemeenteaktecode = readString(dis);
					
					this.kndregistergemeenteakteomschrijving = readString(dis);
					
					this.kndaktenummer = readString(dis);
					
					this.kndgemeentedocumentcode = readString(dis);
					
					this.kndgemeentedocumentomschrijving = readString(dis);
					
					this.knddatumdocument = readDate(dis);
					
					this.knddatumdocumentindicator = readString(dis);
					
					this.kndbeschrijvingdocument = readString(dis);
					
						this.kndaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.knddatumingangonderzoek = readDate(dis);
					
					this.knddatumingangonderzoekindicator = readString(dis);
					
					this.knddatumeindeonderzoek = readDate(dis);
					
					this.knddatumeindeonderzoekindicator = readString(dis);
					
					this.kndingangsdatumgeldigheid = readDate(dis);
					
					this.kndingangsdatumgeldigheidindicator = readString(dis);
					
					this.knddatumvanopneming = readDate(dis);
					
					this.knddatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndburgerservicenummer);
					
					// String
				
						writeString(this.kndvoornamen,dos);
					
					// String
				
						writeString(this.kndvoorletters,dos);
					
					// String
				
						writeString(this.kndadellijketitelcode,dos);
					
					// String
				
						writeString(this.kndadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.kndvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.kndgeslachtsnaam,dos);
					
					// String
				
						writeString(this.kndnaamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.kndgeboortedatum,dos);
					
					// String
				
						writeString(this.kndgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.kndgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.kndgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.kndgeboortelandcode,dos);
					
					// String
				
						writeString(this.kndgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.kndregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.kndregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.kndaktenummer,dos);
					
					// String
				
						writeString(this.kndgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.kndgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.knddatumdocument,dos);
					
					// String
				
						writeString(this.knddatumdocumentindicator,dos);
					
					// String
				
						writeString(this.kndbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.knddatumingangonderzoek,dos);
					
					// String
				
						writeString(this.knddatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.knddatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.knddatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.kndingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.kndingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.knddatumvanopneming,dos);
					
					// String
				
						writeString(this.knddatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",kndsleuteldatum="+String.valueOf(kndsleuteldatum));
		sb.append(",kndsleutelvolgnummer="+String.valueOf(kndsleutelvolgnummer));
		sb.append(",kndanummer="+String.valueOf(kndanummer));
		sb.append(",kndburgerservicenummer="+String.valueOf(kndburgerservicenummer));
		sb.append(",kndvoornamen="+kndvoornamen);
		sb.append(",kndvoorletters="+kndvoorletters);
		sb.append(",kndadellijketitelcode="+kndadellijketitelcode);
		sb.append(",kndadellijketitelomschrijving="+kndadellijketitelomschrijving);
		sb.append(",kndvoorvoegselgeslachtsnaam="+kndvoorvoegselgeslachtsnaam);
		sb.append(",kndgeslachtsnaam="+kndgeslachtsnaam);
		sb.append(",kndnaamopgemaakt="+kndnaamopgemaakt);
		sb.append(",kndgeboortedatum="+String.valueOf(kndgeboortedatum));
		sb.append(",kndgeboortedatumindicator="+kndgeboortedatumindicator);
		sb.append(",kndgeboorteplaatscode="+kndgeboorteplaatscode);
		sb.append(",kndgeboorteplaatsomschrijving="+kndgeboorteplaatsomschrijving);
		sb.append(",kndgeboortelandcode="+kndgeboortelandcode);
		sb.append(",kndgeboortelandomschrijving="+kndgeboortelandomschrijving);
		sb.append(",kndregistergemeenteaktecode="+kndregistergemeenteaktecode);
		sb.append(",kndregistergemeenteakteomschrijving="+kndregistergemeenteakteomschrijving);
		sb.append(",kndaktenummer="+kndaktenummer);
		sb.append(",kndgemeentedocumentcode="+kndgemeentedocumentcode);
		sb.append(",kndgemeentedocumentomschrijving="+kndgemeentedocumentomschrijving);
		sb.append(",knddatumdocument="+String.valueOf(knddatumdocument));
		sb.append(",knddatumdocumentindicator="+knddatumdocumentindicator);
		sb.append(",kndbeschrijvingdocument="+kndbeschrijvingdocument);
		sb.append(",kndaanduidinggegevensonderzoek="+String.valueOf(kndaanduidinggegevensonderzoek));
		sb.append(",knddatumingangonderzoek="+String.valueOf(knddatumingangonderzoek));
		sb.append(",knddatumingangonderzoekindicator="+knddatumingangonderzoekindicator);
		sb.append(",knddatumeindeonderzoek="+String.valueOf(knddatumeindeonderzoek));
		sb.append(",knddatumeindeonderzoekindicator="+knddatumeindeonderzoekindicator);
		sb.append(",kndingangsdatumgeldigheid="+String.valueOf(kndingangsdatumgeldigheid));
		sb.append(",kndingangsdatumgeldigheidindicator="+kndingangsdatumgeldigheidindicator);
		sb.append(",knddatumvanopneming="+String.valueOf(knddatumvanopneming));
		sb.append(",knddatumvanopnemingindicator="+knddatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_kind_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kndsleuteldatum, other.kndsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kndsleutelvolgnummer, other.kndsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_kindStruct implements routines.system.IPersistableRow<ldf_anr_kindStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_kindStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_kindStruct ldf_anr_kind = new ldf_anr_kindStruct();
ldf_anr_kind_keyStruct ldf_anr_kind_key = new ldf_anr_kind_keyStruct();





	
	/**
	 * [tPostgresqlOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_4", false);
		start_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_kind_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_4().limitLog4jByte();





String dbschema_tPostgresqlOutput_4 = null;
	dbschema_tPostgresqlOutput_4 = "ldf";
	

String tableName_tPostgresqlOutput_4 = null;
if(dbschema_tPostgresqlOutput_4 == null || dbschema_tPostgresqlOutput_4.trim().length() == 0) {
	tableName_tPostgresqlOutput_4 = "ibz_cip_kind";
} else {
	tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4 + "\".\"" + "ibz_cip_kind";
}

        int deleteKeyCount_tPostgresqlOutput_4 = 1;
        if(deleteKeyCount_tPostgresqlOutput_4 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_4 = 0;
int nb_line_update_tPostgresqlOutput_4 = 0;
int nb_line_inserted_tPostgresqlOutput_4 = 0;
int nb_line_deleted_tPostgresqlOutput_4 = 0;
int nb_line_rejected_tPostgresqlOutput_4 = 0;

int deletedCount_tPostgresqlOutput_4=0;
int updatedCount_tPostgresqlOutput_4=0;
int insertedCount_tPostgresqlOutput_4=0;
int rejectedCount_tPostgresqlOutput_4=0;

boolean whetherReject_tPostgresqlOutput_4 = false;

java.sql.Connection conn_tPostgresqlOutput_4 = null;
String dbUser_tPostgresqlOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_4 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_4 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_4 = decryptedPassword_tPostgresqlOutput_4;

    conn_tPostgresqlOutput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_4,dbUser_tPostgresqlOutput_4,dbPwd_tPostgresqlOutput_4);
	
	resourceMap.put("conn_tPostgresqlOutput_4", conn_tPostgresqlOutput_4);
        conn_tPostgresqlOutput_4.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_4 = 1000;
        int commitCounter_tPostgresqlOutput_4 = 0;


   int batchSize_tPostgresqlOutput_4 = 10000;
   int batchSizeCounter_tPostgresqlOutput_4=0;

int count_tPostgresqlOutput_4=0;
	    String delete_tPostgresqlOutput_4 = "DELETE FROM \"" + tableName_tPostgresqlOutput_4 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4.prepareStatement(delete_tPostgresqlOutput_4);
	    

 



/**
 * [tPostgresqlOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_kind" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_kind_keyStruct ldf_anr_kind_key_tmp = new ldf_anr_kind_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_4);
			   	String dbUser_tPostgresqlInput_4 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;
		        
				
			String url_tPostgresqlInput_4 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_4,dbUser_tPostgresqlInput_4,dbPwd_tPostgresqlInput_4);
		        
				conn_tPostgresqlInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);

		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;
		try{
		    rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								ldf_anr_kind.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_4.getObject(1) != null) {
                ldf_anr_kind.prsanummer = rs_tPostgresqlInput_4.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//ldf_anr_kind
			//ldf_anr_kind


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_kind"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

ldf_anr_kind_key = null;


// # Output table : 'ldf_anr_kind_key'
ldf_anr_kind_key_tmp.prsanummer = ldf_anr_kind.prsanummer ;
ldf_anr_kind_key_tmp.kndsleuteldatum = null;
ldf_anr_kind_key_tmp.kndsleutelvolgnummer = null;
ldf_anr_kind_key_tmp.kndanummer = null;
ldf_anr_kind_key_tmp.kndburgerservicenummer = null;
ldf_anr_kind_key_tmp.kndvoornamen = null;
ldf_anr_kind_key_tmp.kndvoorletters = null;
ldf_anr_kind_key_tmp.kndadellijketitelcode = null;
ldf_anr_kind_key_tmp.kndadellijketitelomschrijving = null;
ldf_anr_kind_key_tmp.kndvoorvoegselgeslachtsnaam = null;
ldf_anr_kind_key_tmp.kndgeslachtsnaam = null;
ldf_anr_kind_key_tmp.kndnaamopgemaakt = null;
ldf_anr_kind_key_tmp.kndgeboortedatum = null;
ldf_anr_kind_key_tmp.kndgeboortedatumindicator = null;
ldf_anr_kind_key_tmp.kndgeboorteplaatscode = null;
ldf_anr_kind_key_tmp.kndgeboorteplaatsomschrijving = null;
ldf_anr_kind_key_tmp.kndgeboortelandcode = null;
ldf_anr_kind_key_tmp.kndgeboortelandomschrijving = null;
ldf_anr_kind_key_tmp.kndregistergemeenteaktecode = null;
ldf_anr_kind_key_tmp.kndregistergemeenteakteomschrijving = null;
ldf_anr_kind_key_tmp.kndaktenummer = null;
ldf_anr_kind_key_tmp.kndgemeentedocumentcode = null;
ldf_anr_kind_key_tmp.kndgemeentedocumentomschrijving = null;
ldf_anr_kind_key_tmp.knddatumdocument = null;
ldf_anr_kind_key_tmp.knddatumdocumentindicator = null;
ldf_anr_kind_key_tmp.kndbeschrijvingdocument = null;
ldf_anr_kind_key_tmp.kndaanduidinggegevensonderzoek = null;
ldf_anr_kind_key_tmp.knddatumingangonderzoek = null;
ldf_anr_kind_key_tmp.knddatumingangonderzoekindicator = null;
ldf_anr_kind_key_tmp.knddatumeindeonderzoek = null;
ldf_anr_kind_key_tmp.knddatumeindeonderzoekindicator = null;
ldf_anr_kind_key_tmp.kndingangsdatumgeldigheid = null;
ldf_anr_kind_key_tmp.kndingangsdatumgeldigheidindicator = null;
ldf_anr_kind_key_tmp.knddatumvanopneming = null;
ldf_anr_kind_key_tmp.knddatumvanopnemingindicator = null;
ldf_anr_kind_key = ldf_anr_kind_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
// Start of branch "ldf_anr_kind_key"
if(ldf_anr_kind_key != null) { 



	
	/**
	 * [tPostgresqlOutput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	

			//ldf_anr_kind_key
			//ldf_anr_kind_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_kind_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_4 = false;
					
                    pstmt_tPostgresqlOutput_4.setBigDecimal(1, ldf_anr_kind_key.prsanummer);

    		pstmt_tPostgresqlOutput_4.addBatch();
			nb_line_tPostgresqlOutput_4++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_4++;
    		
            if(!whetherReject_tPostgresqlOutput_4) {
            }
    			if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSize_tPostgresqlOutput_4 <= batchSizeCounter_tPostgresqlOutput_4)) {
                try {
						int countSum_tPostgresqlOutput_4 = 0;
						    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_4 = 0;
					for(int countEach_tPostgresqlOutput_4: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
					
			    	    deletedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_4++;
                if(commitEvery_tPostgresqlOutput_4 <= commitCounter_tPostgresqlOutput_4) {
                if ((batchSize_tPostgresqlOutput_4 > 0) && (batchSizeCounter_tPostgresqlOutput_4 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_4 = 0;
                		    
						for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
            	    	
                batchSizeCounter_tPostgresqlOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_4 = 0;
						for(int countEach_tPostgresqlOutput_4: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
						}
						
				    	    deletedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_4.commit();
                	
                	commitCounter_tPostgresqlOutput_4=0;
                }

 


	tos_count_tPostgresqlOutput_4++;

/**
 * [tPostgresqlOutput_4 main ] stop
 */

} // End of branch "ldf_anr_kind_key"







	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	stmt_tPostgresqlInput_4.close();

	if(conn_tPostgresqlInput_4 != null && !conn_tPostgresqlInput_4.isClosed()) {
		
			conn_tPostgresqlInput_4.commit();
			
		
			conn_tPostgresqlInput_4.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_kind"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	    try {
				int countSum_tPostgresqlOutput_4 = 0;
				if (pstmt_tPostgresqlOutput_4 != null && batchSizeCounter_tPostgresqlOutput_4 > 0) {
						
					for(int countEach_tPostgresqlOutput_4: pstmt_tPostgresqlOutput_4.executeBatch()) {
						countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_4 = 0;
			for(int countEach_tPostgresqlOutput_4: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_4 += (countEach_tPostgresqlOutput_4 < 0 ? 0 : countEach_tPostgresqlOutput_4);
			}
			
	    	    deletedCount_tPostgresqlOutput_4 += countSum_tPostgresqlOutput_4;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_4 != null) {
            pstmt_tPostgresqlOutput_4.close();
        }

			
			conn_tPostgresqlOutput_4.commit();
			
		
    	conn_tPostgresqlOutput_4 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_4", true);
    	

	nb_line_deleted_tPostgresqlOutput_4=nb_line_deleted_tPostgresqlOutput_4+ deletedCount_tPostgresqlOutput_4;
	nb_line_update_tPostgresqlOutput_4=nb_line_update_tPostgresqlOutput_4 + updatedCount_tPostgresqlOutput_4;
	nb_line_inserted_tPostgresqlOutput_4=nb_line_inserted_tPostgresqlOutput_4 + insertedCount_tPostgresqlOutput_4;
	nb_line_rejected_tPostgresqlOutput_4=nb_line_rejected_tPostgresqlOutput_4 + rejectedCount_tPostgresqlOutput_4;
	
        globalMap.put("tPostgresqlOutput_4_NB_LINE",nb_line_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_4);
        globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_kind_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_4", true);
end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tPostgresqlInput_5Process(globalMap);



/**
 * [tPostgresqlOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_4";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_4")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_4")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_4")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_4) {
					String errorMessage_tPostgresqlOutput_4 = "failed to close the connection in tPostgresqlOutput_4 :" + sqlEx_tPostgresqlOutput_4.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_4);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_reisdocument_keyStruct implements routines.system.IPersistableRow<ldf_anr_reisdocument_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal rsdsleuteldatum;

				public BigDecimal getRsdsleuteldatum () {
					return this.rsdsleuteldatum;
				}
				
			    public BigDecimal rsdsleutelvolgnummer;

				public BigDecimal getRsdsleutelvolgnummer () {
					return this.rsdsleutelvolgnummer;
				}
				
			    public String rsdsoortnederlandsreisdocumentcode;

				public String getRsdsoortnederlandsreisdocumentcode () {
					return this.rsdsoortnederlandsreisdocumentcode;
				}
				
			    public String rsdsoortnederlandsreisdocumentomschrijving;

				public String getRsdsoortnederlandsreisdocumentomschrijving () {
					return this.rsdsoortnederlandsreisdocumentomschrijving;
				}
				
			    public String rsdnummernederlandsreisdocument;

				public String getRsdnummernederlandsreisdocument () {
					return this.rsdnummernederlandsreisdocument;
				}
				
			    public java.util.Date rsddatumuitgiftenederlandsreisdocument;

				public java.util.Date getRsddatumuitgiftenederlandsreisdocument () {
					return this.rsddatumuitgiftenederlandsreisdocument;
				}
				
			    public String rsddatumuitgiftenederlandsreisdocumentindicator;

				public String getRsddatumuitgiftenederlandsreisdocumentindicator () {
					return this.rsddatumuitgiftenederlandsreisdocumentindicator;
				}
				
			    public String rsdautoriteitvanafgiftenederlandsreisdocument;

				public String getRsdautoriteitvanafgiftenederlandsreisdocument () {
					return this.rsdautoriteitvanafgiftenederlandsreisdocument;
				}
				
			    public java.util.Date rsddatumeindegeldigheidnederlandsreisdocument;

				public java.util.Date getRsddatumeindegeldigheidnederlandsreisdocument () {
					return this.rsddatumeindegeldigheidnederlandsreisdocument;
				}
				
			    public String rsddatumeindegeldigheidnederlandsreisdocumentindicator;

				public String getRsddatumeindegeldigheidnederlandsreisdocumentindicator () {
					return this.rsddatumeindegeldigheidnederlandsreisdocumentindicator;
				}
				
			    public java.util.Date rsddatuminhoudingvermissingnederlandsreisdocument;

				public java.util.Date getRsddatuminhoudingvermissingnederlandsreisdocument () {
					return this.rsddatuminhoudingvermissingnederlandsreisdocument;
				}
				
			    public String rsddatuminhoudingvermissingnederlandsreisdocumentindicator;

				public String getRsddatuminhoudingvermissingnederlandsreisdocumentindicator () {
					return this.rsddatuminhoudingvermissingnederlandsreisdocumentindicator;
				}
				
			    public String rsdaanduidinginhoudingvermissingnederlandsreisdocument;

				public String getRsdaanduidinginhoudingvermissingnederlandsreisdocument () {
					return this.rsdaanduidinginhoudingvermissingnederlandsreisdocument;
				}
				
			    public BigDecimal rsdsignaleringbetrekkingverstrekkennederlandsreisdocument;

				public BigDecimal getRsdsignaleringbetrekkingverstrekkennederlandsreisdocument () {
					return this.rsdsignaleringbetrekkingverstrekkennederlandsreisdocument;
				}
				
			    public String rsdgemeentedocumentcode;

				public String getRsdgemeentedocumentcode () {
					return this.rsdgemeentedocumentcode;
				}
				
			    public String rsdgemeentedocumentomschrijving;

				public String getRsdgemeentedocumentomschrijving () {
					return this.rsdgemeentedocumentomschrijving;
				}
				
			    public java.util.Date rsddatumdocument;

				public java.util.Date getRsddatumdocument () {
					return this.rsddatumdocument;
				}
				
			    public String rsddatumdocumentindicator;

				public String getRsddatumdocumentindicator () {
					return this.rsddatumdocumentindicator;
				}
				
			    public String rsdbeschrijvingdocumenT;

				public String getRsdbeschrijvingdocumenT () {
					return this.rsdbeschrijvingdocumenT;
				}
				
			    public BigDecimal rsdaanduidinggegevensonderzoek;

				public BigDecimal getRsdaanduidinggegevensonderzoek () {
					return this.rsdaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date rsddatumingangonderzoek;

				public java.util.Date getRsddatumingangonderzoek () {
					return this.rsddatumingangonderzoek;
				}
				
			    public String rsddatumingangonderzoekindicator;

				public String getRsddatumingangonderzoekindicator () {
					return this.rsddatumingangonderzoekindicator;
				}
				
			    public java.util.Date rsddatumeindeonderzoek;

				public java.util.Date getRsddatumeindeonderzoek () {
					return this.rsddatumeindeonderzoek;
				}
				
			    public String rsddatumeindeonderzoekindicator;

				public String getRsddatumeindeonderzoekindicator () {
					return this.rsddatumeindeonderzoekindicator;
				}
				
			    public java.util.Date rsdingangsdatumgeldigheid;

				public java.util.Date getRsdingangsdatumgeldigheid () {
					return this.rsdingangsdatumgeldigheid;
				}
				
			    public String rsdingangsdatumgeldigheidindicator;

				public String getRsdingangsdatumgeldigheidindicator () {
					return this.rsdingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date rsddatumvanopneming;

				public java.util.Date getRsddatumvanopneming () {
					return this.rsddatumvanopneming;
				}
				
			    public String rsddatumvanopnemingindicator;

				public String getRsddatumvanopnemingindicator () {
					return this.rsddatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.rsdsleuteldatum == null) ? 0 : this.rsdsleuteldatum.hashCode());
					
						result = prime * result + ((this.rsdsleutelvolgnummer == null) ? 0 : this.rsdsleutelvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_reisdocument_keyStruct other = (ldf_anr_reisdocument_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.rsdsleuteldatum == null) {
							if (other.rsdsleuteldatum != null)
								return false;
						
						} else if (!this.rsdsleuteldatum.equals(other.rsdsleuteldatum))
						
							return false;
					
						if (this.rsdsleutelvolgnummer == null) {
							if (other.rsdsleutelvolgnummer != null)
								return false;
						
						} else if (!this.rsdsleutelvolgnummer.equals(other.rsdsleutelvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_reisdocument_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.rsdsleuteldatum = this.rsdsleuteldatum;
	            other.rsdsleutelvolgnummer = this.rsdsleutelvolgnummer;
	            other.rsdsoortnederlandsreisdocumentcode = this.rsdsoortnederlandsreisdocumentcode;
	            other.rsdsoortnederlandsreisdocumentomschrijving = this.rsdsoortnederlandsreisdocumentomschrijving;
	            other.rsdnummernederlandsreisdocument = this.rsdnummernederlandsreisdocument;
	            other.rsddatumuitgiftenederlandsreisdocument = this.rsddatumuitgiftenederlandsreisdocument;
	            other.rsddatumuitgiftenederlandsreisdocumentindicator = this.rsddatumuitgiftenederlandsreisdocumentindicator;
	            other.rsdautoriteitvanafgiftenederlandsreisdocument = this.rsdautoriteitvanafgiftenederlandsreisdocument;
	            other.rsddatumeindegeldigheidnederlandsreisdocument = this.rsddatumeindegeldigheidnederlandsreisdocument;
	            other.rsddatumeindegeldigheidnederlandsreisdocumentindicator = this.rsddatumeindegeldigheidnederlandsreisdocumentindicator;
	            other.rsddatuminhoudingvermissingnederlandsreisdocument = this.rsddatuminhoudingvermissingnederlandsreisdocument;
	            other.rsddatuminhoudingvermissingnederlandsreisdocumentindicator = this.rsddatuminhoudingvermissingnederlandsreisdocumentindicator;
	            other.rsdaanduidinginhoudingvermissingnederlandsreisdocument = this.rsdaanduidinginhoudingvermissingnederlandsreisdocument;
	            other.rsdsignaleringbetrekkingverstrekkennederlandsreisdocument = this.rsdsignaleringbetrekkingverstrekkennederlandsreisdocument;
	            other.rsdgemeentedocumentcode = this.rsdgemeentedocumentcode;
	            other.rsdgemeentedocumentomschrijving = this.rsdgemeentedocumentomschrijving;
	            other.rsddatumdocument = this.rsddatumdocument;
	            other.rsddatumdocumentindicator = this.rsddatumdocumentindicator;
	            other.rsdbeschrijvingdocumenT = this.rsdbeschrijvingdocumenT;
	            other.rsdaanduidinggegevensonderzoek = this.rsdaanduidinggegevensonderzoek;
	            other.rsddatumingangonderzoek = this.rsddatumingangonderzoek;
	            other.rsddatumingangonderzoekindicator = this.rsddatumingangonderzoekindicator;
	            other.rsddatumeindeonderzoek = this.rsddatumeindeonderzoek;
	            other.rsddatumeindeonderzoekindicator = this.rsddatumeindeonderzoekindicator;
	            other.rsdingangsdatumgeldigheid = this.rsdingangsdatumgeldigheid;
	            other.rsdingangsdatumgeldigheidindicator = this.rsdingangsdatumgeldigheidindicator;
	            other.rsddatumvanopneming = this.rsddatumvanopneming;
	            other.rsddatumvanopnemingindicator = this.rsddatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_reisdocument_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.rsdsleuteldatum = this.rsdsleuteldatum;
	            	other.rsdsleutelvolgnummer = this.rsdsleutelvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.rsdsleuteldatum = (BigDecimal) dis.readObject();
					
						this.rsdsleutelvolgnummer = (BigDecimal) dis.readObject();
					
					this.rsdsoortnederlandsreisdocumentcode = readString(dis);
					
					this.rsdsoortnederlandsreisdocumentomschrijving = readString(dis);
					
					this.rsdnummernederlandsreisdocument = readString(dis);
					
					this.rsddatumuitgiftenederlandsreisdocument = readDate(dis);
					
					this.rsddatumuitgiftenederlandsreisdocumentindicator = readString(dis);
					
					this.rsdautoriteitvanafgiftenederlandsreisdocument = readString(dis);
					
					this.rsddatumeindegeldigheidnederlandsreisdocument = readDate(dis);
					
					this.rsddatumeindegeldigheidnederlandsreisdocumentindicator = readString(dis);
					
					this.rsddatuminhoudingvermissingnederlandsreisdocument = readDate(dis);
					
					this.rsddatuminhoudingvermissingnederlandsreisdocumentindicator = readString(dis);
					
					this.rsdaanduidinginhoudingvermissingnederlandsreisdocument = readString(dis);
					
						this.rsdsignaleringbetrekkingverstrekkennederlandsreisdocument = (BigDecimal) dis.readObject();
					
					this.rsdgemeentedocumentcode = readString(dis);
					
					this.rsdgemeentedocumentomschrijving = readString(dis);
					
					this.rsddatumdocument = readDate(dis);
					
					this.rsddatumdocumentindicator = readString(dis);
					
					this.rsdbeschrijvingdocumenT = readString(dis);
					
						this.rsdaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.rsddatumingangonderzoek = readDate(dis);
					
					this.rsddatumingangonderzoekindicator = readString(dis);
					
					this.rsddatumeindeonderzoek = readDate(dis);
					
					this.rsddatumeindeonderzoekindicator = readString(dis);
					
					this.rsdingangsdatumgeldigheid = readDate(dis);
					
					this.rsdingangsdatumgeldigheidindicator = readString(dis);
					
					this.rsddatumvanopneming = readDate(dis);
					
					this.rsddatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.rsdsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.rsdsleutelvolgnummer);
					
					// String
				
						writeString(this.rsdsoortnederlandsreisdocumentcode,dos);
					
					// String
				
						writeString(this.rsdsoortnederlandsreisdocumentomschrijving,dos);
					
					// String
				
						writeString(this.rsdnummernederlandsreisdocument,dos);
					
					// java.util.Date
				
						writeDate(this.rsddatumuitgiftenederlandsreisdocument,dos);
					
					// String
				
						writeString(this.rsddatumuitgiftenederlandsreisdocumentindicator,dos);
					
					// String
				
						writeString(this.rsdautoriteitvanafgiftenederlandsreisdocument,dos);
					
					// java.util.Date
				
						writeDate(this.rsddatumeindegeldigheidnederlandsreisdocument,dos);
					
					// String
				
						writeString(this.rsddatumeindegeldigheidnederlandsreisdocumentindicator,dos);
					
					// java.util.Date
				
						writeDate(this.rsddatuminhoudingvermissingnederlandsreisdocument,dos);
					
					// String
				
						writeString(this.rsddatuminhoudingvermissingnederlandsreisdocumentindicator,dos);
					
					// String
				
						writeString(this.rsdaanduidinginhoudingvermissingnederlandsreisdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.rsdsignaleringbetrekkingverstrekkennederlandsreisdocument);
					
					// String
				
						writeString(this.rsdgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.rsdgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.rsddatumdocument,dos);
					
					// String
				
						writeString(this.rsddatumdocumentindicator,dos);
					
					// String
				
						writeString(this.rsdbeschrijvingdocumenT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.rsdaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.rsddatumingangonderzoek,dos);
					
					// String
				
						writeString(this.rsddatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.rsddatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.rsddatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.rsdingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.rsdingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.rsddatumvanopneming,dos);
					
					// String
				
						writeString(this.rsddatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",rsdsleuteldatum="+String.valueOf(rsdsleuteldatum));
		sb.append(",rsdsleutelvolgnummer="+String.valueOf(rsdsleutelvolgnummer));
		sb.append(",rsdsoortnederlandsreisdocumentcode="+rsdsoortnederlandsreisdocumentcode);
		sb.append(",rsdsoortnederlandsreisdocumentomschrijving="+rsdsoortnederlandsreisdocumentomschrijving);
		sb.append(",rsdnummernederlandsreisdocument="+rsdnummernederlandsreisdocument);
		sb.append(",rsddatumuitgiftenederlandsreisdocument="+String.valueOf(rsddatumuitgiftenederlandsreisdocument));
		sb.append(",rsddatumuitgiftenederlandsreisdocumentindicator="+rsddatumuitgiftenederlandsreisdocumentindicator);
		sb.append(",rsdautoriteitvanafgiftenederlandsreisdocument="+rsdautoriteitvanafgiftenederlandsreisdocument);
		sb.append(",rsddatumeindegeldigheidnederlandsreisdocument="+String.valueOf(rsddatumeindegeldigheidnederlandsreisdocument));
		sb.append(",rsddatumeindegeldigheidnederlandsreisdocumentindicator="+rsddatumeindegeldigheidnederlandsreisdocumentindicator);
		sb.append(",rsddatuminhoudingvermissingnederlandsreisdocument="+String.valueOf(rsddatuminhoudingvermissingnederlandsreisdocument));
		sb.append(",rsddatuminhoudingvermissingnederlandsreisdocumentindicator="+rsddatuminhoudingvermissingnederlandsreisdocumentindicator);
		sb.append(",rsdaanduidinginhoudingvermissingnederlandsreisdocument="+rsdaanduidinginhoudingvermissingnederlandsreisdocument);
		sb.append(",rsdsignaleringbetrekkingverstrekkennederlandsreisdocument="+String.valueOf(rsdsignaleringbetrekkingverstrekkennederlandsreisdocument));
		sb.append(",rsdgemeentedocumentcode="+rsdgemeentedocumentcode);
		sb.append(",rsdgemeentedocumentomschrijving="+rsdgemeentedocumentomschrijving);
		sb.append(",rsddatumdocument="+String.valueOf(rsddatumdocument));
		sb.append(",rsddatumdocumentindicator="+rsddatumdocumentindicator);
		sb.append(",rsdbeschrijvingdocumenT="+rsdbeschrijvingdocumenT);
		sb.append(",rsdaanduidinggegevensonderzoek="+String.valueOf(rsdaanduidinggegevensonderzoek));
		sb.append(",rsddatumingangonderzoek="+String.valueOf(rsddatumingangonderzoek));
		sb.append(",rsddatumingangonderzoekindicator="+rsddatumingangonderzoekindicator);
		sb.append(",rsddatumeindeonderzoek="+String.valueOf(rsddatumeindeonderzoek));
		sb.append(",rsddatumeindeonderzoekindicator="+rsddatumeindeonderzoekindicator);
		sb.append(",rsdingangsdatumgeldigheid="+String.valueOf(rsdingangsdatumgeldigheid));
		sb.append(",rsdingangsdatumgeldigheidindicator="+rsdingangsdatumgeldigheidindicator);
		sb.append(",rsddatumvanopneming="+String.valueOf(rsddatumvanopneming));
		sb.append(",rsddatumvanopnemingindicator="+rsddatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_reisdocument_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.rsdsleuteldatum, other.rsdsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.rsdsleutelvolgnummer, other.rsdsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_reisdocumentStruct implements routines.system.IPersistableRow<ldf_anr_reisdocumentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_reisdocumentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_reisdocumentStruct ldf_anr_reisdocument = new ldf_anr_reisdocumentStruct();
ldf_anr_reisdocument_keyStruct ldf_anr_reisdocument_key = new ldf_anr_reisdocument_keyStruct();





	
	/**
	 * [tPostgresqlOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_5", false);
		start_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_reisdocument_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_5().limitLog4jByte();





String dbschema_tPostgresqlOutput_5 = null;
	dbschema_tPostgresqlOutput_5 = "ldf";
	

String tableName_tPostgresqlOutput_5 = null;
if(dbschema_tPostgresqlOutput_5 == null || dbschema_tPostgresqlOutput_5.trim().length() == 0) {
	tableName_tPostgresqlOutput_5 = "ibz_cip_reisdocument";
} else {
	tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5 + "\".\"" + "ibz_cip_reisdocument";
}

        int deleteKeyCount_tPostgresqlOutput_5 = 1;
        if(deleteKeyCount_tPostgresqlOutput_5 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_5 = 0;
int nb_line_update_tPostgresqlOutput_5 = 0;
int nb_line_inserted_tPostgresqlOutput_5 = 0;
int nb_line_deleted_tPostgresqlOutput_5 = 0;
int nb_line_rejected_tPostgresqlOutput_5 = 0;

int deletedCount_tPostgresqlOutput_5=0;
int updatedCount_tPostgresqlOutput_5=0;
int insertedCount_tPostgresqlOutput_5=0;
int rejectedCount_tPostgresqlOutput_5=0;

boolean whetherReject_tPostgresqlOutput_5 = false;

java.sql.Connection conn_tPostgresqlOutput_5 = null;
String dbUser_tPostgresqlOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_5 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_5 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_5 = decryptedPassword_tPostgresqlOutput_5;

    conn_tPostgresqlOutput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_5,dbUser_tPostgresqlOutput_5,dbPwd_tPostgresqlOutput_5);
	
	resourceMap.put("conn_tPostgresqlOutput_5", conn_tPostgresqlOutput_5);
        conn_tPostgresqlOutput_5.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_5 = 1000;
        int commitCounter_tPostgresqlOutput_5 = 0;


   int batchSize_tPostgresqlOutput_5 = 10000;
   int batchSizeCounter_tPostgresqlOutput_5=0;

int count_tPostgresqlOutput_5=0;
	    String delete_tPostgresqlOutput_5 = "DELETE FROM \"" + tableName_tPostgresqlOutput_5 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5.prepareStatement(delete_tPostgresqlOutput_5);
	    

 



/**
 * [tPostgresqlOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_reisdocument" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		
    	class BytesLimit65535_tMap_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_5().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_reisdocument_keyStruct ldf_anr_reisdocument_key_tmp = new ldf_anr_reisdocument_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_5);
			   	String dbUser_tPostgresqlInput_5 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;
		        
				
			String url_tPostgresqlInput_5 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_5,dbUser_tPostgresqlInput_5,dbPwd_tPostgresqlInput_5);
		        
				conn_tPostgresqlInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);

		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;
		try{
		    rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								ldf_anr_reisdocument.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_5.getObject(1) != null) {
                ldf_anr_reisdocument.prsanummer = rs_tPostgresqlInput_5.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//ldf_anr_reisdocument
			//ldf_anr_reisdocument


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_reisdocument"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

ldf_anr_reisdocument_key = null;


// # Output table : 'ldf_anr_reisdocument_key'
ldf_anr_reisdocument_key_tmp.prsanummer = ldf_anr_reisdocument.prsanummer ;
ldf_anr_reisdocument_key_tmp.rsdsleuteldatum = null;
ldf_anr_reisdocument_key_tmp.rsdsleutelvolgnummer = null;
ldf_anr_reisdocument_key_tmp.rsdsoortnederlandsreisdocumentcode = null;
ldf_anr_reisdocument_key_tmp.rsdsoortnederlandsreisdocumentomschrijving = null;
ldf_anr_reisdocument_key_tmp.rsdnummernederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsddatumuitgiftenederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsddatumuitgiftenederlandsreisdocumentindicator = null;
ldf_anr_reisdocument_key_tmp.rsdautoriteitvanafgiftenederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsddatumeindegeldigheidnederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsddatumeindegeldigheidnederlandsreisdocumentindicator = null;
ldf_anr_reisdocument_key_tmp.rsddatuminhoudingvermissingnederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsddatuminhoudingvermissingnederlandsreisdocumentindicator = null;
ldf_anr_reisdocument_key_tmp.rsdaanduidinginhoudingvermissingnederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsdsignaleringbetrekkingverstrekkennederlandsreisdocument = null;
ldf_anr_reisdocument_key_tmp.rsdgemeentedocumentcode = null;
ldf_anr_reisdocument_key_tmp.rsdgemeentedocumentomschrijving = null;
ldf_anr_reisdocument_key_tmp.rsddatumdocument = null;
ldf_anr_reisdocument_key_tmp.rsddatumdocumentindicator = null;
ldf_anr_reisdocument_key_tmp.rsdbeschrijvingdocumenT = null;
ldf_anr_reisdocument_key_tmp.rsdaanduidinggegevensonderzoek = null;
ldf_anr_reisdocument_key_tmp.rsddatumingangonderzoek = null;
ldf_anr_reisdocument_key_tmp.rsddatumingangonderzoekindicator = null;
ldf_anr_reisdocument_key_tmp.rsddatumeindeonderzoek = null;
ldf_anr_reisdocument_key_tmp.rsddatumeindeonderzoekindicator = null;
ldf_anr_reisdocument_key_tmp.rsdingangsdatumgeldigheid = null;
ldf_anr_reisdocument_key_tmp.rsdingangsdatumgeldigheidindicator = null;
ldf_anr_reisdocument_key_tmp.rsddatumvanopneming = null;
ldf_anr_reisdocument_key_tmp.rsddatumvanopnemingindicator = null;
ldf_anr_reisdocument_key = ldf_anr_reisdocument_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
// Start of branch "ldf_anr_reisdocument_key"
if(ldf_anr_reisdocument_key != null) { 



	
	/**
	 * [tPostgresqlOutput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	

			//ldf_anr_reisdocument_key
			//ldf_anr_reisdocument_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_reisdocument_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_5 = false;
					
                    pstmt_tPostgresqlOutput_5.setBigDecimal(1, ldf_anr_reisdocument_key.prsanummer);

    		pstmt_tPostgresqlOutput_5.addBatch();
			nb_line_tPostgresqlOutput_5++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_5++;
    		
            if(!whetherReject_tPostgresqlOutput_5) {
            }
    			if ((batchSize_tPostgresqlOutput_5 > 0) && (batchSize_tPostgresqlOutput_5 <= batchSizeCounter_tPostgresqlOutput_5)) {
                try {
						int countSum_tPostgresqlOutput_5 = 0;
						    
						for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_5 = 0;
					for(int countEach_tPostgresqlOutput_5: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
					}
					
			    	    deletedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_5++;
                if(commitEvery_tPostgresqlOutput_5 <= commitCounter_tPostgresqlOutput_5) {
                if ((batchSize_tPostgresqlOutput_5 > 0) && (batchSizeCounter_tPostgresqlOutput_5 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_5 = 0;
                		    
						for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
            	    	
                batchSizeCounter_tPostgresqlOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_5 = 0;
						for(int countEach_tPostgresqlOutput_5: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
						}
						
				    	    deletedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_5.commit();
                	
                	commitCounter_tPostgresqlOutput_5=0;
                }

 


	tos_count_tPostgresqlOutput_5++;

/**
 * [tPostgresqlOutput_5 main ] stop
 */

} // End of branch "ldf_anr_reisdocument_key"







	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	stmt_tPostgresqlInput_5.close();

	if(conn_tPostgresqlInput_5 != null && !conn_tPostgresqlInput_5.isClosed()) {
		
			conn_tPostgresqlInput_5.commit();
			
		
			conn_tPostgresqlInput_5.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_reisdocument"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



	    try {
				int countSum_tPostgresqlOutput_5 = 0;
				if (pstmt_tPostgresqlOutput_5 != null && batchSizeCounter_tPostgresqlOutput_5 > 0) {
						
					for(int countEach_tPostgresqlOutput_5: pstmt_tPostgresqlOutput_5.executeBatch()) {
						countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_5 = 0;
			for(int countEach_tPostgresqlOutput_5: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_5 += (countEach_tPostgresqlOutput_5 < 0 ? 0 : countEach_tPostgresqlOutput_5);
			}
			
	    	    deletedCount_tPostgresqlOutput_5 += countSum_tPostgresqlOutput_5;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_5 != null) {
            pstmt_tPostgresqlOutput_5.close();
        }

			
			conn_tPostgresqlOutput_5.commit();
			
		
    	conn_tPostgresqlOutput_5 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_5", true);
    	

	nb_line_deleted_tPostgresqlOutput_5=nb_line_deleted_tPostgresqlOutput_5+ deletedCount_tPostgresqlOutput_5;
	nb_line_update_tPostgresqlOutput_5=nb_line_update_tPostgresqlOutput_5 + updatedCount_tPostgresqlOutput_5;
	nb_line_inserted_tPostgresqlOutput_5=nb_line_inserted_tPostgresqlOutput_5 + insertedCount_tPostgresqlOutput_5;
	nb_line_rejected_tPostgresqlOutput_5=nb_line_rejected_tPostgresqlOutput_5 + rejectedCount_tPostgresqlOutput_5;
	
        globalMap.put("tPostgresqlOutput_5_NB_LINE",nb_line_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_5);
        globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_5);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_reisdocument_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_5", true);
end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tPostgresqlInput_6Process(globalMap);



/**
 * [tPostgresqlOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_5";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_5")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_5")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_5")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_5) {
					String errorMessage_tPostgresqlOutput_5 = "failed to close the connection in tPostgresqlOutput_5 :" + sqlEx_tPostgresqlOutput_5.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_5);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_persoon_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_persoon_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal prshstsleutelgeldigdatum;

				public BigDecimal getPrshstsleutelgeldigdatum () {
					return this.prshstsleutelgeldigdatum;
				}
				
			    public BigDecimal prshstsleutelgeldigvolgnummer;

				public BigDecimal getPrshstsleutelgeldigvolgnummer () {
					return this.prshstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal prshstanummer;

				public BigDecimal getPrshstanummer () {
					return this.prshstanummer;
				}
				
			    public BigDecimal prshstburgerservicenummer;

				public BigDecimal getPrshstburgerservicenummer () {
					return this.prshstburgerservicenummer;
				}
				
			    public String prshstvoornamen;

				public String getPrshstvoornamen () {
					return this.prshstvoornamen;
				}
				
			    public String prshstvoorletters;

				public String getPrshstvoorletters () {
					return this.prshstvoorletters;
				}
				
			    public String prshstadellijketitelcode;

				public String getPrshstadellijketitelcode () {
					return this.prshstadellijketitelcode;
				}
				
			    public String prshstadellijketitelomschrijving;

				public String getPrshstadellijketitelomschrijving () {
					return this.prshstadellijketitelomschrijving;
				}
				
			    public String prshstvoorvoegselgeslachtsnaam;

				public String getPrshstvoorvoegselgeslachtsnaam () {
					return this.prshstvoorvoegselgeslachtsnaam;
				}
				
			    public String prshstgeslachtsnaam;

				public String getPrshstgeslachtsnaam () {
					return this.prshstgeslachtsnaam;
				}
				
			    public String prshstgeboortedatumindicator;

				public String getPrshstgeboortedatumindicator () {
					return this.prshstgeboortedatumindicator;
				}
				
			    public java.util.Date prshstgeboortedatum;

				public java.util.Date getPrshstgeboortedatum () {
					return this.prshstgeboortedatum;
				}
				
			    public String prshstgeboorteplaatscode;

				public String getPrshstgeboorteplaatscode () {
					return this.prshstgeboorteplaatscode;
				}
				
			    public String prshstgeboorteplaatsomschrijving;

				public String getPrshstgeboorteplaatsomschrijving () {
					return this.prshstgeboorteplaatsomschrijving;
				}
				
			    public String prshstgeboortelandcode;

				public String getPrshstgeboortelandcode () {
					return this.prshstgeboortelandcode;
				}
				
			    public String prshstgeboortelandlandomschrijving;

				public String getPrshstgeboortelandlandomschrijving () {
					return this.prshstgeboortelandlandomschrijving;
				}
				
			    public String prshstgeslachtsaanduidingcode;

				public String getPrshstgeslachtsaanduidingcode () {
					return this.prshstgeslachtsaanduidingcode;
				}
				
			    public String prshstaanduidingnaamgebruik;

				public String getPrshstaanduidingnaamgebruik () {
					return this.prshstaanduidingnaamgebruik;
				}
				
			    public java.util.Date prshstingangsdatumgeldigheid;

				public java.util.Date getPrshstingangsdatumgeldigheid () {
					return this.prshstingangsdatumgeldigheid;
				}
				
			    public String prshstingangsdatumgeldigheidindicator;

				public String getPrshstingangsdatumgeldigheidindicator () {
					return this.prshstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date prshstdatumvanopneming;

				public java.util.Date getPrshstdatumvanopneming () {
					return this.prshstdatumvanopneming;
				}
				
			    public String prshstdatumvanopnemingindicator;

				public String getPrshstdatumvanopnemingindicator () {
					return this.prshstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.prshstsleutelgeldigdatum == null) ? 0 : this.prshstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.prshstsleutelgeldigvolgnummer == null) ? 0 : this.prshstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_persoon_historie_keyStruct other = (ldf_anr_persoon_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.prshstsleutelgeldigdatum == null) {
							if (other.prshstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.prshstsleutelgeldigdatum.equals(other.prshstsleutelgeldigdatum))
						
							return false;
					
						if (this.prshstsleutelgeldigvolgnummer == null) {
							if (other.prshstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.prshstsleutelgeldigvolgnummer.equals(other.prshstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_persoon_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.prshstsleutelgeldigdatum = this.prshstsleutelgeldigdatum;
	            other.prshstsleutelgeldigvolgnummer = this.prshstsleutelgeldigvolgnummer;
	            other.prshstanummer = this.prshstanummer;
	            other.prshstburgerservicenummer = this.prshstburgerservicenummer;
	            other.prshstvoornamen = this.prshstvoornamen;
	            other.prshstvoorletters = this.prshstvoorletters;
	            other.prshstadellijketitelcode = this.prshstadellijketitelcode;
	            other.prshstadellijketitelomschrijving = this.prshstadellijketitelomschrijving;
	            other.prshstvoorvoegselgeslachtsnaam = this.prshstvoorvoegselgeslachtsnaam;
	            other.prshstgeslachtsnaam = this.prshstgeslachtsnaam;
	            other.prshstgeboortedatumindicator = this.prshstgeboortedatumindicator;
	            other.prshstgeboortedatum = this.prshstgeboortedatum;
	            other.prshstgeboorteplaatscode = this.prshstgeboorteplaatscode;
	            other.prshstgeboorteplaatsomschrijving = this.prshstgeboorteplaatsomschrijving;
	            other.prshstgeboortelandcode = this.prshstgeboortelandcode;
	            other.prshstgeboortelandlandomschrijving = this.prshstgeboortelandlandomschrijving;
	            other.prshstgeslachtsaanduidingcode = this.prshstgeslachtsaanduidingcode;
	            other.prshstaanduidingnaamgebruik = this.prshstaanduidingnaamgebruik;
	            other.prshstingangsdatumgeldigheid = this.prshstingangsdatumgeldigheid;
	            other.prshstingangsdatumgeldigheidindicator = this.prshstingangsdatumgeldigheidindicator;
	            other.prshstdatumvanopneming = this.prshstdatumvanopneming;
	            other.prshstdatumvanopnemingindicator = this.prshstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_persoon_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.prshstsleutelgeldigdatum = this.prshstsleutelgeldigdatum;
	            	other.prshstsleutelgeldigvolgnummer = this.prshstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.prshstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.prshstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.prshstanummer = (BigDecimal) dis.readObject();
					
						this.prshstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.prshstvoornamen = readString(dis);
					
					this.prshstvoorletters = readString(dis);
					
					this.prshstadellijketitelcode = readString(dis);
					
					this.prshstadellijketitelomschrijving = readString(dis);
					
					this.prshstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.prshstgeslachtsnaam = readString(dis);
					
					this.prshstgeboortedatumindicator = readString(dis);
					
					this.prshstgeboortedatum = readDate(dis);
					
					this.prshstgeboorteplaatscode = readString(dis);
					
					this.prshstgeboorteplaatsomschrijving = readString(dis);
					
					this.prshstgeboortelandcode = readString(dis);
					
					this.prshstgeboortelandlandomschrijving = readString(dis);
					
					this.prshstgeslachtsaanduidingcode = readString(dis);
					
					this.prshstaanduidingnaamgebruik = readString(dis);
					
					this.prshstingangsdatumgeldigheid = readDate(dis);
					
					this.prshstingangsdatumgeldigheidindicator = readString(dis);
					
					this.prshstdatumvanopneming = readDate(dis);
					
					this.prshstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstburgerservicenummer);
					
					// String
				
						writeString(this.prshstvoornamen,dos);
					
					// String
				
						writeString(this.prshstvoorletters,dos);
					
					// String
				
						writeString(this.prshstadellijketitelcode,dos);
					
					// String
				
						writeString(this.prshstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.prshstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prshstgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prshstgeboortedatumindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prshstgeboortedatum,dos);
					
					// String
				
						writeString(this.prshstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.prshstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.prshstgeboortelandcode,dos);
					
					// String
				
						writeString(this.prshstgeboortelandlandomschrijving,dos);
					
					// String
				
						writeString(this.prshstgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.prshstaanduidingnaamgebruik,dos);
					
					// java.util.Date
				
						writeDate(this.prshstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.prshstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prshstdatumvanopneming,dos);
					
					// String
				
						writeString(this.prshstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",prshstsleutelgeldigdatum="+String.valueOf(prshstsleutelgeldigdatum));
		sb.append(",prshstsleutelgeldigvolgnummer="+String.valueOf(prshstsleutelgeldigvolgnummer));
		sb.append(",prshstanummer="+String.valueOf(prshstanummer));
		sb.append(",prshstburgerservicenummer="+String.valueOf(prshstburgerservicenummer));
		sb.append(",prshstvoornamen="+prshstvoornamen);
		sb.append(",prshstvoorletters="+prshstvoorletters);
		sb.append(",prshstadellijketitelcode="+prshstadellijketitelcode);
		sb.append(",prshstadellijketitelomschrijving="+prshstadellijketitelomschrijving);
		sb.append(",prshstvoorvoegselgeslachtsnaam="+prshstvoorvoegselgeslachtsnaam);
		sb.append(",prshstgeslachtsnaam="+prshstgeslachtsnaam);
		sb.append(",prshstgeboortedatumindicator="+prshstgeboortedatumindicator);
		sb.append(",prshstgeboortedatum="+String.valueOf(prshstgeboortedatum));
		sb.append(",prshstgeboorteplaatscode="+prshstgeboorteplaatscode);
		sb.append(",prshstgeboorteplaatsomschrijving="+prshstgeboorteplaatsomschrijving);
		sb.append(",prshstgeboortelandcode="+prshstgeboortelandcode);
		sb.append(",prshstgeboortelandlandomschrijving="+prshstgeboortelandlandomschrijving);
		sb.append(",prshstgeslachtsaanduidingcode="+prshstgeslachtsaanduidingcode);
		sb.append(",prshstaanduidingnaamgebruik="+prshstaanduidingnaamgebruik);
		sb.append(",prshstingangsdatumgeldigheid="+String.valueOf(prshstingangsdatumgeldigheid));
		sb.append(",prshstingangsdatumgeldigheidindicator="+prshstingangsdatumgeldigheidindicator);
		sb.append(",prshstdatumvanopneming="+String.valueOf(prshstdatumvanopneming));
		sb.append(",prshstdatumvanopnemingindicator="+prshstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_persoon_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prshstsleutelgeldigdatum, other.prshstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prshstsleutelgeldigvolgnummer, other.prshstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_persoon_historieStruct implements routines.system.IPersistableRow<ldf_anr_persoon_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_persoon_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_persoon_historieStruct ldf_anr_persoon_historie = new ldf_anr_persoon_historieStruct();
ldf_anr_persoon_historie_keyStruct ldf_anr_persoon_historie_key = new ldf_anr_persoon_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_6", false);
		start_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_persoon_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_6 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_6().limitLog4jByte();





String dbschema_tPostgresqlOutput_6 = null;
	dbschema_tPostgresqlOutput_6 = "ldf";
	

String tableName_tPostgresqlOutput_6 = null;
if(dbschema_tPostgresqlOutput_6 == null || dbschema_tPostgresqlOutput_6.trim().length() == 0) {
	tableName_tPostgresqlOutput_6 = "ibz_cip_persoon_historie";
} else {
	tableName_tPostgresqlOutput_6 = dbschema_tPostgresqlOutput_6 + "\".\"" + "ibz_cip_persoon_historie";
}

        int deleteKeyCount_tPostgresqlOutput_6 = 1;
        if(deleteKeyCount_tPostgresqlOutput_6 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_6 = 0;
int nb_line_update_tPostgresqlOutput_6 = 0;
int nb_line_inserted_tPostgresqlOutput_6 = 0;
int nb_line_deleted_tPostgresqlOutput_6 = 0;
int nb_line_rejected_tPostgresqlOutput_6 = 0;

int deletedCount_tPostgresqlOutput_6=0;
int updatedCount_tPostgresqlOutput_6=0;
int insertedCount_tPostgresqlOutput_6=0;
int rejectedCount_tPostgresqlOutput_6=0;

boolean whetherReject_tPostgresqlOutput_6 = false;

java.sql.Connection conn_tPostgresqlOutput_6 = null;
String dbUser_tPostgresqlOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_6 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_6 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_6 = decryptedPassword_tPostgresqlOutput_6;

    conn_tPostgresqlOutput_6 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_6,dbUser_tPostgresqlOutput_6,dbPwd_tPostgresqlOutput_6);
	
	resourceMap.put("conn_tPostgresqlOutput_6", conn_tPostgresqlOutput_6);
        conn_tPostgresqlOutput_6.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_6 = 1000;
        int commitCounter_tPostgresqlOutput_6 = 0;


   int batchSize_tPostgresqlOutput_6 = 10000;
   int batchSizeCounter_tPostgresqlOutput_6=0;

int count_tPostgresqlOutput_6=0;
	    String delete_tPostgresqlOutput_6 = "DELETE FROM \"" + tableName_tPostgresqlOutput_6 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6.prepareStatement(delete_tPostgresqlOutput_6);
	    

 



/**
 * [tPostgresqlOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_persoon_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		
    	class BytesLimit65535_tMap_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_6().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_persoon_historie_keyStruct ldf_anr_persoon_historie_key_tmp = new ldf_anr_persoon_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_6", false);
		start_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_6";

	
		int tos_count_tPostgresqlInput_6 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_6().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_6 = 0;
		    java.sql.Connection conn_tPostgresqlInput_6 = null;
				String driverClass_tPostgresqlInput_6 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_6);
			   	String dbUser_tPostgresqlInput_6 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_6 = decryptedPassword_tPostgresqlInput_6;
		        
				
			String url_tPostgresqlInput_6 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_6 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_6,dbUser_tPostgresqlInput_6,dbPwd_tPostgresqlInput_6);
		        
				conn_tPostgresqlInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6.createStatement();

		    String dbquery_tPostgresqlInput_6 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_6_QUERY",dbquery_tPostgresqlInput_6);

		    java.sql.ResultSet rs_tPostgresqlInput_6 = null;
		try{
		    rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6.executeQuery(dbquery_tPostgresqlInput_6);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6.getMetaData();
		    int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6.getColumnCount();

		    String tmpContent_tPostgresqlInput_6 = null;
		    
		    
		    while (rs_tPostgresqlInput_6.next()) {
		        nb_line_tPostgresqlInput_6++;
		        
							if(colQtyInRs_tPostgresqlInput_6 < 1) {
								ldf_anr_persoon_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_6.getObject(1) != null) {
                ldf_anr_persoon_historie.prsanummer = rs_tPostgresqlInput_6.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 


	tos_count_tPostgresqlInput_6++;

/**
 * [tPostgresqlInput_6 main ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//ldf_anr_persoon_historie
			//ldf_anr_persoon_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_persoon_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

ldf_anr_persoon_historie_key = null;


// # Output table : 'ldf_anr_persoon_historie_key'
ldf_anr_persoon_historie_key_tmp.prsanummer = ldf_anr_persoon_historie.prsanummer ;
ldf_anr_persoon_historie_key_tmp.prshstsleutelgeldigdatum = null;
ldf_anr_persoon_historie_key_tmp.prshstsleutelgeldigvolgnummer = null;
ldf_anr_persoon_historie_key_tmp.prshstanummer = null;
ldf_anr_persoon_historie_key_tmp.prshstburgerservicenummer = null;
ldf_anr_persoon_historie_key_tmp.prshstvoornamen = null;
ldf_anr_persoon_historie_key_tmp.prshstvoorletters = null;
ldf_anr_persoon_historie_key_tmp.prshstadellijketitelcode = null;
ldf_anr_persoon_historie_key_tmp.prshstadellijketitelomschrijving = null;
ldf_anr_persoon_historie_key_tmp.prshstvoorvoegselgeslachtsnaam = null;
ldf_anr_persoon_historie_key_tmp.prshstgeslachtsnaam = null;
ldf_anr_persoon_historie_key_tmp.prshstgeboortedatumindicator = null;
ldf_anr_persoon_historie_key_tmp.prshstgeboortedatum = null;
ldf_anr_persoon_historie_key_tmp.prshstgeboorteplaatscode = null;
ldf_anr_persoon_historie_key_tmp.prshstgeboorteplaatsomschrijving = null;
ldf_anr_persoon_historie_key_tmp.prshstgeboortelandcode = null;
ldf_anr_persoon_historie_key_tmp.prshstgeboortelandlandomschrijving = null;
ldf_anr_persoon_historie_key_tmp.prshstgeslachtsaanduidingcode = null;
ldf_anr_persoon_historie_key_tmp.prshstaanduidingnaamgebruik = null;
ldf_anr_persoon_historie_key_tmp.prshstingangsdatumgeldigheid = null;
ldf_anr_persoon_historie_key_tmp.prshstingangsdatumgeldigheidindicator = null;
ldf_anr_persoon_historie_key_tmp.prshstdatumvanopneming = null;
ldf_anr_persoon_historie_key_tmp.prshstdatumvanopnemingindicator = null;
ldf_anr_persoon_historie_key = ldf_anr_persoon_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
// Start of branch "ldf_anr_persoon_historie_key"
if(ldf_anr_persoon_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	

			//ldf_anr_persoon_historie_key
			//ldf_anr_persoon_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_persoon_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_6 = false;
					
                    pstmt_tPostgresqlOutput_6.setBigDecimal(1, ldf_anr_persoon_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_6.addBatch();
			nb_line_tPostgresqlOutput_6++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_6++;
    		
            if(!whetherReject_tPostgresqlOutput_6) {
            }
    			if ((batchSize_tPostgresqlOutput_6 > 0) && (batchSize_tPostgresqlOutput_6 <= batchSizeCounter_tPostgresqlOutput_6)) {
                try {
						int countSum_tPostgresqlOutput_6 = 0;
						    
						for(int countEach_tPostgresqlOutput_6: pstmt_tPostgresqlOutput_6.executeBatch()) {
							countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_6 = 0;
					for(int countEach_tPostgresqlOutput_6: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
					}
					
			    	    deletedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_6++;
                if(commitEvery_tPostgresqlOutput_6 <= commitCounter_tPostgresqlOutput_6) {
                if ((batchSize_tPostgresqlOutput_6 > 0) && (batchSizeCounter_tPostgresqlOutput_6 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_6 = 0;
                		    
						for(int countEach_tPostgresqlOutput_6: pstmt_tPostgresqlOutput_6.executeBatch()) {
							countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
            	    	
                batchSizeCounter_tPostgresqlOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_6 = 0;
						for(int countEach_tPostgresqlOutput_6: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
						}
						
				    	    deletedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_6.commit();
                	
                	commitCounter_tPostgresqlOutput_6=0;
                }

 


	tos_count_tPostgresqlOutput_6++;

/**
 * [tPostgresqlOutput_6 main ] stop
 */

} // End of branch "ldf_anr_persoon_historie_key"







	
	/**
	 * [tPostgresqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

	}
}finally{
	stmt_tPostgresqlInput_6.close();

	if(conn_tPostgresqlInput_6 != null && !conn_tPostgresqlInput_6.isClosed()) {
		
			conn_tPostgresqlInput_6.commit();
			
		
			conn_tPostgresqlInput_6.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_6_NB_LINE",nb_line_tPostgresqlInput_6);
 

ok_Hash.put("tPostgresqlInput_6", true);
end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());




/**
 * [tPostgresqlInput_6 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_persoon_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	



	    try {
				int countSum_tPostgresqlOutput_6 = 0;
				if (pstmt_tPostgresqlOutput_6 != null && batchSizeCounter_tPostgresqlOutput_6 > 0) {
						
					for(int countEach_tPostgresqlOutput_6: pstmt_tPostgresqlOutput_6.executeBatch()) {
						countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_6 = 0;
			for(int countEach_tPostgresqlOutput_6: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_6 += (countEach_tPostgresqlOutput_6 < 0 ? 0 : countEach_tPostgresqlOutput_6);
			}
			
	    	    deletedCount_tPostgresqlOutput_6 += countSum_tPostgresqlOutput_6;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_6 != null) {
            pstmt_tPostgresqlOutput_6.close();
        }

			
			conn_tPostgresqlOutput_6.commit();
			
		
    	conn_tPostgresqlOutput_6 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_6", true);
    	

	nb_line_deleted_tPostgresqlOutput_6=nb_line_deleted_tPostgresqlOutput_6+ deletedCount_tPostgresqlOutput_6;
	nb_line_update_tPostgresqlOutput_6=nb_line_update_tPostgresqlOutput_6 + updatedCount_tPostgresqlOutput_6;
	nb_line_inserted_tPostgresqlOutput_6=nb_line_inserted_tPostgresqlOutput_6 + insertedCount_tPostgresqlOutput_6;
	nb_line_rejected_tPostgresqlOutput_6=nb_line_rejected_tPostgresqlOutput_6 + rejectedCount_tPostgresqlOutput_6;
	
        globalMap.put("tPostgresqlOutput_6_NB_LINE",nb_line_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_6);
        globalMap.put("tPostgresqlOutput_6_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_6);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_persoon_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_6", true);
end_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tPostgresqlInput_7Process(globalMap);



/**
 * [tPostgresqlOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_6";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_6")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_6")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_6")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_6) {
					String errorMessage_tPostgresqlOutput_6 = "failed to close the connection in tPostgresqlOutput_6 :" + sqlEx_tPostgresqlOutput_6.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_6);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_ouder1_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_ouder1_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal ou1hstsleutelgeldigdatum;

				public BigDecimal getOu1hstsleutelgeldigdatum () {
					return this.ou1hstsleutelgeldigdatum;
				}
				
			    public BigDecimal ou1hstsleutelgeldigvolgnummer;

				public BigDecimal getOu1hstsleutelgeldigvolgnummer () {
					return this.ou1hstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal ou1hstanummer;

				public BigDecimal getOu1hstanummer () {
					return this.ou1hstanummer;
				}
				
			    public BigDecimal ou1hstburgerservicenummer;

				public BigDecimal getOu1hstburgerservicenummer () {
					return this.ou1hstburgerservicenummer;
				}
				
			    public String ou1hstvoornamen;

				public String getOu1hstvoornamen () {
					return this.ou1hstvoornamen;
				}
				
			    public String ou1hstvoorletters;

				public String getOu1hstvoorletters () {
					return this.ou1hstvoorletters;
				}
				
			    public String ou1hstadellijketitelcode;

				public String getOu1hstadellijketitelcode () {
					return this.ou1hstadellijketitelcode;
				}
				
			    public String ou1hstadellijketitelomschrijving;

				public String getOu1hstadellijketitelomschrijving () {
					return this.ou1hstadellijketitelomschrijving;
				}
				
			    public String ou1hstvoorvoegselgeslachtsnaam;

				public String getOu1hstvoorvoegselgeslachtsnaam () {
					return this.ou1hstvoorvoegselgeslachtsnaam;
				}
				
			    public String ou1hstgeslachtsnaam;

				public String getOu1hstgeslachtsnaam () {
					return this.ou1hstgeslachtsnaam;
				}
				
			    public java.util.Date ou1hstgeboortedatum;

				public java.util.Date getOu1hstgeboortedatum () {
					return this.ou1hstgeboortedatum;
				}
				
			    public String ou1hstgeboortedatumindicator;

				public String getOu1hstgeboortedatumindicator () {
					return this.ou1hstgeboortedatumindicator;
				}
				
			    public String ou1hstgeboorteplaatscode;

				public String getOu1hstgeboorteplaatscode () {
					return this.ou1hstgeboorteplaatscode;
				}
				
			    public String ou1hstgeboorteplaatsomschrijving;

				public String getOu1hstgeboorteplaatsomschrijving () {
					return this.ou1hstgeboorteplaatsomschrijving;
				}
				
			    public String ou1hstgeboortelandcode;

				public String getOu1hstgeboortelandcode () {
					return this.ou1hstgeboortelandcode;
				}
				
			    public String ou1hstgeboortelandlandomschrijving;

				public String getOu1hstgeboortelandlandomschrijving () {
					return this.ou1hstgeboortelandlandomschrijving;
				}
				
			    public String ou1hstgeslachtsaanduidingcode;

				public String getOu1hstgeslachtsaanduidingcode () {
					return this.ou1hstgeslachtsaanduidingcode;
				}
				
			    public java.util.Date ou1hstdatumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu1hstdatumingangfamilierechtelijkebetrekking () {
					return this.ou1hstdatumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou1hstdatumingangfamilierechtelijkebetrekkingindicator;

				public String getOu1hstdatumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public java.util.Date ou1hstingangsdatumgeldigheid;

				public java.util.Date getOu1hstingangsdatumgeldigheid () {
					return this.ou1hstingangsdatumgeldigheid;
				}
				
			    public String ou1hstingangsdatumgeldigheidindicator;

				public String getOu1hstingangsdatumgeldigheidindicator () {
					return this.ou1hstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou1hstdatumvanopneming;

				public java.util.Date getOu1hstdatumvanopneming () {
					return this.ou1hstdatumvanopneming;
				}
				
			    public String ou1hstdatumvanopnemingindicator;

				public String getOu1hstdatumvanopnemingindicator () {
					return this.ou1hstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.ou1hstsleutelgeldigdatum == null) ? 0 : this.ou1hstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.ou1hstsleutelgeldigvolgnummer == null) ? 0 : this.ou1hstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_ouder1_historie_keyStruct other = (ldf_anr_ouder1_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.ou1hstsleutelgeldigdatum == null) {
							if (other.ou1hstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.ou1hstsleutelgeldigdatum.equals(other.ou1hstsleutelgeldigdatum))
						
							return false;
					
						if (this.ou1hstsleutelgeldigvolgnummer == null) {
							if (other.ou1hstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.ou1hstsleutelgeldigvolgnummer.equals(other.ou1hstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_ouder1_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.ou1hstsleutelgeldigdatum = this.ou1hstsleutelgeldigdatum;
	            other.ou1hstsleutelgeldigvolgnummer = this.ou1hstsleutelgeldigvolgnummer;
	            other.ou1hstanummer = this.ou1hstanummer;
	            other.ou1hstburgerservicenummer = this.ou1hstburgerservicenummer;
	            other.ou1hstvoornamen = this.ou1hstvoornamen;
	            other.ou1hstvoorletters = this.ou1hstvoorletters;
	            other.ou1hstadellijketitelcode = this.ou1hstadellijketitelcode;
	            other.ou1hstadellijketitelomschrijving = this.ou1hstadellijketitelomschrijving;
	            other.ou1hstvoorvoegselgeslachtsnaam = this.ou1hstvoorvoegselgeslachtsnaam;
	            other.ou1hstgeslachtsnaam = this.ou1hstgeslachtsnaam;
	            other.ou1hstgeboortedatum = this.ou1hstgeboortedatum;
	            other.ou1hstgeboortedatumindicator = this.ou1hstgeboortedatumindicator;
	            other.ou1hstgeboorteplaatscode = this.ou1hstgeboorteplaatscode;
	            other.ou1hstgeboorteplaatsomschrijving = this.ou1hstgeboorteplaatsomschrijving;
	            other.ou1hstgeboortelandcode = this.ou1hstgeboortelandcode;
	            other.ou1hstgeboortelandlandomschrijving = this.ou1hstgeboortelandlandomschrijving;
	            other.ou1hstgeslachtsaanduidingcode = this.ou1hstgeslachtsaanduidingcode;
	            other.ou1hstdatumingangfamilierechtelijkebetrekking = this.ou1hstdatumingangfamilierechtelijkebetrekking;
	            other.ou1hstdatumingangfamilierechtelijkebetrekkingindicator = this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator;
	            other.ou1hstingangsdatumgeldigheid = this.ou1hstingangsdatumgeldigheid;
	            other.ou1hstingangsdatumgeldigheidindicator = this.ou1hstingangsdatumgeldigheidindicator;
	            other.ou1hstdatumvanopneming = this.ou1hstdatumvanopneming;
	            other.ou1hstdatumvanopnemingindicator = this.ou1hstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_ouder1_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.ou1hstsleutelgeldigdatum = this.ou1hstsleutelgeldigdatum;
	            	other.ou1hstsleutelgeldigvolgnummer = this.ou1hstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.ou1hstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.ou1hstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.ou1hstanummer = (BigDecimal) dis.readObject();
					
						this.ou1hstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou1hstvoornamen = readString(dis);
					
					this.ou1hstvoorletters = readString(dis);
					
					this.ou1hstadellijketitelcode = readString(dis);
					
					this.ou1hstadellijketitelomschrijving = readString(dis);
					
					this.ou1hstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.ou1hstgeslachtsnaam = readString(dis);
					
					this.ou1hstgeboortedatum = readDate(dis);
					
					this.ou1hstgeboortedatumindicator = readString(dis);
					
					this.ou1hstgeboorteplaatscode = readString(dis);
					
					this.ou1hstgeboorteplaatsomschrijving = readString(dis);
					
					this.ou1hstgeboortelandcode = readString(dis);
					
					this.ou1hstgeboortelandlandomschrijving = readString(dis);
					
					this.ou1hstgeslachtsaanduidingcode = readString(dis);
					
					this.ou1hstdatumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou1hstingangsdatumgeldigheid = readDate(dis);
					
					this.ou1hstingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou1hstdatumvanopneming = readDate(dis);
					
					this.ou1hstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1hstburgerservicenummer);
					
					// String
				
						writeString(this.ou1hstvoornamen,dos);
					
					// String
				
						writeString(this.ou1hstvoorletters,dos);
					
					// String
				
						writeString(this.ou1hstadellijketitelcode,dos);
					
					// String
				
						writeString(this.ou1hstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou1hstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstgeboortedatum,dos);
					
					// String
				
						writeString(this.ou1hstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou1hstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou1hstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstgeboortelandcode,dos);
					
					// String
				
						writeString(this.ou1hstgeboortelandlandomschrijving,dos);
					
					// String
				
						writeString(this.ou1hstgeslachtsaanduidingcode,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou1hstdatumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou1hstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1hstdatumvanopneming,dos);
					
					// String
				
						writeString(this.ou1hstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",ou1hstsleutelgeldigdatum="+String.valueOf(ou1hstsleutelgeldigdatum));
		sb.append(",ou1hstsleutelgeldigvolgnummer="+String.valueOf(ou1hstsleutelgeldigvolgnummer));
		sb.append(",ou1hstanummer="+String.valueOf(ou1hstanummer));
		sb.append(",ou1hstburgerservicenummer="+String.valueOf(ou1hstburgerservicenummer));
		sb.append(",ou1hstvoornamen="+ou1hstvoornamen);
		sb.append(",ou1hstvoorletters="+ou1hstvoorletters);
		sb.append(",ou1hstadellijketitelcode="+ou1hstadellijketitelcode);
		sb.append(",ou1hstadellijketitelomschrijving="+ou1hstadellijketitelomschrijving);
		sb.append(",ou1hstvoorvoegselgeslachtsnaam="+ou1hstvoorvoegselgeslachtsnaam);
		sb.append(",ou1hstgeslachtsnaam="+ou1hstgeslachtsnaam);
		sb.append(",ou1hstgeboortedatum="+String.valueOf(ou1hstgeboortedatum));
		sb.append(",ou1hstgeboortedatumindicator="+ou1hstgeboortedatumindicator);
		sb.append(",ou1hstgeboorteplaatscode="+ou1hstgeboorteplaatscode);
		sb.append(",ou1hstgeboorteplaatsomschrijving="+ou1hstgeboorteplaatsomschrijving);
		sb.append(",ou1hstgeboortelandcode="+ou1hstgeboortelandcode);
		sb.append(",ou1hstgeboortelandlandomschrijving="+ou1hstgeboortelandlandomschrijving);
		sb.append(",ou1hstgeslachtsaanduidingcode="+ou1hstgeslachtsaanduidingcode);
		sb.append(",ou1hstdatumingangfamilierechtelijkebetrekking="+String.valueOf(ou1hstdatumingangfamilierechtelijkebetrekking));
		sb.append(",ou1hstdatumingangfamilierechtelijkebetrekkingindicator="+ou1hstdatumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou1hstingangsdatumgeldigheid="+String.valueOf(ou1hstingangsdatumgeldigheid));
		sb.append(",ou1hstingangsdatumgeldigheidindicator="+ou1hstingangsdatumgeldigheidindicator);
		sb.append(",ou1hstdatumvanopneming="+String.valueOf(ou1hstdatumvanopneming));
		sb.append(",ou1hstdatumvanopnemingindicator="+ou1hstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_ouder1_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ou1hstsleutelgeldigdatum, other.ou1hstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ou1hstsleutelgeldigvolgnummer, other.ou1hstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_ouder1_historieStruct implements routines.system.IPersistableRow<ldf_anr_ouder1_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_ouder1_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_ouder1_historieStruct ldf_anr_ouder1_historie = new ldf_anr_ouder1_historieStruct();
ldf_anr_ouder1_historie_keyStruct ldf_anr_ouder1_historie_key = new ldf_anr_ouder1_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_7", false);
		start_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_ouder1_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_7 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_7().limitLog4jByte();





String dbschema_tPostgresqlOutput_7 = null;
	dbschema_tPostgresqlOutput_7 = "ldf";
	

String tableName_tPostgresqlOutput_7 = null;
if(dbschema_tPostgresqlOutput_7 == null || dbschema_tPostgresqlOutput_7.trim().length() == 0) {
	tableName_tPostgresqlOutput_7 = "ibz_cip_ouder1_historie";
} else {
	tableName_tPostgresqlOutput_7 = dbschema_tPostgresqlOutput_7 + "\".\"" + "ibz_cip_ouder1_historie";
}

        int deleteKeyCount_tPostgresqlOutput_7 = 1;
        if(deleteKeyCount_tPostgresqlOutput_7 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_7 = 0;
int nb_line_update_tPostgresqlOutput_7 = 0;
int nb_line_inserted_tPostgresqlOutput_7 = 0;
int nb_line_deleted_tPostgresqlOutput_7 = 0;
int nb_line_rejected_tPostgresqlOutput_7 = 0;

int deletedCount_tPostgresqlOutput_7=0;
int updatedCount_tPostgresqlOutput_7=0;
int insertedCount_tPostgresqlOutput_7=0;
int rejectedCount_tPostgresqlOutput_7=0;

boolean whetherReject_tPostgresqlOutput_7 = false;

java.sql.Connection conn_tPostgresqlOutput_7 = null;
String dbUser_tPostgresqlOutput_7 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_7 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_7 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_7 = decryptedPassword_tPostgresqlOutput_7;

    conn_tPostgresqlOutput_7 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_7,dbUser_tPostgresqlOutput_7,dbPwd_tPostgresqlOutput_7);
	
	resourceMap.put("conn_tPostgresqlOutput_7", conn_tPostgresqlOutput_7);
        conn_tPostgresqlOutput_7.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_7 = 1000;
        int commitCounter_tPostgresqlOutput_7 = 0;


   int batchSize_tPostgresqlOutput_7 = 10000;
   int batchSizeCounter_tPostgresqlOutput_7=0;

int count_tPostgresqlOutput_7=0;
	    String delete_tPostgresqlOutput_7 = "DELETE FROM \"" + tableName_tPostgresqlOutput_7 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7.prepareStatement(delete_tPostgresqlOutput_7);
	    

 



/**
 * [tPostgresqlOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_ouder1_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_8 = 0;
		
    	class BytesLimit65535_tMap_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_8().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_ouder1_historie_keyStruct ldf_anr_ouder1_historie_key_tmp = new ldf_anr_ouder1_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_7", false);
		start_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_7";

	
		int tos_count_tPostgresqlInput_7 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_7().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_7 = 0;
		    java.sql.Connection conn_tPostgresqlInput_7 = null;
				String driverClass_tPostgresqlInput_7 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_7);
			   	String dbUser_tPostgresqlInput_7 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_7 = decryptedPassword_tPostgresqlInput_7;
		        
				
			String url_tPostgresqlInput_7 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_7 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_7,dbUser_tPostgresqlInput_7,dbPwd_tPostgresqlInput_7);
		        
				conn_tPostgresqlInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7.createStatement();

		    String dbquery_tPostgresqlInput_7 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_7_QUERY",dbquery_tPostgresqlInput_7);

		    java.sql.ResultSet rs_tPostgresqlInput_7 = null;
		try{
		    rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7.executeQuery(dbquery_tPostgresqlInput_7);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7.getMetaData();
		    int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7.getColumnCount();

		    String tmpContent_tPostgresqlInput_7 = null;
		    
		    
		    while (rs_tPostgresqlInput_7.next()) {
		        nb_line_tPostgresqlInput_7++;
		        
							if(colQtyInRs_tPostgresqlInput_7 < 1) {
								ldf_anr_ouder1_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_7.getObject(1) != null) {
                ldf_anr_ouder1_historie.prsanummer = rs_tPostgresqlInput_7.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_7 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 


	tos_count_tPostgresqlInput_7++;

/**
 * [tPostgresqlInput_7 main ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

			//ldf_anr_ouder1_historie
			//ldf_anr_ouder1_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_ouder1_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

ldf_anr_ouder1_historie_key = null;


// # Output table : 'ldf_anr_ouder1_historie_key'
ldf_anr_ouder1_historie_key_tmp.prsanummer = ldf_anr_ouder1_historie.prsanummer ;
ldf_anr_ouder1_historie_key_tmp.ou1hstsleutelgeldigdatum = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstsleutelgeldigvolgnummer = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstanummer = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstburgerservicenummer = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstvoornamen = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstvoorletters = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstadellijketitelcode = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstadellijketitelomschrijving = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstvoorvoegselgeslachtsnaam = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeslachtsnaam = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeboortedatum = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeboortedatumindicator = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeboorteplaatscode = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeboorteplaatsomschrijving = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeboortelandcode = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeboortelandlandomschrijving = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstgeslachtsaanduidingcode = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstdatumingangfamilierechtelijkebetrekking = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstdatumingangfamilierechtelijkebetrekkingindicator = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstingangsdatumgeldigheid = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstingangsdatumgeldigheidindicator = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstdatumvanopneming = null;
ldf_anr_ouder1_historie_key_tmp.ou1hstdatumvanopnemingindicator = null;
ldf_anr_ouder1_historie_key = ldf_anr_ouder1_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
// Start of branch "ldf_anr_ouder1_historie_key"
if(ldf_anr_ouder1_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	

			//ldf_anr_ouder1_historie_key
			//ldf_anr_ouder1_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_ouder1_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_7 = false;
					
                    pstmt_tPostgresqlOutput_7.setBigDecimal(1, ldf_anr_ouder1_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_7.addBatch();
			nb_line_tPostgresqlOutput_7++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_7++;
    		
            if(!whetherReject_tPostgresqlOutput_7) {
            }
    			if ((batchSize_tPostgresqlOutput_7 > 0) && (batchSize_tPostgresqlOutput_7 <= batchSizeCounter_tPostgresqlOutput_7)) {
                try {
						int countSum_tPostgresqlOutput_7 = 0;
						    
						for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_7 = 0;
					for(int countEach_tPostgresqlOutput_7: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
					}
					
			    	    deletedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_7++;
                if(commitEvery_tPostgresqlOutput_7 <= commitCounter_tPostgresqlOutput_7) {
                if ((batchSize_tPostgresqlOutput_7 > 0) && (batchSizeCounter_tPostgresqlOutput_7 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_7 = 0;
                		    
						for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
            	    	
                batchSizeCounter_tPostgresqlOutput_7 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_7 = 0;
						for(int countEach_tPostgresqlOutput_7: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
						}
						
				    	    deletedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_7.commit();
                	
                	commitCounter_tPostgresqlOutput_7=0;
                }

 


	tos_count_tPostgresqlOutput_7++;

/**
 * [tPostgresqlOutput_7 main ] stop
 */

} // End of branch "ldf_anr_ouder1_historie_key"







	
	/**
	 * [tPostgresqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

	}
}finally{
	stmt_tPostgresqlInput_7.close();

	if(conn_tPostgresqlInput_7 != null && !conn_tPostgresqlInput_7.isClosed()) {
		
			conn_tPostgresqlInput_7.commit();
			
		
			conn_tPostgresqlInput_7.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_7_NB_LINE",nb_line_tPostgresqlInput_7);
 

ok_Hash.put("tPostgresqlInput_7", true);
end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());




/**
 * [tPostgresqlInput_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_ouder1_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



	    try {
				int countSum_tPostgresqlOutput_7 = 0;
				if (pstmt_tPostgresqlOutput_7 != null && batchSizeCounter_tPostgresqlOutput_7 > 0) {
						
					for(int countEach_tPostgresqlOutput_7: pstmt_tPostgresqlOutput_7.executeBatch()) {
						countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_7 = 0;
			for(int countEach_tPostgresqlOutput_7: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_7 += (countEach_tPostgresqlOutput_7 < 0 ? 0 : countEach_tPostgresqlOutput_7);
			}
			
	    	    deletedCount_tPostgresqlOutput_7 += countSum_tPostgresqlOutput_7;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_7 != null) {
            pstmt_tPostgresqlOutput_7.close();
        }

			
			conn_tPostgresqlOutput_7.commit();
			
		
    	conn_tPostgresqlOutput_7 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_7", true);
    	

	nb_line_deleted_tPostgresqlOutput_7=nb_line_deleted_tPostgresqlOutput_7+ deletedCount_tPostgresqlOutput_7;
	nb_line_update_tPostgresqlOutput_7=nb_line_update_tPostgresqlOutput_7 + updatedCount_tPostgresqlOutput_7;
	nb_line_inserted_tPostgresqlOutput_7=nb_line_inserted_tPostgresqlOutput_7 + insertedCount_tPostgresqlOutput_7;
	nb_line_rejected_tPostgresqlOutput_7=nb_line_rejected_tPostgresqlOutput_7 + rejectedCount_tPostgresqlOutput_7;
	
        globalMap.put("tPostgresqlOutput_7_NB_LINE",nb_line_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_7);
        globalMap.put("tPostgresqlOutput_7_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_7);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_ouder1_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_7", true);
end_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tPostgresqlInput_8Process(globalMap);



/**
 * [tPostgresqlOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 



/**
 * [tPostgresqlInput_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_7";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_7")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_7")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_7")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_7) {
					String errorMessage_tPostgresqlOutput_7 = "failed to close the connection in tPostgresqlOutput_7 :" + sqlEx_tPostgresqlOutput_7.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_7);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_ouder2_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_ouder2_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal ou2hstsleutelgeldigdatum;

				public BigDecimal getOu2hstsleutelgeldigdatum () {
					return this.ou2hstsleutelgeldigdatum;
				}
				
			    public BigDecimal ou2hstsleutelgeldigvolgnummer;

				public BigDecimal getOu2hstsleutelgeldigvolgnummer () {
					return this.ou2hstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal ou2hstanummer;

				public BigDecimal getOu2hstanummer () {
					return this.ou2hstanummer;
				}
				
			    public BigDecimal ou2hstburgerservicenummer;

				public BigDecimal getOu2hstburgerservicenummer () {
					return this.ou2hstburgerservicenummer;
				}
				
			    public String ou2hstvoornamen;

				public String getOu2hstvoornamen () {
					return this.ou2hstvoornamen;
				}
				
			    public String ou2hstvoorletters;

				public String getOu2hstvoorletters () {
					return this.ou2hstvoorletters;
				}
				
			    public String ou2hstadellijketitelcode;

				public String getOu2hstadellijketitelcode () {
					return this.ou2hstadellijketitelcode;
				}
				
			    public String ou2hstadellijketitelomschrijving;

				public String getOu2hstadellijketitelomschrijving () {
					return this.ou2hstadellijketitelomschrijving;
				}
				
			    public String ou2hstvoorvoegselgeslachtsnaam;

				public String getOu2hstvoorvoegselgeslachtsnaam () {
					return this.ou2hstvoorvoegselgeslachtsnaam;
				}
				
			    public String ou2hstgeslachtsnaam;

				public String getOu2hstgeslachtsnaam () {
					return this.ou2hstgeslachtsnaam;
				}
				
			    public java.util.Date ou2hstgeboortedatum;

				public java.util.Date getOu2hstgeboortedatum () {
					return this.ou2hstgeboortedatum;
				}
				
			    public String ou2hstgeboortedatumindicator;

				public String getOu2hstgeboortedatumindicator () {
					return this.ou2hstgeboortedatumindicator;
				}
				
			    public String ou2hstgeboorteplaatscode;

				public String getOu2hstgeboorteplaatscode () {
					return this.ou2hstgeboorteplaatscode;
				}
				
			    public String ou2hstgeboorteplaatsomschrijving;

				public String getOu2hstgeboorteplaatsomschrijving () {
					return this.ou2hstgeboorteplaatsomschrijving;
				}
				
			    public String ou2hstgeboortelandcode;

				public String getOu2hstgeboortelandcode () {
					return this.ou2hstgeboortelandcode;
				}
				
			    public String ou2hstgeboortelandomschrijving;

				public String getOu2hstgeboortelandomschrijving () {
					return this.ou2hstgeboortelandomschrijving;
				}
				
			    public String ou2hstgeslachtsaanduidingcode;

				public String getOu2hstgeslachtsaanduidingcode () {
					return this.ou2hstgeslachtsaanduidingcode;
				}
				
			    public java.util.Date ou2hstdatumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu2hstdatumingangfamilierechtelijkebetrekking () {
					return this.ou2hstdatumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou2hstdatumingangfamilierechtelijkebetrekkingindicator;

				public String getOu2hstdatumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou2hstdatumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public java.util.Date ou2hstingangsdatumgeldigheid;

				public java.util.Date getOu2hstingangsdatumgeldigheid () {
					return this.ou2hstingangsdatumgeldigheid;
				}
				
			    public String ou2hstingangsdatumgeldigheidindicator;

				public String getOu2hstingangsdatumgeldigheidindicator () {
					return this.ou2hstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou2hstdatumvanopneming;

				public java.util.Date getOu2hstdatumvanopneming () {
					return this.ou2hstdatumvanopneming;
				}
				
			    public String ou2hstdatumvanopnemingindicator;

				public String getOu2hstdatumvanopnemingindicator () {
					return this.ou2hstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.ou2hstsleutelgeldigdatum == null) ? 0 : this.ou2hstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.ou2hstsleutelgeldigvolgnummer == null) ? 0 : this.ou2hstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_ouder2_historie_keyStruct other = (ldf_anr_ouder2_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.ou2hstsleutelgeldigdatum == null) {
							if (other.ou2hstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.ou2hstsleutelgeldigdatum.equals(other.ou2hstsleutelgeldigdatum))
						
							return false;
					
						if (this.ou2hstsleutelgeldigvolgnummer == null) {
							if (other.ou2hstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.ou2hstsleutelgeldigvolgnummer.equals(other.ou2hstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_ouder2_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.ou2hstsleutelgeldigdatum = this.ou2hstsleutelgeldigdatum;
	            other.ou2hstsleutelgeldigvolgnummer = this.ou2hstsleutelgeldigvolgnummer;
	            other.ou2hstanummer = this.ou2hstanummer;
	            other.ou2hstburgerservicenummer = this.ou2hstburgerservicenummer;
	            other.ou2hstvoornamen = this.ou2hstvoornamen;
	            other.ou2hstvoorletters = this.ou2hstvoorletters;
	            other.ou2hstadellijketitelcode = this.ou2hstadellijketitelcode;
	            other.ou2hstadellijketitelomschrijving = this.ou2hstadellijketitelomschrijving;
	            other.ou2hstvoorvoegselgeslachtsnaam = this.ou2hstvoorvoegselgeslachtsnaam;
	            other.ou2hstgeslachtsnaam = this.ou2hstgeslachtsnaam;
	            other.ou2hstgeboortedatum = this.ou2hstgeboortedatum;
	            other.ou2hstgeboortedatumindicator = this.ou2hstgeboortedatumindicator;
	            other.ou2hstgeboorteplaatscode = this.ou2hstgeboorteplaatscode;
	            other.ou2hstgeboorteplaatsomschrijving = this.ou2hstgeboorteplaatsomschrijving;
	            other.ou2hstgeboortelandcode = this.ou2hstgeboortelandcode;
	            other.ou2hstgeboortelandomschrijving = this.ou2hstgeboortelandomschrijving;
	            other.ou2hstgeslachtsaanduidingcode = this.ou2hstgeslachtsaanduidingcode;
	            other.ou2hstdatumingangfamilierechtelijkebetrekking = this.ou2hstdatumingangfamilierechtelijkebetrekking;
	            other.ou2hstdatumingangfamilierechtelijkebetrekkingindicator = this.ou2hstdatumingangfamilierechtelijkebetrekkingindicator;
	            other.ou2hstingangsdatumgeldigheid = this.ou2hstingangsdatumgeldigheid;
	            other.ou2hstingangsdatumgeldigheidindicator = this.ou2hstingangsdatumgeldigheidindicator;
	            other.ou2hstdatumvanopneming = this.ou2hstdatumvanopneming;
	            other.ou2hstdatumvanopnemingindicator = this.ou2hstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_ouder2_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.ou2hstsleutelgeldigdatum = this.ou2hstsleutelgeldigdatum;
	            	other.ou2hstsleutelgeldigvolgnummer = this.ou2hstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.ou2hstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.ou2hstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.ou2hstanummer = (BigDecimal) dis.readObject();
					
						this.ou2hstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou2hstvoornamen = readString(dis);
					
					this.ou2hstvoorletters = readString(dis);
					
					this.ou2hstadellijketitelcode = readString(dis);
					
					this.ou2hstadellijketitelomschrijving = readString(dis);
					
					this.ou2hstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.ou2hstgeslachtsnaam = readString(dis);
					
					this.ou2hstgeboortedatum = readDate(dis);
					
					this.ou2hstgeboortedatumindicator = readString(dis);
					
					this.ou2hstgeboorteplaatscode = readString(dis);
					
					this.ou2hstgeboorteplaatsomschrijving = readString(dis);
					
					this.ou2hstgeboortelandcode = readString(dis);
					
					this.ou2hstgeboortelandomschrijving = readString(dis);
					
					this.ou2hstgeslachtsaanduidingcode = readString(dis);
					
					this.ou2hstdatumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou2hstdatumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou2hstingangsdatumgeldigheid = readDate(dis);
					
					this.ou2hstingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou2hstdatumvanopneming = readDate(dis);
					
					this.ou2hstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2hstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2hstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2hstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2hstburgerservicenummer);
					
					// String
				
						writeString(this.ou2hstvoornamen,dos);
					
					// String
				
						writeString(this.ou2hstvoorletters,dos);
					
					// String
				
						writeString(this.ou2hstadellijketitelcode,dos);
					
					// String
				
						writeString(this.ou2hstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou2hstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou2hstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.ou2hstgeboortedatum,dos);
					
					// String
				
						writeString(this.ou2hstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou2hstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou2hstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou2hstgeboortelandcode,dos);
					
					// String
				
						writeString(this.ou2hstgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.ou2hstgeslachtsaanduidingcode,dos);
					
					// java.util.Date
				
						writeDate(this.ou2hstdatumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou2hstdatumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2hstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou2hstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2hstdatumvanopneming,dos);
					
					// String
				
						writeString(this.ou2hstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",ou2hstsleutelgeldigdatum="+String.valueOf(ou2hstsleutelgeldigdatum));
		sb.append(",ou2hstsleutelgeldigvolgnummer="+String.valueOf(ou2hstsleutelgeldigvolgnummer));
		sb.append(",ou2hstanummer="+String.valueOf(ou2hstanummer));
		sb.append(",ou2hstburgerservicenummer="+String.valueOf(ou2hstburgerservicenummer));
		sb.append(",ou2hstvoornamen="+ou2hstvoornamen);
		sb.append(",ou2hstvoorletters="+ou2hstvoorletters);
		sb.append(",ou2hstadellijketitelcode="+ou2hstadellijketitelcode);
		sb.append(",ou2hstadellijketitelomschrijving="+ou2hstadellijketitelomschrijving);
		sb.append(",ou2hstvoorvoegselgeslachtsnaam="+ou2hstvoorvoegselgeslachtsnaam);
		sb.append(",ou2hstgeslachtsnaam="+ou2hstgeslachtsnaam);
		sb.append(",ou2hstgeboortedatum="+String.valueOf(ou2hstgeboortedatum));
		sb.append(",ou2hstgeboortedatumindicator="+ou2hstgeboortedatumindicator);
		sb.append(",ou2hstgeboorteplaatscode="+ou2hstgeboorteplaatscode);
		sb.append(",ou2hstgeboorteplaatsomschrijving="+ou2hstgeboorteplaatsomschrijving);
		sb.append(",ou2hstgeboortelandcode="+ou2hstgeboortelandcode);
		sb.append(",ou2hstgeboortelandomschrijving="+ou2hstgeboortelandomschrijving);
		sb.append(",ou2hstgeslachtsaanduidingcode="+ou2hstgeslachtsaanduidingcode);
		sb.append(",ou2hstdatumingangfamilierechtelijkebetrekking="+String.valueOf(ou2hstdatumingangfamilierechtelijkebetrekking));
		sb.append(",ou2hstdatumingangfamilierechtelijkebetrekkingindicator="+ou2hstdatumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou2hstingangsdatumgeldigheid="+String.valueOf(ou2hstingangsdatumgeldigheid));
		sb.append(",ou2hstingangsdatumgeldigheidindicator="+ou2hstingangsdatumgeldigheidindicator);
		sb.append(",ou2hstdatumvanopneming="+String.valueOf(ou2hstdatumvanopneming));
		sb.append(",ou2hstdatumvanopnemingindicator="+ou2hstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_ouder2_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ou2hstsleutelgeldigdatum, other.ou2hstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ou2hstsleutelgeldigvolgnummer, other.ou2hstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_ouder2_historieStruct implements routines.system.IPersistableRow<ldf_anr_ouder2_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_ouder2_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_ouder2_historieStruct ldf_anr_ouder2_historie = new ldf_anr_ouder2_historieStruct();
ldf_anr_ouder2_historie_keyStruct ldf_anr_ouder2_historie_key = new ldf_anr_ouder2_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_8", false);
		start_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_ouder2_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_8 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_8().limitLog4jByte();





String dbschema_tPostgresqlOutput_8 = null;
	dbschema_tPostgresqlOutput_8 = "ldf";
	

String tableName_tPostgresqlOutput_8 = null;
if(dbschema_tPostgresqlOutput_8 == null || dbschema_tPostgresqlOutput_8.trim().length() == 0) {
	tableName_tPostgresqlOutput_8 = "ibz_cip_ouder2_historie";
} else {
	tableName_tPostgresqlOutput_8 = dbschema_tPostgresqlOutput_8 + "\".\"" + "ibz_cip_ouder2_historie";
}

        int deleteKeyCount_tPostgresqlOutput_8 = 1;
        if(deleteKeyCount_tPostgresqlOutput_8 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_8 = 0;
int nb_line_update_tPostgresqlOutput_8 = 0;
int nb_line_inserted_tPostgresqlOutput_8 = 0;
int nb_line_deleted_tPostgresqlOutput_8 = 0;
int nb_line_rejected_tPostgresqlOutput_8 = 0;

int deletedCount_tPostgresqlOutput_8=0;
int updatedCount_tPostgresqlOutput_8=0;
int insertedCount_tPostgresqlOutput_8=0;
int rejectedCount_tPostgresqlOutput_8=0;

boolean whetherReject_tPostgresqlOutput_8 = false;

java.sql.Connection conn_tPostgresqlOutput_8 = null;
String dbUser_tPostgresqlOutput_8 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_8 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_8 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_8 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_8 = decryptedPassword_tPostgresqlOutput_8;

    conn_tPostgresqlOutput_8 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_8,dbUser_tPostgresqlOutput_8,dbPwd_tPostgresqlOutput_8);
	
	resourceMap.put("conn_tPostgresqlOutput_8", conn_tPostgresqlOutput_8);
        conn_tPostgresqlOutput_8.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_8 = 1000;
        int commitCounter_tPostgresqlOutput_8 = 0;


   int batchSize_tPostgresqlOutput_8 = 10000;
   int batchSizeCounter_tPostgresqlOutput_8=0;

int count_tPostgresqlOutput_8=0;
	    String delete_tPostgresqlOutput_8 = "DELETE FROM \"" + tableName_tPostgresqlOutput_8 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8.prepareStatement(delete_tPostgresqlOutput_8);
	    

 



/**
 * [tPostgresqlOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_ouder2_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_9 = 0;
		
    	class BytesLimit65535_tMap_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_9().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_ouder2_historie_keyStruct ldf_anr_ouder2_historie_key_tmp = new ldf_anr_ouder2_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_8", false);
		start_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_8";

	
		int tos_count_tPostgresqlInput_8 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_8().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_8 = 0;
		    java.sql.Connection conn_tPostgresqlInput_8 = null;
				String driverClass_tPostgresqlInput_8 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_8);
			   	String dbUser_tPostgresqlInput_8 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_8 = decryptedPassword_tPostgresqlInput_8;
		        
				
			String url_tPostgresqlInput_8 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_8 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_8,dbUser_tPostgresqlInput_8,dbPwd_tPostgresqlInput_8);
		        
				conn_tPostgresqlInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8.createStatement();

		    String dbquery_tPostgresqlInput_8 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_8_QUERY",dbquery_tPostgresqlInput_8);

		    java.sql.ResultSet rs_tPostgresqlInput_8 = null;
		try{
		    rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8.executeQuery(dbquery_tPostgresqlInput_8);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8.getMetaData();
		    int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8.getColumnCount();

		    String tmpContent_tPostgresqlInput_8 = null;
		    
		    
		    while (rs_tPostgresqlInput_8.next()) {
		        nb_line_tPostgresqlInput_8++;
		        
							if(colQtyInRs_tPostgresqlInput_8 < 1) {
								ldf_anr_ouder2_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_8.getObject(1) != null) {
                ldf_anr_ouder2_historie.prsanummer = rs_tPostgresqlInput_8.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_8 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 


	tos_count_tPostgresqlInput_8++;

/**
 * [tPostgresqlInput_8 main ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

			//ldf_anr_ouder2_historie
			//ldf_anr_ouder2_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_ouder2_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

ldf_anr_ouder2_historie_key = null;


// # Output table : 'ldf_anr_ouder2_historie_key'
ldf_anr_ouder2_historie_key_tmp.prsanummer = ldf_anr_ouder2_historie.prsanummer ;
ldf_anr_ouder2_historie_key_tmp.ou2hstsleutelgeldigdatum = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstsleutelgeldigvolgnummer = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstanummer = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstburgerservicenummer = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstvoornamen = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstvoorletters = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstadellijketitelcode = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstadellijketitelomschrijving = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstvoorvoegselgeslachtsnaam = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeslachtsnaam = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeboortedatum = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeboortedatumindicator = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeboorteplaatscode = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeboorteplaatsomschrijving = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeboortelandcode = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeboortelandomschrijving = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstgeslachtsaanduidingcode = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstdatumingangfamilierechtelijkebetrekking = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstdatumingangfamilierechtelijkebetrekkingindicator = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstingangsdatumgeldigheid = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstingangsdatumgeldigheidindicator = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstdatumvanopneming = null;
ldf_anr_ouder2_historie_key_tmp.ou2hstdatumvanopnemingindicator = null;
ldf_anr_ouder2_historie_key = ldf_anr_ouder2_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
// Start of branch "ldf_anr_ouder2_historie_key"
if(ldf_anr_ouder2_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	

			//ldf_anr_ouder2_historie_key
			//ldf_anr_ouder2_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_ouder2_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_8 = false;
					
                    pstmt_tPostgresqlOutput_8.setBigDecimal(1, ldf_anr_ouder2_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_8.addBatch();
			nb_line_tPostgresqlOutput_8++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_8++;
    		
            if(!whetherReject_tPostgresqlOutput_8) {
            }
    			if ((batchSize_tPostgresqlOutput_8 > 0) && (batchSize_tPostgresqlOutput_8 <= batchSizeCounter_tPostgresqlOutput_8)) {
                try {
						int countSum_tPostgresqlOutput_8 = 0;
						    
						for(int countEach_tPostgresqlOutput_8: pstmt_tPostgresqlOutput_8.executeBatch()) {
							countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_8 = 0;
					for(int countEach_tPostgresqlOutput_8: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
					}
					
			    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_8++;
                if(commitEvery_tPostgresqlOutput_8 <= commitCounter_tPostgresqlOutput_8) {
                if ((batchSize_tPostgresqlOutput_8 > 0) && (batchSizeCounter_tPostgresqlOutput_8 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_8 = 0;
                		    
						for(int countEach_tPostgresqlOutput_8: pstmt_tPostgresqlOutput_8.executeBatch()) {
							countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
            	    	
                batchSizeCounter_tPostgresqlOutput_8 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_8 = 0;
						for(int countEach_tPostgresqlOutput_8: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
						}
						
				    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_8.commit();
                	
                	commitCounter_tPostgresqlOutput_8=0;
                }

 


	tos_count_tPostgresqlOutput_8++;

/**
 * [tPostgresqlOutput_8 main ] stop
 */

} // End of branch "ldf_anr_ouder2_historie_key"







	
	/**
	 * [tPostgresqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

	}
}finally{
	stmt_tPostgresqlInput_8.close();

	if(conn_tPostgresqlInput_8 != null && !conn_tPostgresqlInput_8.isClosed()) {
		
			conn_tPostgresqlInput_8.commit();
			
		
			conn_tPostgresqlInput_8.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_8_NB_LINE",nb_line_tPostgresqlInput_8);
 

ok_Hash.put("tPostgresqlInput_8", true);
end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());




/**
 * [tPostgresqlInput_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_ouder2_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	



	    try {
				int countSum_tPostgresqlOutput_8 = 0;
				if (pstmt_tPostgresqlOutput_8 != null && batchSizeCounter_tPostgresqlOutput_8 > 0) {
						
					for(int countEach_tPostgresqlOutput_8: pstmt_tPostgresqlOutput_8.executeBatch()) {
						countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_8 = 0;
			for(int countEach_tPostgresqlOutput_8: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_8 += (countEach_tPostgresqlOutput_8 < 0 ? 0 : countEach_tPostgresqlOutput_8);
			}
			
	    	    deletedCount_tPostgresqlOutput_8 += countSum_tPostgresqlOutput_8;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_8 != null) {
            pstmt_tPostgresqlOutput_8.close();
        }

			
			conn_tPostgresqlOutput_8.commit();
			
		
    	conn_tPostgresqlOutput_8 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_8", true);
    	

	nb_line_deleted_tPostgresqlOutput_8=nb_line_deleted_tPostgresqlOutput_8+ deletedCount_tPostgresqlOutput_8;
	nb_line_update_tPostgresqlOutput_8=nb_line_update_tPostgresqlOutput_8 + updatedCount_tPostgresqlOutput_8;
	nb_line_inserted_tPostgresqlOutput_8=nb_line_inserted_tPostgresqlOutput_8 + insertedCount_tPostgresqlOutput_8;
	nb_line_rejected_tPostgresqlOutput_8=nb_line_rejected_tPostgresqlOutput_8 + rejectedCount_tPostgresqlOutput_8;
	
        globalMap.put("tPostgresqlOutput_8_NB_LINE",nb_line_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_8);
        globalMap.put("tPostgresqlOutput_8_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_8);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_ouder2_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_8", true);
end_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tPostgresqlInput_9Process(globalMap);



/**
 * [tPostgresqlOutput_8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_8";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_8")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_8")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_8")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_8) {
					String errorMessage_tPostgresqlOutput_8 = "failed to close the connection in tPostgresqlOutput_8 :" + sqlEx_tPostgresqlOutput_8.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_8);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_nationaliteit_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_nationaliteit_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal nathstsleutelnationaliteitcode;

				public BigDecimal getNathstsleutelnationaliteitcode () {
					return this.nathstsleutelnationaliteitcode;
				}
				
			    public BigDecimal nathstsleutelvolgnummer;

				public BigDecimal getNathstsleutelvolgnummer () {
					return this.nathstsleutelvolgnummer;
				}
				
			    public BigDecimal nathstsleutelgeldigdatum;

				public BigDecimal getNathstsleutelgeldigdatum () {
					return this.nathstsleutelgeldigdatum;
				}
				
			    public BigDecimal nathstsleutelgeldigvolgnummer;

				public BigDecimal getNathstsleutelgeldigvolgnummer () {
					return this.nathstsleutelgeldigvolgnummer;
				}
				
			    public String nathstnationaliteitcode;

				public String getNathstnationaliteitcode () {
					return this.nathstnationaliteitcode;
				}
				
			    public String nathstnationaliteitvervallen;

				public String getNathstnationaliteitvervallen () {
					return this.nathstnationaliteitvervallen;
				}
				
			    public String nathstnationaliteitomschrijving;

				public String getNathstnationaliteitomschrijving () {
					return this.nathstnationaliteitomschrijving;
				}
				
			    public String nathstredenopnamenationaliteitcode;

				public String getNathstredenopnamenationaliteitcode () {
					return this.nathstredenopnamenationaliteitcode;
				}
				
			    public String nathstredenopnamenationaliteitomschrijving;

				public String getNathstredenopnamenationaliteitomschrijving () {
					return this.nathstredenopnamenationaliteitomschrijving;
				}
				
			    public String nathstredenbeeindigennationaliteitcode;

				public String getNathstredenbeeindigennationaliteitcode () {
					return this.nathstredenbeeindigennationaliteitcode;
				}
				
			    public String nathstredenbeeindigennationaliteitomschrijving;

				public String getNathstredenbeeindigennationaliteitomschrijving () {
					return this.nathstredenbeeindigennationaliteitomschrijving;
				}
				
			    public String nathstaanduidingbijzondernederlanderschap;

				public String getNathstaanduidingbijzondernederlanderschap () {
					return this.nathstaanduidingbijzondernederlanderschap;
				}
				
			    public String nathsteupersoonsnummer;

				public String getNathsteupersoonsnummer () {
					return this.nathsteupersoonsnummer;
				}
				
			    public java.util.Date nathstingangsdatumgeldigheid;

				public java.util.Date getNathstingangsdatumgeldigheid () {
					return this.nathstingangsdatumgeldigheid;
				}
				
			    public String nathstingangsdatumgeldigheidindicator;

				public String getNathstingangsdatumgeldigheidindicator () {
					return this.nathstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date nathstdatumvanopneming;

				public java.util.Date getNathstdatumvanopneming () {
					return this.nathstdatumvanopneming;
				}
				
			    public String nathstdatumvanopnemingindicator;

				public String getNathstdatumvanopnemingindicator () {
					return this.nathstdatumvanopnemingindicator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.nathstsleutelnationaliteitcode = (BigDecimal) dis.readObject();
					
						this.nathstsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.nathstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.nathstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.nathstnationaliteitcode = readString(dis);
					
					this.nathstnationaliteitvervallen = readString(dis);
					
					this.nathstnationaliteitomschrijving = readString(dis);
					
					this.nathstredenopnamenationaliteitcode = readString(dis);
					
					this.nathstredenopnamenationaliteitomschrijving = readString(dis);
					
					this.nathstredenbeeindigennationaliteitcode = readString(dis);
					
					this.nathstredenbeeindigennationaliteitomschrijving = readString(dis);
					
					this.nathstaanduidingbijzondernederlanderschap = readString(dis);
					
					this.nathsteupersoonsnummer = readString(dis);
					
					this.nathstingangsdatumgeldigheid = readDate(dis);
					
					this.nathstingangsdatumgeldigheidindicator = readString(dis);
					
					this.nathstdatumvanopneming = readDate(dis);
					
					this.nathstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.nathstsleutelnationaliteitcode);
					
					// BigDecimal
				
       			    	dos.writeObject(this.nathstsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.nathstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.nathstsleutelgeldigvolgnummer);
					
					// String
				
						writeString(this.nathstnationaliteitcode,dos);
					
					// String
				
						writeString(this.nathstnationaliteitvervallen,dos);
					
					// String
				
						writeString(this.nathstnationaliteitomschrijving,dos);
					
					// String
				
						writeString(this.nathstredenopnamenationaliteitcode,dos);
					
					// String
				
						writeString(this.nathstredenopnamenationaliteitomschrijving,dos);
					
					// String
				
						writeString(this.nathstredenbeeindigennationaliteitcode,dos);
					
					// String
				
						writeString(this.nathstredenbeeindigennationaliteitomschrijving,dos);
					
					// String
				
						writeString(this.nathstaanduidingbijzondernederlanderschap,dos);
					
					// String
				
						writeString(this.nathsteupersoonsnummer,dos);
					
					// java.util.Date
				
						writeDate(this.nathstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.nathstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.nathstdatumvanopneming,dos);
					
					// String
				
						writeString(this.nathstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",nathstsleutelnationaliteitcode="+String.valueOf(nathstsleutelnationaliteitcode));
		sb.append(",nathstsleutelvolgnummer="+String.valueOf(nathstsleutelvolgnummer));
		sb.append(",nathstsleutelgeldigdatum="+String.valueOf(nathstsleutelgeldigdatum));
		sb.append(",nathstsleutelgeldigvolgnummer="+String.valueOf(nathstsleutelgeldigvolgnummer));
		sb.append(",nathstnationaliteitcode="+nathstnationaliteitcode);
		sb.append(",nathstnationaliteitvervallen="+nathstnationaliteitvervallen);
		sb.append(",nathstnationaliteitomschrijving="+nathstnationaliteitomschrijving);
		sb.append(",nathstredenopnamenationaliteitcode="+nathstredenopnamenationaliteitcode);
		sb.append(",nathstredenopnamenationaliteitomschrijving="+nathstredenopnamenationaliteitomschrijving);
		sb.append(",nathstredenbeeindigennationaliteitcode="+nathstredenbeeindigennationaliteitcode);
		sb.append(",nathstredenbeeindigennationaliteitomschrijving="+nathstredenbeeindigennationaliteitomschrijving);
		sb.append(",nathstaanduidingbijzondernederlanderschap="+nathstaanduidingbijzondernederlanderschap);
		sb.append(",nathsteupersoonsnummer="+nathsteupersoonsnummer);
		sb.append(",nathstingangsdatumgeldigheid="+String.valueOf(nathstingangsdatumgeldigheid));
		sb.append(",nathstingangsdatumgeldigheidindicator="+nathstingangsdatumgeldigheidindicator);
		sb.append(",nathstdatumvanopneming="+String.valueOf(nathstdatumvanopneming));
		sb.append(",nathstdatumvanopnemingindicator="+nathstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_nationaliteit_historie_keyStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_nationaliteit_historieStruct implements routines.system.IPersistableRow<ldf_anr_nationaliteit_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_nationaliteit_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_nationaliteit_historieStruct ldf_anr_nationaliteit_historie = new ldf_anr_nationaliteit_historieStruct();
ldf_anr_nationaliteit_historie_keyStruct ldf_anr_nationaliteit_historie_key = new ldf_anr_nationaliteit_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_9", false);
		start_Hash.put("tPostgresqlOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_nationaliteit_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_9 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_9().limitLog4jByte();





String dbschema_tPostgresqlOutput_9 = null;
	dbschema_tPostgresqlOutput_9 = "ldf";
	

String tableName_tPostgresqlOutput_9 = null;
if(dbschema_tPostgresqlOutput_9 == null || dbschema_tPostgresqlOutput_9.trim().length() == 0) {
	tableName_tPostgresqlOutput_9 = "ibz_cip_nationaliteit_historie";
} else {
	tableName_tPostgresqlOutput_9 = dbschema_tPostgresqlOutput_9 + "\".\"" + "ibz_cip_nationaliteit_historie";
}

        int deleteKeyCount_tPostgresqlOutput_9 = 1;
        if(deleteKeyCount_tPostgresqlOutput_9 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_9 = 0;
int nb_line_update_tPostgresqlOutput_9 = 0;
int nb_line_inserted_tPostgresqlOutput_9 = 0;
int nb_line_deleted_tPostgresqlOutput_9 = 0;
int nb_line_rejected_tPostgresqlOutput_9 = 0;

int deletedCount_tPostgresqlOutput_9=0;
int updatedCount_tPostgresqlOutput_9=0;
int insertedCount_tPostgresqlOutput_9=0;
int rejectedCount_tPostgresqlOutput_9=0;

boolean whetherReject_tPostgresqlOutput_9 = false;

java.sql.Connection conn_tPostgresqlOutput_9 = null;
String dbUser_tPostgresqlOutput_9 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_9 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_9 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_9 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_9 = decryptedPassword_tPostgresqlOutput_9;

    conn_tPostgresqlOutput_9 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_9,dbUser_tPostgresqlOutput_9,dbPwd_tPostgresqlOutput_9);
	
	resourceMap.put("conn_tPostgresqlOutput_9", conn_tPostgresqlOutput_9);
        conn_tPostgresqlOutput_9.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_9 = 1000;
        int commitCounter_tPostgresqlOutput_9 = 0;


   int batchSize_tPostgresqlOutput_9 = 10000;
   int batchSizeCounter_tPostgresqlOutput_9=0;

int count_tPostgresqlOutput_9=0;
	    String delete_tPostgresqlOutput_9 = "DELETE FROM \"" + tableName_tPostgresqlOutput_9 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_9 = conn_tPostgresqlOutput_9.prepareStatement(delete_tPostgresqlOutput_9);
	    

 



/**
 * [tPostgresqlOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_nationaliteit_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_10 = 0;
		
    	class BytesLimit65535_tMap_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_10().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_nationaliteit_historie_keyStruct ldf_anr_nationaliteit_historie_key_tmp = new ldf_anr_nationaliteit_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_9", false);
		start_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_9";

	
		int tos_count_tPostgresqlInput_9 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_9().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_9 = 0;
		    java.sql.Connection conn_tPostgresqlInput_9 = null;
				String driverClass_tPostgresqlInput_9 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_9);
			   	String dbUser_tPostgresqlInput_9 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_9 = decryptedPassword_tPostgresqlInput_9;
		        
				
			String url_tPostgresqlInput_9 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_9 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_9,dbUser_tPostgresqlInput_9,dbPwd_tPostgresqlInput_9);
		        
				conn_tPostgresqlInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9.createStatement();

		    String dbquery_tPostgresqlInput_9 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_9_QUERY",dbquery_tPostgresqlInput_9);

		    java.sql.ResultSet rs_tPostgresqlInput_9 = null;
		try{
		    rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9.executeQuery(dbquery_tPostgresqlInput_9);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9.getMetaData();
		    int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9.getColumnCount();

		    String tmpContent_tPostgresqlInput_9 = null;
		    
		    
		    while (rs_tPostgresqlInput_9.next()) {
		        nb_line_tPostgresqlInput_9++;
		        
							if(colQtyInRs_tPostgresqlInput_9 < 1) {
								ldf_anr_nationaliteit_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_9.getObject(1) != null) {
                ldf_anr_nationaliteit_historie.prsanummer = rs_tPostgresqlInput_9.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_9 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 


	tos_count_tPostgresqlInput_9++;

/**
 * [tPostgresqlInput_9 main ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

			//ldf_anr_nationaliteit_historie
			//ldf_anr_nationaliteit_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_nationaliteit_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

ldf_anr_nationaliteit_historie_key = null;


// # Output table : 'ldf_anr_nationaliteit_historie_key'
ldf_anr_nationaliteit_historie_key_tmp.prsanummer = ldf_anr_nationaliteit_historie.prsanummer ;
ldf_anr_nationaliteit_historie_key_tmp.nathstsleutelnationaliteitcode = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstsleutelvolgnummer = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstsleutelgeldigdatum = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstsleutelgeldigvolgnummer = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstnationaliteitcode = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstnationaliteitvervallen = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstnationaliteitomschrijving = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstredenopnamenationaliteitcode = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstredenopnamenationaliteitomschrijving = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstredenbeeindigennationaliteitcode = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstredenbeeindigennationaliteitomschrijving = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstaanduidingbijzondernederlanderschap = null;
ldf_anr_nationaliteit_historie_key_tmp.nathsteupersoonsnummer = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstingangsdatumgeldigheid = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstingangsdatumgeldigheidindicator = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstdatumvanopneming = null;
ldf_anr_nationaliteit_historie_key_tmp.nathstdatumvanopnemingindicator = null;
ldf_anr_nationaliteit_historie_key = ldf_anr_nationaliteit_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
// Start of branch "ldf_anr_nationaliteit_historie_key"
if(ldf_anr_nationaliteit_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	

			//ldf_anr_nationaliteit_historie_key
			//ldf_anr_nationaliteit_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_nationaliteit_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_9 = false;
					
                    pstmt_tPostgresqlOutput_9.setBigDecimal(1, ldf_anr_nationaliteit_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_9.addBatch();
			nb_line_tPostgresqlOutput_9++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_9++;
    		
            if(!whetherReject_tPostgresqlOutput_9) {
            }
    			if ((batchSize_tPostgresqlOutput_9 > 0) && (batchSize_tPostgresqlOutput_9 <= batchSizeCounter_tPostgresqlOutput_9)) {
                try {
						int countSum_tPostgresqlOutput_9 = 0;
						    
						for(int countEach_tPostgresqlOutput_9: pstmt_tPostgresqlOutput_9.executeBatch()) {
							countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_9 = 0;
					for(int countEach_tPostgresqlOutput_9: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
					}
					
			    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_9++;
                if(commitEvery_tPostgresqlOutput_9 <= commitCounter_tPostgresqlOutput_9) {
                if ((batchSize_tPostgresqlOutput_9 > 0) && (batchSizeCounter_tPostgresqlOutput_9 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_9 = 0;
                		    
						for(int countEach_tPostgresqlOutput_9: pstmt_tPostgresqlOutput_9.executeBatch()) {
							countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
            	    	
                batchSizeCounter_tPostgresqlOutput_9 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_9 = 0;
						for(int countEach_tPostgresqlOutput_9: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
						}
						
				    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_9.commit();
                	
                	commitCounter_tPostgresqlOutput_9=0;
                }

 


	tos_count_tPostgresqlOutput_9++;

/**
 * [tPostgresqlOutput_9 main ] stop
 */

} // End of branch "ldf_anr_nationaliteit_historie_key"







	
	/**
	 * [tPostgresqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

	}
}finally{
	stmt_tPostgresqlInput_9.close();

	if(conn_tPostgresqlInput_9 != null && !conn_tPostgresqlInput_9.isClosed()) {
		
			conn_tPostgresqlInput_9.commit();
			
		
			conn_tPostgresqlInput_9.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_9_NB_LINE",nb_line_tPostgresqlInput_9);
 

ok_Hash.put("tPostgresqlInput_9", true);
end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());




/**
 * [tPostgresqlInput_9 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_nationaliteit_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	



	    try {
				int countSum_tPostgresqlOutput_9 = 0;
				if (pstmt_tPostgresqlOutput_9 != null && batchSizeCounter_tPostgresqlOutput_9 > 0) {
						
					for(int countEach_tPostgresqlOutput_9: pstmt_tPostgresqlOutput_9.executeBatch()) {
						countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_9 = 0;
			for(int countEach_tPostgresqlOutput_9: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_9 += (countEach_tPostgresqlOutput_9 < 0 ? 0 : countEach_tPostgresqlOutput_9);
			}
			
	    	    deletedCount_tPostgresqlOutput_9 += countSum_tPostgresqlOutput_9;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_9 != null) {
            pstmt_tPostgresqlOutput_9.close();
        }

			
			conn_tPostgresqlOutput_9.commit();
			
		
    	conn_tPostgresqlOutput_9 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_9", true);
    	

	nb_line_deleted_tPostgresqlOutput_9=nb_line_deleted_tPostgresqlOutput_9+ deletedCount_tPostgresqlOutput_9;
	nb_line_update_tPostgresqlOutput_9=nb_line_update_tPostgresqlOutput_9 + updatedCount_tPostgresqlOutput_9;
	nb_line_inserted_tPostgresqlOutput_9=nb_line_inserted_tPostgresqlOutput_9 + insertedCount_tPostgresqlOutput_9;
	nb_line_rejected_tPostgresqlOutput_9=nb_line_rejected_tPostgresqlOutput_9 + rejectedCount_tPostgresqlOutput_9;
	
        globalMap.put("tPostgresqlOutput_9_NB_LINE",nb_line_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_9);
        globalMap.put("tPostgresqlOutput_9_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_9);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_nationaliteit_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_9", true);
end_Hash.put("tPostgresqlOutput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tPostgresqlInput_10Process(globalMap);



/**
 * [tPostgresqlOutput_9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_9";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_9")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_9")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_9")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_9) {
					String errorMessage_tPostgresqlOutput_9 = "failed to close the connection in tPostgresqlOutput_9 :" + sqlEx_tPostgresqlOutput_9.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_9);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_huwelijk_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_huwelijk_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal huwhstsleuteldatum;

				public BigDecimal getHuwhstsleuteldatum () {
					return this.huwhstsleuteldatum;
				}
				
			    public BigDecimal huwhstsleutelvolgnummer;

				public BigDecimal getHuwhstsleutelvolgnummer () {
					return this.huwhstsleutelvolgnummer;
				}
				
			    public BigDecimal huwhstsleutelgeldigdatum;

				public BigDecimal getHuwhstsleutelgeldigdatum () {
					return this.huwhstsleutelgeldigdatum;
				}
				
			    public BigDecimal huwhstsleutelgeldigvolgnummer;

				public BigDecimal getHuwhstsleutelgeldigvolgnummer () {
					return this.huwhstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal huwhstanummer;

				public BigDecimal getHuwhstanummer () {
					return this.huwhstanummer;
				}
				
			    public BigDecimal huwhstburgerservicenummer;

				public BigDecimal getHuwhstburgerservicenummer () {
					return this.huwhstburgerservicenummer;
				}
				
			    public String huwhstvoornamen;

				public String getHuwhstvoornamen () {
					return this.huwhstvoornamen;
				}
				
			    public String huwhstvoorletters;

				public String getHuwhstvoorletters () {
					return this.huwhstvoorletters;
				}
				
			    public String huwhstadellijketitelcode;

				public String getHuwhstadellijketitelcode () {
					return this.huwhstadellijketitelcode;
				}
				
			    public String huwhstadellijketitelomschrijving;

				public String getHuwhstadellijketitelomschrijving () {
					return this.huwhstadellijketitelomschrijving;
				}
				
			    public String huwhstvoorvoegselgeslachtsnaam;

				public String getHuwhstvoorvoegselgeslachtsnaam () {
					return this.huwhstvoorvoegselgeslachtsnaam;
				}
				
			    public String huwhstgeslachtsnaam;

				public String getHuwhstgeslachtsnaam () {
					return this.huwhstgeslachtsnaam;
				}
				
			    public java.util.Date huwhstgeboortedatum;

				public java.util.Date getHuwhstgeboortedatum () {
					return this.huwhstgeboortedatum;
				}
				
			    public String huwhstgeboortedatumindicator;

				public String getHuwhstgeboortedatumindicator () {
					return this.huwhstgeboortedatumindicator;
				}
				
			    public String huwhstgeboorteplaatscode;

				public String getHuwhstgeboorteplaatscode () {
					return this.huwhstgeboorteplaatscode;
				}
				
			    public String huwhstgeboortelandomschrijving;

				public String getHuwhstgeboortelandomschrijving () {
					return this.huwhstgeboortelandomschrijving;
				}
				
			    public String huwhstgeboorteplaatsomschrijving;

				public String getHuwhstgeboorteplaatsomschrijving () {
					return this.huwhstgeboorteplaatsomschrijving;
				}
				
			    public String huwhstgeboortelandcode;

				public String getHuwhstgeboortelandcode () {
					return this.huwhstgeboortelandcode;
				}
				
			    public String huwhstgeslachtsaanduidingcode;

				public String getHuwhstgeslachtsaanduidingcode () {
					return this.huwhstgeslachtsaanduidingcode;
				}
				
			    public java.util.Date huwhstdatumsluitinghuwelijkpartnerschap;

				public java.util.Date getHuwhstdatumsluitinghuwelijkpartnerschap () {
					return this.huwhstdatumsluitinghuwelijkpartnerschap;
				}
				
			    public String huwhstdatumsluitinghuwelijkpartnerschapindicator;

				public String getHuwhstdatumsluitinghuwelijkpartnerschapindicator () {
					return this.huwhstdatumsluitinghuwelijkpartnerschapindicator;
				}
				
			    public String huwhstplaatssluitinghuwelijkpartnerschapcode;

				public String getHuwhstplaatssluitinghuwelijkpartnerschapcode () {
					return this.huwhstplaatssluitinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstplaatssluitinghuwelijkpartnerschapomschrijving;

				public String getHuwhstplaatssluitinghuwelijkpartnerschapomschrijving () {
					return this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwhstlandsluitinghuwelijkpartnerschapcode;

				public String getHuwhstlandsluitinghuwelijkpartnerschapcode () {
					return this.huwhstlandsluitinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstlandsluitinghuwelijkpartnerschapomschrijving;

				public String getHuwhstlandsluitinghuwelijkpartnerschapomschrijving () {
					return this.huwhstlandsluitinghuwelijkpartnerschapomschrijving;
				}
				
			    public java.util.Date huwhstdatumontbindinghuwelijkpartnerschap;

				public java.util.Date getHuwhstdatumontbindinghuwelijkpartnerschap () {
					return this.huwhstdatumontbindinghuwelijkpartnerschap;
				}
				
			    public String huwhstdatumontbindinghuwelijkpartnerschapindicator;

				public String getHuwhstdatumontbindinghuwelijkpartnerschapindicator () {
					return this.huwhstdatumontbindinghuwelijkpartnerschapindicator;
				}
				
			    public String huwhstplaatsontbindinghuwelijkpartnerschapcode;

				public String getHuwhstplaatsontbindinghuwelijkpartnerschapcode () {
					return this.huwhstplaatsontbindinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstplaatsontbindinghuwelijkpartnerschapomschrijving;

				public String getHuwhstplaatsontbindinghuwelijkpartnerschapomschrijving () {
					return this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwhstlandontbindinghuwelijkpartnerschapcode;

				public String getHuwhstlandontbindinghuwelijkpartnerschapcode () {
					return this.huwhstlandontbindinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstlandontbindinghuwelijkpartnerschapomschrijving;

				public String getHuwhstlandontbindinghuwelijkpartnerschapomschrijving () {
					return this.huwhstlandontbindinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwhstsoortverbintenis;

				public String getHuwhstsoortverbintenis () {
					return this.huwhstsoortverbintenis;
				}
				
			    public java.util.Date huwhstingangsdatumgeldigheid;

				public java.util.Date getHuwhstingangsdatumgeldigheid () {
					return this.huwhstingangsdatumgeldigheid;
				}
				
			    public String huwhstingangsdatumgeldigheidindicator;

				public String getHuwhstingangsdatumgeldigheidindicator () {
					return this.huwhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date huwhstdatumvanopneming;

				public java.util.Date getHuwhstdatumvanopneming () {
					return this.huwhstdatumvanopneming;
				}
				
			    public String huwhstdatumvanopnemingindicator;

				public String getHuwhstdatumvanopnemingindicator () {
					return this.huwhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.huwhstsleuteldatum == null) ? 0 : this.huwhstsleuteldatum.hashCode());
					
						result = prime * result + ((this.huwhstsleutelvolgnummer == null) ? 0 : this.huwhstsleutelvolgnummer.hashCode());
					
						result = prime * result + ((this.huwhstsleutelgeldigdatum == null) ? 0 : this.huwhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.huwhstsleutelgeldigvolgnummer == null) ? 0 : this.huwhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_huwelijk_historie_keyStruct other = (ldf_anr_huwelijk_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.huwhstsleuteldatum == null) {
							if (other.huwhstsleuteldatum != null)
								return false;
						
						} else if (!this.huwhstsleuteldatum.equals(other.huwhstsleuteldatum))
						
							return false;
					
						if (this.huwhstsleutelvolgnummer == null) {
							if (other.huwhstsleutelvolgnummer != null)
								return false;
						
						} else if (!this.huwhstsleutelvolgnummer.equals(other.huwhstsleutelvolgnummer))
						
							return false;
					
						if (this.huwhstsleutelgeldigdatum == null) {
							if (other.huwhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.huwhstsleutelgeldigdatum.equals(other.huwhstsleutelgeldigdatum))
						
							return false;
					
						if (this.huwhstsleutelgeldigvolgnummer == null) {
							if (other.huwhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.huwhstsleutelgeldigvolgnummer.equals(other.huwhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_huwelijk_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.huwhstsleuteldatum = this.huwhstsleuteldatum;
	            other.huwhstsleutelvolgnummer = this.huwhstsleutelvolgnummer;
	            other.huwhstsleutelgeldigdatum = this.huwhstsleutelgeldigdatum;
	            other.huwhstsleutelgeldigvolgnummer = this.huwhstsleutelgeldigvolgnummer;
	            other.huwhstanummer = this.huwhstanummer;
	            other.huwhstburgerservicenummer = this.huwhstburgerservicenummer;
	            other.huwhstvoornamen = this.huwhstvoornamen;
	            other.huwhstvoorletters = this.huwhstvoorletters;
	            other.huwhstadellijketitelcode = this.huwhstadellijketitelcode;
	            other.huwhstadellijketitelomschrijving = this.huwhstadellijketitelomschrijving;
	            other.huwhstvoorvoegselgeslachtsnaam = this.huwhstvoorvoegselgeslachtsnaam;
	            other.huwhstgeslachtsnaam = this.huwhstgeslachtsnaam;
	            other.huwhstgeboortedatum = this.huwhstgeboortedatum;
	            other.huwhstgeboortedatumindicator = this.huwhstgeboortedatumindicator;
	            other.huwhstgeboorteplaatscode = this.huwhstgeboorteplaatscode;
	            other.huwhstgeboortelandomschrijving = this.huwhstgeboortelandomschrijving;
	            other.huwhstgeboorteplaatsomschrijving = this.huwhstgeboorteplaatsomschrijving;
	            other.huwhstgeboortelandcode = this.huwhstgeboortelandcode;
	            other.huwhstgeslachtsaanduidingcode = this.huwhstgeslachtsaanduidingcode;
	            other.huwhstdatumsluitinghuwelijkpartnerschap = this.huwhstdatumsluitinghuwelijkpartnerschap;
	            other.huwhstdatumsluitinghuwelijkpartnerschapindicator = this.huwhstdatumsluitinghuwelijkpartnerschapindicator;
	            other.huwhstplaatssluitinghuwelijkpartnerschapcode = this.huwhstplaatssluitinghuwelijkpartnerschapcode;
	            other.huwhstplaatssluitinghuwelijkpartnerschapomschrijving = this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving;
	            other.huwhstlandsluitinghuwelijkpartnerschapcode = this.huwhstlandsluitinghuwelijkpartnerschapcode;
	            other.huwhstlandsluitinghuwelijkpartnerschapomschrijving = this.huwhstlandsluitinghuwelijkpartnerschapomschrijving;
	            other.huwhstdatumontbindinghuwelijkpartnerschap = this.huwhstdatumontbindinghuwelijkpartnerschap;
	            other.huwhstdatumontbindinghuwelijkpartnerschapindicator = this.huwhstdatumontbindinghuwelijkpartnerschapindicator;
	            other.huwhstplaatsontbindinghuwelijkpartnerschapcode = this.huwhstplaatsontbindinghuwelijkpartnerschapcode;
	            other.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving = this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving;
	            other.huwhstlandontbindinghuwelijkpartnerschapcode = this.huwhstlandontbindinghuwelijkpartnerschapcode;
	            other.huwhstlandontbindinghuwelijkpartnerschapomschrijving = this.huwhstlandontbindinghuwelijkpartnerschapomschrijving;
	            other.huwhstsoortverbintenis = this.huwhstsoortverbintenis;
	            other.huwhstingangsdatumgeldigheid = this.huwhstingangsdatumgeldigheid;
	            other.huwhstingangsdatumgeldigheidindicator = this.huwhstingangsdatumgeldigheidindicator;
	            other.huwhstdatumvanopneming = this.huwhstdatumvanopneming;
	            other.huwhstdatumvanopnemingindicator = this.huwhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_huwelijk_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.huwhstsleuteldatum = this.huwhstsleuteldatum;
	            	other.huwhstsleutelvolgnummer = this.huwhstsleutelvolgnummer;
	            	other.huwhstsleutelgeldigdatum = this.huwhstsleutelgeldigdatum;
	            	other.huwhstsleutelgeldigvolgnummer = this.huwhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.huwhstsleuteldatum = (BigDecimal) dis.readObject();
					
						this.huwhstsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.huwhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.huwhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.huwhstanummer = (BigDecimal) dis.readObject();
					
						this.huwhstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.huwhstvoornamen = readString(dis);
					
					this.huwhstvoorletters = readString(dis);
					
					this.huwhstadellijketitelcode = readString(dis);
					
					this.huwhstadellijketitelomschrijving = readString(dis);
					
					this.huwhstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.huwhstgeslachtsnaam = readString(dis);
					
					this.huwhstgeboortedatum = readDate(dis);
					
					this.huwhstgeboortedatumindicator = readString(dis);
					
					this.huwhstgeboorteplaatscode = readString(dis);
					
					this.huwhstgeboortelandomschrijving = readString(dis);
					
					this.huwhstgeboorteplaatsomschrijving = readString(dis);
					
					this.huwhstgeboortelandcode = readString(dis);
					
					this.huwhstgeslachtsaanduidingcode = readString(dis);
					
					this.huwhstdatumsluitinghuwelijkpartnerschap = readDate(dis);
					
					this.huwhstdatumsluitinghuwelijkpartnerschapindicator = readString(dis);
					
					this.huwhstplaatssluitinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstlandsluitinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstlandsluitinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstdatumontbindinghuwelijkpartnerschap = readDate(dis);
					
					this.huwhstdatumontbindinghuwelijkpartnerschapindicator = readString(dis);
					
					this.huwhstplaatsontbindinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstlandontbindinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstlandontbindinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstsoortverbintenis = readString(dis);
					
					this.huwhstingangsdatumgeldigheid = readDate(dis);
					
					this.huwhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.huwhstdatumvanopneming = readDate(dis);
					
					this.huwhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstburgerservicenummer);
					
					// String
				
						writeString(this.huwhstvoornamen,dos);
					
					// String
				
						writeString(this.huwhstvoorletters,dos);
					
					// String
				
						writeString(this.huwhstadellijketitelcode,dos);
					
					// String
				
						writeString(this.huwhstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.huwhstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.huwhstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstgeboortedatum,dos);
					
					// String
				
						writeString(this.huwhstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.huwhstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.huwhstgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.huwhstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.huwhstgeboortelandcode,dos);
					
					// String
				
						writeString(this.huwhstgeslachtsaanduidingcode,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumsluitinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwhstdatumsluitinghuwelijkpartnerschapindicator,dos);
					
					// String
				
						writeString(this.huwhstplaatssluitinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwhstlandsluitinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstlandsluitinghuwelijkpartnerschapomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumontbindinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwhstdatumontbindinghuwelijkpartnerschapindicator,dos);
					
					// String
				
						writeString(this.huwhstplaatsontbindinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwhstlandontbindinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstlandontbindinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwhstsoortverbintenis,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.huwhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.huwhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",huwhstsleuteldatum="+String.valueOf(huwhstsleuteldatum));
		sb.append(",huwhstsleutelvolgnummer="+String.valueOf(huwhstsleutelvolgnummer));
		sb.append(",huwhstsleutelgeldigdatum="+String.valueOf(huwhstsleutelgeldigdatum));
		sb.append(",huwhstsleutelgeldigvolgnummer="+String.valueOf(huwhstsleutelgeldigvolgnummer));
		sb.append(",huwhstanummer="+String.valueOf(huwhstanummer));
		sb.append(",huwhstburgerservicenummer="+String.valueOf(huwhstburgerservicenummer));
		sb.append(",huwhstvoornamen="+huwhstvoornamen);
		sb.append(",huwhstvoorletters="+huwhstvoorletters);
		sb.append(",huwhstadellijketitelcode="+huwhstadellijketitelcode);
		sb.append(",huwhstadellijketitelomschrijving="+huwhstadellijketitelomschrijving);
		sb.append(",huwhstvoorvoegselgeslachtsnaam="+huwhstvoorvoegselgeslachtsnaam);
		sb.append(",huwhstgeslachtsnaam="+huwhstgeslachtsnaam);
		sb.append(",huwhstgeboortedatum="+String.valueOf(huwhstgeboortedatum));
		sb.append(",huwhstgeboortedatumindicator="+huwhstgeboortedatumindicator);
		sb.append(",huwhstgeboorteplaatscode="+huwhstgeboorteplaatscode);
		sb.append(",huwhstgeboortelandomschrijving="+huwhstgeboortelandomschrijving);
		sb.append(",huwhstgeboorteplaatsomschrijving="+huwhstgeboorteplaatsomschrijving);
		sb.append(",huwhstgeboortelandcode="+huwhstgeboortelandcode);
		sb.append(",huwhstgeslachtsaanduidingcode="+huwhstgeslachtsaanduidingcode);
		sb.append(",huwhstdatumsluitinghuwelijkpartnerschap="+String.valueOf(huwhstdatumsluitinghuwelijkpartnerschap));
		sb.append(",huwhstdatumsluitinghuwelijkpartnerschapindicator="+huwhstdatumsluitinghuwelijkpartnerschapindicator);
		sb.append(",huwhstplaatssluitinghuwelijkpartnerschapcode="+huwhstplaatssluitinghuwelijkpartnerschapcode);
		sb.append(",huwhstplaatssluitinghuwelijkpartnerschapomschrijving="+huwhstplaatssluitinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstlandsluitinghuwelijkpartnerschapcode="+huwhstlandsluitinghuwelijkpartnerschapcode);
		sb.append(",huwhstlandsluitinghuwelijkpartnerschapomschrijving="+huwhstlandsluitinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstdatumontbindinghuwelijkpartnerschap="+String.valueOf(huwhstdatumontbindinghuwelijkpartnerschap));
		sb.append(",huwhstdatumontbindinghuwelijkpartnerschapindicator="+huwhstdatumontbindinghuwelijkpartnerschapindicator);
		sb.append(",huwhstplaatsontbindinghuwelijkpartnerschapcode="+huwhstplaatsontbindinghuwelijkpartnerschapcode);
		sb.append(",huwhstplaatsontbindinghuwelijkpartnerschapomschrijving="+huwhstplaatsontbindinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstlandontbindinghuwelijkpartnerschapcode="+huwhstlandontbindinghuwelijkpartnerschapcode);
		sb.append(",huwhstlandontbindinghuwelijkpartnerschapomschrijving="+huwhstlandontbindinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstsoortverbintenis="+huwhstsoortverbintenis);
		sb.append(",huwhstingangsdatumgeldigheid="+String.valueOf(huwhstingangsdatumgeldigheid));
		sb.append(",huwhstingangsdatumgeldigheidindicator="+huwhstingangsdatumgeldigheidindicator);
		sb.append(",huwhstdatumvanopneming="+String.valueOf(huwhstdatumvanopneming));
		sb.append(",huwhstdatumvanopnemingindicator="+huwhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_huwelijk_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleuteldatum, other.huwhstsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleutelvolgnummer, other.huwhstsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleutelgeldigdatum, other.huwhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleutelgeldigvolgnummer, other.huwhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_huwelijk_historieStruct implements routines.system.IPersistableRow<ldf_anr_huwelijk_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_huwelijk_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_huwelijk_historieStruct ldf_anr_huwelijk_historie = new ldf_anr_huwelijk_historieStruct();
ldf_anr_huwelijk_historie_keyStruct ldf_anr_huwelijk_historie_key = new ldf_anr_huwelijk_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_10", false);
		start_Hash.put("tPostgresqlOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_huwelijk_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_10 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_10().limitLog4jByte();





String dbschema_tPostgresqlOutput_10 = null;
	dbschema_tPostgresqlOutput_10 = "ldf";
	

String tableName_tPostgresqlOutput_10 = null;
if(dbschema_tPostgresqlOutput_10 == null || dbschema_tPostgresqlOutput_10.trim().length() == 0) {
	tableName_tPostgresqlOutput_10 = "ibz_cip_huwelijk_historie";
} else {
	tableName_tPostgresqlOutput_10 = dbschema_tPostgresqlOutput_10 + "\".\"" + "ibz_cip_huwelijk_historie";
}

        int deleteKeyCount_tPostgresqlOutput_10 = 1;
        if(deleteKeyCount_tPostgresqlOutput_10 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_10 = 0;
int nb_line_update_tPostgresqlOutput_10 = 0;
int nb_line_inserted_tPostgresqlOutput_10 = 0;
int nb_line_deleted_tPostgresqlOutput_10 = 0;
int nb_line_rejected_tPostgresqlOutput_10 = 0;

int deletedCount_tPostgresqlOutput_10=0;
int updatedCount_tPostgresqlOutput_10=0;
int insertedCount_tPostgresqlOutput_10=0;
int rejectedCount_tPostgresqlOutput_10=0;

boolean whetherReject_tPostgresqlOutput_10 = false;

java.sql.Connection conn_tPostgresqlOutput_10 = null;
String dbUser_tPostgresqlOutput_10 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_10 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_10 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_10 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_10 = decryptedPassword_tPostgresqlOutput_10;

    conn_tPostgresqlOutput_10 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_10,dbUser_tPostgresqlOutput_10,dbPwd_tPostgresqlOutput_10);
	
	resourceMap.put("conn_tPostgresqlOutput_10", conn_tPostgresqlOutput_10);
        conn_tPostgresqlOutput_10.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_10 = 1000;
        int commitCounter_tPostgresqlOutput_10 = 0;


   int batchSize_tPostgresqlOutput_10 = 10000;
   int batchSizeCounter_tPostgresqlOutput_10=0;

int count_tPostgresqlOutput_10=0;
	    String delete_tPostgresqlOutput_10 = "DELETE FROM \"" + tableName_tPostgresqlOutput_10 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_10 = conn_tPostgresqlOutput_10.prepareStatement(delete_tPostgresqlOutput_10);
	    

 



/**
 * [tPostgresqlOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_huwelijk_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_11 = 0;
		
    	class BytesLimit65535_tMap_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_11().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_huwelijk_historie_keyStruct ldf_anr_huwelijk_historie_key_tmp = new ldf_anr_huwelijk_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_10", false);
		start_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_10";

	
		int tos_count_tPostgresqlInput_10 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_10().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_10 = 0;
		    java.sql.Connection conn_tPostgresqlInput_10 = null;
				String driverClass_tPostgresqlInput_10 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_10);
			   	String dbUser_tPostgresqlInput_10 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_10 = decryptedPassword_tPostgresqlInput_10;
		        
				
			String url_tPostgresqlInput_10 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_10 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_10,dbUser_tPostgresqlInput_10,dbPwd_tPostgresqlInput_10);
		        
				conn_tPostgresqlInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_10 = conn_tPostgresqlInput_10.createStatement();

		    String dbquery_tPostgresqlInput_10 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_10_QUERY",dbquery_tPostgresqlInput_10);

		    java.sql.ResultSet rs_tPostgresqlInput_10 = null;
		try{
		    rs_tPostgresqlInput_10 = stmt_tPostgresqlInput_10.executeQuery(dbquery_tPostgresqlInput_10);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_10 = rs_tPostgresqlInput_10.getMetaData();
		    int colQtyInRs_tPostgresqlInput_10 = rsmd_tPostgresqlInput_10.getColumnCount();

		    String tmpContent_tPostgresqlInput_10 = null;
		    
		    
		    while (rs_tPostgresqlInput_10.next()) {
		        nb_line_tPostgresqlInput_10++;
		        
							if(colQtyInRs_tPostgresqlInput_10 < 1) {
								ldf_anr_huwelijk_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_10.getObject(1) != null) {
                ldf_anr_huwelijk_historie.prsanummer = rs_tPostgresqlInput_10.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_10 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_10 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 


	tos_count_tPostgresqlInput_10++;

/**
 * [tPostgresqlInput_10 main ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

			//ldf_anr_huwelijk_historie
			//ldf_anr_huwelijk_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_huwelijk_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

ldf_anr_huwelijk_historie_key = null;


// # Output table : 'ldf_anr_huwelijk_historie_key'
ldf_anr_huwelijk_historie_key_tmp.prsanummer = ldf_anr_huwelijk_historie.prsanummer ;
ldf_anr_huwelijk_historie_key_tmp.huwhstsleuteldatum = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstsleutelvolgnummer = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstsleutelgeldigdatum = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstsleutelgeldigvolgnummer = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstanummer = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstburgerservicenummer = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstvoornamen = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstvoorletters = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstadellijketitelcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstadellijketitelomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstvoorvoegselgeslachtsnaam = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeslachtsnaam = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeboortedatum = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeboortedatumindicator = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeboorteplaatscode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeboortelandomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeboorteplaatsomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeboortelandcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstgeslachtsaanduidingcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstdatumsluitinghuwelijkpartnerschap = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstdatumsluitinghuwelijkpartnerschapindicator = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstplaatssluitinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstplaatssluitinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstlandsluitinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstlandsluitinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstdatumontbindinghuwelijkpartnerschap = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstdatumontbindinghuwelijkpartnerschapindicator = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstplaatsontbindinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstlandontbindinghuwelijkpartnerschapcode = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstlandontbindinghuwelijkpartnerschapomschrijving = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstsoortverbintenis = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstingangsdatumgeldigheid = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstingangsdatumgeldigheidindicator = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstdatumvanopneming = null;
ldf_anr_huwelijk_historie_key_tmp.huwhstdatumvanopnemingindicator = null;
ldf_anr_huwelijk_historie_key = ldf_anr_huwelijk_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
// Start of branch "ldf_anr_huwelijk_historie_key"
if(ldf_anr_huwelijk_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_10 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_10";

	

			//ldf_anr_huwelijk_historie_key
			//ldf_anr_huwelijk_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_huwelijk_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_10 = false;
					
                    pstmt_tPostgresqlOutput_10.setBigDecimal(1, ldf_anr_huwelijk_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_10.addBatch();
			nb_line_tPostgresqlOutput_10++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_10++;
    		
            if(!whetherReject_tPostgresqlOutput_10) {
            }
    			if ((batchSize_tPostgresqlOutput_10 > 0) && (batchSize_tPostgresqlOutput_10 <= batchSizeCounter_tPostgresqlOutput_10)) {
                try {
						int countSum_tPostgresqlOutput_10 = 0;
						    
						for(int countEach_tPostgresqlOutput_10: pstmt_tPostgresqlOutput_10.executeBatch()) {
							countSum_tPostgresqlOutput_10 += (countEach_tPostgresqlOutput_10 < 0 ? 0 : countEach_tPostgresqlOutput_10);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_10 += countSum_tPostgresqlOutput_10;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_10 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_10 = 0;
					for(int countEach_tPostgresqlOutput_10: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_10 += (countEach_tPostgresqlOutput_10 < 0 ? 0 : countEach_tPostgresqlOutput_10);
					}
					
			    	    deletedCount_tPostgresqlOutput_10 += countSum_tPostgresqlOutput_10;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_10++;
                if(commitEvery_tPostgresqlOutput_10 <= commitCounter_tPostgresqlOutput_10) {
                if ((batchSize_tPostgresqlOutput_10 > 0) && (batchSizeCounter_tPostgresqlOutput_10 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_10 = 0;
                		    
						for(int countEach_tPostgresqlOutput_10: pstmt_tPostgresqlOutput_10.executeBatch()) {
							countSum_tPostgresqlOutput_10 += (countEach_tPostgresqlOutput_10 < 0 ? 0 : countEach_tPostgresqlOutput_10);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_10 += countSum_tPostgresqlOutput_10;
            	    	
                batchSizeCounter_tPostgresqlOutput_10 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_10 = 0;
						for(int countEach_tPostgresqlOutput_10: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_10 += (countEach_tPostgresqlOutput_10 < 0 ? 0 : countEach_tPostgresqlOutput_10);
						}
						
				    	    deletedCount_tPostgresqlOutput_10 += countSum_tPostgresqlOutput_10;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_10.commit();
                	
                	commitCounter_tPostgresqlOutput_10=0;
                }

 


	tos_count_tPostgresqlOutput_10++;

/**
 * [tPostgresqlOutput_10 main ] stop
 */

} // End of branch "ldf_anr_huwelijk_historie_key"







	
	/**
	 * [tPostgresqlInput_10 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

	}
}finally{
	stmt_tPostgresqlInput_10.close();

	if(conn_tPostgresqlInput_10 != null && !conn_tPostgresqlInput_10.isClosed()) {
		
			conn_tPostgresqlInput_10.commit();
			
		
			conn_tPostgresqlInput_10.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_10_NB_LINE",nb_line_tPostgresqlInput_10);
 

ok_Hash.put("tPostgresqlInput_10", true);
end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());




/**
 * [tPostgresqlInput_10 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_huwelijk_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_10 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_10";

	



	    try {
				int countSum_tPostgresqlOutput_10 = 0;
				if (pstmt_tPostgresqlOutput_10 != null && batchSizeCounter_tPostgresqlOutput_10 > 0) {
						
					for(int countEach_tPostgresqlOutput_10: pstmt_tPostgresqlOutput_10.executeBatch()) {
						countSum_tPostgresqlOutput_10 += (countEach_tPostgresqlOutput_10 < 0 ? 0 : countEach_tPostgresqlOutput_10);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_10 += countSum_tPostgresqlOutput_10;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_10 = 0;
			for(int countEach_tPostgresqlOutput_10: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_10 += (countEach_tPostgresqlOutput_10 < 0 ? 0 : countEach_tPostgresqlOutput_10);
			}
			
	    	    deletedCount_tPostgresqlOutput_10 += countSum_tPostgresqlOutput_10;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_10 != null) {
            pstmt_tPostgresqlOutput_10.close();
        }

			
			conn_tPostgresqlOutput_10.commit();
			
		
    	conn_tPostgresqlOutput_10 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_10", true);
    	

	nb_line_deleted_tPostgresqlOutput_10=nb_line_deleted_tPostgresqlOutput_10+ deletedCount_tPostgresqlOutput_10;
	nb_line_update_tPostgresqlOutput_10=nb_line_update_tPostgresqlOutput_10 + updatedCount_tPostgresqlOutput_10;
	nb_line_inserted_tPostgresqlOutput_10=nb_line_inserted_tPostgresqlOutput_10 + insertedCount_tPostgresqlOutput_10;
	nb_line_rejected_tPostgresqlOutput_10=nb_line_rejected_tPostgresqlOutput_10 + rejectedCount_tPostgresqlOutput_10;
	
        globalMap.put("tPostgresqlOutput_10_NB_LINE",nb_line_tPostgresqlOutput_10);
        globalMap.put("tPostgresqlOutput_10_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_10);
        globalMap.put("tPostgresqlOutput_10_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_10);
        globalMap.put("tPostgresqlOutput_10_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_10);
        globalMap.put("tPostgresqlOutput_10_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_10);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_huwelijk_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_10", true);
end_Hash.put("tPostgresqlOutput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tPostgresqlInput_11Process(globalMap);



/**
 * [tPostgresqlOutput_10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_10 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 



/**
 * [tPostgresqlInput_10 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_10";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_10")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_10")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_10")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_10) {
					String errorMessage_tPostgresqlOutput_10 = "failed to close the connection in tPostgresqlOutput_10 :" + sqlEx_tPostgresqlOutput_10.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_10);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_overlijden_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_overlijden_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal ovlhstsleutelgeldigdatum;

				public BigDecimal getOvlhstsleutelgeldigdatum () {
					return this.ovlhstsleutelgeldigdatum;
				}
				
			    public BigDecimal ovlhstsleutelgeldigvolgnummer;

				public BigDecimal getOvlhstsleutelgeldigvolgnummer () {
					return this.ovlhstsleutelgeldigvolgnummer;
				}
				
			    public java.util.Date ovlhstdatumoverlijden;

				public java.util.Date getOvlhstdatumoverlijden () {
					return this.ovlhstdatumoverlijden;
				}
				
			    public String ovlhstdatumoverlijdenindicator;

				public String getOvlhstdatumoverlijdenindicator () {
					return this.ovlhstdatumoverlijdenindicator;
				}
				
			    public String ovlhstplaatsoverlijdencode;

				public String getOvlhstplaatsoverlijdencode () {
					return this.ovlhstplaatsoverlijdencode;
				}
				
			    public String ovlhstplaatsoverlijdenomschrijving;

				public String getOvlhstplaatsoverlijdenomschrijving () {
					return this.ovlhstplaatsoverlijdenomschrijving;
				}
				
			    public String ovlhstlandoverlijdencode;

				public String getOvlhstlandoverlijdencode () {
					return this.ovlhstlandoverlijdencode;
				}
				
			    public String ovlhstlandoverlijdenomschrijving;

				public String getOvlhstlandoverlijdenomschrijving () {
					return this.ovlhstlandoverlijdenomschrijving;
				}
				
			    public java.util.Date ovlhstingangsdatumgeldigheid;

				public java.util.Date getOvlhstingangsdatumgeldigheid () {
					return this.ovlhstingangsdatumgeldigheid;
				}
				
			    public String ovlhstingangsdatumgeldigheidindicator;

				public String getOvlhstingangsdatumgeldigheidindicator () {
					return this.ovlhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ovlhstdatumvanopneming;

				public java.util.Date getOvlhstdatumvanopneming () {
					return this.ovlhstdatumvanopneming;
				}
				
			    public String ovlhstdatumvanopnemingindicator;

				public String getOvlhstdatumvanopnemingindicator () {
					return this.ovlhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.ovlhstsleutelgeldigdatum == null) ? 0 : this.ovlhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.ovlhstsleutelgeldigvolgnummer == null) ? 0 : this.ovlhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_overlijden_historie_keyStruct other = (ldf_anr_overlijden_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.ovlhstsleutelgeldigdatum == null) {
							if (other.ovlhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.ovlhstsleutelgeldigdatum.equals(other.ovlhstsleutelgeldigdatum))
						
							return false;
					
						if (this.ovlhstsleutelgeldigvolgnummer == null) {
							if (other.ovlhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.ovlhstsleutelgeldigvolgnummer.equals(other.ovlhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_overlijden_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.ovlhstsleutelgeldigdatum = this.ovlhstsleutelgeldigdatum;
	            other.ovlhstsleutelgeldigvolgnummer = this.ovlhstsleutelgeldigvolgnummer;
	            other.ovlhstdatumoverlijden = this.ovlhstdatumoverlijden;
	            other.ovlhstdatumoverlijdenindicator = this.ovlhstdatumoverlijdenindicator;
	            other.ovlhstplaatsoverlijdencode = this.ovlhstplaatsoverlijdencode;
	            other.ovlhstplaatsoverlijdenomschrijving = this.ovlhstplaatsoverlijdenomschrijving;
	            other.ovlhstlandoverlijdencode = this.ovlhstlandoverlijdencode;
	            other.ovlhstlandoverlijdenomschrijving = this.ovlhstlandoverlijdenomschrijving;
	            other.ovlhstingangsdatumgeldigheid = this.ovlhstingangsdatumgeldigheid;
	            other.ovlhstingangsdatumgeldigheidindicator = this.ovlhstingangsdatumgeldigheidindicator;
	            other.ovlhstdatumvanopneming = this.ovlhstdatumvanopneming;
	            other.ovlhstdatumvanopnemingindicator = this.ovlhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_overlijden_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.ovlhstsleutelgeldigdatum = this.ovlhstsleutelgeldigdatum;
	            	other.ovlhstsleutelgeldigvolgnummer = this.ovlhstsleutelgeldigvolgnummer;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.ovlhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.ovlhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.ovlhstdatumoverlijden = readDate(dis);
					
					this.ovlhstdatumoverlijdenindicator = readString(dis);
					
					this.ovlhstplaatsoverlijdencode = readString(dis);
					
					this.ovlhstplaatsoverlijdenomschrijving = readString(dis);
					
					this.ovlhstlandoverlijdencode = readString(dis);
					
					this.ovlhstlandoverlijdenomschrijving = readString(dis);
					
					this.ovlhstingangsdatumgeldigheid = readDate(dis);
					
					this.ovlhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.ovlhstdatumvanopneming = readDate(dis);
					
					this.ovlhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlhstsleutelgeldigvolgnummer);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumoverlijden,dos);
					
					// String
				
						writeString(this.ovlhstdatumoverlijdenindicator,dos);
					
					// String
				
						writeString(this.ovlhstplaatsoverlijdencode,dos);
					
					// String
				
						writeString(this.ovlhstplaatsoverlijdenomschrijving,dos);
					
					// String
				
						writeString(this.ovlhstlandoverlijdencode,dos);
					
					// String
				
						writeString(this.ovlhstlandoverlijdenomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ovlhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ovlhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovlhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.ovlhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",ovlhstsleutelgeldigdatum="+String.valueOf(ovlhstsleutelgeldigdatum));
		sb.append(",ovlhstsleutelgeldigvolgnummer="+String.valueOf(ovlhstsleutelgeldigvolgnummer));
		sb.append(",ovlhstdatumoverlijden="+String.valueOf(ovlhstdatumoverlijden));
		sb.append(",ovlhstdatumoverlijdenindicator="+ovlhstdatumoverlijdenindicator);
		sb.append(",ovlhstplaatsoverlijdencode="+ovlhstplaatsoverlijdencode);
		sb.append(",ovlhstplaatsoverlijdenomschrijving="+ovlhstplaatsoverlijdenomschrijving);
		sb.append(",ovlhstlandoverlijdencode="+ovlhstlandoverlijdencode);
		sb.append(",ovlhstlandoverlijdenomschrijving="+ovlhstlandoverlijdenomschrijving);
		sb.append(",ovlhstingangsdatumgeldigheid="+String.valueOf(ovlhstingangsdatumgeldigheid));
		sb.append(",ovlhstingangsdatumgeldigheidindicator="+ovlhstingangsdatumgeldigheidindicator);
		sb.append(",ovlhstdatumvanopneming="+String.valueOf(ovlhstdatumvanopneming));
		sb.append(",ovlhstdatumvanopnemingindicator="+ovlhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_overlijden_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ovlhstsleutelgeldigdatum, other.ovlhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ovlhstsleutelgeldigvolgnummer, other.ovlhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_overlijden_historieStruct implements routines.system.IPersistableRow<ldf_anr_overlijden_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_overlijden_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_overlijden_historieStruct ldf_anr_overlijden_historie = new ldf_anr_overlijden_historieStruct();
ldf_anr_overlijden_historie_keyStruct ldf_anr_overlijden_historie_key = new ldf_anr_overlijden_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_11", false);
		start_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_overlijden_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_11 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_11().limitLog4jByte();





String dbschema_tPostgresqlOutput_11 = null;
	dbschema_tPostgresqlOutput_11 = "ldf";
	

String tableName_tPostgresqlOutput_11 = null;
if(dbschema_tPostgresqlOutput_11 == null || dbschema_tPostgresqlOutput_11.trim().length() == 0) {
	tableName_tPostgresqlOutput_11 = "ibz_cip_overlijden_historie";
} else {
	tableName_tPostgresqlOutput_11 = dbschema_tPostgresqlOutput_11 + "\".\"" + "ibz_cip_overlijden_historie";
}

        int deleteKeyCount_tPostgresqlOutput_11 = 1;
        if(deleteKeyCount_tPostgresqlOutput_11 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_11 = 0;
int nb_line_update_tPostgresqlOutput_11 = 0;
int nb_line_inserted_tPostgresqlOutput_11 = 0;
int nb_line_deleted_tPostgresqlOutput_11 = 0;
int nb_line_rejected_tPostgresqlOutput_11 = 0;

int deletedCount_tPostgresqlOutput_11=0;
int updatedCount_tPostgresqlOutput_11=0;
int insertedCount_tPostgresqlOutput_11=0;
int rejectedCount_tPostgresqlOutput_11=0;

boolean whetherReject_tPostgresqlOutput_11 = false;

java.sql.Connection conn_tPostgresqlOutput_11 = null;
String dbUser_tPostgresqlOutput_11 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_11 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_11 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_11 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_11 = decryptedPassword_tPostgresqlOutput_11;

    conn_tPostgresqlOutput_11 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_11,dbUser_tPostgresqlOutput_11,dbPwd_tPostgresqlOutput_11);
	
	resourceMap.put("conn_tPostgresqlOutput_11", conn_tPostgresqlOutput_11);
        conn_tPostgresqlOutput_11.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_11 = 1000;
        int commitCounter_tPostgresqlOutput_11 = 0;


   int batchSize_tPostgresqlOutput_11 = 10000;
   int batchSizeCounter_tPostgresqlOutput_11=0;

int count_tPostgresqlOutput_11=0;
	    String delete_tPostgresqlOutput_11 = "DELETE FROM \"" + tableName_tPostgresqlOutput_11 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11.prepareStatement(delete_tPostgresqlOutput_11);
	    

 



/**
 * [tPostgresqlOutput_11 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_overlijden_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_12 = 0;
		
    	class BytesLimit65535_tMap_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_12().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_overlijden_historie_keyStruct ldf_anr_overlijden_historie_key_tmp = new ldf_anr_overlijden_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_11", false);
		start_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_11";

	
		int tos_count_tPostgresqlInput_11 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_11().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_11 = 0;
		    java.sql.Connection conn_tPostgresqlInput_11 = null;
				String driverClass_tPostgresqlInput_11 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_11);
			   	String dbUser_tPostgresqlInput_11 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_11 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_11 = decryptedPassword_tPostgresqlInput_11;
		        
				
			String url_tPostgresqlInput_11 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_11 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_11,dbUser_tPostgresqlInput_11,dbPwd_tPostgresqlInput_11);
		        
				conn_tPostgresqlInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11.createStatement();

		    String dbquery_tPostgresqlInput_11 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_11_QUERY",dbquery_tPostgresqlInput_11);

		    java.sql.ResultSet rs_tPostgresqlInput_11 = null;
		try{
		    rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11.executeQuery(dbquery_tPostgresqlInput_11);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11.getMetaData();
		    int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11.getColumnCount();

		    String tmpContent_tPostgresqlInput_11 = null;
		    
		    
		    while (rs_tPostgresqlInput_11.next()) {
		        nb_line_tPostgresqlInput_11++;
		        
							if(colQtyInRs_tPostgresqlInput_11 < 1) {
								ldf_anr_overlijden_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_11.getObject(1) != null) {
                ldf_anr_overlijden_historie.prsanummer = rs_tPostgresqlInput_11.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_11 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 


	tos_count_tPostgresqlInput_11++;

/**
 * [tPostgresqlInput_11 main ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

			//ldf_anr_overlijden_historie
			//ldf_anr_overlijden_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_overlijden_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

ldf_anr_overlijden_historie_key = null;


// # Output table : 'ldf_anr_overlijden_historie_key'
ldf_anr_overlijden_historie_key_tmp.prsanummer = ldf_anr_overlijden_historie.prsanummer ;
ldf_anr_overlijden_historie_key_tmp.ovlhstsleutelgeldigdatum = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstsleutelgeldigvolgnummer = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstdatumoverlijden = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstdatumoverlijdenindicator = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstplaatsoverlijdencode = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstplaatsoverlijdenomschrijving = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstlandoverlijdencode = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstlandoverlijdenomschrijving = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstingangsdatumgeldigheid = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstingangsdatumgeldigheidindicator = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstdatumvanopneming = null;
ldf_anr_overlijden_historie_key_tmp.ovlhstdatumvanopnemingindicator = null;
ldf_anr_overlijden_historie_key = ldf_anr_overlijden_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
// Start of branch "ldf_anr_overlijden_historie_key"
if(ldf_anr_overlijden_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_11 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_11";

	

			//ldf_anr_overlijden_historie_key
			//ldf_anr_overlijden_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_overlijden_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_11 = false;
					
                    pstmt_tPostgresqlOutput_11.setBigDecimal(1, ldf_anr_overlijden_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_11.addBatch();
			nb_line_tPostgresqlOutput_11++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_11++;
    		
            if(!whetherReject_tPostgresqlOutput_11) {
            }
    			if ((batchSize_tPostgresqlOutput_11 > 0) && (batchSize_tPostgresqlOutput_11 <= batchSizeCounter_tPostgresqlOutput_11)) {
                try {
						int countSum_tPostgresqlOutput_11 = 0;
						    
						for(int countEach_tPostgresqlOutput_11: pstmt_tPostgresqlOutput_11.executeBatch()) {
							countSum_tPostgresqlOutput_11 += (countEach_tPostgresqlOutput_11 < 0 ? 0 : countEach_tPostgresqlOutput_11);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_11 += countSum_tPostgresqlOutput_11;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_11 = 0;
					for(int countEach_tPostgresqlOutput_11: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_11 += (countEach_tPostgresqlOutput_11 < 0 ? 0 : countEach_tPostgresqlOutput_11);
					}
					
			    	    deletedCount_tPostgresqlOutput_11 += countSum_tPostgresqlOutput_11;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_11++;
                if(commitEvery_tPostgresqlOutput_11 <= commitCounter_tPostgresqlOutput_11) {
                if ((batchSize_tPostgresqlOutput_11 > 0) && (batchSizeCounter_tPostgresqlOutput_11 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_11 = 0;
                		    
						for(int countEach_tPostgresqlOutput_11: pstmt_tPostgresqlOutput_11.executeBatch()) {
							countSum_tPostgresqlOutput_11 += (countEach_tPostgresqlOutput_11 < 0 ? 0 : countEach_tPostgresqlOutput_11);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_11 += countSum_tPostgresqlOutput_11;
            	    	
                batchSizeCounter_tPostgresqlOutput_11 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_11 = 0;
						for(int countEach_tPostgresqlOutput_11: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_11 += (countEach_tPostgresqlOutput_11 < 0 ? 0 : countEach_tPostgresqlOutput_11);
						}
						
				    	    deletedCount_tPostgresqlOutput_11 += countSum_tPostgresqlOutput_11;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_11.commit();
                	
                	commitCounter_tPostgresqlOutput_11=0;
                }

 


	tos_count_tPostgresqlOutput_11++;

/**
 * [tPostgresqlOutput_11 main ] stop
 */

} // End of branch "ldf_anr_overlijden_historie_key"







	
	/**
	 * [tPostgresqlInput_11 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

	}
}finally{
	stmt_tPostgresqlInput_11.close();

	if(conn_tPostgresqlInput_11 != null && !conn_tPostgresqlInput_11.isClosed()) {
		
			conn_tPostgresqlInput_11.commit();
			
		
			conn_tPostgresqlInput_11.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_11_NB_LINE",nb_line_tPostgresqlInput_11);
 

ok_Hash.put("tPostgresqlInput_11", true);
end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());




/**
 * [tPostgresqlInput_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_overlijden_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_11 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_11";

	



	    try {
				int countSum_tPostgresqlOutput_11 = 0;
				if (pstmt_tPostgresqlOutput_11 != null && batchSizeCounter_tPostgresqlOutput_11 > 0) {
						
					for(int countEach_tPostgresqlOutput_11: pstmt_tPostgresqlOutput_11.executeBatch()) {
						countSum_tPostgresqlOutput_11 += (countEach_tPostgresqlOutput_11 < 0 ? 0 : countEach_tPostgresqlOutput_11);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_11 += countSum_tPostgresqlOutput_11;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_11 = 0;
			for(int countEach_tPostgresqlOutput_11: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_11 += (countEach_tPostgresqlOutput_11 < 0 ? 0 : countEach_tPostgresqlOutput_11);
			}
			
	    	    deletedCount_tPostgresqlOutput_11 += countSum_tPostgresqlOutput_11;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_11 != null) {
            pstmt_tPostgresqlOutput_11.close();
        }

			
			conn_tPostgresqlOutput_11.commit();
			
		
    	conn_tPostgresqlOutput_11 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_11", true);
    	

	nb_line_deleted_tPostgresqlOutput_11=nb_line_deleted_tPostgresqlOutput_11+ deletedCount_tPostgresqlOutput_11;
	nb_line_update_tPostgresqlOutput_11=nb_line_update_tPostgresqlOutput_11 + updatedCount_tPostgresqlOutput_11;
	nb_line_inserted_tPostgresqlOutput_11=nb_line_inserted_tPostgresqlOutput_11 + insertedCount_tPostgresqlOutput_11;
	nb_line_rejected_tPostgresqlOutput_11=nb_line_rejected_tPostgresqlOutput_11 + rejectedCount_tPostgresqlOutput_11;
	
        globalMap.put("tPostgresqlOutput_11_NB_LINE",nb_line_tPostgresqlOutput_11);
        globalMap.put("tPostgresqlOutput_11_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_11);
        globalMap.put("tPostgresqlOutput_11_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_11);
        globalMap.put("tPostgresqlOutput_11_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_11);
        globalMap.put("tPostgresqlOutput_11_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_11);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_overlijden_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_11", true);
end_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tPostgresqlInput_12Process(globalMap);



/**
 * [tPostgresqlOutput_11 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_11 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_11";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_11")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_11")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_11")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_11) {
					String errorMessage_tPostgresqlOutput_11 = "failed to close the connection in tPostgresqlOutput_11 :" + sqlEx_tPostgresqlOutput_11.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_11);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_verblijfplaats_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_verblijfplaats_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal vblhstsleutelgeldigdatum;

				public BigDecimal getVblhstsleutelgeldigdatum () {
					return this.vblhstsleutelgeldigdatum;
				}
				
			    public BigDecimal vblhstsleutelgeldigvolgnummer;

				public BigDecimal getVblhstsleutelgeldigvolgnummer () {
					return this.vblhstsleutelgeldigvolgnummer;
				}
				
			    public String vblhstgemeentevaninschrijvingcode;

				public String getVblhstgemeentevaninschrijvingcode () {
					return this.vblhstgemeentevaninschrijvingcode;
				}
				
			    public String vblhstgemeentevaninschrijvingomschrijving;

				public String getVblhstgemeentevaninschrijvingomschrijving () {
					return this.vblhstgemeentevaninschrijvingomschrijving;
				}
				
			    public java.util.Date vblhstdatuminschrijving;

				public java.util.Date getVblhstdatuminschrijving () {
					return this.vblhstdatuminschrijving;
				}
				
			    public String vblhstdatuminschrijvingindicator;

				public String getVblhstdatuminschrijvingindicator () {
					return this.vblhstdatuminschrijvingindicator;
				}
				
			    public String vblhstfunctieadres;

				public String getVblhstfunctieadres () {
					return this.vblhstfunctieadres;
				}
				
			    public String vblhstgemeentedeel;

				public String getVblhstgemeentedeel () {
					return this.vblhstgemeentedeel;
				}
				
			    public java.util.Date vblhstdatumaanvangadreshouding;

				public java.util.Date getVblhstdatumaanvangadreshouding () {
					return this.vblhstdatumaanvangadreshouding;
				}
				
			    public String vblhstdatumaanvangadreshoudingindicator;

				public String getVblhstdatumaanvangadreshoudingindicator () {
					return this.vblhstdatumaanvangadreshoudingindicator;
				}
				
			    public String vblhststraatnaam;

				public String getVblhststraatnaam () {
					return this.vblhststraatnaam;
				}
				
			    public String vblhstnaamopenbareruimte;

				public String getVblhstnaamopenbareruimte () {
					return this.vblhstnaamopenbareruimte;
				}
				
			    public String vblhstadresopgemaakt;

				public String getVblhstadresopgemaakt () {
					return this.vblhstadresopgemaakt;
				}
				
			    public String vblhstwoonplaatsopgemaakt;

				public String getVblhstwoonplaatsopgemaakt () {
					return this.vblhstwoonplaatsopgemaakt;
				}
				
			    public BigDecimal vblhsthuisnummer;

				public BigDecimal getVblhsthuisnummer () {
					return this.vblhsthuisnummer;
				}
				
			    public String vblhsthuisletter;

				public String getVblhsthuisletter () {
					return this.vblhsthuisletter;
				}
				
			    public String vblhsthuisnummertoevoeging;

				public String getVblhsthuisnummertoevoeging () {
					return this.vblhsthuisnummertoevoeging;
				}
				
			    public String vblhstaanduidingbijhuisnummer;

				public String getVblhstaanduidingbijhuisnummer () {
					return this.vblhstaanduidingbijhuisnummer;
				}
				
			    public String vblhstpostcode;

				public String getVblhstpostcode () {
					return this.vblhstpostcode;
				}
				
			    public String vblhstwoonplaatsnaam;

				public String getVblhstwoonplaatsnaam () {
					return this.vblhstwoonplaatsnaam;
				}
				
			    public String vblhstidentificatiecodeverblijfplaats;

				public String getVblhstidentificatiecodeverblijfplaats () {
					return this.vblhstidentificatiecodeverblijfplaats;
				}
				
			    public String vblhstidentificatiecodenummeraanduiding;

				public String getVblhstidentificatiecodenummeraanduiding () {
					return this.vblhstidentificatiecodenummeraanduiding;
				}
				
			    public String vblhstlocatiebeschrijving;

				public String getVblhstlocatiebeschrijving () {
					return this.vblhstlocatiebeschrijving;
				}
				
			    public String vblhstlandadresbuitenlandcode;

				public String getVblhstlandadresbuitenlandcode () {
					return this.vblhstlandadresbuitenlandcode;
				}
				
			    public String vblhstlandadresbuitenlandomschrijving;

				public String getVblhstlandadresbuitenlandomschrijving () {
					return this.vblhstlandadresbuitenlandomschrijving;
				}
				
			    public java.util.Date vblhstdatumaanvangadresbuitenland;

				public java.util.Date getVblhstdatumaanvangadresbuitenland () {
					return this.vblhstdatumaanvangadresbuitenland;
				}
				
			    public String vblhstdatumaanvangadresbuitenlandindicator;

				public String getVblhstdatumaanvangadresbuitenlandindicator () {
					return this.vblhstdatumaanvangadresbuitenlandindicator;
				}
				
			    public String vblhstregel1adresbuitenland;

				public String getVblhstregel1adresbuitenland () {
					return this.vblhstregel1adresbuitenland;
				}
				
			    public String vblhstregel2adresbuitenland;

				public String getVblhstregel2adresbuitenland () {
					return this.vblhstregel2adresbuitenland;
				}
				
			    public String vblhstregel3adresbuitenland;

				public String getVblhstregel3adresbuitenland () {
					return this.vblhstregel3adresbuitenland;
				}
				
			    public String vblhstlandvanwaaringeschrevencode;

				public String getVblhstlandvanwaaringeschrevencode () {
					return this.vblhstlandvanwaaringeschrevencode;
				}
				
			    public String vblhstlandvanwaaringeschrevenomschrijving;

				public String getVblhstlandvanwaaringeschrevenomschrijving () {
					return this.vblhstlandvanwaaringeschrevenomschrijving;
				}
				
			    public java.util.Date vblhstdatumvestiginginnederland;

				public java.util.Date getVblhstdatumvestiginginnederland () {
					return this.vblhstdatumvestiginginnederland;
				}
				
			    public String vblhstdatumvestiginginnederlandindicator;

				public String getVblhstdatumvestiginginnederlandindicator () {
					return this.vblhstdatumvestiginginnederlandindicator;
				}
				
			    public String vblhstomschrijvingvanaangifteadreshouding;

				public String getVblhstomschrijvingvanaangifteadreshouding () {
					return this.vblhstomschrijvingvanaangifteadreshouding;
				}
				
			    public BigDecimal vblhstindicatiedocument;

				public BigDecimal getVblhstindicatiedocument () {
					return this.vblhstindicatiedocument;
				}
				
			    public BigDecimal vblhstaanduidinggegevensonderzoek;

				public BigDecimal getVblhstaanduidinggegevensonderzoek () {
					return this.vblhstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vblhstdatumingangonderzoek;

				public java.util.Date getVblhstdatumingangonderzoek () {
					return this.vblhstdatumingangonderzoek;
				}
				
			    public String vblhstdatumingangonderzoekindicator;

				public String getVblhstdatumingangonderzoekindicator () {
					return this.vblhstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date vblhstdatumeindeonderzoek;

				public java.util.Date getVblhstdatumeindeonderzoek () {
					return this.vblhstdatumeindeonderzoek;
				}
				
			    public String vblhstdatumeindeonderzoekindicator;

				public String getVblhstdatumeindeonderzoekindicator () {
					return this.vblhstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vblhstingangsdatumgeldigheid;

				public java.util.Date getVblhstingangsdatumgeldigheid () {
					return this.vblhstingangsdatumgeldigheid;
				}
				
			    public String vblhstingangsdatumgeldigheidindicator;

				public String getVblhstingangsdatumgeldigheidindicator () {
					return this.vblhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vblhstdatumvanopneming;

				public java.util.Date getVblhstdatumvanopneming () {
					return this.vblhstdatumvanopneming;
				}
				
			    public String vblhstdatumvanopnemingindicator;

				public String getVblhstdatumvanopnemingindicator () {
					return this.vblhstdatumvanopnemingindicator;
				}
				
			    public String vblhstsoortpandcode;

				public String getVblhstsoortpandcode () {
					return this.vblhstsoortpandcode;
				}
				
			    public String vblhstsoortpandomschrijving;

				public String getVblhstsoortpandomschrijving () {
					return this.vblhstsoortpandomschrijving;
				}
				
			    public String vblhstwijkcode;

				public String getVblhstwijkcode () {
					return this.vblhstwijkcode;
				}
				
			    public String vblhstwijkomschrijving;

				public String getVblhstwijkomschrijving () {
					return this.vblhstwijkomschrijving;
				}
				
			    public String vblhstplanalogischewijkcode;

				public String getVblhstplanalogischewijkcode () {
					return this.vblhstplanalogischewijkcode;
				}
				
			    public String vblhstplanalogischewijkomschrijving;

				public String getVblhstplanalogischewijkomschrijving () {
					return this.vblhstplanalogischewijkomschrijving;
				}
				
			    public BigDecimal vblhstanummerhoofdbewoner;

				public BigDecimal getVblhstanummerhoofdbewoner () {
					return this.vblhstanummerhoofdbewoner;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.vblhstsleutelgeldigdatum == null) ? 0 : this.vblhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.vblhstsleutelgeldigvolgnummer == null) ? 0 : this.vblhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_verblijfplaats_historie_keyStruct other = (ldf_anr_verblijfplaats_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.vblhstsleutelgeldigdatum == null) {
							if (other.vblhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.vblhstsleutelgeldigdatum.equals(other.vblhstsleutelgeldigdatum))
						
							return false;
					
						if (this.vblhstsleutelgeldigvolgnummer == null) {
							if (other.vblhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.vblhstsleutelgeldigvolgnummer.equals(other.vblhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_verblijfplaats_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.vblhstsleutelgeldigdatum = this.vblhstsleutelgeldigdatum;
	            other.vblhstsleutelgeldigvolgnummer = this.vblhstsleutelgeldigvolgnummer;
	            other.vblhstgemeentevaninschrijvingcode = this.vblhstgemeentevaninschrijvingcode;
	            other.vblhstgemeentevaninschrijvingomschrijving = this.vblhstgemeentevaninschrijvingomschrijving;
	            other.vblhstdatuminschrijving = this.vblhstdatuminschrijving;
	            other.vblhstdatuminschrijvingindicator = this.vblhstdatuminschrijvingindicator;
	            other.vblhstfunctieadres = this.vblhstfunctieadres;
	            other.vblhstgemeentedeel = this.vblhstgemeentedeel;
	            other.vblhstdatumaanvangadreshouding = this.vblhstdatumaanvangadreshouding;
	            other.vblhstdatumaanvangadreshoudingindicator = this.vblhstdatumaanvangadreshoudingindicator;
	            other.vblhststraatnaam = this.vblhststraatnaam;
	            other.vblhstnaamopenbareruimte = this.vblhstnaamopenbareruimte;
	            other.vblhstadresopgemaakt = this.vblhstadresopgemaakt;
	            other.vblhstwoonplaatsopgemaakt = this.vblhstwoonplaatsopgemaakt;
	            other.vblhsthuisnummer = this.vblhsthuisnummer;
	            other.vblhsthuisletter = this.vblhsthuisletter;
	            other.vblhsthuisnummertoevoeging = this.vblhsthuisnummertoevoeging;
	            other.vblhstaanduidingbijhuisnummer = this.vblhstaanduidingbijhuisnummer;
	            other.vblhstpostcode = this.vblhstpostcode;
	            other.vblhstwoonplaatsnaam = this.vblhstwoonplaatsnaam;
	            other.vblhstidentificatiecodeverblijfplaats = this.vblhstidentificatiecodeverblijfplaats;
	            other.vblhstidentificatiecodenummeraanduiding = this.vblhstidentificatiecodenummeraanduiding;
	            other.vblhstlocatiebeschrijving = this.vblhstlocatiebeschrijving;
	            other.vblhstlandadresbuitenlandcode = this.vblhstlandadresbuitenlandcode;
	            other.vblhstlandadresbuitenlandomschrijving = this.vblhstlandadresbuitenlandomschrijving;
	            other.vblhstdatumaanvangadresbuitenland = this.vblhstdatumaanvangadresbuitenland;
	            other.vblhstdatumaanvangadresbuitenlandindicator = this.vblhstdatumaanvangadresbuitenlandindicator;
	            other.vblhstregel1adresbuitenland = this.vblhstregel1adresbuitenland;
	            other.vblhstregel2adresbuitenland = this.vblhstregel2adresbuitenland;
	            other.vblhstregel3adresbuitenland = this.vblhstregel3adresbuitenland;
	            other.vblhstlandvanwaaringeschrevencode = this.vblhstlandvanwaaringeschrevencode;
	            other.vblhstlandvanwaaringeschrevenomschrijving = this.vblhstlandvanwaaringeschrevenomschrijving;
	            other.vblhstdatumvestiginginnederland = this.vblhstdatumvestiginginnederland;
	            other.vblhstdatumvestiginginnederlandindicator = this.vblhstdatumvestiginginnederlandindicator;
	            other.vblhstomschrijvingvanaangifteadreshouding = this.vblhstomschrijvingvanaangifteadreshouding;
	            other.vblhstindicatiedocument = this.vblhstindicatiedocument;
	            other.vblhstaanduidinggegevensonderzoek = this.vblhstaanduidinggegevensonderzoek;
	            other.vblhstdatumingangonderzoek = this.vblhstdatumingangonderzoek;
	            other.vblhstdatumingangonderzoekindicator = this.vblhstdatumingangonderzoekindicator;
	            other.vblhstdatumeindeonderzoek = this.vblhstdatumeindeonderzoek;
	            other.vblhstdatumeindeonderzoekindicator = this.vblhstdatumeindeonderzoekindicator;
	            other.vblhstingangsdatumgeldigheid = this.vblhstingangsdatumgeldigheid;
	            other.vblhstingangsdatumgeldigheidindicator = this.vblhstingangsdatumgeldigheidindicator;
	            other.vblhstdatumvanopneming = this.vblhstdatumvanopneming;
	            other.vblhstdatumvanopnemingindicator = this.vblhstdatumvanopnemingindicator;
	            other.vblhstsoortpandcode = this.vblhstsoortpandcode;
	            other.vblhstsoortpandomschrijving = this.vblhstsoortpandomschrijving;
	            other.vblhstwijkcode = this.vblhstwijkcode;
	            other.vblhstwijkomschrijving = this.vblhstwijkomschrijving;
	            other.vblhstplanalogischewijkcode = this.vblhstplanalogischewijkcode;
	            other.vblhstplanalogischewijkomschrijving = this.vblhstplanalogischewijkomschrijving;
	            other.vblhstanummerhoofdbewoner = this.vblhstanummerhoofdbewoner;
	            
	}

	public void copyKeysDataTo(ldf_anr_verblijfplaats_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.vblhstsleutelgeldigdatum = this.vblhstsleutelgeldigdatum;
	            	other.vblhstsleutelgeldigvolgnummer = this.vblhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.vblhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.vblhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.vblhstgemeentevaninschrijvingcode = readString(dis);
					
					this.vblhstgemeentevaninschrijvingomschrijving = readString(dis);
					
					this.vblhstdatuminschrijving = readDate(dis);
					
					this.vblhstdatuminschrijvingindicator = readString(dis);
					
					this.vblhstfunctieadres = readString(dis);
					
					this.vblhstgemeentedeel = readString(dis);
					
					this.vblhstdatumaanvangadreshouding = readDate(dis);
					
					this.vblhstdatumaanvangadreshoudingindicator = readString(dis);
					
					this.vblhststraatnaam = readString(dis);
					
					this.vblhstnaamopenbareruimte = readString(dis);
					
					this.vblhstadresopgemaakt = readString(dis);
					
					this.vblhstwoonplaatsopgemaakt = readString(dis);
					
						this.vblhsthuisnummer = (BigDecimal) dis.readObject();
					
					this.vblhsthuisletter = readString(dis);
					
					this.vblhsthuisnummertoevoeging = readString(dis);
					
					this.vblhstaanduidingbijhuisnummer = readString(dis);
					
					this.vblhstpostcode = readString(dis);
					
					this.vblhstwoonplaatsnaam = readString(dis);
					
					this.vblhstidentificatiecodeverblijfplaats = readString(dis);
					
					this.vblhstidentificatiecodenummeraanduiding = readString(dis);
					
					this.vblhstlocatiebeschrijving = readString(dis);
					
					this.vblhstlandadresbuitenlandcode = readString(dis);
					
					this.vblhstlandadresbuitenlandomschrijving = readString(dis);
					
					this.vblhstdatumaanvangadresbuitenland = readDate(dis);
					
					this.vblhstdatumaanvangadresbuitenlandindicator = readString(dis);
					
					this.vblhstregel1adresbuitenland = readString(dis);
					
					this.vblhstregel2adresbuitenland = readString(dis);
					
					this.vblhstregel3adresbuitenland = readString(dis);
					
					this.vblhstlandvanwaaringeschrevencode = readString(dis);
					
					this.vblhstlandvanwaaringeschrevenomschrijving = readString(dis);
					
					this.vblhstdatumvestiginginnederland = readDate(dis);
					
					this.vblhstdatumvestiginginnederlandindicator = readString(dis);
					
					this.vblhstomschrijvingvanaangifteadreshouding = readString(dis);
					
						this.vblhstindicatiedocument = (BigDecimal) dis.readObject();
					
						this.vblhstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vblhstdatumingangonderzoek = readDate(dis);
					
					this.vblhstdatumingangonderzoekindicator = readString(dis);
					
					this.vblhstdatumeindeonderzoek = readDate(dis);
					
					this.vblhstdatumeindeonderzoekindicator = readString(dis);
					
					this.vblhstingangsdatumgeldigheid = readDate(dis);
					
					this.vblhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.vblhstdatumvanopneming = readDate(dis);
					
					this.vblhstdatumvanopnemingindicator = readString(dis);
					
					this.vblhstsoortpandcode = readString(dis);
					
					this.vblhstsoortpandomschrijving = readString(dis);
					
					this.vblhstwijkcode = readString(dis);
					
					this.vblhstwijkomschrijving = readString(dis);
					
					this.vblhstplanalogischewijkcode = readString(dis);
					
					this.vblhstplanalogischewijkomschrijving = readString(dis);
					
						this.vblhstanummerhoofdbewoner = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstsleutelgeldigvolgnummer);
					
					// String
				
						writeString(this.vblhstgemeentevaninschrijvingcode,dos);
					
					// String
				
						writeString(this.vblhstgemeentevaninschrijvingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatuminschrijving,dos);
					
					// String
				
						writeString(this.vblhstdatuminschrijvingindicator,dos);
					
					// String
				
						writeString(this.vblhstfunctieadres,dos);
					
					// String
				
						writeString(this.vblhstgemeentedeel,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumaanvangadreshouding,dos);
					
					// String
				
						writeString(this.vblhstdatumaanvangadreshoudingindicator,dos);
					
					// String
				
						writeString(this.vblhststraatnaam,dos);
					
					// String
				
						writeString(this.vblhstnaamopenbareruimte,dos);
					
					// String
				
						writeString(this.vblhstadresopgemaakt,dos);
					
					// String
				
						writeString(this.vblhstwoonplaatsopgemaakt,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhsthuisnummer);
					
					// String
				
						writeString(this.vblhsthuisletter,dos);
					
					// String
				
						writeString(this.vblhsthuisnummertoevoeging,dos);
					
					// String
				
						writeString(this.vblhstaanduidingbijhuisnummer,dos);
					
					// String
				
						writeString(this.vblhstpostcode,dos);
					
					// String
				
						writeString(this.vblhstwoonplaatsnaam,dos);
					
					// String
				
						writeString(this.vblhstidentificatiecodeverblijfplaats,dos);
					
					// String
				
						writeString(this.vblhstidentificatiecodenummeraanduiding,dos);
					
					// String
				
						writeString(this.vblhstlocatiebeschrijving,dos);
					
					// String
				
						writeString(this.vblhstlandadresbuitenlandcode,dos);
					
					// String
				
						writeString(this.vblhstlandadresbuitenlandomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumaanvangadresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstdatumaanvangadresbuitenlandindicator,dos);
					
					// String
				
						writeString(this.vblhstregel1adresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstregel2adresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstregel3adresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstlandvanwaaringeschrevencode,dos);
					
					// String
				
						writeString(this.vblhstlandvanwaaringeschrevenomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumvestiginginnederland,dos);
					
					// String
				
						writeString(this.vblhstdatumvestiginginnederlandindicator,dos);
					
					// String
				
						writeString(this.vblhstomschrijvingvanaangifteadreshouding,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstindicatiedocument);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vblhstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vblhstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vblhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.vblhstdatumvanopnemingindicator,dos);
					
					// String
				
						writeString(this.vblhstsoortpandcode,dos);
					
					// String
				
						writeString(this.vblhstsoortpandomschrijving,dos);
					
					// String
				
						writeString(this.vblhstwijkcode,dos);
					
					// String
				
						writeString(this.vblhstwijkomschrijving,dos);
					
					// String
				
						writeString(this.vblhstplanalogischewijkcode,dos);
					
					// String
				
						writeString(this.vblhstplanalogischewijkomschrijving,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstanummerhoofdbewoner);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",vblhstsleutelgeldigdatum="+String.valueOf(vblhstsleutelgeldigdatum));
		sb.append(",vblhstsleutelgeldigvolgnummer="+String.valueOf(vblhstsleutelgeldigvolgnummer));
		sb.append(",vblhstgemeentevaninschrijvingcode="+vblhstgemeentevaninschrijvingcode);
		sb.append(",vblhstgemeentevaninschrijvingomschrijving="+vblhstgemeentevaninschrijvingomschrijving);
		sb.append(",vblhstdatuminschrijving="+String.valueOf(vblhstdatuminschrijving));
		sb.append(",vblhstdatuminschrijvingindicator="+vblhstdatuminschrijvingindicator);
		sb.append(",vblhstfunctieadres="+vblhstfunctieadres);
		sb.append(",vblhstgemeentedeel="+vblhstgemeentedeel);
		sb.append(",vblhstdatumaanvangadreshouding="+String.valueOf(vblhstdatumaanvangadreshouding));
		sb.append(",vblhstdatumaanvangadreshoudingindicator="+vblhstdatumaanvangadreshoudingindicator);
		sb.append(",vblhststraatnaam="+vblhststraatnaam);
		sb.append(",vblhstnaamopenbareruimte="+vblhstnaamopenbareruimte);
		sb.append(",vblhstadresopgemaakt="+vblhstadresopgemaakt);
		sb.append(",vblhstwoonplaatsopgemaakt="+vblhstwoonplaatsopgemaakt);
		sb.append(",vblhsthuisnummer="+String.valueOf(vblhsthuisnummer));
		sb.append(",vblhsthuisletter="+vblhsthuisletter);
		sb.append(",vblhsthuisnummertoevoeging="+vblhsthuisnummertoevoeging);
		sb.append(",vblhstaanduidingbijhuisnummer="+vblhstaanduidingbijhuisnummer);
		sb.append(",vblhstpostcode="+vblhstpostcode);
		sb.append(",vblhstwoonplaatsnaam="+vblhstwoonplaatsnaam);
		sb.append(",vblhstidentificatiecodeverblijfplaats="+vblhstidentificatiecodeverblijfplaats);
		sb.append(",vblhstidentificatiecodenummeraanduiding="+vblhstidentificatiecodenummeraanduiding);
		sb.append(",vblhstlocatiebeschrijving="+vblhstlocatiebeschrijving);
		sb.append(",vblhstlandadresbuitenlandcode="+vblhstlandadresbuitenlandcode);
		sb.append(",vblhstlandadresbuitenlandomschrijving="+vblhstlandadresbuitenlandomschrijving);
		sb.append(",vblhstdatumaanvangadresbuitenland="+String.valueOf(vblhstdatumaanvangadresbuitenland));
		sb.append(",vblhstdatumaanvangadresbuitenlandindicator="+vblhstdatumaanvangadresbuitenlandindicator);
		sb.append(",vblhstregel1adresbuitenland="+vblhstregel1adresbuitenland);
		sb.append(",vblhstregel2adresbuitenland="+vblhstregel2adresbuitenland);
		sb.append(",vblhstregel3adresbuitenland="+vblhstregel3adresbuitenland);
		sb.append(",vblhstlandvanwaaringeschrevencode="+vblhstlandvanwaaringeschrevencode);
		sb.append(",vblhstlandvanwaaringeschrevenomschrijving="+vblhstlandvanwaaringeschrevenomschrijving);
		sb.append(",vblhstdatumvestiginginnederland="+String.valueOf(vblhstdatumvestiginginnederland));
		sb.append(",vblhstdatumvestiginginnederlandindicator="+vblhstdatumvestiginginnederlandindicator);
		sb.append(",vblhstomschrijvingvanaangifteadreshouding="+vblhstomschrijvingvanaangifteadreshouding);
		sb.append(",vblhstindicatiedocument="+String.valueOf(vblhstindicatiedocument));
		sb.append(",vblhstaanduidinggegevensonderzoek="+String.valueOf(vblhstaanduidinggegevensonderzoek));
		sb.append(",vblhstdatumingangonderzoek="+String.valueOf(vblhstdatumingangonderzoek));
		sb.append(",vblhstdatumingangonderzoekindicator="+vblhstdatumingangonderzoekindicator);
		sb.append(",vblhstdatumeindeonderzoek="+String.valueOf(vblhstdatumeindeonderzoek));
		sb.append(",vblhstdatumeindeonderzoekindicator="+vblhstdatumeindeonderzoekindicator);
		sb.append(",vblhstingangsdatumgeldigheid="+String.valueOf(vblhstingangsdatumgeldigheid));
		sb.append(",vblhstingangsdatumgeldigheidindicator="+vblhstingangsdatumgeldigheidindicator);
		sb.append(",vblhstdatumvanopneming="+String.valueOf(vblhstdatumvanopneming));
		sb.append(",vblhstdatumvanopnemingindicator="+vblhstdatumvanopnemingindicator);
		sb.append(",vblhstsoortpandcode="+vblhstsoortpandcode);
		sb.append(",vblhstsoortpandomschrijving="+vblhstsoortpandomschrijving);
		sb.append(",vblhstwijkcode="+vblhstwijkcode);
		sb.append(",vblhstwijkomschrijving="+vblhstwijkomschrijving);
		sb.append(",vblhstplanalogischewijkcode="+vblhstplanalogischewijkcode);
		sb.append(",vblhstplanalogischewijkomschrijving="+vblhstplanalogischewijkomschrijving);
		sb.append(",vblhstanummerhoofdbewoner="+String.valueOf(vblhstanummerhoofdbewoner));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_verblijfplaats_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.vblhstsleutelgeldigdatum, other.vblhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.vblhstsleutelgeldigvolgnummer, other.vblhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_verblijfplaats_historieStruct implements routines.system.IPersistableRow<ldf_anr_verblijfplaats_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_verblijfplaats_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_verblijfplaats_historieStruct ldf_anr_verblijfplaats_historie = new ldf_anr_verblijfplaats_historieStruct();
ldf_anr_verblijfplaats_historie_keyStruct ldf_anr_verblijfplaats_historie_key = new ldf_anr_verblijfplaats_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_12", false);
		start_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_verblijfplaats_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_12 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_12().limitLog4jByte();





String dbschema_tPostgresqlOutput_12 = null;
	dbschema_tPostgresqlOutput_12 = "ldf";
	

String tableName_tPostgresqlOutput_12 = null;
if(dbschema_tPostgresqlOutput_12 == null || dbschema_tPostgresqlOutput_12.trim().length() == 0) {
	tableName_tPostgresqlOutput_12 = "ibz_cip_verblijfplaats_historie";
} else {
	tableName_tPostgresqlOutput_12 = dbschema_tPostgresqlOutput_12 + "\".\"" + "ibz_cip_verblijfplaats_historie";
}

        int deleteKeyCount_tPostgresqlOutput_12 = 1;
        if(deleteKeyCount_tPostgresqlOutput_12 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_12 = 0;
int nb_line_update_tPostgresqlOutput_12 = 0;
int nb_line_inserted_tPostgresqlOutput_12 = 0;
int nb_line_deleted_tPostgresqlOutput_12 = 0;
int nb_line_rejected_tPostgresqlOutput_12 = 0;

int deletedCount_tPostgresqlOutput_12=0;
int updatedCount_tPostgresqlOutput_12=0;
int insertedCount_tPostgresqlOutput_12=0;
int rejectedCount_tPostgresqlOutput_12=0;

boolean whetherReject_tPostgresqlOutput_12 = false;

java.sql.Connection conn_tPostgresqlOutput_12 = null;
String dbUser_tPostgresqlOutput_12 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_12 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_12 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_12 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_12 = decryptedPassword_tPostgresqlOutput_12;

    conn_tPostgresqlOutput_12 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_12,dbUser_tPostgresqlOutput_12,dbPwd_tPostgresqlOutput_12);
	
	resourceMap.put("conn_tPostgresqlOutput_12", conn_tPostgresqlOutput_12);
        conn_tPostgresqlOutput_12.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_12 = 1000;
        int commitCounter_tPostgresqlOutput_12 = 0;


   int batchSize_tPostgresqlOutput_12 = 10000;
   int batchSizeCounter_tPostgresqlOutput_12=0;

int count_tPostgresqlOutput_12=0;
	    String delete_tPostgresqlOutput_12 = "DELETE FROM \"" + tableName_tPostgresqlOutput_12 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12.prepareStatement(delete_tPostgresqlOutput_12);
	    

 



/**
 * [tPostgresqlOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_verblijfplaats_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_13 = 0;
		
    	class BytesLimit65535_tMap_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_13().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_verblijfplaats_historie_keyStruct ldf_anr_verblijfplaats_historie_key_tmp = new ldf_anr_verblijfplaats_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_12", false);
		start_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_12";

	
		int tos_count_tPostgresqlInput_12 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_12().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_12 = 0;
		    java.sql.Connection conn_tPostgresqlInput_12 = null;
				String driverClass_tPostgresqlInput_12 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_12);
			   	String dbUser_tPostgresqlInput_12 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_12 = decryptedPassword_tPostgresqlInput_12;
		        
				
			String url_tPostgresqlInput_12 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_12 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_12,dbUser_tPostgresqlInput_12,dbPwd_tPostgresqlInput_12);
		        
				conn_tPostgresqlInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12.createStatement();

		    String dbquery_tPostgresqlInput_12 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_12_QUERY",dbquery_tPostgresqlInput_12);

		    java.sql.ResultSet rs_tPostgresqlInput_12 = null;
		try{
		    rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12.executeQuery(dbquery_tPostgresqlInput_12);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12.getMetaData();
		    int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12.getColumnCount();

		    String tmpContent_tPostgresqlInput_12 = null;
		    
		    
		    while (rs_tPostgresqlInput_12.next()) {
		        nb_line_tPostgresqlInput_12++;
		        
							if(colQtyInRs_tPostgresqlInput_12 < 1) {
								ldf_anr_verblijfplaats_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_12.getObject(1) != null) {
                ldf_anr_verblijfplaats_historie.prsanummer = rs_tPostgresqlInput_12.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_12 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 


	tos_count_tPostgresqlInput_12++;

/**
 * [tPostgresqlInput_12 main ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

			//ldf_anr_verblijfplaats_historie
			//ldf_anr_verblijfplaats_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_verblijfplaats_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

ldf_anr_verblijfplaats_historie_key = null;


// # Output table : 'ldf_anr_verblijfplaats_historie_key'
ldf_anr_verblijfplaats_historie_key_tmp.prsanummer = ldf_anr_verblijfplaats_historie.prsanummer ;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstsleutelgeldigdatum = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstsleutelgeldigvolgnummer = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstgemeentevaninschrijvingcode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstgemeentevaninschrijvingomschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatuminschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatuminschrijvingindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstfunctieadres = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstgemeentedeel = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumaanvangadreshouding = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumaanvangadreshoudingindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhststraatnaam = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstnaamopenbareruimte = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstadresopgemaakt = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstwoonplaatsopgemaakt = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhsthuisnummer = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhsthuisletter = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhsthuisnummertoevoeging = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstaanduidingbijhuisnummer = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstpostcode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstwoonplaatsnaam = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstidentificatiecodeverblijfplaats = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstidentificatiecodenummeraanduiding = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstlocatiebeschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstlandadresbuitenlandcode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstlandadresbuitenlandomschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumaanvangadresbuitenland = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumaanvangadresbuitenlandindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstregel1adresbuitenland = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstregel2adresbuitenland = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstregel3adresbuitenland = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstlandvanwaaringeschrevencode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstlandvanwaaringeschrevenomschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumvestiginginnederland = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumvestiginginnederlandindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstomschrijvingvanaangifteadreshouding = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstindicatiedocument = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstaanduidinggegevensonderzoek = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumingangonderzoek = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumingangonderzoekindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumeindeonderzoek = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumeindeonderzoekindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstingangsdatumgeldigheid = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstingangsdatumgeldigheidindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumvanopneming = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstdatumvanopnemingindicator = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstsoortpandcode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstsoortpandomschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstwijkcode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstwijkomschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstplanalogischewijkcode = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstplanalogischewijkomschrijving = null;
ldf_anr_verblijfplaats_historie_key_tmp.vblhstanummerhoofdbewoner = null;
ldf_anr_verblijfplaats_historie_key = ldf_anr_verblijfplaats_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
// Start of branch "ldf_anr_verblijfplaats_historie_key"
if(ldf_anr_verblijfplaats_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_12";

	

			//ldf_anr_verblijfplaats_historie_key
			//ldf_anr_verblijfplaats_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_verblijfplaats_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_12 = false;
					
                    pstmt_tPostgresqlOutput_12.setBigDecimal(1, ldf_anr_verblijfplaats_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_12.addBatch();
			nb_line_tPostgresqlOutput_12++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_12++;
    		
            if(!whetherReject_tPostgresqlOutput_12) {
            }
    			if ((batchSize_tPostgresqlOutput_12 > 0) && (batchSize_tPostgresqlOutput_12 <= batchSizeCounter_tPostgresqlOutput_12)) {
                try {
						int countSum_tPostgresqlOutput_12 = 0;
						    
						for(int countEach_tPostgresqlOutput_12: pstmt_tPostgresqlOutput_12.executeBatch()) {
							countSum_tPostgresqlOutput_12 += (countEach_tPostgresqlOutput_12 < 0 ? 0 : countEach_tPostgresqlOutput_12);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_12 += countSum_tPostgresqlOutput_12;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_12 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_12 = 0;
					for(int countEach_tPostgresqlOutput_12: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_12 += (countEach_tPostgresqlOutput_12 < 0 ? 0 : countEach_tPostgresqlOutput_12);
					}
					
			    	    deletedCount_tPostgresqlOutput_12 += countSum_tPostgresqlOutput_12;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_12++;
                if(commitEvery_tPostgresqlOutput_12 <= commitCounter_tPostgresqlOutput_12) {
                if ((batchSize_tPostgresqlOutput_12 > 0) && (batchSizeCounter_tPostgresqlOutput_12 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_12 = 0;
                		    
						for(int countEach_tPostgresqlOutput_12: pstmt_tPostgresqlOutput_12.executeBatch()) {
							countSum_tPostgresqlOutput_12 += (countEach_tPostgresqlOutput_12 < 0 ? 0 : countEach_tPostgresqlOutput_12);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_12 += countSum_tPostgresqlOutput_12;
            	    	
                batchSizeCounter_tPostgresqlOutput_12 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_12 = 0;
						for(int countEach_tPostgresqlOutput_12: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_12 += (countEach_tPostgresqlOutput_12 < 0 ? 0 : countEach_tPostgresqlOutput_12);
						}
						
				    	    deletedCount_tPostgresqlOutput_12 += countSum_tPostgresqlOutput_12;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_12.commit();
                	
                	commitCounter_tPostgresqlOutput_12=0;
                }

 


	tos_count_tPostgresqlOutput_12++;

/**
 * [tPostgresqlOutput_12 main ] stop
 */

} // End of branch "ldf_anr_verblijfplaats_historie_key"







	
	/**
	 * [tPostgresqlInput_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

	}
}finally{
	stmt_tPostgresqlInput_12.close();

	if(conn_tPostgresqlInput_12 != null && !conn_tPostgresqlInput_12.isClosed()) {
		
			conn_tPostgresqlInput_12.commit();
			
		
			conn_tPostgresqlInput_12.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_12_NB_LINE",nb_line_tPostgresqlInput_12);
 

ok_Hash.put("tPostgresqlInput_12", true);
end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());




/**
 * [tPostgresqlInput_12 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_verblijfplaats_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_12";

	



	    try {
				int countSum_tPostgresqlOutput_12 = 0;
				if (pstmt_tPostgresqlOutput_12 != null && batchSizeCounter_tPostgresqlOutput_12 > 0) {
						
					for(int countEach_tPostgresqlOutput_12: pstmt_tPostgresqlOutput_12.executeBatch()) {
						countSum_tPostgresqlOutput_12 += (countEach_tPostgresqlOutput_12 < 0 ? 0 : countEach_tPostgresqlOutput_12);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_12 += countSum_tPostgresqlOutput_12;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_12 = 0;
			for(int countEach_tPostgresqlOutput_12: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_12 += (countEach_tPostgresqlOutput_12 < 0 ? 0 : countEach_tPostgresqlOutput_12);
			}
			
	    	    deletedCount_tPostgresqlOutput_12 += countSum_tPostgresqlOutput_12;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_12 != null) {
            pstmt_tPostgresqlOutput_12.close();
        }

			
			conn_tPostgresqlOutput_12.commit();
			
		
    	conn_tPostgresqlOutput_12 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_12", true);
    	

	nb_line_deleted_tPostgresqlOutput_12=nb_line_deleted_tPostgresqlOutput_12+ deletedCount_tPostgresqlOutput_12;
	nb_line_update_tPostgresqlOutput_12=nb_line_update_tPostgresqlOutput_12 + updatedCount_tPostgresqlOutput_12;
	nb_line_inserted_tPostgresqlOutput_12=nb_line_inserted_tPostgresqlOutput_12 + insertedCount_tPostgresqlOutput_12;
	nb_line_rejected_tPostgresqlOutput_12=nb_line_rejected_tPostgresqlOutput_12 + rejectedCount_tPostgresqlOutput_12;
	
        globalMap.put("tPostgresqlOutput_12_NB_LINE",nb_line_tPostgresqlOutput_12);
        globalMap.put("tPostgresqlOutput_12_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_12);
        globalMap.put("tPostgresqlOutput_12_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_12);
        globalMap.put("tPostgresqlOutput_12_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_12);
        globalMap.put("tPostgresqlOutput_12_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_12);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_verblijfplaats_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_12", true);
end_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tPostgresqlInput_14Process(globalMap);



/**
 * [tPostgresqlOutput_12 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_12";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_12")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_12")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_12")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_12) {
					String errorMessage_tPostgresqlOutput_12 = "failed to close the connection in tPostgresqlOutput_12 :" + sqlEx_tPostgresqlOutput_12.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_12);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_kind_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_kind_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal kinhstsleuteldatum;

				public BigDecimal getKinhstsleuteldatum () {
					return this.kinhstsleuteldatum;
				}
				
			    public BigDecimal kinhstsleutelvolgnummer;

				public BigDecimal getKinhstsleutelvolgnummer () {
					return this.kinhstsleutelvolgnummer;
				}
				
			    public BigDecimal kinhstsleutelgeldigdatum;

				public BigDecimal getKinhstsleutelgeldigdatum () {
					return this.kinhstsleutelgeldigdatum;
				}
				
			    public BigDecimal kinhstsleutelgeldigvolgnummer;

				public BigDecimal getKinhstsleutelgeldigvolgnummer () {
					return this.kinhstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal kinhstanummer;

				public BigDecimal getKinhstanummer () {
					return this.kinhstanummer;
				}
				
			    public BigDecimal kinhstburgerservicenummer;

				public BigDecimal getKinhstburgerservicenummer () {
					return this.kinhstburgerservicenummer;
				}
				
			    public String kinhstvoornamen;

				public String getKinhstvoornamen () {
					return this.kinhstvoornamen;
				}
				
			    public String kinhstvoorletters;

				public String getKinhstvoorletters () {
					return this.kinhstvoorletters;
				}
				
			    public String kinhstadellijketitelcode;

				public String getKinhstadellijketitelcode () {
					return this.kinhstadellijketitelcode;
				}
				
			    public String kinhstadellijketitelomschrijving;

				public String getKinhstadellijketitelomschrijving () {
					return this.kinhstadellijketitelomschrijving;
				}
				
			    public String kinhstvoorvoegselgeslachtsnaam;

				public String getKinhstvoorvoegselgeslachtsnaam () {
					return this.kinhstvoorvoegselgeslachtsnaam;
				}
				
			    public String kinhstgeslachtsnaam;

				public String getKinhstgeslachtsnaam () {
					return this.kinhstgeslachtsnaam;
				}
				
			    public java.util.Date kinhstgeboortedatum;

				public java.util.Date getKinhstgeboortedatum () {
					return this.kinhstgeboortedatum;
				}
				
			    public String kinhstgeboortedatumindicator;

				public String getKinhstgeboortedatumindicator () {
					return this.kinhstgeboortedatumindicator;
				}
				
			    public String kinhstgeboorteplaatscode;

				public String getKinhstgeboorteplaatscode () {
					return this.kinhstgeboorteplaatscode;
				}
				
			    public String kinhstgeboorteplaatsomschrijving;

				public String getKinhstgeboorteplaatsomschrijving () {
					return this.kinhstgeboorteplaatsomschrijving;
				}
				
			    public String kinhstgeboortelandcode;

				public String getKinhstgeboortelandcode () {
					return this.kinhstgeboortelandcode;
				}
				
			    public String kinhstgeboortelandomschrijving;

				public String getKinhstgeboortelandomschrijving () {
					return this.kinhstgeboortelandomschrijving;
				}
				
			    public java.util.Date kinhstingangsdatumgeldigheid;

				public java.util.Date getKinhstingangsdatumgeldigheid () {
					return this.kinhstingangsdatumgeldigheid;
				}
				
			    public String kinhstingangsdatumgeldigheidindicator;

				public String getKinhstingangsdatumgeldigheidindicator () {
					return this.kinhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date kinhstdatumvanopneming;

				public java.util.Date getKinhstdatumvanopneming () {
					return this.kinhstdatumvanopneming;
				}
				
			    public String kinhstdatumvanopnemingindicator;

				public String getKinhstdatumvanopnemingindicator () {
					return this.kinhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.kinhstsleuteldatum == null) ? 0 : this.kinhstsleuteldatum.hashCode());
					
						result = prime * result + ((this.kinhstsleutelvolgnummer == null) ? 0 : this.kinhstsleutelvolgnummer.hashCode());
					
						result = prime * result + ((this.kinhstsleutelgeldigdatum == null) ? 0 : this.kinhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.kinhstsleutelgeldigvolgnummer == null) ? 0 : this.kinhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_kind_historie_keyStruct other = (ldf_anr_kind_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.kinhstsleuteldatum == null) {
							if (other.kinhstsleuteldatum != null)
								return false;
						
						} else if (!this.kinhstsleuteldatum.equals(other.kinhstsleuteldatum))
						
							return false;
					
						if (this.kinhstsleutelvolgnummer == null) {
							if (other.kinhstsleutelvolgnummer != null)
								return false;
						
						} else if (!this.kinhstsleutelvolgnummer.equals(other.kinhstsleutelvolgnummer))
						
							return false;
					
						if (this.kinhstsleutelgeldigdatum == null) {
							if (other.kinhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.kinhstsleutelgeldigdatum.equals(other.kinhstsleutelgeldigdatum))
						
							return false;
					
						if (this.kinhstsleutelgeldigvolgnummer == null) {
							if (other.kinhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.kinhstsleutelgeldigvolgnummer.equals(other.kinhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_kind_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.kinhstsleuteldatum = this.kinhstsleuteldatum;
	            other.kinhstsleutelvolgnummer = this.kinhstsleutelvolgnummer;
	            other.kinhstsleutelgeldigdatum = this.kinhstsleutelgeldigdatum;
	            other.kinhstsleutelgeldigvolgnummer = this.kinhstsleutelgeldigvolgnummer;
	            other.kinhstanummer = this.kinhstanummer;
	            other.kinhstburgerservicenummer = this.kinhstburgerservicenummer;
	            other.kinhstvoornamen = this.kinhstvoornamen;
	            other.kinhstvoorletters = this.kinhstvoorletters;
	            other.kinhstadellijketitelcode = this.kinhstadellijketitelcode;
	            other.kinhstadellijketitelomschrijving = this.kinhstadellijketitelomschrijving;
	            other.kinhstvoorvoegselgeslachtsnaam = this.kinhstvoorvoegselgeslachtsnaam;
	            other.kinhstgeslachtsnaam = this.kinhstgeslachtsnaam;
	            other.kinhstgeboortedatum = this.kinhstgeboortedatum;
	            other.kinhstgeboortedatumindicator = this.kinhstgeboortedatumindicator;
	            other.kinhstgeboorteplaatscode = this.kinhstgeboorteplaatscode;
	            other.kinhstgeboorteplaatsomschrijving = this.kinhstgeboorteplaatsomschrijving;
	            other.kinhstgeboortelandcode = this.kinhstgeboortelandcode;
	            other.kinhstgeboortelandomschrijving = this.kinhstgeboortelandomschrijving;
	            other.kinhstingangsdatumgeldigheid = this.kinhstingangsdatumgeldigheid;
	            other.kinhstingangsdatumgeldigheidindicator = this.kinhstingangsdatumgeldigheidindicator;
	            other.kinhstdatumvanopneming = this.kinhstdatumvanopneming;
	            other.kinhstdatumvanopnemingindicator = this.kinhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_kind_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.kinhstsleuteldatum = this.kinhstsleuteldatum;
	            	other.kinhstsleutelvolgnummer = this.kinhstsleutelvolgnummer;
	            	other.kinhstsleutelgeldigdatum = this.kinhstsleutelgeldigdatum;
	            	other.kinhstsleutelgeldigvolgnummer = this.kinhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.kinhstsleuteldatum = (BigDecimal) dis.readObject();
					
						this.kinhstsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.kinhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.kinhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.kinhstanummer = (BigDecimal) dis.readObject();
					
						this.kinhstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.kinhstvoornamen = readString(dis);
					
					this.kinhstvoorletters = readString(dis);
					
					this.kinhstadellijketitelcode = readString(dis);
					
					this.kinhstadellijketitelomschrijving = readString(dis);
					
					this.kinhstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.kinhstgeslachtsnaam = readString(dis);
					
					this.kinhstgeboortedatum = readDate(dis);
					
					this.kinhstgeboortedatumindicator = readString(dis);
					
					this.kinhstgeboorteplaatscode = readString(dis);
					
					this.kinhstgeboorteplaatsomschrijving = readString(dis);
					
					this.kinhstgeboortelandcode = readString(dis);
					
					this.kinhstgeboortelandomschrijving = readString(dis);
					
					this.kinhstingangsdatumgeldigheid = readDate(dis);
					
					this.kinhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.kinhstdatumvanopneming = readDate(dis);
					
					this.kinhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kinhstsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kinhstsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kinhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kinhstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kinhstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kinhstburgerservicenummer);
					
					// String
				
						writeString(this.kinhstvoornamen,dos);
					
					// String
				
						writeString(this.kinhstvoorletters,dos);
					
					// String
				
						writeString(this.kinhstadellijketitelcode,dos);
					
					// String
				
						writeString(this.kinhstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.kinhstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.kinhstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.kinhstgeboortedatum,dos);
					
					// String
				
						writeString(this.kinhstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.kinhstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.kinhstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.kinhstgeboortelandcode,dos);
					
					// String
				
						writeString(this.kinhstgeboortelandomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.kinhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.kinhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.kinhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.kinhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",kinhstsleuteldatum="+String.valueOf(kinhstsleuteldatum));
		sb.append(",kinhstsleutelvolgnummer="+String.valueOf(kinhstsleutelvolgnummer));
		sb.append(",kinhstsleutelgeldigdatum="+String.valueOf(kinhstsleutelgeldigdatum));
		sb.append(",kinhstsleutelgeldigvolgnummer="+String.valueOf(kinhstsleutelgeldigvolgnummer));
		sb.append(",kinhstanummer="+String.valueOf(kinhstanummer));
		sb.append(",kinhstburgerservicenummer="+String.valueOf(kinhstburgerservicenummer));
		sb.append(",kinhstvoornamen="+kinhstvoornamen);
		sb.append(",kinhstvoorletters="+kinhstvoorletters);
		sb.append(",kinhstadellijketitelcode="+kinhstadellijketitelcode);
		sb.append(",kinhstadellijketitelomschrijving="+kinhstadellijketitelomschrijving);
		sb.append(",kinhstvoorvoegselgeslachtsnaam="+kinhstvoorvoegselgeslachtsnaam);
		sb.append(",kinhstgeslachtsnaam="+kinhstgeslachtsnaam);
		sb.append(",kinhstgeboortedatum="+String.valueOf(kinhstgeboortedatum));
		sb.append(",kinhstgeboortedatumindicator="+kinhstgeboortedatumindicator);
		sb.append(",kinhstgeboorteplaatscode="+kinhstgeboorteplaatscode);
		sb.append(",kinhstgeboorteplaatsomschrijving="+kinhstgeboorteplaatsomschrijving);
		sb.append(",kinhstgeboortelandcode="+kinhstgeboortelandcode);
		sb.append(",kinhstgeboortelandomschrijving="+kinhstgeboortelandomschrijving);
		sb.append(",kinhstingangsdatumgeldigheid="+String.valueOf(kinhstingangsdatumgeldigheid));
		sb.append(",kinhstingangsdatumgeldigheidindicator="+kinhstingangsdatumgeldigheidindicator);
		sb.append(",kinhstdatumvanopneming="+String.valueOf(kinhstdatumvanopneming));
		sb.append(",kinhstdatumvanopnemingindicator="+kinhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_kind_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kinhstsleuteldatum, other.kinhstsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kinhstsleutelvolgnummer, other.kinhstsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kinhstsleutelgeldigdatum, other.kinhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kinhstsleutelgeldigvolgnummer, other.kinhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_kind_historieStruct implements routines.system.IPersistableRow<ldf_anr_kind_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_kind_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_kind_historieStruct ldf_anr_kind_historie = new ldf_anr_kind_historieStruct();
ldf_anr_kind_historie_keyStruct ldf_anr_kind_historie_key = new ldf_anr_kind_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_14", false);
		start_Hash.put("tPostgresqlOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_kind_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_14 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_14().limitLog4jByte();





String dbschema_tPostgresqlOutput_14 = null;
	dbschema_tPostgresqlOutput_14 = "ldf";
	

String tableName_tPostgresqlOutput_14 = null;
if(dbschema_tPostgresqlOutput_14 == null || dbschema_tPostgresqlOutput_14.trim().length() == 0) {
	tableName_tPostgresqlOutput_14 = "ibz_cip_kind_historie";
} else {
	tableName_tPostgresqlOutput_14 = dbschema_tPostgresqlOutput_14 + "\".\"" + "ibz_cip_kind_historie";
}

        int deleteKeyCount_tPostgresqlOutput_14 = 1;
        if(deleteKeyCount_tPostgresqlOutput_14 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_14 = 0;
int nb_line_update_tPostgresqlOutput_14 = 0;
int nb_line_inserted_tPostgresqlOutput_14 = 0;
int nb_line_deleted_tPostgresqlOutput_14 = 0;
int nb_line_rejected_tPostgresqlOutput_14 = 0;

int deletedCount_tPostgresqlOutput_14=0;
int updatedCount_tPostgresqlOutput_14=0;
int insertedCount_tPostgresqlOutput_14=0;
int rejectedCount_tPostgresqlOutput_14=0;

boolean whetherReject_tPostgresqlOutput_14 = false;

java.sql.Connection conn_tPostgresqlOutput_14 = null;
String dbUser_tPostgresqlOutput_14 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_14 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_14 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_14 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_14 = decryptedPassword_tPostgresqlOutput_14;

    conn_tPostgresqlOutput_14 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_14,dbUser_tPostgresqlOutput_14,dbPwd_tPostgresqlOutput_14);
	
	resourceMap.put("conn_tPostgresqlOutput_14", conn_tPostgresqlOutput_14);
        conn_tPostgresqlOutput_14.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_14 = 1000;
        int commitCounter_tPostgresqlOutput_14 = 0;


   int batchSize_tPostgresqlOutput_14 = 10000;
   int batchSizeCounter_tPostgresqlOutput_14=0;

int count_tPostgresqlOutput_14=0;
	    String delete_tPostgresqlOutput_14 = "DELETE FROM \"" + tableName_tPostgresqlOutput_14 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14.prepareStatement(delete_tPostgresqlOutput_14);
	    

 



/**
 * [tPostgresqlOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_kind_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_14 = 0;
		
    	class BytesLimit65535_tMap_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_14().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_kind_historie_keyStruct ldf_anr_kind_historie_key_tmp = new ldf_anr_kind_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_14", false);
		start_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_14";

	
		int tos_count_tPostgresqlInput_14 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_14().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_14 = 0;
		    java.sql.Connection conn_tPostgresqlInput_14 = null;
				String driverClass_tPostgresqlInput_14 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_14);
			   	String dbUser_tPostgresqlInput_14 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_14 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_14 = decryptedPassword_tPostgresqlInput_14;
		        
				
			String url_tPostgresqlInput_14 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_14 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_14,dbUser_tPostgresqlInput_14,dbPwd_tPostgresqlInput_14);
		        
				conn_tPostgresqlInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_14 = conn_tPostgresqlInput_14.createStatement();

		    String dbquery_tPostgresqlInput_14 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_14_QUERY",dbquery_tPostgresqlInput_14);

		    java.sql.ResultSet rs_tPostgresqlInput_14 = null;
		try{
		    rs_tPostgresqlInput_14 = stmt_tPostgresqlInput_14.executeQuery(dbquery_tPostgresqlInput_14);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_14 = rs_tPostgresqlInput_14.getMetaData();
		    int colQtyInRs_tPostgresqlInput_14 = rsmd_tPostgresqlInput_14.getColumnCount();

		    String tmpContent_tPostgresqlInput_14 = null;
		    
		    
		    while (rs_tPostgresqlInput_14.next()) {
		        nb_line_tPostgresqlInput_14++;
		        
							if(colQtyInRs_tPostgresqlInput_14 < 1) {
								ldf_anr_kind_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_14.getObject(1) != null) {
                ldf_anr_kind_historie.prsanummer = rs_tPostgresqlInput_14.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_14 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_14 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 


	tos_count_tPostgresqlInput_14++;

/**
 * [tPostgresqlInput_14 main ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

			//ldf_anr_kind_historie
			//ldf_anr_kind_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_kind_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

ldf_anr_kind_historie_key = null;


// # Output table : 'ldf_anr_kind_historie_key'
ldf_anr_kind_historie_key_tmp.prsanummer = ldf_anr_kind_historie.prsanummer ;
ldf_anr_kind_historie_key_tmp.kinhstsleuteldatum = null;
ldf_anr_kind_historie_key_tmp.kinhstsleutelvolgnummer = null;
ldf_anr_kind_historie_key_tmp.kinhstsleutelgeldigdatum = null;
ldf_anr_kind_historie_key_tmp.kinhstsleutelgeldigvolgnummer = null;
ldf_anr_kind_historie_key_tmp.kinhstanummer = null;
ldf_anr_kind_historie_key_tmp.kinhstburgerservicenummer = null;
ldf_anr_kind_historie_key_tmp.kinhstvoornamen = null;
ldf_anr_kind_historie_key_tmp.kinhstvoorletters = null;
ldf_anr_kind_historie_key_tmp.kinhstadellijketitelcode = null;
ldf_anr_kind_historie_key_tmp.kinhstadellijketitelomschrijving = null;
ldf_anr_kind_historie_key_tmp.kinhstvoorvoegselgeslachtsnaam = null;
ldf_anr_kind_historie_key_tmp.kinhstgeslachtsnaam = null;
ldf_anr_kind_historie_key_tmp.kinhstgeboortedatum = null;
ldf_anr_kind_historie_key_tmp.kinhstgeboortedatumindicator = null;
ldf_anr_kind_historie_key_tmp.kinhstgeboorteplaatscode = null;
ldf_anr_kind_historie_key_tmp.kinhstgeboorteplaatsomschrijving = null;
ldf_anr_kind_historie_key_tmp.kinhstgeboortelandcode = null;
ldf_anr_kind_historie_key_tmp.kinhstgeboortelandomschrijving = null;
ldf_anr_kind_historie_key_tmp.kinhstingangsdatumgeldigheid = null;
ldf_anr_kind_historie_key_tmp.kinhstingangsdatumgeldigheidindicator = null;
ldf_anr_kind_historie_key_tmp.kinhstdatumvanopneming = null;
ldf_anr_kind_historie_key_tmp.kinhstdatumvanopnemingindicator = null;
ldf_anr_kind_historie_key = ldf_anr_kind_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
// Start of branch "ldf_anr_kind_historie_key"
if(ldf_anr_kind_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_14 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_14";

	

			//ldf_anr_kind_historie_key
			//ldf_anr_kind_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_kind_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_14 = false;
					
                    pstmt_tPostgresqlOutput_14.setBigDecimal(1, ldf_anr_kind_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_14.addBatch();
			nb_line_tPostgresqlOutput_14++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_14++;
    		
            if(!whetherReject_tPostgresqlOutput_14) {
            }
    			if ((batchSize_tPostgresqlOutput_14 > 0) && (batchSize_tPostgresqlOutput_14 <= batchSizeCounter_tPostgresqlOutput_14)) {
                try {
						int countSum_tPostgresqlOutput_14 = 0;
						    
						for(int countEach_tPostgresqlOutput_14: pstmt_tPostgresqlOutput_14.executeBatch()) {
							countSum_tPostgresqlOutput_14 += (countEach_tPostgresqlOutput_14 < 0 ? 0 : countEach_tPostgresqlOutput_14);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_14 += countSum_tPostgresqlOutput_14;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_14 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_14 = 0;
					for(int countEach_tPostgresqlOutput_14: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_14 += (countEach_tPostgresqlOutput_14 < 0 ? 0 : countEach_tPostgresqlOutput_14);
					}
					
			    	    deletedCount_tPostgresqlOutput_14 += countSum_tPostgresqlOutput_14;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_14++;
                if(commitEvery_tPostgresqlOutput_14 <= commitCounter_tPostgresqlOutput_14) {
                if ((batchSize_tPostgresqlOutput_14 > 0) && (batchSizeCounter_tPostgresqlOutput_14 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_14 = 0;
                		    
						for(int countEach_tPostgresqlOutput_14: pstmt_tPostgresqlOutput_14.executeBatch()) {
							countSum_tPostgresqlOutput_14 += (countEach_tPostgresqlOutput_14 < 0 ? 0 : countEach_tPostgresqlOutput_14);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_14 += countSum_tPostgresqlOutput_14;
            	    	
                batchSizeCounter_tPostgresqlOutput_14 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_14 = 0;
						for(int countEach_tPostgresqlOutput_14: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_14 += (countEach_tPostgresqlOutput_14 < 0 ? 0 : countEach_tPostgresqlOutput_14);
						}
						
				    	    deletedCount_tPostgresqlOutput_14 += countSum_tPostgresqlOutput_14;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_14.commit();
                	
                	commitCounter_tPostgresqlOutput_14=0;
                }

 


	tos_count_tPostgresqlOutput_14++;

/**
 * [tPostgresqlOutput_14 main ] stop
 */

} // End of branch "ldf_anr_kind_historie_key"







	
	/**
	 * [tPostgresqlInput_14 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

	}
}finally{
	stmt_tPostgresqlInput_14.close();

	if(conn_tPostgresqlInput_14 != null && !conn_tPostgresqlInput_14.isClosed()) {
		
			conn_tPostgresqlInput_14.commit();
			
		
			conn_tPostgresqlInput_14.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_14_NB_LINE",nb_line_tPostgresqlInput_14);
 

ok_Hash.put("tPostgresqlInput_14", true);
end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());




/**
 * [tPostgresqlInput_14 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_kind_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_14 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_14";

	



	    try {
				int countSum_tPostgresqlOutput_14 = 0;
				if (pstmt_tPostgresqlOutput_14 != null && batchSizeCounter_tPostgresqlOutput_14 > 0) {
						
					for(int countEach_tPostgresqlOutput_14: pstmt_tPostgresqlOutput_14.executeBatch()) {
						countSum_tPostgresqlOutput_14 += (countEach_tPostgresqlOutput_14 < 0 ? 0 : countEach_tPostgresqlOutput_14);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_14 += countSum_tPostgresqlOutput_14;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_14 = 0;
			for(int countEach_tPostgresqlOutput_14: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_14 += (countEach_tPostgresqlOutput_14 < 0 ? 0 : countEach_tPostgresqlOutput_14);
			}
			
	    	    deletedCount_tPostgresqlOutput_14 += countSum_tPostgresqlOutput_14;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_14 != null) {
            pstmt_tPostgresqlOutput_14.close();
        }

			
			conn_tPostgresqlOutput_14.commit();
			
		
    	conn_tPostgresqlOutput_14 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_14", true);
    	

	nb_line_deleted_tPostgresqlOutput_14=nb_line_deleted_tPostgresqlOutput_14+ deletedCount_tPostgresqlOutput_14;
	nb_line_update_tPostgresqlOutput_14=nb_line_update_tPostgresqlOutput_14 + updatedCount_tPostgresqlOutput_14;
	nb_line_inserted_tPostgresqlOutput_14=nb_line_inserted_tPostgresqlOutput_14 + insertedCount_tPostgresqlOutput_14;
	nb_line_rejected_tPostgresqlOutput_14=nb_line_rejected_tPostgresqlOutput_14 + rejectedCount_tPostgresqlOutput_14;
	
        globalMap.put("tPostgresqlOutput_14_NB_LINE",nb_line_tPostgresqlOutput_14);
        globalMap.put("tPostgresqlOutput_14_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_14);
        globalMap.put("tPostgresqlOutput_14_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_14);
        globalMap.put("tPostgresqlOutput_14_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_14);
        globalMap.put("tPostgresqlOutput_14_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_14);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_kind_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_14", true);
end_Hash.put("tPostgresqlOutput_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tPostgresqlInput_13Process(globalMap);



/**
 * [tPostgresqlOutput_14 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_14 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 



/**
 * [tPostgresqlInput_14 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_14";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_14")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_14")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_14")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_14) {
					String errorMessage_tPostgresqlOutput_14 = "failed to close the connection in tPostgresqlOutput_14 :" + sqlEx_tPostgresqlOutput_14.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_14);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_verblijfstitel_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_verblijfstitel_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal vbthstsleutelgeldigdatum;

				public BigDecimal getVbthstsleutelgeldigdatum () {
					return this.vbthstsleutelgeldigdatum;
				}
				
			    public BigDecimal vbthstsleutelgeldigvolgnummer;

				public BigDecimal getVbthstsleutelgeldigvolgnummer () {
					return this.vbthstsleutelgeldigvolgnummer;
				}
				
			    public String vbthstaanduidingverblijfstitelcode;

				public String getVbthstaanduidingverblijfstitelcode () {
					return this.vbthstaanduidingverblijfstitelcode;
				}
				
			    public String vbthstverblijfstitelvervallen;

				public String getVbthstverblijfstitelvervallen () {
					return this.vbthstverblijfstitelvervallen;
				}
				
			    public String vbthstaanduidingverblijfstitelomschrijving;

				public String getVbthstaanduidingverblijfstitelomschrijving () {
					return this.vbthstaanduidingverblijfstitelomschrijving;
				}
				
			    public java.util.Date vbthstdatumeindeverblijfstitel;

				public java.util.Date getVbthstdatumeindeverblijfstitel () {
					return this.vbthstdatumeindeverblijfstitel;
				}
				
			    public String vbthstdatumeindeverblijfstitelindicator;

				public String getVbthstdatumeindeverblijfstitelindicator () {
					return this.vbthstdatumeindeverblijfstitelindicator;
				}
				
			    public java.util.Date vbthstingangsdatumverblijfstitel;

				public java.util.Date getVbthstingangsdatumverblijfstitel () {
					return this.vbthstingangsdatumverblijfstitel;
				}
				
			    public String vbthstingangsdatumverblijfstitelindicator;

				public String getVbthstingangsdatumverblijfstitelindicator () {
					return this.vbthstingangsdatumverblijfstitelindicator;
				}
				
			    public BigDecimal vbthstaanduidinggegevensonderzoek;

				public BigDecimal getVbthstaanduidinggegevensonderzoek () {
					return this.vbthstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vbthstdatumingangonderzoek;

				public java.util.Date getVbthstdatumingangonderzoek () {
					return this.vbthstdatumingangonderzoek;
				}
				
			    public String vbthstdatumingangonderzoekindicator;

				public String getVbthstdatumingangonderzoekindicator () {
					return this.vbthstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date vbthstdatumeindeonderzoek;

				public java.util.Date getVbthstdatumeindeonderzoek () {
					return this.vbthstdatumeindeonderzoek;
				}
				
			    public String vbthstdatumeindeonderzoekindicator;

				public String getVbthstdatumeindeonderzoekindicator () {
					return this.vbthstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vbthstingangsdatumgeldigheid;

				public java.util.Date getVbthstingangsdatumgeldigheid () {
					return this.vbthstingangsdatumgeldigheid;
				}
				
			    public String vbthstingangsdatumgeldigheidindicator;

				public String getVbthstingangsdatumgeldigheidindicator () {
					return this.vbthstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vbthstdatumvanopneming;

				public java.util.Date getVbthstdatumvanopneming () {
					return this.vbthstdatumvanopneming;
				}
				
			    public String vbthstdatumvanopnemingindicator;

				public String getVbthstdatumvanopnemingindicator () {
					return this.vbthstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.vbthstsleutelgeldigdatum == null) ? 0 : this.vbthstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.vbthstsleutelgeldigvolgnummer == null) ? 0 : this.vbthstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_verblijfstitel_historie_keyStruct other = (ldf_anr_verblijfstitel_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.vbthstsleutelgeldigdatum == null) {
							if (other.vbthstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.vbthstsleutelgeldigdatum.equals(other.vbthstsleutelgeldigdatum))
						
							return false;
					
						if (this.vbthstsleutelgeldigvolgnummer == null) {
							if (other.vbthstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.vbthstsleutelgeldigvolgnummer.equals(other.vbthstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_verblijfstitel_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.vbthstsleutelgeldigdatum = this.vbthstsleutelgeldigdatum;
	            other.vbthstsleutelgeldigvolgnummer = this.vbthstsleutelgeldigvolgnummer;
	            other.vbthstaanduidingverblijfstitelcode = this.vbthstaanduidingverblijfstitelcode;
	            other.vbthstverblijfstitelvervallen = this.vbthstverblijfstitelvervallen;
	            other.vbthstaanduidingverblijfstitelomschrijving = this.vbthstaanduidingverblijfstitelomschrijving;
	            other.vbthstdatumeindeverblijfstitel = this.vbthstdatumeindeverblijfstitel;
	            other.vbthstdatumeindeverblijfstitelindicator = this.vbthstdatumeindeverblijfstitelindicator;
	            other.vbthstingangsdatumverblijfstitel = this.vbthstingangsdatumverblijfstitel;
	            other.vbthstingangsdatumverblijfstitelindicator = this.vbthstingangsdatumverblijfstitelindicator;
	            other.vbthstaanduidinggegevensonderzoek = this.vbthstaanduidinggegevensonderzoek;
	            other.vbthstdatumingangonderzoek = this.vbthstdatumingangonderzoek;
	            other.vbthstdatumingangonderzoekindicator = this.vbthstdatumingangonderzoekindicator;
	            other.vbthstdatumeindeonderzoek = this.vbthstdatumeindeonderzoek;
	            other.vbthstdatumeindeonderzoekindicator = this.vbthstdatumeindeonderzoekindicator;
	            other.vbthstingangsdatumgeldigheid = this.vbthstingangsdatumgeldigheid;
	            other.vbthstingangsdatumgeldigheidindicator = this.vbthstingangsdatumgeldigheidindicator;
	            other.vbthstdatumvanopneming = this.vbthstdatumvanopneming;
	            other.vbthstdatumvanopnemingindicator = this.vbthstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_verblijfstitel_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.vbthstsleutelgeldigdatum = this.vbthstsleutelgeldigdatum;
	            	other.vbthstsleutelgeldigvolgnummer = this.vbthstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.vbthstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.vbthstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.vbthstaanduidingverblijfstitelcode = readString(dis);
					
					this.vbthstverblijfstitelvervallen = readString(dis);
					
					this.vbthstaanduidingverblijfstitelomschrijving = readString(dis);
					
					this.vbthstdatumeindeverblijfstitel = readDate(dis);
					
					this.vbthstdatumeindeverblijfstitelindicator = readString(dis);
					
					this.vbthstingangsdatumverblijfstitel = readDate(dis);
					
					this.vbthstingangsdatumverblijfstitelindicator = readString(dis);
					
						this.vbthstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vbthstdatumingangonderzoek = readDate(dis);
					
					this.vbthstdatumingangonderzoekindicator = readString(dis);
					
					this.vbthstdatumeindeonderzoek = readDate(dis);
					
					this.vbthstdatumeindeonderzoekindicator = readString(dis);
					
					this.vbthstingangsdatumgeldigheid = readDate(dis);
					
					this.vbthstingangsdatumgeldigheidindicator = readString(dis);
					
					this.vbthstdatumvanopneming = readDate(dis);
					
					this.vbthstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vbthstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vbthstsleutelgeldigvolgnummer);
					
					// String
				
						writeString(this.vbthstaanduidingverblijfstitelcode,dos);
					
					// String
				
						writeString(this.vbthstverblijfstitelvervallen,dos);
					
					// String
				
						writeString(this.vbthstaanduidingverblijfstitelomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbthstdatumeindeverblijfstitel,dos);
					
					// String
				
						writeString(this.vbthstdatumeindeverblijfstitelindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbthstingangsdatumverblijfstitel,dos);
					
					// String
				
						writeString(this.vbthstingangsdatumverblijfstitelindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vbthstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vbthstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vbthstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbthstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vbthstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbthstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vbthstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbthstdatumvanopneming,dos);
					
					// String
				
						writeString(this.vbthstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",vbthstsleutelgeldigdatum="+String.valueOf(vbthstsleutelgeldigdatum));
		sb.append(",vbthstsleutelgeldigvolgnummer="+String.valueOf(vbthstsleutelgeldigvolgnummer));
		sb.append(",vbthstaanduidingverblijfstitelcode="+vbthstaanduidingverblijfstitelcode);
		sb.append(",vbthstverblijfstitelvervallen="+vbthstverblijfstitelvervallen);
		sb.append(",vbthstaanduidingverblijfstitelomschrijving="+vbthstaanduidingverblijfstitelomschrijving);
		sb.append(",vbthstdatumeindeverblijfstitel="+String.valueOf(vbthstdatumeindeverblijfstitel));
		sb.append(",vbthstdatumeindeverblijfstitelindicator="+vbthstdatumeindeverblijfstitelindicator);
		sb.append(",vbthstingangsdatumverblijfstitel="+String.valueOf(vbthstingangsdatumverblijfstitel));
		sb.append(",vbthstingangsdatumverblijfstitelindicator="+vbthstingangsdatumverblijfstitelindicator);
		sb.append(",vbthstaanduidinggegevensonderzoek="+String.valueOf(vbthstaanduidinggegevensonderzoek));
		sb.append(",vbthstdatumingangonderzoek="+String.valueOf(vbthstdatumingangonderzoek));
		sb.append(",vbthstdatumingangonderzoekindicator="+vbthstdatumingangonderzoekindicator);
		sb.append(",vbthstdatumeindeonderzoek="+String.valueOf(vbthstdatumeindeonderzoek));
		sb.append(",vbthstdatumeindeonderzoekindicator="+vbthstdatumeindeonderzoekindicator);
		sb.append(",vbthstingangsdatumgeldigheid="+String.valueOf(vbthstingangsdatumgeldigheid));
		sb.append(",vbthstingangsdatumgeldigheidindicator="+vbthstingangsdatumgeldigheidindicator);
		sb.append(",vbthstdatumvanopneming="+String.valueOf(vbthstdatumvanopneming));
		sb.append(",vbthstdatumvanopnemingindicator="+vbthstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_verblijfstitel_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.vbthstsleutelgeldigdatum, other.vbthstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.vbthstsleutelgeldigvolgnummer, other.vbthstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_verblijfstitel_historieStruct implements routines.system.IPersistableRow<ldf_anr_verblijfstitel_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_verblijfstitel_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_verblijfstitel_historieStruct ldf_anr_verblijfstitel_historie = new ldf_anr_verblijfstitel_historieStruct();
ldf_anr_verblijfstitel_historie_keyStruct ldf_anr_verblijfstitel_historie_key = new ldf_anr_verblijfstitel_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_13", false);
		start_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_verblijfstitel_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_13 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_13().limitLog4jByte();





String dbschema_tPostgresqlOutput_13 = null;
	dbschema_tPostgresqlOutput_13 = "ldf";
	

String tableName_tPostgresqlOutput_13 = null;
if(dbschema_tPostgresqlOutput_13 == null || dbschema_tPostgresqlOutput_13.trim().length() == 0) {
	tableName_tPostgresqlOutput_13 = "ibz_cip_verblijfstitel_historie";
} else {
	tableName_tPostgresqlOutput_13 = dbschema_tPostgresqlOutput_13 + "\".\"" + "ibz_cip_verblijfstitel_historie";
}

        int deleteKeyCount_tPostgresqlOutput_13 = 1;
        if(deleteKeyCount_tPostgresqlOutput_13 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_13 = 0;
int nb_line_update_tPostgresqlOutput_13 = 0;
int nb_line_inserted_tPostgresqlOutput_13 = 0;
int nb_line_deleted_tPostgresqlOutput_13 = 0;
int nb_line_rejected_tPostgresqlOutput_13 = 0;

int deletedCount_tPostgresqlOutput_13=0;
int updatedCount_tPostgresqlOutput_13=0;
int insertedCount_tPostgresqlOutput_13=0;
int rejectedCount_tPostgresqlOutput_13=0;

boolean whetherReject_tPostgresqlOutput_13 = false;

java.sql.Connection conn_tPostgresqlOutput_13 = null;
String dbUser_tPostgresqlOutput_13 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_13 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_13 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_13 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_13 = decryptedPassword_tPostgresqlOutput_13;

    conn_tPostgresqlOutput_13 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_13,dbUser_tPostgresqlOutput_13,dbPwd_tPostgresqlOutput_13);
	
	resourceMap.put("conn_tPostgresqlOutput_13", conn_tPostgresqlOutput_13);
        conn_tPostgresqlOutput_13.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_13 = 1000;
        int commitCounter_tPostgresqlOutput_13 = 0;


   int batchSize_tPostgresqlOutput_13 = 10000;
   int batchSizeCounter_tPostgresqlOutput_13=0;

int count_tPostgresqlOutput_13=0;
	    String delete_tPostgresqlOutput_13 = "DELETE FROM \"" + tableName_tPostgresqlOutput_13 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13.prepareStatement(delete_tPostgresqlOutput_13);
	    

 



/**
 * [tPostgresqlOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_verblijfstitel_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_15 = 0;
		
    	class BytesLimit65535_tMap_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_15().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_verblijfstitel_historie_keyStruct ldf_anr_verblijfstitel_historie_key_tmp = new ldf_anr_verblijfstitel_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_13", false);
		start_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_13";

	
		int tos_count_tPostgresqlInput_13 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_13().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_13 = 0;
		    java.sql.Connection conn_tPostgresqlInput_13 = null;
				String driverClass_tPostgresqlInput_13 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_13);
			   	String dbUser_tPostgresqlInput_13 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_13 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_13 = decryptedPassword_tPostgresqlInput_13;
		        
				
			String url_tPostgresqlInput_13 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_13 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_13,dbUser_tPostgresqlInput_13,dbPwd_tPostgresqlInput_13);
		        
				conn_tPostgresqlInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_13 = conn_tPostgresqlInput_13.createStatement();

		    String dbquery_tPostgresqlInput_13 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_13_QUERY",dbquery_tPostgresqlInput_13);

		    java.sql.ResultSet rs_tPostgresqlInput_13 = null;
		try{
		    rs_tPostgresqlInput_13 = stmt_tPostgresqlInput_13.executeQuery(dbquery_tPostgresqlInput_13);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_13 = rs_tPostgresqlInput_13.getMetaData();
		    int colQtyInRs_tPostgresqlInput_13 = rsmd_tPostgresqlInput_13.getColumnCount();

		    String tmpContent_tPostgresqlInput_13 = null;
		    
		    
		    while (rs_tPostgresqlInput_13.next()) {
		        nb_line_tPostgresqlInput_13++;
		        
							if(colQtyInRs_tPostgresqlInput_13 < 1) {
								ldf_anr_verblijfstitel_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_13.getObject(1) != null) {
                ldf_anr_verblijfstitel_historie.prsanummer = rs_tPostgresqlInput_13.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_13 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_13 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 


	tos_count_tPostgresqlInput_13++;

/**
 * [tPostgresqlInput_13 main ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

			//ldf_anr_verblijfstitel_historie
			//ldf_anr_verblijfstitel_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_verblijfstitel_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

ldf_anr_verblijfstitel_historie_key = null;


// # Output table : 'ldf_anr_verblijfstitel_historie_key'
ldf_anr_verblijfstitel_historie_key_tmp.prsanummer = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstsleutelgeldigdatum = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstsleutelgeldigvolgnummer = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstaanduidingverblijfstitelcode = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstverblijfstitelvervallen = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstaanduidingverblijfstitelomschrijving = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumeindeverblijfstitel = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumeindeverblijfstitelindicator = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstingangsdatumverblijfstitel = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstingangsdatumverblijfstitelindicator = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstaanduidinggegevensonderzoek = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumingangonderzoek = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumingangonderzoekindicator = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumeindeonderzoek = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumeindeonderzoekindicator = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstingangsdatumgeldigheid = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstingangsdatumgeldigheidindicator = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumvanopneming = null;
ldf_anr_verblijfstitel_historie_key_tmp.vbthstdatumvanopnemingindicator = null;
ldf_anr_verblijfstitel_historie_key = ldf_anr_verblijfstitel_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
// Start of branch "ldf_anr_verblijfstitel_historie_key"
if(ldf_anr_verblijfstitel_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_13 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_13";

	

			//ldf_anr_verblijfstitel_historie_key
			//ldf_anr_verblijfstitel_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_verblijfstitel_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_13 = false;
					
                    pstmt_tPostgresqlOutput_13.setBigDecimal(1, ldf_anr_verblijfstitel_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_13.addBatch();
			nb_line_tPostgresqlOutput_13++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_13++;
    		
            if(!whetherReject_tPostgresqlOutput_13) {
            }
    			if ((batchSize_tPostgresqlOutput_13 > 0) && (batchSize_tPostgresqlOutput_13 <= batchSizeCounter_tPostgresqlOutput_13)) {
                try {
						int countSum_tPostgresqlOutput_13 = 0;
						    
						for(int countEach_tPostgresqlOutput_13: pstmt_tPostgresqlOutput_13.executeBatch()) {
							countSum_tPostgresqlOutput_13 += (countEach_tPostgresqlOutput_13 < 0 ? 0 : countEach_tPostgresqlOutput_13);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_13 += countSum_tPostgresqlOutput_13;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_13 = 0;
					for(int countEach_tPostgresqlOutput_13: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_13 += (countEach_tPostgresqlOutput_13 < 0 ? 0 : countEach_tPostgresqlOutput_13);
					}
					
			    	    deletedCount_tPostgresqlOutput_13 += countSum_tPostgresqlOutput_13;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_13++;
                if(commitEvery_tPostgresqlOutput_13 <= commitCounter_tPostgresqlOutput_13) {
                if ((batchSize_tPostgresqlOutput_13 > 0) && (batchSizeCounter_tPostgresqlOutput_13 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_13 = 0;
                		    
						for(int countEach_tPostgresqlOutput_13: pstmt_tPostgresqlOutput_13.executeBatch()) {
							countSum_tPostgresqlOutput_13 += (countEach_tPostgresqlOutput_13 < 0 ? 0 : countEach_tPostgresqlOutput_13);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_13 += countSum_tPostgresqlOutput_13;
            	    	
                batchSizeCounter_tPostgresqlOutput_13 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_13 = 0;
						for(int countEach_tPostgresqlOutput_13: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_13 += (countEach_tPostgresqlOutput_13 < 0 ? 0 : countEach_tPostgresqlOutput_13);
						}
						
				    	    deletedCount_tPostgresqlOutput_13 += countSum_tPostgresqlOutput_13;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_13.commit();
                	
                	commitCounter_tPostgresqlOutput_13=0;
                }

 


	tos_count_tPostgresqlOutput_13++;

/**
 * [tPostgresqlOutput_13 main ] stop
 */

} // End of branch "ldf_anr_verblijfstitel_historie_key"







	
	/**
	 * [tPostgresqlInput_13 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

	}
}finally{
	stmt_tPostgresqlInput_13.close();

	if(conn_tPostgresqlInput_13 != null && !conn_tPostgresqlInput_13.isClosed()) {
		
			conn_tPostgresqlInput_13.commit();
			
		
			conn_tPostgresqlInput_13.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_13_NB_LINE",nb_line_tPostgresqlInput_13);
 

ok_Hash.put("tPostgresqlInput_13", true);
end_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());




/**
 * [tPostgresqlInput_13 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_verblijfstitel_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_13 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_13";

	



	    try {
				int countSum_tPostgresqlOutput_13 = 0;
				if (pstmt_tPostgresqlOutput_13 != null && batchSizeCounter_tPostgresqlOutput_13 > 0) {
						
					for(int countEach_tPostgresqlOutput_13: pstmt_tPostgresqlOutput_13.executeBatch()) {
						countSum_tPostgresqlOutput_13 += (countEach_tPostgresqlOutput_13 < 0 ? 0 : countEach_tPostgresqlOutput_13);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_13 += countSum_tPostgresqlOutput_13;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_13 = 0;
			for(int countEach_tPostgresqlOutput_13: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_13 += (countEach_tPostgresqlOutput_13 < 0 ? 0 : countEach_tPostgresqlOutput_13);
			}
			
	    	    deletedCount_tPostgresqlOutput_13 += countSum_tPostgresqlOutput_13;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_13 != null) {
            pstmt_tPostgresqlOutput_13.close();
        }

			
			conn_tPostgresqlOutput_13.commit();
			
		
    	conn_tPostgresqlOutput_13 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_13", true);
    	

	nb_line_deleted_tPostgresqlOutput_13=nb_line_deleted_tPostgresqlOutput_13+ deletedCount_tPostgresqlOutput_13;
	nb_line_update_tPostgresqlOutput_13=nb_line_update_tPostgresqlOutput_13 + updatedCount_tPostgresqlOutput_13;
	nb_line_inserted_tPostgresqlOutput_13=nb_line_inserted_tPostgresqlOutput_13 + insertedCount_tPostgresqlOutput_13;
	nb_line_rejected_tPostgresqlOutput_13=nb_line_rejected_tPostgresqlOutput_13 + rejectedCount_tPostgresqlOutput_13;
	
        globalMap.put("tPostgresqlOutput_13_NB_LINE",nb_line_tPostgresqlOutput_13);
        globalMap.put("tPostgresqlOutput_13_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_13);
        globalMap.put("tPostgresqlOutput_13_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_13);
        globalMap.put("tPostgresqlOutput_13_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_13);
        globalMap.put("tPostgresqlOutput_13_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_13);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_verblijfstitel_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_13", true);
end_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tPostgresqlInput_15Process(globalMap);



/**
 * [tPostgresqlOutput_13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_13 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 



/**
 * [tPostgresqlInput_13 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_13";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_13")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_13")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_13")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_13) {
					String errorMessage_tPostgresqlOutput_13 = "failed to close the connection in tPostgresqlOutput_13 :" + sqlEx_tPostgresqlOutput_13.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_13);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_anr_gezagsverhouding_historie_keyStruct implements routines.system.IPersistableRow<ldf_anr_gezagsverhouding_historie_keyStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal gzvhstsleutelgeldigdatum;

				public BigDecimal getGzvhstsleutelgeldigdatum () {
					return this.gzvhstsleutelgeldigdatum;
				}
				
			    public BigDecimal gzvhstsleutelgeldigvolgnummer;

				public BigDecimal getGzvhstsleutelgeldigvolgnummer () {
					return this.gzvhstsleutelgeldigvolgnummer;
				}
				
			    public String gzvhstindicatiegezagminderjarige;

				public String getGzvhstindicatiegezagminderjarige () {
					return this.gzvhstindicatiegezagminderjarige;
				}
				
			    public BigDecimal gzvhstindicatiecurateleregister;

				public BigDecimal getGzvhstindicatiecurateleregister () {
					return this.gzvhstindicatiecurateleregister;
				}
				
			    public java.util.Date gzvhstingangsdatumgeldigheid;

				public java.util.Date getGzvhstingangsdatumgeldigheid () {
					return this.gzvhstingangsdatumgeldigheid;
				}
				
			    public String gzvhstingangsdatumgeldigheidindicator;

				public String getGzvhstingangsdatumgeldigheidindicator () {
					return this.gzvhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date gzvhstdatumvanopneming;

				public java.util.Date getGzvhstdatumvanopneming () {
					return this.gzvhstdatumvanopneming;
				}
				
			    public String gzvhstdatumvanopnemingindicator;

				public String getGzvhstdatumvanopnemingindicator () {
					return this.gzvhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.gzvhstsleutelgeldigdatum == null) ? 0 : this.gzvhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.gzvhstsleutelgeldigvolgnummer == null) ? 0 : this.gzvhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_anr_gezagsverhouding_historie_keyStruct other = (ldf_anr_gezagsverhouding_historie_keyStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.gzvhstsleutelgeldigdatum == null) {
							if (other.gzvhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.gzvhstsleutelgeldigdatum.equals(other.gzvhstsleutelgeldigdatum))
						
							return false;
					
						if (this.gzvhstsleutelgeldigvolgnummer == null) {
							if (other.gzvhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.gzvhstsleutelgeldigvolgnummer.equals(other.gzvhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_anr_gezagsverhouding_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            other.gzvhstsleutelgeldigdatum = this.gzvhstsleutelgeldigdatum;
	            other.gzvhstsleutelgeldigvolgnummer = this.gzvhstsleutelgeldigvolgnummer;
	            other.gzvhstindicatiegezagminderjarige = this.gzvhstindicatiegezagminderjarige;
	            other.gzvhstindicatiecurateleregister = this.gzvhstindicatiecurateleregister;
	            other.gzvhstingangsdatumgeldigheid = this.gzvhstingangsdatumgeldigheid;
	            other.gzvhstingangsdatumgeldigheidindicator = this.gzvhstingangsdatumgeldigheidindicator;
	            other.gzvhstdatumvanopneming = this.gzvhstdatumvanopneming;
	            other.gzvhstdatumvanopnemingindicator = this.gzvhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_anr_gezagsverhouding_historie_keyStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.gzvhstsleutelgeldigdatum = this.gzvhstsleutelgeldigdatum;
	            	other.gzvhstsleutelgeldigvolgnummer = this.gzvhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.gzvhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.gzvhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.gzvhstindicatiegezagminderjarige = readString(dis);
					
						this.gzvhstindicatiecurateleregister = (BigDecimal) dis.readObject();
					
					this.gzvhstingangsdatumgeldigheid = readDate(dis);
					
					this.gzvhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.gzvhstdatumvanopneming = readDate(dis);
					
					this.gzvhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gzvhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gzvhstsleutelgeldigvolgnummer);
					
					// String
				
						writeString(this.gzvhstindicatiegezagminderjarige,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gzvhstindicatiecurateleregister);
					
					// java.util.Date
				
						writeDate(this.gzvhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.gzvhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.gzvhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",gzvhstsleutelgeldigdatum="+String.valueOf(gzvhstsleutelgeldigdatum));
		sb.append(",gzvhstsleutelgeldigvolgnummer="+String.valueOf(gzvhstsleutelgeldigvolgnummer));
		sb.append(",gzvhstindicatiegezagminderjarige="+gzvhstindicatiegezagminderjarige);
		sb.append(",gzvhstindicatiecurateleregister="+String.valueOf(gzvhstindicatiecurateleregister));
		sb.append(",gzvhstingangsdatumgeldigheid="+String.valueOf(gzvhstingangsdatumgeldigheid));
		sb.append(",gzvhstingangsdatumgeldigheidindicator="+gzvhstingangsdatumgeldigheidindicator);
		sb.append(",gzvhstdatumvanopneming="+String.valueOf(gzvhstdatumvanopneming));
		sb.append(",gzvhstdatumvanopnemingindicator="+gzvhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_gezagsverhouding_historie_keyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.gzvhstsleutelgeldigdatum, other.gzvhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.gzvhstsleutelgeldigvolgnummer, other.gzvhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ldf_anr_gezagsverhouding_historieStruct implements routines.system.IPersistableRow<ldf_anr_gezagsverhouding_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_del_ldf_anummers = new byte[0];

	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_del_ldf_anummers) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_anr_gezagsverhouding_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_anr_gezagsverhouding_historieStruct ldf_anr_gezagsverhouding_historie = new ldf_anr_gezagsverhouding_historieStruct();
ldf_anr_gezagsverhouding_historie_keyStruct ldf_anr_gezagsverhouding_historie_key = new ldf_anr_gezagsverhouding_historie_keyStruct();





	
	/**
	 * [tPostgresqlOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_15", false);
		start_Hash.put("tPostgresqlOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_gezagsverhouding_historie_key" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_15 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_15().limitLog4jByte();





String dbschema_tPostgresqlOutput_15 = null;
	dbschema_tPostgresqlOutput_15 = "ldf";
	

String tableName_tPostgresqlOutput_15 = null;
if(dbschema_tPostgresqlOutput_15 == null || dbschema_tPostgresqlOutput_15.trim().length() == 0) {
	tableName_tPostgresqlOutput_15 = "ibz_cip_gezagsverhouding_historie";
} else {
	tableName_tPostgresqlOutput_15 = dbschema_tPostgresqlOutput_15 + "\".\"" + "ibz_cip_gezagsverhouding_historie";
}

        int deleteKeyCount_tPostgresqlOutput_15 = 1;
        if(deleteKeyCount_tPostgresqlOutput_15 < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_15 = 0;
int nb_line_update_tPostgresqlOutput_15 = 0;
int nb_line_inserted_tPostgresqlOutput_15 = 0;
int nb_line_deleted_tPostgresqlOutput_15 = 0;
int nb_line_rejected_tPostgresqlOutput_15 = 0;

int deletedCount_tPostgresqlOutput_15=0;
int updatedCount_tPostgresqlOutput_15=0;
int insertedCount_tPostgresqlOutput_15=0;
int rejectedCount_tPostgresqlOutput_15=0;

boolean whetherReject_tPostgresqlOutput_15 = false;

java.sql.Connection conn_tPostgresqlOutput_15 = null;
String dbUser_tPostgresqlOutput_15 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_15 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_15 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_15 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_15 = decryptedPassword_tPostgresqlOutput_15;

    conn_tPostgresqlOutput_15 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_15,dbUser_tPostgresqlOutput_15,dbPwd_tPostgresqlOutput_15);
	
	resourceMap.put("conn_tPostgresqlOutput_15", conn_tPostgresqlOutput_15);
        conn_tPostgresqlOutput_15.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_15 = 1000;
        int commitCounter_tPostgresqlOutput_15 = 0;


   int batchSize_tPostgresqlOutput_15 = 10000;
   int batchSizeCounter_tPostgresqlOutput_15=0;

int count_tPostgresqlOutput_15=0;
	    String delete_tPostgresqlOutput_15 = "DELETE FROM \"" + tableName_tPostgresqlOutput_15 + "\" WHERE \"prsanummer\" = ?";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_15 = conn_tPostgresqlOutput_15.prepareStatement(delete_tPostgresqlOutput_15);
	    

 



/**
 * [tPostgresqlOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_anr_gezagsverhouding_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_16 = 0;
		
    	class BytesLimit65535_tMap_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_16().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_anr_gezagsverhouding_historie_keyStruct ldf_anr_gezagsverhouding_historie_key_tmp = new ldf_anr_gezagsverhouding_historie_keyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_15", false);
		start_Hash.put("tPostgresqlInput_15", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_15";

	
		int tos_count_tPostgresqlInput_15 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_15().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_15 = 0;
		    java.sql.Connection conn_tPostgresqlInput_15 = null;
				String driverClass_tPostgresqlInput_15 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_15);
			   	String dbUser_tPostgresqlInput_15 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_15 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_15 = decryptedPassword_tPostgresqlInput_15;
		        
				
			String url_tPostgresqlInput_15 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_15 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_15,dbUser_tPostgresqlInput_15,dbPwd_tPostgresqlInput_15);
		        
				conn_tPostgresqlInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_15 = conn_tPostgresqlInput_15.createStatement();

		    String dbquery_tPostgresqlInput_15 = "select\nprsanummer\nfrom ibz_cip_anummers";
			

                       globalMap.put("tPostgresqlInput_15_QUERY",dbquery_tPostgresqlInput_15);

		    java.sql.ResultSet rs_tPostgresqlInput_15 = null;
		try{
		    rs_tPostgresqlInput_15 = stmt_tPostgresqlInput_15.executeQuery(dbquery_tPostgresqlInput_15);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_15 = rs_tPostgresqlInput_15.getMetaData();
		    int colQtyInRs_tPostgresqlInput_15 = rsmd_tPostgresqlInput_15.getColumnCount();

		    String tmpContent_tPostgresqlInput_15 = null;
		    
		    
		    while (rs_tPostgresqlInput_15.next()) {
		        nb_line_tPostgresqlInput_15++;
		        
							if(colQtyInRs_tPostgresqlInput_15 < 1) {
								ldf_anr_gezagsverhouding_historie.prsanummer = null;
							} else {
		                          
            if(rs_tPostgresqlInput_15.getObject(1) != null) {
                ldf_anr_gezagsverhouding_historie.prsanummer = rs_tPostgresqlInput_15.getBigDecimal(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tPostgresqlInput_15 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_15 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_15";

	

 


	tos_count_tPostgresqlInput_15++;

/**
 * [tPostgresqlInput_15 main ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

			//ldf_anr_gezagsverhouding_historie
			//ldf_anr_gezagsverhouding_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_gezagsverhouding_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

ldf_anr_gezagsverhouding_historie_key = null;


// # Output table : 'ldf_anr_gezagsverhouding_historie_key'
ldf_anr_gezagsverhouding_historie_key_tmp.prsanummer = ldf_anr_gezagsverhouding_historie.prsanummer ;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstsleutelgeldigdatum = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstsleutelgeldigvolgnummer = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstindicatiegezagminderjarige = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstindicatiecurateleregister = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstingangsdatumgeldigheid = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstingangsdatumgeldigheidindicator = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstdatumvanopneming = null;
ldf_anr_gezagsverhouding_historie_key_tmp.gzvhstdatumvanopnemingindicator = null;
ldf_anr_gezagsverhouding_historie_key = ldf_anr_gezagsverhouding_historie_key_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
// Start of branch "ldf_anr_gezagsverhouding_historie_key"
if(ldf_anr_gezagsverhouding_historie_key != null) { 



	
	/**
	 * [tPostgresqlOutput_15 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_15";

	

			//ldf_anr_gezagsverhouding_historie_key
			//ldf_anr_gezagsverhouding_historie_key


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_anr_gezagsverhouding_historie_key"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_15 = false;
					
                    pstmt_tPostgresqlOutput_15.setBigDecimal(1, ldf_anr_gezagsverhouding_historie_key.prsanummer);

    		pstmt_tPostgresqlOutput_15.addBatch();
			nb_line_tPostgresqlOutput_15++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_15++;
    		
    			if ((batchSize_tPostgresqlOutput_15 > 0) && (batchSize_tPostgresqlOutput_15 <= batchSizeCounter_tPostgresqlOutput_15)) {
                try {
						int countSum_tPostgresqlOutput_15 = 0;
						    
						for(int countEach_tPostgresqlOutput_15: pstmt_tPostgresqlOutput_15.executeBatch()) {
							countSum_tPostgresqlOutput_15 += (countEach_tPostgresqlOutput_15 < 0 ? 0 : countEach_tPostgresqlOutput_15);
						}
				    	
				    	    deletedCount_tPostgresqlOutput_15 += countSum_tPostgresqlOutput_15;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_15 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_15 = 0;
					for(int countEach_tPostgresqlOutput_15: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_15 += (countEach_tPostgresqlOutput_15 < 0 ? 0 : countEach_tPostgresqlOutput_15);
					}
					
			    	    deletedCount_tPostgresqlOutput_15 += countSum_tPostgresqlOutput_15;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_15++;
                if(commitEvery_tPostgresqlOutput_15 <= commitCounter_tPostgresqlOutput_15) {
                if ((batchSize_tPostgresqlOutput_15 > 0) && (batchSizeCounter_tPostgresqlOutput_15 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_15 = 0;
                		    
						for(int countEach_tPostgresqlOutput_15: pstmt_tPostgresqlOutput_15.executeBatch()) {
							countSum_tPostgresqlOutput_15 += (countEach_tPostgresqlOutput_15 < 0 ? 0 : countEach_tPostgresqlOutput_15);
						}
            	    	
            	    	    deletedCount_tPostgresqlOutput_15 += countSum_tPostgresqlOutput_15;
            	    	
                batchSizeCounter_tPostgresqlOutput_15 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_15 = 0;
						for(int countEach_tPostgresqlOutput_15: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_15 += (countEach_tPostgresqlOutput_15 < 0 ? 0 : countEach_tPostgresqlOutput_15);
						}
						
				    	    deletedCount_tPostgresqlOutput_15 += countSum_tPostgresqlOutput_15;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_15.commit();
                	
                	commitCounter_tPostgresqlOutput_15=0;
                }

 


	tos_count_tPostgresqlOutput_15++;

/**
 * [tPostgresqlOutput_15 main ] stop
 */

} // End of branch "ldf_anr_gezagsverhouding_historie_key"







	
	/**
	 * [tPostgresqlInput_15 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_15";

	

	}
}finally{
	stmt_tPostgresqlInput_15.close();

	if(conn_tPostgresqlInput_15 != null && !conn_tPostgresqlInput_15.isClosed()) {
		
			conn_tPostgresqlInput_15.commit();
			
		
			conn_tPostgresqlInput_15.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_15_NB_LINE",nb_line_tPostgresqlInput_15);
 

ok_Hash.put("tPostgresqlInput_15", true);
end_Hash.put("tPostgresqlInput_15", System.currentTimeMillis());




/**
 * [tPostgresqlInput_15 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_gezagsverhouding_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_15 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_15";

	



	    try {
				int countSum_tPostgresqlOutput_15 = 0;
				if (pstmt_tPostgresqlOutput_15 != null && batchSizeCounter_tPostgresqlOutput_15 > 0) {
						
					for(int countEach_tPostgresqlOutput_15: pstmt_tPostgresqlOutput_15.executeBatch()) {
						countSum_tPostgresqlOutput_15 += (countEach_tPostgresqlOutput_15 < 0 ? 0 : countEach_tPostgresqlOutput_15);
					}
						
				}
		    	
		    	    deletedCount_tPostgresqlOutput_15 += countSum_tPostgresqlOutput_15;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_15 = 0;
			for(int countEach_tPostgresqlOutput_15: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_15 += (countEach_tPostgresqlOutput_15 < 0 ? 0 : countEach_tPostgresqlOutput_15);
			}
			
	    	    deletedCount_tPostgresqlOutput_15 += countSum_tPostgresqlOutput_15;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_15 != null) {
            pstmt_tPostgresqlOutput_15.close();
        }

			
			conn_tPostgresqlOutput_15.commit();
			
		
    	conn_tPostgresqlOutput_15 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_15", true);
    	

	nb_line_deleted_tPostgresqlOutput_15=nb_line_deleted_tPostgresqlOutput_15+ deletedCount_tPostgresqlOutput_15;
	nb_line_update_tPostgresqlOutput_15=nb_line_update_tPostgresqlOutput_15 + updatedCount_tPostgresqlOutput_15;
	nb_line_inserted_tPostgresqlOutput_15=nb_line_inserted_tPostgresqlOutput_15 + insertedCount_tPostgresqlOutput_15;
	nb_line_rejected_tPostgresqlOutput_15=nb_line_rejected_tPostgresqlOutput_15 + rejectedCount_tPostgresqlOutput_15;
	
        globalMap.put("tPostgresqlOutput_15_NB_LINE",nb_line_tPostgresqlOutput_15);
        globalMap.put("tPostgresqlOutput_15_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_15);
        globalMap.put("tPostgresqlOutput_15_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_15);
        globalMap.put("tPostgresqlOutput_15_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_15);
        globalMap.put("tPostgresqlOutput_15_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_15);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_anr_gezagsverhouding_historie_key"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_15", true);
end_Hash.put("tPostgresqlOutput_15", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_15 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_15 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_15";

	

 



/**
 * [tPostgresqlInput_15 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_15";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_15")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_15")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_15")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_15) {
					String errorMessage_tPostgresqlOutput_15 = "failed to close the connection in tPostgresqlOutput_15 :" + sqlEx_tPostgresqlOutput_15.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_15);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_15 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_15_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_del_ldf_anummers ibz_cipers_del_ldf_anummersClass = new ibz_cipers_del_ldf_anummers();

        int exitCode = ibz_cipers_del_ldf_anummersClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_del_ldf_anummers.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_del_ldf_anummers_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_del_ldf_anummers");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     835327 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:55 CET
 ************************************************************************************************/