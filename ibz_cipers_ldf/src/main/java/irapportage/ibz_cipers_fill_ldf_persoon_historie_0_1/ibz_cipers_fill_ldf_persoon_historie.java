// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_persoon_historie_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_persoon_historie Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_persoon_historie implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_persoon_historie";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_persoon_historie.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_persoon_historie.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_persoon_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_persoon_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_persoon_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_persoon_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_persoon_historieStruct implements routines.system.IPersistableRow<ldf_persoon_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal prshstsleutelgeldigdatum;

				public BigDecimal getPrshstsleutelgeldigdatum () {
					return this.prshstsleutelgeldigdatum;
				}
				
			    public BigDecimal prshstsleutelgeldigvolgnummer;

				public BigDecimal getPrshstsleutelgeldigvolgnummer () {
					return this.prshstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal prshstanummer;

				public BigDecimal getPrshstanummer () {
					return this.prshstanummer;
				}
				
			    public BigDecimal prshstburgerservicenummer;

				public BigDecimal getPrshstburgerservicenummer () {
					return this.prshstburgerservicenummer;
				}
				
			    public String prshstvoornamen;

				public String getPrshstvoornamen () {
					return this.prshstvoornamen;
				}
				
			    public String prshstvoorletters;

				public String getPrshstvoorletters () {
					return this.prshstvoorletters;
				}
				
			    public String prshstadellijketitelcode;

				public String getPrshstadellijketitelcode () {
					return this.prshstadellijketitelcode;
				}
				
			    public String prshstadellijketitelomschrijving;

				public String getPrshstadellijketitelomschrijving () {
					return this.prshstadellijketitelomschrijving;
				}
				
			    public String prshstvoorvoegselgeslachtsnaam;

				public String getPrshstvoorvoegselgeslachtsnaam () {
					return this.prshstvoorvoegselgeslachtsnaam;
				}
				
			    public String prshstgeslachtsnaam;

				public String getPrshstgeslachtsnaam () {
					return this.prshstgeslachtsnaam;
				}
				
			    public String prshstgeboortedatumindicator;

				public String getPrshstgeboortedatumindicator () {
					return this.prshstgeboortedatumindicator;
				}
				
			    public java.util.Date prshstgeboortedatum;

				public java.util.Date getPrshstgeboortedatum () {
					return this.prshstgeboortedatum;
				}
				
			    public String prshstgeboorteplaatscode;

				public String getPrshstgeboorteplaatscode () {
					return this.prshstgeboorteplaatscode;
				}
				
			    public String prshstgeboorteplaatsomschrijving;

				public String getPrshstgeboorteplaatsomschrijving () {
					return this.prshstgeboorteplaatsomschrijving;
				}
				
			    public String prshstgeboortelandcode;

				public String getPrshstgeboortelandcode () {
					return this.prshstgeboortelandcode;
				}
				
			    public String prshstgeboortelandomschrijving;

				public String getPrshstgeboortelandomschrijving () {
					return this.prshstgeboortelandomschrijving;
				}
				
			    public String prshstgeslachtsaanduidingcode;

				public String getPrshstgeslachtsaanduidingcode () {
					return this.prshstgeslachtsaanduidingcode;
				}
				
			    public String prshstgeslachtsaanduidingomschrijving;

				public String getPrshstgeslachtsaanduidingomschrijving () {
					return this.prshstgeslachtsaanduidingomschrijving;
				}
				
			    public BigDecimal prshstvoriganummer;

				public BigDecimal getPrshstvoriganummer () {
					return this.prshstvoriganummer;
				}
				
			    public BigDecimal prshstvolgendanummer;

				public BigDecimal getPrshstvolgendanummer () {
					return this.prshstvolgendanummer;
				}
				
			    public String prshstaanduidingnaamgebruik;

				public String getPrshstaanduidingnaamgebruik () {
					return this.prshstaanduidingnaamgebruik;
				}
				
			    public String prshstregistergemeenteaktecode;

				public String getPrshstregistergemeenteaktecode () {
					return this.prshstregistergemeenteaktecode;
				}
				
			    public String prshstregistergemeenteakteomschrijving;

				public String getPrshstregistergemeenteakteomschrijving () {
					return this.prshstregistergemeenteakteomschrijving;
				}
				
			    public String prshstaktenummer;

				public String getPrshstaktenummer () {
					return this.prshstaktenummer;
				}
				
			    public String prshstgemeentedocumentcode;

				public String getPrshstgemeentedocumentcode () {
					return this.prshstgemeentedocumentcode;
				}
				
			    public String prshstgemeentedocumentomschrijving;

				public String getPrshstgemeentedocumentomschrijving () {
					return this.prshstgemeentedocumentomschrijving;
				}
				
			    public java.util.Date prshstdatumdocument;

				public java.util.Date getPrshstdatumdocument () {
					return this.prshstdatumdocument;
				}
				
			    public String prshstdatumdocumentindicator;

				public String getPrshstdatumdocumentindicator () {
					return this.prshstdatumdocumentindicator;
				}
				
			    public String prshstbeschrijvingdocument;

				public String getPrshstbeschrijvingdocument () {
					return this.prshstbeschrijvingdocument;
				}
				
			    public BigDecimal prshstaanduidinggegevensonderzoek;

				public BigDecimal getPrshstaanduidinggegevensonderzoek () {
					return this.prshstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date prshstdatumingangonderzoek;

				public java.util.Date getPrshstdatumingangonderzoek () {
					return this.prshstdatumingangonderzoek;
				}
				
			    public String prshstdatumingangonderzoekindicator;

				public String getPrshstdatumingangonderzoekindicator () {
					return this.prshstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date prshstdatumeindeonderzoek;

				public java.util.Date getPrshstdatumeindeonderzoek () {
					return this.prshstdatumeindeonderzoek;
				}
				
			    public String prshstdatumeindeonderzoekindicator;

				public String getPrshstdatumeindeonderzoekindicator () {
					return this.prshstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date prshstingangsdatumgeldigheid;

				public java.util.Date getPrshstingangsdatumgeldigheid () {
					return this.prshstingangsdatumgeldigheid;
				}
				
			    public String prshstingangsdatumgeldigheidindicator;

				public String getPrshstingangsdatumgeldigheidindicator () {
					return this.prshstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date prshstdatumvanopneming;

				public java.util.Date getPrshstdatumvanopneming () {
					return this.prshstdatumvanopneming;
				}
				
			    public String prshstdatumvanopnemingindicator;

				public String getPrshstdatumvanopnemingindicator () {
					return this.prshstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.prshstsleutelgeldigdatum == null) ? 0 : this.prshstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.prshstsleutelgeldigvolgnummer == null) ? 0 : this.prshstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_persoon_historieStruct other = (ldf_persoon_historieStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.prshstsleutelgeldigdatum == null) {
							if (other.prshstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.prshstsleutelgeldigdatum.equals(other.prshstsleutelgeldigdatum))
						
							return false;
					
						if (this.prshstsleutelgeldigvolgnummer == null) {
							if (other.prshstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.prshstsleutelgeldigvolgnummer.equals(other.prshstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_persoon_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            other.prshstsleutelgeldigdatum = this.prshstsleutelgeldigdatum;
	            other.prshstsleutelgeldigvolgnummer = this.prshstsleutelgeldigvolgnummer;
	            other.prshstanummer = this.prshstanummer;
	            other.prshstburgerservicenummer = this.prshstburgerservicenummer;
	            other.prshstvoornamen = this.prshstvoornamen;
	            other.prshstvoorletters = this.prshstvoorletters;
	            other.prshstadellijketitelcode = this.prshstadellijketitelcode;
	            other.prshstadellijketitelomschrijving = this.prshstadellijketitelomschrijving;
	            other.prshstvoorvoegselgeslachtsnaam = this.prshstvoorvoegselgeslachtsnaam;
	            other.prshstgeslachtsnaam = this.prshstgeslachtsnaam;
	            other.prshstgeboortedatumindicator = this.prshstgeboortedatumindicator;
	            other.prshstgeboortedatum = this.prshstgeboortedatum;
	            other.prshstgeboorteplaatscode = this.prshstgeboorteplaatscode;
	            other.prshstgeboorteplaatsomschrijving = this.prshstgeboorteplaatsomschrijving;
	            other.prshstgeboortelandcode = this.prshstgeboortelandcode;
	            other.prshstgeboortelandomschrijving = this.prshstgeboortelandomschrijving;
	            other.prshstgeslachtsaanduidingcode = this.prshstgeslachtsaanduidingcode;
	            other.prshstgeslachtsaanduidingomschrijving = this.prshstgeslachtsaanduidingomschrijving;
	            other.prshstvoriganummer = this.prshstvoriganummer;
	            other.prshstvolgendanummer = this.prshstvolgendanummer;
	            other.prshstaanduidingnaamgebruik = this.prshstaanduidingnaamgebruik;
	            other.prshstregistergemeenteaktecode = this.prshstregistergemeenteaktecode;
	            other.prshstregistergemeenteakteomschrijving = this.prshstregistergemeenteakteomschrijving;
	            other.prshstaktenummer = this.prshstaktenummer;
	            other.prshstgemeentedocumentcode = this.prshstgemeentedocumentcode;
	            other.prshstgemeentedocumentomschrijving = this.prshstgemeentedocumentomschrijving;
	            other.prshstdatumdocument = this.prshstdatumdocument;
	            other.prshstdatumdocumentindicator = this.prshstdatumdocumentindicator;
	            other.prshstbeschrijvingdocument = this.prshstbeschrijvingdocument;
	            other.prshstaanduidinggegevensonderzoek = this.prshstaanduidinggegevensonderzoek;
	            other.prshstdatumingangonderzoek = this.prshstdatumingangonderzoek;
	            other.prshstdatumingangonderzoekindicator = this.prshstdatumingangonderzoekindicator;
	            other.prshstdatumeindeonderzoek = this.prshstdatumeindeonderzoek;
	            other.prshstdatumeindeonderzoekindicator = this.prshstdatumeindeonderzoekindicator;
	            other.prshstingangsdatumgeldigheid = this.prshstingangsdatumgeldigheid;
	            other.prshstingangsdatumgeldigheidindicator = this.prshstingangsdatumgeldigheidindicator;
	            other.prshstdatumvanopneming = this.prshstdatumvanopneming;
	            other.prshstdatumvanopnemingindicator = this.prshstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_persoon_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.prshstsleutelgeldigdatum = this.prshstsleutelgeldigdatum;
	            	other.prshstsleutelgeldigvolgnummer = this.prshstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.prshstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.prshstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.prshstanummer = (BigDecimal) dis.readObject();
					
						this.prshstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.prshstvoornamen = readString(dis);
					
					this.prshstvoorletters = readString(dis);
					
					this.prshstadellijketitelcode = readString(dis);
					
					this.prshstadellijketitelomschrijving = readString(dis);
					
					this.prshstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.prshstgeslachtsnaam = readString(dis);
					
					this.prshstgeboortedatumindicator = readString(dis);
					
					this.prshstgeboortedatum = readDate(dis);
					
					this.prshstgeboorteplaatscode = readString(dis);
					
					this.prshstgeboorteplaatsomschrijving = readString(dis);
					
					this.prshstgeboortelandcode = readString(dis);
					
					this.prshstgeboortelandomschrijving = readString(dis);
					
					this.prshstgeslachtsaanduidingcode = readString(dis);
					
					this.prshstgeslachtsaanduidingomschrijving = readString(dis);
					
						this.prshstvoriganummer = (BigDecimal) dis.readObject();
					
						this.prshstvolgendanummer = (BigDecimal) dis.readObject();
					
					this.prshstaanduidingnaamgebruik = readString(dis);
					
					this.prshstregistergemeenteaktecode = readString(dis);
					
					this.prshstregistergemeenteakteomschrijving = readString(dis);
					
					this.prshstaktenummer = readString(dis);
					
					this.prshstgemeentedocumentcode = readString(dis);
					
					this.prshstgemeentedocumentomschrijving = readString(dis);
					
					this.prshstdatumdocument = readDate(dis);
					
					this.prshstdatumdocumentindicator = readString(dis);
					
					this.prshstbeschrijvingdocument = readString(dis);
					
						this.prshstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.prshstdatumingangonderzoek = readDate(dis);
					
					this.prshstdatumingangonderzoekindicator = readString(dis);
					
					this.prshstdatumeindeonderzoek = readDate(dis);
					
					this.prshstdatumeindeonderzoekindicator = readString(dis);
					
					this.prshstingangsdatumgeldigheid = readDate(dis);
					
					this.prshstingangsdatumgeldigheidindicator = readString(dis);
					
					this.prshstdatumvanopneming = readDate(dis);
					
					this.prshstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstburgerservicenummer);
					
					// String
				
						writeString(this.prshstvoornamen,dos);
					
					// String
				
						writeString(this.prshstvoorletters,dos);
					
					// String
				
						writeString(this.prshstadellijketitelcode,dos);
					
					// String
				
						writeString(this.prshstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.prshstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prshstgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prshstgeboortedatumindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prshstgeboortedatum,dos);
					
					// String
				
						writeString(this.prshstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.prshstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.prshstgeboortelandcode,dos);
					
					// String
				
						writeString(this.prshstgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.prshstgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.prshstgeslachtsaanduidingomschrijving,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstvoriganummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstvolgendanummer);
					
					// String
				
						writeString(this.prshstaanduidingnaamgebruik,dos);
					
					// String
				
						writeString(this.prshstregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.prshstregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.prshstaktenummer,dos);
					
					// String
				
						writeString(this.prshstgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.prshstgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.prshstdatumdocument,dos);
					
					// String
				
						writeString(this.prshstdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.prshstbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prshstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.prshstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.prshstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prshstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.prshstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prshstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.prshstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prshstdatumvanopneming,dos);
					
					// String
				
						writeString(this.prshstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",prshstsleutelgeldigdatum="+String.valueOf(prshstsleutelgeldigdatum));
		sb.append(",prshstsleutelgeldigvolgnummer="+String.valueOf(prshstsleutelgeldigvolgnummer));
		sb.append(",prshstanummer="+String.valueOf(prshstanummer));
		sb.append(",prshstburgerservicenummer="+String.valueOf(prshstburgerservicenummer));
		sb.append(",prshstvoornamen="+prshstvoornamen);
		sb.append(",prshstvoorletters="+prshstvoorletters);
		sb.append(",prshstadellijketitelcode="+prshstadellijketitelcode);
		sb.append(",prshstadellijketitelomschrijving="+prshstadellijketitelomschrijving);
		sb.append(",prshstvoorvoegselgeslachtsnaam="+prshstvoorvoegselgeslachtsnaam);
		sb.append(",prshstgeslachtsnaam="+prshstgeslachtsnaam);
		sb.append(",prshstgeboortedatumindicator="+prshstgeboortedatumindicator);
		sb.append(",prshstgeboortedatum="+String.valueOf(prshstgeboortedatum));
		sb.append(",prshstgeboorteplaatscode="+prshstgeboorteplaatscode);
		sb.append(",prshstgeboorteplaatsomschrijving="+prshstgeboorteplaatsomschrijving);
		sb.append(",prshstgeboortelandcode="+prshstgeboortelandcode);
		sb.append(",prshstgeboortelandomschrijving="+prshstgeboortelandomschrijving);
		sb.append(",prshstgeslachtsaanduidingcode="+prshstgeslachtsaanduidingcode);
		sb.append(",prshstgeslachtsaanduidingomschrijving="+prshstgeslachtsaanduidingomschrijving);
		sb.append(",prshstvoriganummer="+String.valueOf(prshstvoriganummer));
		sb.append(",prshstvolgendanummer="+String.valueOf(prshstvolgendanummer));
		sb.append(",prshstaanduidingnaamgebruik="+prshstaanduidingnaamgebruik);
		sb.append(",prshstregistergemeenteaktecode="+prshstregistergemeenteaktecode);
		sb.append(",prshstregistergemeenteakteomschrijving="+prshstregistergemeenteakteomschrijving);
		sb.append(",prshstaktenummer="+prshstaktenummer);
		sb.append(",prshstgemeentedocumentcode="+prshstgemeentedocumentcode);
		sb.append(",prshstgemeentedocumentomschrijving="+prshstgemeentedocumentomschrijving);
		sb.append(",prshstdatumdocument="+String.valueOf(prshstdatumdocument));
		sb.append(",prshstdatumdocumentindicator="+prshstdatumdocumentindicator);
		sb.append(",prshstbeschrijvingdocument="+prshstbeschrijvingdocument);
		sb.append(",prshstaanduidinggegevensonderzoek="+String.valueOf(prshstaanduidinggegevensonderzoek));
		sb.append(",prshstdatumingangonderzoek="+String.valueOf(prshstdatumingangonderzoek));
		sb.append(",prshstdatumingangonderzoekindicator="+prshstdatumingangonderzoekindicator);
		sb.append(",prshstdatumeindeonderzoek="+String.valueOf(prshstdatumeindeonderzoek));
		sb.append(",prshstdatumeindeonderzoekindicator="+prshstdatumeindeonderzoekindicator);
		sb.append(",prshstingangsdatumgeldigheid="+String.valueOf(prshstingangsdatumgeldigheid));
		sb.append(",prshstingangsdatumgeldigheidindicator="+prshstingangsdatumgeldigheidindicator);
		sb.append(",prshstdatumvanopneming="+String.valueOf(prshstdatumvanopneming));
		sb.append(",prshstdatumvanopnemingindicator="+prshstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_persoon_historieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prshstsleutelgeldigdatum, other.prshstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.prshstsleutelgeldigvolgnummer, other.prshstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_persoon_historieStruct implements routines.system.IPersistableRow<cipers_persoon_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal PRSHSTSLEUTELGELDIGDATUM;

				public BigDecimal getPRSHSTSLEUTELGELDIGDATUM () {
					return this.PRSHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal PRSHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getPRSHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.PRSHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal PRSHSTANUMMER;

				public BigDecimal getPRSHSTANUMMER () {
					return this.PRSHSTANUMMER;
				}
				
			    public BigDecimal PRSHSTBURGERSERVICENUMMER;

				public BigDecimal getPRSHSTBURGERSERVICENUMMER () {
					return this.PRSHSTBURGERSERVICENUMMER;
				}
				
			    public String PRSHSTVOORNAMEN;

				public String getPRSHSTVOORNAMEN () {
					return this.PRSHSTVOORNAMEN;
				}
				
			    public String PRSHSTVOORLETTERS;

				public String getPRSHSTVOORLETTERS () {
					return this.PRSHSTVOORLETTERS;
				}
				
			    public String PRSHSTADELLIJKETITELCODE;

				public String getPRSHSTADELLIJKETITELCODE () {
					return this.PRSHSTADELLIJKETITELCODE;
				}
				
			    public String PRSHSTVOORVOEGSELGESLACHTSNAAM;

				public String getPRSHSTVOORVOEGSELGESLACHTSNAAM () {
					return this.PRSHSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String PRSHSTGESLACHTSNAAM;

				public String getPRSHSTGESLACHTSNAAM () {
					return this.PRSHSTGESLACHTSNAAM;
				}
				
			    public java.util.Date PRSHSTGEBOORTEDATUM;

				public java.util.Date getPRSHSTGEBOORTEDATUM () {
					return this.PRSHSTGEBOORTEDATUM;
				}
				
			    public String PRSHSTGEBOORTEDATUMINDICATOR;

				public String getPRSHSTGEBOORTEDATUMINDICATOR () {
					return this.PRSHSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String PRSHSTGEBOORTEPLAATSCODE;

				public String getPRSHSTGEBOORTEPLAATSCODE () {
					return this.PRSHSTGEBOORTEPLAATSCODE;
				}
				
			    public String PRSHSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getPRSHSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.PRSHSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String PRSHSTGEBOORTELANDCODE;

				public String getPRSHSTGEBOORTELANDCODE () {
					return this.PRSHSTGEBOORTELANDCODE;
				}
				
			    public String PRSHSTGESLACHTSAANDUIDINGCODE;

				public String getPRSHSTGESLACHTSAANDUIDINGCODE () {
					return this.PRSHSTGESLACHTSAANDUIDINGCODE;
				}
				
			    public BigDecimal PRSHSTVORIGANUMMER;

				public BigDecimal getPRSHSTVORIGANUMMER () {
					return this.PRSHSTVORIGANUMMER;
				}
				
			    public BigDecimal PRSHSTVOLGENDANUMMER;

				public BigDecimal getPRSHSTVOLGENDANUMMER () {
					return this.PRSHSTVOLGENDANUMMER;
				}
				
			    public String PRSHSTAANDUIDINGNAAMGEBRUIK;

				public String getPRSHSTAANDUIDINGNAAMGEBRUIK () {
					return this.PRSHSTAANDUIDINGNAAMGEBRUIK;
				}
				
			    public String PRSHSTREGISTERGEMEENTEAKTECODE;

				public String getPRSHSTREGISTERGEMEENTEAKTECODE () {
					return this.PRSHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String PRSHSTAKTENUMMER;

				public String getPRSHSTAKTENUMMER () {
					return this.PRSHSTAKTENUMMER;
				}
				
			    public String PRSHSTGEMEENTEDOCUMENTCODE;

				public String getPRSHSTGEMEENTEDOCUMENTCODE () {
					return this.PRSHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date PRSHSTDATUMDOCUMENT;

				public java.util.Date getPRSHSTDATUMDOCUMENT () {
					return this.PRSHSTDATUMDOCUMENT;
				}
				
			    public String PRSHSTDATUMDOCUMENTINDICATOR;

				public String getPRSHSTDATUMDOCUMENTINDICATOR () {
					return this.PRSHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String PRSHSTBESCHRIJVINGDOCUMENT;

				public String getPRSHSTBESCHRIJVINGDOCUMENT () {
					return this.PRSHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal PRSHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getPRSHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.PRSHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date PRSHSTDATUMINGANGONDERZOEK;

				public java.util.Date getPRSHSTDATUMINGANGONDERZOEK () {
					return this.PRSHSTDATUMINGANGONDERZOEK;
				}
				
			    public String PRSHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getPRSHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.PRSHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSHSTDATUMEINDEONDERZOEK;

				public java.util.Date getPRSHSTDATUMEINDEONDERZOEK () {
					return this.PRSHSTDATUMEINDEONDERZOEK;
				}
				
			    public String PRSHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getPRSHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.PRSHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getPRSHSTINGANGSDATUMGELDIGHEID () {
					return this.PRSHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getPRSHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date PRSHSTDATUMVANOPNEMING;

				public java.util.Date getPRSHSTDATUMVANOPNEMING () {
					return this.PRSHSTDATUMVANOPNEMING;
				}
				
			    public String PRSHSTDATUMVANOPNEMINGINDICATOR;

				public String getPRSHSTDATUMVANOPNEMINGINDICATOR () {
					return this.PRSHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.PRSHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.PRSHSTVOORNAMEN = readString(dis);
					
					this.PRSHSTVOORLETTERS = readString(dis);
					
					this.PRSHSTADELLIJKETITELCODE = readString(dis);
					
					this.PRSHSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.PRSHSTGESLACHTSNAAM = readString(dis);
					
					this.PRSHSTGEBOORTEDATUM = readDate(dis);
					
					this.PRSHSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.PRSHSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.PRSHSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.PRSHSTGEBOORTELANDCODE = readString(dis);
					
					this.PRSHSTGESLACHTSAANDUIDINGCODE = readString(dis);
					
						this.PRSHSTVORIGANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTVOLGENDANUMMER = (BigDecimal) dis.readObject();
					
					this.PRSHSTAANDUIDINGNAAMGEBRUIK = readString(dis);
					
					this.PRSHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.PRSHSTAKTENUMMER = readString(dis);
					
					this.PRSHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.PRSHSTDATUMDOCUMENT = readDate(dis);
					
					this.PRSHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.PRSHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.PRSHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.PRSHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.PRSHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.PRSHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.PRSHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.PRSHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.PRSHSTDATUMVANOPNEMING = readDate(dis);
					
					this.PRSHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.PRSHSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.PRSHSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.PRSHSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.PRSHSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.PRSHSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.PRSHSTGESLACHTSAANDUIDINGCODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTVORIGANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTVOLGENDANUMMER);
					
					// String
				
						writeString(this.PRSHSTAANDUIDINGNAAMGEBRUIK,dos);
					
					// String
				
						writeString(this.PRSHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.PRSHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.PRSHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.PRSHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",PRSHSTSLEUTELGELDIGDATUM="+String.valueOf(PRSHSTSLEUTELGELDIGDATUM));
		sb.append(",PRSHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(PRSHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",PRSHSTANUMMER="+String.valueOf(PRSHSTANUMMER));
		sb.append(",PRSHSTBURGERSERVICENUMMER="+String.valueOf(PRSHSTBURGERSERVICENUMMER));
		sb.append(",PRSHSTVOORNAMEN="+PRSHSTVOORNAMEN);
		sb.append(",PRSHSTVOORLETTERS="+PRSHSTVOORLETTERS);
		sb.append(",PRSHSTADELLIJKETITELCODE="+PRSHSTADELLIJKETITELCODE);
		sb.append(",PRSHSTVOORVOEGSELGESLACHTSNAAM="+PRSHSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",PRSHSTGESLACHTSNAAM="+PRSHSTGESLACHTSNAAM);
		sb.append(",PRSHSTGEBOORTEDATUM="+String.valueOf(PRSHSTGEBOORTEDATUM));
		sb.append(",PRSHSTGEBOORTEDATUMINDICATOR="+PRSHSTGEBOORTEDATUMINDICATOR);
		sb.append(",PRSHSTGEBOORTEPLAATSCODE="+PRSHSTGEBOORTEPLAATSCODE);
		sb.append(",PRSHSTGEBOORTEPLAATSOMSCHRIJVING="+PRSHSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",PRSHSTGEBOORTELANDCODE="+PRSHSTGEBOORTELANDCODE);
		sb.append(",PRSHSTGESLACHTSAANDUIDINGCODE="+PRSHSTGESLACHTSAANDUIDINGCODE);
		sb.append(",PRSHSTVORIGANUMMER="+String.valueOf(PRSHSTVORIGANUMMER));
		sb.append(",PRSHSTVOLGENDANUMMER="+String.valueOf(PRSHSTVOLGENDANUMMER));
		sb.append(",PRSHSTAANDUIDINGNAAMGEBRUIK="+PRSHSTAANDUIDINGNAAMGEBRUIK);
		sb.append(",PRSHSTREGISTERGEMEENTEAKTECODE="+PRSHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",PRSHSTAKTENUMMER="+PRSHSTAKTENUMMER);
		sb.append(",PRSHSTGEMEENTEDOCUMENTCODE="+PRSHSTGEMEENTEDOCUMENTCODE);
		sb.append(",PRSHSTDATUMDOCUMENT="+String.valueOf(PRSHSTDATUMDOCUMENT));
		sb.append(",PRSHSTDATUMDOCUMENTINDICATOR="+PRSHSTDATUMDOCUMENTINDICATOR);
		sb.append(",PRSHSTBESCHRIJVINGDOCUMENT="+PRSHSTBESCHRIJVINGDOCUMENT);
		sb.append(",PRSHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(PRSHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",PRSHSTDATUMINGANGONDERZOEK="+String.valueOf(PRSHSTDATUMINGANGONDERZOEK));
		sb.append(",PRSHSTDATUMINGANGONDERZOEKINDICATOR="+PRSHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",PRSHSTDATUMEINDEONDERZOEK="+String.valueOf(PRSHSTDATUMEINDEONDERZOEK));
		sb.append(",PRSHSTDATUMEINDEONDERZOEKINDICATOR="+PRSHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",PRSHSTINGANGSDATUMGELDIGHEID="+String.valueOf(PRSHSTINGANGSDATUMGELDIGHEID));
		sb.append(",PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR="+PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",PRSHSTDATUMVANOPNEMING="+String.valueOf(PRSHSTDATUMVANOPNEMING));
		sb.append(",PRSHSTDATUMVANOPNEMINGINDICATOR="+PRSHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_persoon_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal PRSHSTSLEUTELGELDIGDATUM;

				public BigDecimal getPRSHSTSLEUTELGELDIGDATUM () {
					return this.PRSHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal PRSHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getPRSHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.PRSHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal PRSHSTANUMMER;

				public BigDecimal getPRSHSTANUMMER () {
					return this.PRSHSTANUMMER;
				}
				
			    public BigDecimal PRSHSTBURGERSERVICENUMMER;

				public BigDecimal getPRSHSTBURGERSERVICENUMMER () {
					return this.PRSHSTBURGERSERVICENUMMER;
				}
				
			    public String PRSHSTVOORNAMEN;

				public String getPRSHSTVOORNAMEN () {
					return this.PRSHSTVOORNAMEN;
				}
				
			    public String PRSHSTVOORLETTERS;

				public String getPRSHSTVOORLETTERS () {
					return this.PRSHSTVOORLETTERS;
				}
				
			    public String PRSHSTADELLIJKETITELCODE;

				public String getPRSHSTADELLIJKETITELCODE () {
					return this.PRSHSTADELLIJKETITELCODE;
				}
				
			    public String PRSHSTVOORVOEGSELGESLACHTSNAAM;

				public String getPRSHSTVOORVOEGSELGESLACHTSNAAM () {
					return this.PRSHSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String PRSHSTGESLACHTSNAAM;

				public String getPRSHSTGESLACHTSNAAM () {
					return this.PRSHSTGESLACHTSNAAM;
				}
				
			    public java.util.Date PRSHSTGEBOORTEDATUM;

				public java.util.Date getPRSHSTGEBOORTEDATUM () {
					return this.PRSHSTGEBOORTEDATUM;
				}
				
			    public String PRSHSTGEBOORTEDATUMINDICATOR;

				public String getPRSHSTGEBOORTEDATUMINDICATOR () {
					return this.PRSHSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String PRSHSTGEBOORTEPLAATSCODE;

				public String getPRSHSTGEBOORTEPLAATSCODE () {
					return this.PRSHSTGEBOORTEPLAATSCODE;
				}
				
			    public String PRSHSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getPRSHSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.PRSHSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String PRSHSTGEBOORTELANDCODE;

				public String getPRSHSTGEBOORTELANDCODE () {
					return this.PRSHSTGEBOORTELANDCODE;
				}
				
			    public String PRSHSTGESLACHTSAANDUIDINGCODE;

				public String getPRSHSTGESLACHTSAANDUIDINGCODE () {
					return this.PRSHSTGESLACHTSAANDUIDINGCODE;
				}
				
			    public BigDecimal PRSHSTVORIGANUMMER;

				public BigDecimal getPRSHSTVORIGANUMMER () {
					return this.PRSHSTVORIGANUMMER;
				}
				
			    public BigDecimal PRSHSTVOLGENDANUMMER;

				public BigDecimal getPRSHSTVOLGENDANUMMER () {
					return this.PRSHSTVOLGENDANUMMER;
				}
				
			    public String PRSHSTAANDUIDINGNAAMGEBRUIK;

				public String getPRSHSTAANDUIDINGNAAMGEBRUIK () {
					return this.PRSHSTAANDUIDINGNAAMGEBRUIK;
				}
				
			    public String PRSHSTREGISTERGEMEENTEAKTECODE;

				public String getPRSHSTREGISTERGEMEENTEAKTECODE () {
					return this.PRSHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String PRSHSTAKTENUMMER;

				public String getPRSHSTAKTENUMMER () {
					return this.PRSHSTAKTENUMMER;
				}
				
			    public String PRSHSTGEMEENTEDOCUMENTCODE;

				public String getPRSHSTGEMEENTEDOCUMENTCODE () {
					return this.PRSHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date PRSHSTDATUMDOCUMENT;

				public java.util.Date getPRSHSTDATUMDOCUMENT () {
					return this.PRSHSTDATUMDOCUMENT;
				}
				
			    public String PRSHSTDATUMDOCUMENTINDICATOR;

				public String getPRSHSTDATUMDOCUMENTINDICATOR () {
					return this.PRSHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String PRSHSTBESCHRIJVINGDOCUMENT;

				public String getPRSHSTBESCHRIJVINGDOCUMENT () {
					return this.PRSHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal PRSHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getPRSHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.PRSHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date PRSHSTDATUMINGANGONDERZOEK;

				public java.util.Date getPRSHSTDATUMINGANGONDERZOEK () {
					return this.PRSHSTDATUMINGANGONDERZOEK;
				}
				
			    public String PRSHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getPRSHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.PRSHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSHSTDATUMEINDEONDERZOEK;

				public java.util.Date getPRSHSTDATUMEINDEONDERZOEK () {
					return this.PRSHSTDATUMEINDEONDERZOEK;
				}
				
			    public String PRSHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getPRSHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.PRSHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getPRSHSTINGANGSDATUMGELDIGHEID () {
					return this.PRSHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getPRSHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date PRSHSTDATUMVANOPNEMING;

				public java.util.Date getPRSHSTDATUMVANOPNEMING () {
					return this.PRSHSTDATUMVANOPNEMING;
				}
				
			    public String PRSHSTDATUMVANOPNEMINGINDICATOR;

				public String getPRSHSTDATUMVANOPNEMINGINDICATOR () {
					return this.PRSHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.PRSHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.PRSHSTVOORNAMEN = readString(dis);
					
					this.PRSHSTVOORLETTERS = readString(dis);
					
					this.PRSHSTADELLIJKETITELCODE = readString(dis);
					
					this.PRSHSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.PRSHSTGESLACHTSNAAM = readString(dis);
					
					this.PRSHSTGEBOORTEDATUM = readDate(dis);
					
					this.PRSHSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.PRSHSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.PRSHSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.PRSHSTGEBOORTELANDCODE = readString(dis);
					
					this.PRSHSTGESLACHTSAANDUIDINGCODE = readString(dis);
					
						this.PRSHSTVORIGANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSHSTVOLGENDANUMMER = (BigDecimal) dis.readObject();
					
					this.PRSHSTAANDUIDINGNAAMGEBRUIK = readString(dis);
					
					this.PRSHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.PRSHSTAKTENUMMER = readString(dis);
					
					this.PRSHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.PRSHSTDATUMDOCUMENT = readDate(dis);
					
					this.PRSHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.PRSHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.PRSHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.PRSHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.PRSHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.PRSHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.PRSHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.PRSHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.PRSHSTDATUMVANOPNEMING = readDate(dis);
					
					this.PRSHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.PRSHSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.PRSHSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.PRSHSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.PRSHSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.PRSHSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.PRSHSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.PRSHSTGESLACHTSAANDUIDINGCODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTVORIGANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTVOLGENDANUMMER);
					
					// String
				
						writeString(this.PRSHSTAANDUIDINGNAAMGEBRUIK,dos);
					
					// String
				
						writeString(this.PRSHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.PRSHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.PRSHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.PRSHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.PRSHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",PRSHSTSLEUTELGELDIGDATUM="+String.valueOf(PRSHSTSLEUTELGELDIGDATUM));
		sb.append(",PRSHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(PRSHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",PRSHSTANUMMER="+String.valueOf(PRSHSTANUMMER));
		sb.append(",PRSHSTBURGERSERVICENUMMER="+String.valueOf(PRSHSTBURGERSERVICENUMMER));
		sb.append(",PRSHSTVOORNAMEN="+PRSHSTVOORNAMEN);
		sb.append(",PRSHSTVOORLETTERS="+PRSHSTVOORLETTERS);
		sb.append(",PRSHSTADELLIJKETITELCODE="+PRSHSTADELLIJKETITELCODE);
		sb.append(",PRSHSTVOORVOEGSELGESLACHTSNAAM="+PRSHSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",PRSHSTGESLACHTSNAAM="+PRSHSTGESLACHTSNAAM);
		sb.append(",PRSHSTGEBOORTEDATUM="+String.valueOf(PRSHSTGEBOORTEDATUM));
		sb.append(",PRSHSTGEBOORTEDATUMINDICATOR="+PRSHSTGEBOORTEDATUMINDICATOR);
		sb.append(",PRSHSTGEBOORTEPLAATSCODE="+PRSHSTGEBOORTEPLAATSCODE);
		sb.append(",PRSHSTGEBOORTEPLAATSOMSCHRIJVING="+PRSHSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",PRSHSTGEBOORTELANDCODE="+PRSHSTGEBOORTELANDCODE);
		sb.append(",PRSHSTGESLACHTSAANDUIDINGCODE="+PRSHSTGESLACHTSAANDUIDINGCODE);
		sb.append(",PRSHSTVORIGANUMMER="+String.valueOf(PRSHSTVORIGANUMMER));
		sb.append(",PRSHSTVOLGENDANUMMER="+String.valueOf(PRSHSTVOLGENDANUMMER));
		sb.append(",PRSHSTAANDUIDINGNAAMGEBRUIK="+PRSHSTAANDUIDINGNAAMGEBRUIK);
		sb.append(",PRSHSTREGISTERGEMEENTEAKTECODE="+PRSHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",PRSHSTAKTENUMMER="+PRSHSTAKTENUMMER);
		sb.append(",PRSHSTGEMEENTEDOCUMENTCODE="+PRSHSTGEMEENTEDOCUMENTCODE);
		sb.append(",PRSHSTDATUMDOCUMENT="+String.valueOf(PRSHSTDATUMDOCUMENT));
		sb.append(",PRSHSTDATUMDOCUMENTINDICATOR="+PRSHSTDATUMDOCUMENTINDICATOR);
		sb.append(",PRSHSTBESCHRIJVINGDOCUMENT="+PRSHSTBESCHRIJVINGDOCUMENT);
		sb.append(",PRSHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(PRSHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",PRSHSTDATUMINGANGONDERZOEK="+String.valueOf(PRSHSTDATUMINGANGONDERZOEK));
		sb.append(",PRSHSTDATUMINGANGONDERZOEKINDICATOR="+PRSHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",PRSHSTDATUMEINDEONDERZOEK="+String.valueOf(PRSHSTDATUMEINDEONDERZOEK));
		sb.append(",PRSHSTDATUMEINDEONDERZOEKINDICATOR="+PRSHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",PRSHSTINGANGSDATUMGELDIGHEID="+String.valueOf(PRSHSTINGANGSDATUMGELDIGHEID));
		sb.append(",PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR="+PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",PRSHSTDATUMVANOPNEMING="+String.valueOf(PRSHSTDATUMVANOPNEMING));
		sb.append(",PRSHSTDATUMVANOPNEMINGINDICATOR="+PRSHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_4Process(globalMap);
		tPostgresqlInput_5Process(globalMap);

		cipers_persoon_historieStruct cipers_persoon_historie = new cipers_persoon_historieStruct();
ldf_persoon_historieStruct ldf_persoon_historie = new ldf_persoon_historieStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_persoon_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_persoon_historie";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_persoon_historie";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 1000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"prshstsleutelgeldigdatum\",\"prshstsleutelgeldigvolgnummer\",\"prshstanummer\",\"prshstburgerservicenummer\",\"prshstvoornamen\",\"prshstvoorletters\",\"prshstadellijketitelcode\",\"prshstadellijketitelomschrijving\",\"prshstvoorvoegselgeslachtsnaam\",\"prshstgeslachtsnaam\",\"prshstgeboortedatumindicator\",\"prshstgeboortedatum\",\"prshstgeboorteplaatscode\",\"prshstgeboorteplaatsomschrijving\",\"prshstgeboortelandcode\",\"prshstgeboortelandomschrijving\",\"prshstgeslachtsaanduidingcode\",\"prshstgeslachtsaanduidingomschrijving\",\"prshstvoriganummer\",\"prshstvolgendanummer\",\"prshstaanduidingnaamgebruik\",\"prshstregistergemeenteaktecode\",\"prshstregistergemeenteakteomschrijving\",\"prshstaktenummer\",\"prshstgemeentedocumentcode\",\"prshstgemeentedocumentomschrijving\",\"prshstdatumdocument\",\"prshstdatumdocumentindicator\",\"prshstbeschrijvingdocument\",\"prshstaanduidinggegevensonderzoek\",\"prshstdatumingangonderzoek\",\"prshstdatumingangonderzoekindicator\",\"prshstdatumeindeonderzoek\",\"prshstdatumeindeonderzoekindicator\",\"prshstingangsdatumgeldigheid\",\"prshstingangsdatumgeldigheidindicator\",\"prshstdatumvanopneming\",\"prshstdatumvanopnemingindicator\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_persoon_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct> tHash_Lookup_ldf_titels_predikaten_persoon_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_persoon_naam" ))
					;					
					
	

ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naamHashKey = new ldf_titels_predikaten_persoon_naamStruct();
ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naamDefault = new ldf_titels_predikaten_persoon_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct> tHash_Lookup_ldf_landen_persoon_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_persoon_geboorte" ))
					;					
					
	

ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorteHashKey = new ldf_landen_persoon_geboorteStruct();
ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorteDefault = new ldf_landen_persoon_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct>) 
					globalMap.get( "tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht" ))
					;					
					
	

ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslachtHashKey = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();
ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslachtDefault = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct> tHash_Lookup_ldf_gemeenten_persoon_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_persoon_akte" ))
					;					
					
	

ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akteHashKey = new ldf_gemeenten_persoon_akteStruct();
ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akteDefault = new ldf_gemeenten_persoon_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct> tHash_Lookup_ldf_gemeenten_persoon_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_persoon_document" ))
					;					
					
	

ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_documentHashKey = new ldf_gemeenten_persoon_documentStruct();
ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_documentDefault = new ldf_gemeenten_persoon_documentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_persoon_historieStruct ldf_persoon_historie_tmp = new ldf_persoon_historieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\nprsAnummer,\nprshstSleutelGeldigDatum,\nprshstSleutelGeldigVolgnummer,\nprshstAnummer,\nprshstBurgerservicenummer,\nrtrim(prshstVoornamen) as prshstVoornamen,\nrtrim(prshstVoorletters) as prshstVoorletters,\nrtrim(prshstAdellijketitelCode) as prshstAdellijketitelCode,\nrtrim(prshstVoorvoegselGeslachtsnaam) as prshstVoorvoegselGeslachtsnaam,\nrtrim(prshstGeslachtsnaam) as prshstGeslachtsnaam,\nprshstGeboortedatum,\nprshstGeboortedatumIndicator,\nrtrim(prshstGeboorteplaatsCode) as prshstGeboorteplaatsCode,\nrtrim(prshstGeboorteplaatsOmschrijving) as prshstGeboorteplaatsOmschrijving,\nrtrim(prshstGeboortelandCode) as prshstGeboortelandCode,\nrtrim(prshstGeslachtsaanduidingCode) as prshstGeslachtsaanduidingCode,\nprshstVorigAnummer,\nprshstVolgendAnummer,\nrtrim(prshstAanduidingNaamgebruik) as prshstAanduidingNaamgebruik,\nrtrim(prshstRegistergemeenteAkteCode) as prshstRegistergemeenteAkteCode,\nrtrim(prshstAktenummer) as prshstAktenummer,\nrtrim(prshstGemeenteDocumentCode) as prshstGemeenteDocumentCode,\nprshstDatumDocument,\nprshstDatumDocumentIndicator,\nrtrim(prshstBeschrijvingDocument) as prshstBeschrijvingDocument,\nprshstAanduidingGegevensOnderzoek,\nprshstDatumIngangOnderzoek,\nprshstDatumIngangOnderzoekIndicator,\nprshstDatumEindeOnderzoek,\nprshstDatumEindeOnderzoekIndicator,\nprshstIngangsdatumGeldigheid,\nprshstIngangsdatumGeldigheidIndicator,\nprshstDatumVanOpneming,\nprshstDatumVanOpnemingIndicator\n  from bzsc51q00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_persoon_historie.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_persoon_historie.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_persoon_historie.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_persoon_historie.PRSHSTSLEUTELGELDIGDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_persoon_historie.PRSHSTSLEUTELGELDIGDATUM = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_persoon_historie.PRSHSTSLEUTELGELDIGDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_persoon_historie.PRSHSTSLEUTELGELDIGVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(3) != null) {
                cipers_persoon_historie.PRSHSTSLEUTELGELDIGVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(3);
            } else {
                    cipers_persoon_historie.PRSHSTSLEUTELGELDIGVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_persoon_historie.PRSHSTANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(4) != null) {
                cipers_persoon_historie.PRSHSTANUMMER = rs_tAS400Input_1.getBigDecimal(4);
            } else {
                    cipers_persoon_historie.PRSHSTANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_persoon_historie.PRSHSTBURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(5) != null) {
                cipers_persoon_historie.PRSHSTBURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(5);
            } else {
                    cipers_persoon_historie.PRSHSTBURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_persoon_historie.PRSHSTVOORNAMEN = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTVOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 6, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_persoon_historie.PRSHSTVOORLETTERS = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTVOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 7, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_persoon_historie.PRSHSTADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_persoon_historie.PRSHSTVOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTVOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 9, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_persoon_historie.PRSHSTGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 10, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_persoon_historie.PRSHSTGEBOORTEDATUM = null;
							} else {
										
			cipers_persoon_historie.PRSHSTGEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 11);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_persoon_historie.PRSHSTGEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 12, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_persoon_historie.PRSHSTGEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 13, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_persoon_historie.PRSHSTGEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_persoon_historie.PRSHSTGEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 15, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_persoon_historie.PRSHSTGESLACHTSAANDUIDINGCODE = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGESLACHTSAANDUIDINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 16, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_persoon_historie.PRSHSTVORIGANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(17) != null) {
                cipers_persoon_historie.PRSHSTVORIGANUMMER = rs_tAS400Input_1.getBigDecimal(17);
            } else {
                    cipers_persoon_historie.PRSHSTVORIGANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_persoon_historie.PRSHSTVOLGENDANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(18) != null) {
                cipers_persoon_historie.PRSHSTVOLGENDANUMMER = rs_tAS400Input_1.getBigDecimal(18);
            } else {
                    cipers_persoon_historie.PRSHSTVOLGENDANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_persoon_historie.PRSHSTAANDUIDINGNAAMGEBRUIK = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTAANDUIDINGNAAMGEBRUIK = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 19, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_persoon_historie.PRSHSTREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 20, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_persoon_historie.PRSHSTAKTENUMMER = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 21, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_persoon_historie.PRSHSTGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 22, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_persoon_historie.PRSHSTDATUMDOCUMENT = null;
							} else {
										
			cipers_persoon_historie.PRSHSTDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 23);
		                    }
							if(colQtyInRs_tAS400Input_1 < 24) {
								cipers_persoon_historie.PRSHSTDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 24, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 25) {
								cipers_persoon_historie.PRSHSTBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 25, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 26) {
								cipers_persoon_historie.PRSHSTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(26) != null) {
                cipers_persoon_historie.PRSHSTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(26);
            } else {
                    cipers_persoon_historie.PRSHSTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 27) {
								cipers_persoon_historie.PRSHSTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon_historie.PRSHSTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 27);
		                    }
							if(colQtyInRs_tAS400Input_1 < 28) {
								cipers_persoon_historie.PRSHSTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 28, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 29) {
								cipers_persoon_historie.PRSHSTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon_historie.PRSHSTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 29);
		                    }
							if(colQtyInRs_tAS400Input_1 < 30) {
								cipers_persoon_historie.PRSHSTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 30, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 31) {
								cipers_persoon_historie.PRSHSTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon_historie.PRSHSTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 31);
		                    }
							if(colQtyInRs_tAS400Input_1 < 32) {
								cipers_persoon_historie.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 32, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 33) {
								cipers_persoon_historie.PRSHSTDATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon_historie.PRSHSTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 33);
		                    }
							if(colQtyInRs_tAS400Input_1 < 34) {
								cipers_persoon_historie.PRSHSTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon_historie.PRSHSTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 34, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_persoon_historie
			//cipers_persoon_historie


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_persoon_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_persoon_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_persoon_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_persoon_naamHashKey.adellijketitelcode = cipers_persoon_historie.PRSHSTADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_persoon_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_persoon_naam.lookup( ldf_titels_predikaten_persoon_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_persoon_naam != null && tHash_Lookup_ldf_titels_predikaten_persoon_naam.getCount(ldf_titels_predikaten_persoon_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_persoon_naam' and it contains more one result from keys :  ldf_titels_predikaten_persoon_naam.adellijketitelcode = '" + ldf_titels_predikaten_persoon_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_persoon_naamStruct fromLookup_ldf_titels_predikaten_persoon_naam = null;
							ldf_titels_predikaten_persoon_naam = ldf_titels_predikaten_persoon_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_persoon_naam !=null && tHash_Lookup_ldf_titels_predikaten_persoon_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_persoon_naam = tHash_Lookup_ldf_titels_predikaten_persoon_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_persoon_naam != null) {
								ldf_titels_predikaten_persoon_naam = fromLookup_ldf_titels_predikaten_persoon_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_persoon_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_persoon_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_persoon_geboorteHashKey.landcode = cipers_persoon_historie.PRSHSTGEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_persoon_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_persoon_geboorte.lookup( ldf_landen_persoon_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_persoon_geboorte != null && tHash_Lookup_ldf_landen_persoon_geboorte.getCount(ldf_landen_persoon_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_persoon_geboorte' and it contains more one result from keys :  ldf_landen_persoon_geboorte.landcode = '" + ldf_landen_persoon_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_persoon_geboorteStruct fromLookup_ldf_landen_persoon_geboorte = null;
							ldf_landen_persoon_geboorte = ldf_landen_persoon_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_persoon_geboorte !=null && tHash_Lookup_ldf_landen_persoon_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_persoon_geboorte = tHash_Lookup_ldf_landen_persoon_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_persoon_geboorte != null) {
								ldf_landen_persoon_geboorte = fromLookup_ldf_landen_persoon_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_geslachtsaanduidingen_persoon_geslacht" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_geslachtsaanduidingen_persoon_geslacht = false;
       		  	    	
       		  	    	
 							ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslachtObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_geslachtsaanduidingen_persoon_geslachtHashKey.geslachtsaanduidingcode = cipers_persoon_historie.PRSHSTGESLACHTSAANDUIDINGCODE ;
                        		    		

								
		                        	ldf_geslachtsaanduidingen_persoon_geslachtHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.lookup( ldf_geslachtsaanduidingen_persoon_geslachtHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht != null && tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.getCount(ldf_geslachtsaanduidingen_persoon_geslachtHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_geslachtsaanduidingen_persoon_geslacht' and it contains more one result from keys :  ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode = '" + ldf_geslachtsaanduidingen_persoon_geslachtHashKey.geslachtsaanduidingcode + "'");
								} // G 071
							

							ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslacht = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_geslachtsaanduidingen_persoon_geslachtStruct fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht = null;
							ldf_geslachtsaanduidingen_persoon_geslacht = ldf_geslachtsaanduidingen_persoon_geslachtDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht !=null && tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht = tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht != null) {
								ldf_geslachtsaanduidingen_persoon_geslacht = fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_persoon_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_persoon_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_persoon_akteHashKey.gemeentecode = cipers_persoon_historie.PRSHSTREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_persoon_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_persoon_akte.lookup( ldf_gemeenten_persoon_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_persoon_akte != null && tHash_Lookup_ldf_gemeenten_persoon_akte.getCount(ldf_gemeenten_persoon_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_persoon_akte' and it contains more one result from keys :  ldf_gemeenten_persoon_akte.gemeentecode = '" + ldf_gemeenten_persoon_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_persoon_akteStruct fromLookup_ldf_gemeenten_persoon_akte = null;
							ldf_gemeenten_persoon_akte = ldf_gemeenten_persoon_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_persoon_akte !=null && tHash_Lookup_ldf_gemeenten_persoon_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_persoon_akte = tHash_Lookup_ldf_gemeenten_persoon_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_persoon_akte != null) {
								ldf_gemeenten_persoon_akte = fromLookup_ldf_gemeenten_persoon_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_persoon_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_persoon_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_persoon_documentHashKey.gemeentecode = cipers_persoon_historie.PRSHSTGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_persoon_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_persoon_document.lookup( ldf_gemeenten_persoon_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_persoon_document != null && tHash_Lookup_ldf_gemeenten_persoon_document.getCount(ldf_gemeenten_persoon_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_persoon_document' and it contains more one result from keys :  ldf_gemeenten_persoon_document.gemeentecode = '" + ldf_gemeenten_persoon_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_persoon_documentStruct fromLookup_ldf_gemeenten_persoon_document = null;
							ldf_gemeenten_persoon_document = ldf_gemeenten_persoon_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_persoon_document !=null && tHash_Lookup_ldf_gemeenten_persoon_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_persoon_document = tHash_Lookup_ldf_gemeenten_persoon_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_persoon_document != null) {
								ldf_gemeenten_persoon_document = fromLookup_ldf_gemeenten_persoon_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_persoon_historie = null;


// # Output table : 'ldf_persoon_historie'
ldf_persoon_historie_tmp.prsanummer = cipers_persoon_historie.PRSANUMMER;
ldf_persoon_historie_tmp.prshstsleutelgeldigdatum = cipers_persoon_historie.PRSHSTSLEUTELGELDIGDATUM;
ldf_persoon_historie_tmp.prshstsleutelgeldigvolgnummer = cipers_persoon_historie.PRSHSTSLEUTELGELDIGVOLGNUMMER;
ldf_persoon_historie_tmp.prshstanummer = cipers_persoon_historie.PRSHSTANUMMER;
ldf_persoon_historie_tmp.prshstburgerservicenummer = cipers_persoon_historie.PRSHSTBURGERSERVICENUMMER;
ldf_persoon_historie_tmp.prshstvoornamen = cipers_persoon_historie.PRSHSTVOORNAMEN;
ldf_persoon_historie_tmp.prshstvoorletters = cipers_persoon_historie.PRSHSTVOORLETTERS;
ldf_persoon_historie_tmp.prshstadellijketitelcode = cipers_persoon_historie.PRSHSTADELLIJKETITELCODE;
ldf_persoon_historie_tmp.prshstadellijketitelomschrijving = ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving ;
ldf_persoon_historie_tmp.prshstvoorvoegselgeslachtsnaam = cipers_persoon_historie.PRSHSTVOORVOEGSELGESLACHTSNAAM;
ldf_persoon_historie_tmp.prshstgeslachtsnaam = cipers_persoon_historie.PRSHSTGESLACHTSNAAM;
ldf_persoon_historie_tmp.prshstgeboortedatumindicator = cipers_persoon_historie.PRSHSTGEBOORTEDATUMINDICATOR;
ldf_persoon_historie_tmp.prshstgeboortedatum = cipers_persoon_historie.PRSHSTGEBOORTEDATUM;
ldf_persoon_historie_tmp.prshstgeboorteplaatscode = cipers_persoon_historie.PRSHSTGEBOORTEPLAATSCODE;
ldf_persoon_historie_tmp.prshstgeboorteplaatsomschrijving = cipers_persoon_historie.PRSHSTGEBOORTEPLAATSOMSCHRIJVING;
ldf_persoon_historie_tmp.prshstgeboortelandcode = cipers_persoon_historie.PRSHSTGEBOORTELANDCODE;
ldf_persoon_historie_tmp.prshstgeboortelandomschrijving = ldf_landen_persoon_geboorte.landomschrijving ;
ldf_persoon_historie_tmp.prshstgeslachtsaanduidingcode = cipers_persoon_historie.PRSHSTGESLACHTSAANDUIDINGCODE;
ldf_persoon_historie_tmp.prshstgeslachtsaanduidingomschrijving =  ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving ;
ldf_persoon_historie_tmp.prshstvoriganummer = cipers_persoon_historie.PRSHSTVORIGANUMMER;
ldf_persoon_historie_tmp.prshstvolgendanummer = cipers_persoon_historie.PRSHSTVOLGENDANUMMER;
ldf_persoon_historie_tmp.prshstaanduidingnaamgebruik = cipers_persoon_historie.PRSHSTAANDUIDINGNAAMGEBRUIK;
ldf_persoon_historie_tmp.prshstregistergemeenteaktecode = cipers_persoon_historie.PRSHSTREGISTERGEMEENTEAKTECODE;
ldf_persoon_historie_tmp.prshstregistergemeenteakteomschrijving = ldf_gemeenten_persoon_akte.gemeenteomschrijving ;
ldf_persoon_historie_tmp.prshstaktenummer = cipers_persoon_historie.PRSHSTAKTENUMMER;
ldf_persoon_historie_tmp.prshstgemeentedocumentcode = cipers_persoon_historie.PRSHSTGEMEENTEDOCUMENTCODE;
ldf_persoon_historie_tmp.prshstgemeentedocumentomschrijving = ldf_gemeenten_persoon_document.gemeenteomschrijving ;
ldf_persoon_historie_tmp.prshstdatumdocument = cipers_persoon_historie.PRSHSTDATUMDOCUMENT;
ldf_persoon_historie_tmp.prshstdatumdocumentindicator = cipers_persoon_historie.PRSHSTDATUMDOCUMENTINDICATOR;
ldf_persoon_historie_tmp.prshstbeschrijvingdocument = cipers_persoon_historie.PRSHSTBESCHRIJVINGDOCUMENT;
ldf_persoon_historie_tmp.prshstaanduidinggegevensonderzoek = cipers_persoon_historie.PRSHSTAANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_historie_tmp.prshstdatumingangonderzoek = cipers_persoon_historie.PRSHSTDATUMINGANGONDERZOEK;
ldf_persoon_historie_tmp.prshstdatumingangonderzoekindicator = cipers_persoon_historie.PRSHSTDATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_historie_tmp.prshstdatumeindeonderzoek = cipers_persoon_historie.PRSHSTDATUMEINDEONDERZOEK;
ldf_persoon_historie_tmp.prshstdatumeindeonderzoekindicator = cipers_persoon_historie.PRSHSTDATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_historie_tmp.prshstingangsdatumgeldigheid = cipers_persoon_historie.PRSHSTINGANGSDATUMGELDIGHEID;
ldf_persoon_historie_tmp.prshstingangsdatumgeldigheidindicator = cipers_persoon_historie.PRSHSTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_historie_tmp.prshstdatumvanopneming = cipers_persoon_historie.PRSHSTDATUMVANOPNEMING;
ldf_persoon_historie_tmp.prshstdatumvanopnemingindicator = cipers_persoon_historie.PRSHSTDATUMVANOPNEMINGINDICATOR;
ldf_persoon_historie = ldf_persoon_historie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_persoon_historie"
if(ldf_persoon_historie != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_persoon_historie
			//ldf_persoon_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_persoon_historie"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_persoon_historie.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_persoon_historie.prshstsleutelgeldigdatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, ldf_persoon_historie.prshstsleutelgeldigvolgnummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(4, ldf_persoon_historie.prshstanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(5, ldf_persoon_historie.prshstburgerservicenummer);

                    if(ldf_persoon_historie.prshstvoornamen == null) {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(6, ldf_persoon_historie.prshstvoornamen);
}

                    if(ldf_persoon_historie.prshstvoorletters == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, ldf_persoon_historie.prshstvoorletters);
}

                    if(ldf_persoon_historie.prshstadellijketitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(8, ldf_persoon_historie.prshstadellijketitelcode);
}

                    if(ldf_persoon_historie.prshstadellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(9, ldf_persoon_historie.prshstadellijketitelomschrijving);
}

                    if(ldf_persoon_historie.prshstvoorvoegselgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(10, ldf_persoon_historie.prshstvoorvoegselgeslachtsnaam);
}

                    if(ldf_persoon_historie.prshstgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, ldf_persoon_historie.prshstgeslachtsnaam);
}

                    if(ldf_persoon_historie.prshstgeboortedatumindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(12, ldf_persoon_historie.prshstgeboortedatumindicator);
}

                    if(ldf_persoon_historie.prshstgeboortedatum != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(13, new java.sql.Timestamp(ldf_persoon_historie.prshstgeboortedatum.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon_historie.prshstgeboorteplaatscode == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(14, ldf_persoon_historie.prshstgeboorteplaatscode);
}

                    if(ldf_persoon_historie.prshstgeboorteplaatsomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(15, ldf_persoon_historie.prshstgeboorteplaatsomschrijving);
}

                    if(ldf_persoon_historie.prshstgeboortelandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(16, ldf_persoon_historie.prshstgeboortelandcode);
}

                    if(ldf_persoon_historie.prshstgeboortelandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, ldf_persoon_historie.prshstgeboortelandomschrijving);
}

                    if(ldf_persoon_historie.prshstgeslachtsaanduidingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(18, ldf_persoon_historie.prshstgeslachtsaanduidingcode);
}

                    if(ldf_persoon_historie.prshstgeslachtsaanduidingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(19, ldf_persoon_historie.prshstgeslachtsaanduidingomschrijving);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(20, ldf_persoon_historie.prshstvoriganummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(21, ldf_persoon_historie.prshstvolgendanummer);

                    if(ldf_persoon_historie.prshstaanduidingnaamgebruik == null) {
pstmt_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(22, ldf_persoon_historie.prshstaanduidingnaamgebruik);
}

                    if(ldf_persoon_historie.prshstregistergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(23, ldf_persoon_historie.prshstregistergemeenteaktecode);
}

                    if(ldf_persoon_historie.prshstregistergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(24, ldf_persoon_historie.prshstregistergemeenteakteomschrijving);
}

                    if(ldf_persoon_historie.prshstaktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(25, ldf_persoon_historie.prshstaktenummer);
}

                    if(ldf_persoon_historie.prshstgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(26, ldf_persoon_historie.prshstgemeentedocumentcode);
}

                    if(ldf_persoon_historie.prshstgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(27, ldf_persoon_historie.prshstgemeentedocumentomschrijving);
}

                    if(ldf_persoon_historie.prshstdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(28, new java.sql.Timestamp(ldf_persoon_historie.prshstdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(28, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon_historie.prshstdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(29, ldf_persoon_historie.prshstdatumdocumentindicator);
}

                    if(ldf_persoon_historie.prshstbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(30, ldf_persoon_historie.prshstbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(31, ldf_persoon_historie.prshstaanduidinggegevensonderzoek);

                    if(ldf_persoon_historie.prshstdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(32, new java.sql.Timestamp(ldf_persoon_historie.prshstdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(32, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon_historie.prshstdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(33, ldf_persoon_historie.prshstdatumingangonderzoekindicator);
}

                    if(ldf_persoon_historie.prshstdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(34, new java.sql.Timestamp(ldf_persoon_historie.prshstdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(34, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon_historie.prshstdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(35, ldf_persoon_historie.prshstdatumeindeonderzoekindicator);
}

                    if(ldf_persoon_historie.prshstingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(36, new java.sql.Timestamp(ldf_persoon_historie.prshstingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(36, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon_historie.prshstingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(37, ldf_persoon_historie.prshstingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon_historie.prshstdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(38, new java.sql.Timestamp(ldf_persoon_historie.prshstdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(38, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon_historie.prshstdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(39, ldf_persoon_historie.prshstdatumvanopnemingindicator);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_persoon_historie"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_titels_predikaten_persoon_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_persoon_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_persoon_naam" );

					
					
				
					if(tHash_Lookup_ldf_landen_persoon_geboorte != null) {
						tHash_Lookup_ldf_landen_persoon_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_persoon_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht != null) {
						tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_persoon_akte != null) {
						tHash_Lookup_ldf_gemeenten_persoon_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_persoon_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_persoon_document != null) {
						tHash_Lookup_ldf_gemeenten_persoon_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_persoon_document" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_persoon_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_persoon_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_persoon_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_persoon_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_persoon_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_persoon_document"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_persoon_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_persoon_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_persoon_naamStruct other = (ldf_titels_predikaten_persoon_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_persoon_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_persoon_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_persoon_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naam = new ldf_titels_predikaten_persoon_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_persoon_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_persoon_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_persoon_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_persoon_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_persoon_naam
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_persoon_naam) | target node:tAdvancedHash_ldf_titels_predikaten_persoon_naam - inputs:(ldf_titels_predikaten_persoon_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon_historie,ldf_titels_predikaten_persoon_naam,ldf_landen_persoon_geboorte,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document) outputs:(ldf_persoon_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_persoon_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct> tHash_Lookup_ldf_titels_predikaten_persoon_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_persoon_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_persoon_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_persoon_naam", tHash_Lookup_ldf_titels_predikaten_persoon_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_titels_predikaten_persoon_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_persoon_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	

			//ldf_titels_predikaten_persoon_naam
			//ldf_titels_predikaten_persoon_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_persoon_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naam_HashRow = new ldf_titels_predikaten_persoon_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_persoon_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_persoon_naam.adellijketitelcode;
				
				ldf_titels_predikaten_persoon_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_persoon_naam.put(ldf_titels_predikaten_persoon_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_persoon_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	

tHash_Lookup_ldf_titels_predikaten_persoon_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_persoon_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_persoon_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_persoon_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_persoon_geboorteStruct other = (ldf_landen_persoon_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_persoon_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_persoon_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_persoon_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorte = new ldf_landen_persoon_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_persoon_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_persoon_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_persoon_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_persoon_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_persoon_geboorte
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_persoon_geboorte,ldf_landen_persoon_geboorte) | target node:tAdvancedHash_ldf_landen_persoon_geboorte - inputs:(ldf_landen_persoon_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon_historie,ldf_titels_predikaten_persoon_naam,ldf_landen_persoon_geboorte,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document) outputs:(ldf_persoon_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_persoon_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct> tHash_Lookup_ldf_landen_persoon_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_persoon_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_persoon_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_persoon_geboorte", tHash_Lookup_ldf_landen_persoon_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_landen_persoon_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_persoon_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_landen_persoon_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_persoon_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	

			//ldf_landen_persoon_geboorte
			//ldf_landen_persoon_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_persoon_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorte_HashRow = new ldf_landen_persoon_geboorteStruct();
		   	   	   
				
				ldf_landen_persoon_geboorte_HashRow.landcode = ldf_landen_persoon_geboorte.landcode;
				
				ldf_landen_persoon_geboorte_HashRow.landomschrijving = ldf_landen_persoon_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_persoon_geboorte.put(ldf_landen_persoon_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_persoon_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	

tHash_Lookup_ldf_landen_persoon_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_persoon_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_geslachtsaanduidingen_persoon_geslachtStruct implements routines.system.IPersistableComparableLookupRow<ldf_geslachtsaanduidingen_persoon_geslachtStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String geslachtsaanduidingcode;

				public String getGeslachtsaanduidingcode () {
					return this.geslachtsaanduidingcode;
				}
				
			    public String geslachtsaanduidingomschrijving;

				public String getGeslachtsaanduidingomschrijving () {
					return this.geslachtsaanduidingomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.geslachtsaanduidingcode == null) ? 0 : this.geslachtsaanduidingcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_geslachtsaanduidingen_persoon_geslachtStruct other = (ldf_geslachtsaanduidingen_persoon_geslachtStruct) obj;
		
						if (this.geslachtsaanduidingcode == null) {
							if (other.geslachtsaanduidingcode != null)
								return false;
						
						} else if (!this.geslachtsaanduidingcode.equals(other.geslachtsaanduidingcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_geslachtsaanduidingen_persoon_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            other.geslachtsaanduidingomschrijving = this.geslachtsaanduidingomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_geslachtsaanduidingen_persoon_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.geslachtsaanduidingcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.geslachtsaanduidingcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.geslachtsaanduidingomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.geslachtsaanduidingomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("geslachtsaanduidingcode="+geslachtsaanduidingcode);
		sb.append(",geslachtsaanduidingomschrijving="+geslachtsaanduidingomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_geslachtsaanduidingen_persoon_geslachtStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.geslachtsaanduidingcode, other.geslachtsaanduidingcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslacht = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();




	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", false);
		start_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_persoon_geslacht" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht().limitLog4jByte();

			   		// connection name:ldf_geslachtsaanduidingen_persoon_geslacht
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_persoon_geslacht) | target node:tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht - inputs:(ldf_geslachtsaanduidingen_persoon_geslacht) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon_historie,ldf_titels_predikaten_persoon_naam,ldf_landen_persoon_geboorte,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document) outputs:(ldf_persoon_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_geslachtsaanduidingen_persoon_geslacht = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_geslachtsaanduidingen_persoon_geslachtStruct>getLookup(matchingModeEnum_ldf_geslachtsaanduidingen_persoon_geslacht);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht", tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\ngeslachtsaanduidingcode,\ngeslachtsaanduidingomschrijving\nfrom ibz_cip_geslachtsaanduidingen";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	

			//ldf_geslachtsaanduidingen_persoon_geslacht
			//ldf_geslachtsaanduidingen_persoon_geslacht


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_persoon_geslacht"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslacht_HashRow = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();
		   	   	   
				
				ldf_geslachtsaanduidingen_persoon_geslacht_HashRow.geslachtsaanduidingcode = ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode;
				
				ldf_geslachtsaanduidingen_persoon_geslacht_HashRow.geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving;
				
			tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.put(ldf_geslachtsaanduidingen_persoon_geslacht_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht++;

/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	

tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_persoon_geslacht"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", true);
end_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_persoon_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_persoon_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_persoon_akteStruct other = (ldf_gemeenten_persoon_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_persoon_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_persoon_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_persoon_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akte = new ldf_gemeenten_persoon_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_persoon_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_persoon_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_persoon_akte
			   		// source node:tPostgresqlInput_4 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_akte) | target node:tAdvancedHash_ldf_gemeenten_persoon_akte - inputs:(ldf_gemeenten_persoon_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon_historie,ldf_titels_predikaten_persoon_naam,ldf_landen_persoon_geboorte,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document) outputs:(ldf_persoon_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_persoon_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct> tHash_Lookup_ldf_gemeenten_persoon_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_persoon_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_persoon_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_persoon_akte", tHash_Lookup_ldf_gemeenten_persoon_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_4);
			   	String dbUser_tPostgresqlInput_4 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;
		        
				
			String url_tPostgresqlInput_4 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_4,dbUser_tPostgresqlInput_4,dbPwd_tPostgresqlInput_4);
		        
				conn_tPostgresqlInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);

		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;
		try{
		    rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								ldf_gemeenten_persoon_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								ldf_gemeenten_persoon_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	

			//ldf_gemeenten_persoon_akte
			//ldf_gemeenten_persoon_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_persoon_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akte_HashRow = new ldf_gemeenten_persoon_akteStruct();
		   	   	   
				
				ldf_gemeenten_persoon_akte_HashRow.gemeentecode = ldf_gemeenten_persoon_akte.gemeentecode;
				
				ldf_gemeenten_persoon_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_persoon_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_persoon_akte.put(ldf_gemeenten_persoon_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_persoon_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	stmt_tPostgresqlInput_4.close();

	if(conn_tPostgresqlInput_4 != null && !conn_tPostgresqlInput_4.isClosed()) {
		
			conn_tPostgresqlInput_4.commit();
			
		
			conn_tPostgresqlInput_4.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	

tHash_Lookup_ldf_gemeenten_persoon_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_persoon_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_persoon_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_persoon_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_persoon_documentStruct other = (ldf_gemeenten_persoon_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_persoon_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_persoon_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_persoon_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_document = new ldf_gemeenten_persoon_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_persoon_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_persoon_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_persoon_document
			   		// source node:tPostgresqlInput_5 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_persoon_document,ldf_gemeenten_persoon_document) | target node:tAdvancedHash_ldf_gemeenten_persoon_document - inputs:(ldf_gemeenten_persoon_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon_historie,ldf_titels_predikaten_persoon_naam,ldf_landen_persoon_geboorte,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document) outputs:(ldf_persoon_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_persoon_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct> tHash_Lookup_ldf_gemeenten_persoon_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_persoon_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_persoon_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_persoon_document", tHash_Lookup_ldf_gemeenten_persoon_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_5);
			   	String dbUser_tPostgresqlInput_5 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;
		        
				
			String url_tPostgresqlInput_5 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_5,dbUser_tPostgresqlInput_5,dbPwd_tPostgresqlInput_5);
		        
				conn_tPostgresqlInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);

		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;
		try{
		    rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								ldf_gemeenten_persoon_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								ldf_gemeenten_persoon_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	

			//ldf_gemeenten_persoon_document
			//ldf_gemeenten_persoon_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_persoon_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_document_HashRow = new ldf_gemeenten_persoon_documentStruct();
		   	   	   
				
				ldf_gemeenten_persoon_document_HashRow.gemeentecode = ldf_gemeenten_persoon_document.gemeentecode;
				
				ldf_gemeenten_persoon_document_HashRow.gemeenteomschrijving = ldf_gemeenten_persoon_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_persoon_document.put(ldf_gemeenten_persoon_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_persoon_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	stmt_tPostgresqlInput_5.close();

	if(conn_tPostgresqlInput_5 != null && !conn_tPostgresqlInput_5.isClosed()) {
		
			conn_tPostgresqlInput_5.commit();
			
		
			conn_tPostgresqlInput_5.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	

tHash_Lookup_ldf_gemeenten_persoon_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_persoon_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_persoon_historie ibz_cipers_fill_ldf_persoon_historieClass = new ibz_cipers_fill_ldf_persoon_historie();

        int exitCode = ibz_cipers_fill_ldf_persoon_historieClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_persoon_historie.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_persoon_historie_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_persoon_historie");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     267999 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:51 CET
 ************************************************************************************************/