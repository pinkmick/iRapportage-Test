// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_create_ldf_tabellen_0_1;

import routines.CustomSettings;
import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.PasswordReader;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Settings;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_create_ldf_tabellen Purpose: <br>
 * Description: Create all tables of iRapportage in the LDF. <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_create_ldf_tabellen implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_create_ldf_tabellen";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_create_ldf_tabellen.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_create_ldf_tabellen.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_create_ldf_tabellen) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tCreateTable_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_1", false);
		start_Hash.put("tCreateTable_1", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_1";

	
		int tos_count_tCreateTable_1 = 0;
		
    	class BytesLimit65535_tCreateTable_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_1().limitLog4jByte();

 



/**
 * [tCreateTable_1 begin ] stop
 */
	
	/**
	 * [tCreateTable_1 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

    try{
            String driverClass_tCreateTable_1="org.postgresql.Driver";
String url_tCreateTable_1="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_1="mks_owner";

        String tableName_tCreateTable_1 = "ibz_cip_persoon";
String dbSchema_tCreateTable_1 = "ldf";
if(dbSchema_tCreateTable_1 != null && dbSchema_tCreateTable_1.trim().length() != 0) {tableName_tCreateTable_1 = dbSchema_tCreateTable_1 + "\".\"" + tableName_tCreateTable_1;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_1= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_1= java.sql.DriverManager.getConnection(url_tCreateTable_1,dbUser_tCreateTable_1, decryptedPassword_tCreateTable_1);

            boolean whetherExist_tCreateTable_1 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_1 = conn_tCreateTable_1.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_1 = dbMetaData_tCreateTable_1.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_1 = "public";
                if(dbSchema_tCreateTable_1 == null || dbSchema_tCreateTable_1.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_1 = stmtSchema_tCreateTable_1.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_1.next()){
                                defaultSchema_tCreateTable_1 = rsSchema_tCreateTable_1.getString("current_schema");
                	}
                	rsSchema_tCreateTable_1.close();
                	stmtSchema_tCreateTable_1.close();
                }
                while(rsTable_tCreateTable_1.next()) {
                    String table_tCreateTable_1 = rsTable_tCreateTable_1.getString("TABLE_NAME");
                    String schema_tCreateTable_1 = rsTable_tCreateTable_1.getString("TABLE_SCHEM");
                    if(table_tCreateTable_1.equals("ibz_cip_persoon") 
                        && (schema_tCreateTable_1.equals(dbSchema_tCreateTable_1) || ((dbSchema_tCreateTable_1 ==null || dbSchema_tCreateTable_1.trim().length() ==0) && defaultSchema_tCreateTable_1.equals(schema_tCreateTable_1)))) {
                        whetherExist_tCreateTable_1 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_1.close();
                if(!whetherExist_tCreateTable_1) {
                    java.sql.Statement stmt_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                    stmt_tCreateTable_1.execute("CREATE TABLE \"" + tableName_tCreateTable_1 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"prsburgerservicenummer\" NUMERIC(9,0)  ,\"prsvoornamen\" VARCHAR(220)  ,\"prseerstevoornaam\" VARCHAR(30)  ,\"prsvoorletters\" VARCHAR(50)  ,\"prsadellijketitelcode\" VARCHAR(2)  ,\"prsadellijketitelomschrijving\" VARCHAR(20)  ,\"prsvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"prsgeslachtsnaam\" VARCHAR(220)  ,\"prsnaamopgemaakt\" VARCHAR(500)  ,\"prsgeboortedatum\" DATE ,\"prsgeboortedatumindicator\" VARCHAR(1)  ,\"prsgeboorteplaatscode\" VARCHAR(4)  ,\"prsgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"prsgeboortelandcode\" VARCHAR(4)  ,\"prsgeboortelandomschrijving\" VARCHAR(40)  ,\"prsgeslachtsaanduidingcode\" VARCHAR(1)  ,\"prsgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"prsvoriganummer\" NUMERIC(10,0)  ,\"prsvolgendanummer\" NUMERIC(10,0)  ,\"prsaanduidingnaamgebruik\" VARCHAR(1)  ,\"prsregistergemeenteaktecode\" VARCHAR(4)  ,\"prsregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"prsaktenummer\" VARCHAR(7)  ,\"prsgemeentedocumentcode\" VARCHAR(4)  ,\"prsgemeentedocumentomschrijving\" VARCHAR(35)  ,\"prsdatumdocument\" DATE ,\"prsdatumdocumentindicator\" VARCHAR(1)  ,\"prsbeschrijvingdocument\" VARCHAR(50)  ,\"prsaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"prsdatumingangonderzoek\" DATE ,\"prsdatumingangonderzoekindicator\" VARCHAR(1)  ,\"prsdatumeindeonderzoek\" DATE ,\"prsdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"prsingangsdatumgeldigheid\" DATE ,\"prsingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"prsdatumvanopneming\" DATE ,\"prsdatumvanopnemingindicator\" VARCHAR(1)  ,\"prsstatuspersoon\" NUMERIC(1,0)  ,\"prsrijkskodenationaliteit\" NUMERIC(1,0)  ,\"prsgezinsverhouding\" NUMERIC(1,0)  ,\"prsgezinssterkte\" NUMERIC(2,0)  ,\"prsanummergezinshoofd\" NUMERIC(10,0)  ,\"prsburgerlijkestaat\" VARCHAR(1)  ,\"prsnaamswijzigingindicatie\" VARCHAR(1)  ,\"prsdatumadreshoudingaaneengesloten\" DATE ,\"prsdatumadreshoudingaaneengeslotenindicator\" VARCHAR(1)  ,\"ou1anummer\" NUMERIC(10,0)  ,\"ou1burgerservicenummer\" NUMERIC(9,0)  ,\"ou1voornamen\" VARCHAR(220)  ,\"ou1voorletters\" VARCHAR(50)  ,\"ou1adellijketitelcode\" VARCHAR(2)  ,\"ou1adellijketitelomschrijving\" VARCHAR(20)  ,\"ou1voorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou1geslachtsnaam\" VARCHAR(220)  ,\"ou1naamopgemaakt\" VARCHAR(300)  ,\"ou1geboortedatum\" DATE ,\"ou1geboortedatumindicator\" VARCHAR(1)  ,\"ou1geboorteplaatscode\" VARCHAR(4)  ,\"ou1geboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou1geboortelandcode\" VARCHAR(4)  ,\"ou1geboortelandomschrijving\" VARCHAR(40)  ,\"ou1geslachtsaanduidingcode\" VARCHAR(1)  ,\"ou1geslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou1datumingangfamilierechtelijkebetrekking\" DATE ,\"ou1datumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou1registergemeenteaktecode\" VARCHAR(4)  ,\"ou1registergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou1aktenummer\" VARCHAR(7)  ,\"ou1gemeentedocumentcode\" VARCHAR(4)  ,\"ou1gemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou1datumdocument\" DATE ,\"ou1datumdocumentindicator\" VARCHAR(1)  ,\"ou1beschrijvingdocument\" VARCHAR(50)  ,\"ou1aanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou1datumingangonderzoek\" DATE ,\"ou1datumingangonderzoekindicator\" VARCHAR(1)  ,\"ou1datumeindeonderzoek\" DATE ,\"ou1datumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou1ingangsdatumgeldigheid\" DATE ,\"ou1ingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou1datumvanopneming\" DATE ,\"ou1datumvanopnemingindicator\" VARCHAR(1)  ,\"ou2anummer\" NUMERIC(10,0)  ,\"ou2burgerservicenummer\" NUMERIC(9,0)  ,\"ou2voornamen\" VARCHAR(220)  ,\"ou2voorletters\" VARCHAR(50)  ,\"ou2adellijketitelcode\" VARCHAR(2)  ,\"ou2adellijketitelomschrijving\" VARCHAR(20)  ,\"ou2voorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou2geslachtsnaam\" VARCHAR(220)  ,\"ou2naamopgemaakt\" VARCHAR(300)  ,\"ou2geboortedatum\" DATE ,\"ou2geboortedatumindicator\" VARCHAR(1)  ,\"ou2geboorteplaatscode\" VARCHAR(4)  ,\"ou2geboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou2geboortelandcode\" VARCHAR(4)  ,\"ou2geboortelandomschrijving\" VARCHAR(40)  ,\"ou2geslachtsaanduidingcode\" VARCHAR(1)  ,\"ou2geslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou2datumingangfamilierechtelijkebetrekking\" DATE ,\"ou2datumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou2registergemeenteaktecode\" VARCHAR(4)  ,\"ou2registergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou2aktenummer\" VARCHAR(7)  ,\"ou2gemeentedocumentcode\" VARCHAR(4)  ,\"ou2gemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou2datumdocument\" DATE ,\"ou2datumdocumentindicator\" VARCHAR(1)  ,\"ou2beschrijvingdocument\" VARCHAR(50)  ,\"ou2aanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou2datumingangonderzoek\" DATE ,\"ou2datumingangonderzoekindicator\" VARCHAR(1)  ,\"ou2datumeindeonderzoek\" DATE ,\"ou2datumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou2ingangsdatumgeldigheid\" DATE ,\"ou2ingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou2datumvanopneming\" DATE ,\"ou2datumvanopnemingindicator\" VARCHAR(1)  ,\"ovldatumoverlijden\" DATE ,\"ovldatumoverlijdenindicator\" VARCHAR(1)  ,\"ovlplaatsoverlijdencode\" VARCHAR(4)  ,\"ovlplaatsoverlijdenomschrijving\" VARCHAR(50)  ,\"ovllandoverlijdencode\" VARCHAR(4)  ,\"ovllandoverlijdenomschrijving\" VARCHAR(40)  ,\"ovlregistergemeenteaktecode\" VARCHAR(4)  ,\"ovlregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ovlaktenummer\" VARCHAR(7)  ,\"ovlgemeentedocumentcode\" VARCHAR(4)  ,\"ovlgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ovldatumdocument\" DATE ,\"ovldatumdocumentindicator\" VARCHAR(1)  ,\"ovlbeschrijvingdocument\" VARCHAR(50)  ,\"ovlaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ovldatumingangonderzoek\" DATE ,\"ovldatumingangonderzoekindicator\" VARCHAR(1)  ,\"ovldatumeindeonderzoek\" DATE ,\"ovldatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ovlingangsdatumgeldigheid\" DATE ,\"ovlingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ovldatumvanopneming\" DATE ,\"ovldatumvanopnemingindicator\" VARCHAR(1)  ,\"insdatumingangblokkeringpl\" DATE ,\"insdatumingangblokkeringplindicator\" VARCHAR(1)  ,\"insdatumopschortingbijhouding\" DATE ,\"insdatumopschortingbijhoudingindicator\" VARCHAR(1)  ,\"insomschrijvingredenopschortingbijhouding\" VARCHAR(1)  ,\"insdatumeersteinschrijvinggba\" DATE ,\"insdatumeersteinschrijvingindicator\" VARCHAR(1)  ,\"insgemeentewaarpkzichbevindtcode\" VARCHAR(4)  ,\"insgemeentewaarpkzichbevindtomschrijving\" VARCHAR(35)  ,\"insindicatiegeheim\" VARCHAR(1)  ,\"insversienummer\" NUMERIC(4,0)  ,\"insdatumtijdstempel\" VARCHAR(17)  ,\"inspkgegevensvolledigmeegeconverteerd\" VARCHAR(1)  ,\"vblgemeentevaninschrijvingcode\" VARCHAR(4)  ,\"vblgemeentevaninschrijvingomschrijving\" VARCHAR(35)  ,\"vbldatuminschrijving\" DATE ,\"vbldatuminschrijvingindicator\" VARCHAR(1)  ,\"vblfunctieadres\" VARCHAR(1)  ,\"vblgemeentedeel\" VARCHAR(24)  ,\"vbldatumaanvangadreshouding\" DATE ,\"vbldatumaanvangadreshoudingindicator\" VARCHAR(1)  ,\"vblstraatnaam\" VARCHAR(24)  ,\"vblnaamopenbareruimte\" VARCHAR(80)  ,\"vbladresopgemaakt\" VARCHAR(50)  ,\"vblwoonplaatsopgemaakt\" VARCHAR(40)  ,\"vblhuisnummer\" NUMERIC(5,0)  ,\"vblhuisletter\" VARCHAR(1)  ,\"vblhuisnummertoevoeging\" VARCHAR(4)  ,\"vblaanduidingbijhuisnummer\" VARCHAR(2)  ,\"vblpostcode\" VARCHAR(6)  ,\"vblwoonplaatsnaam\" VARCHAR(80)  ,\"vblidentificatiecodeverblijfplaats\" VARCHAR(16)  ,\"vblidentificatiecodenummeraanduiding\" VARCHAR(16)  ,\"vbllocatiebeschrijving\" VARCHAR(35)  ,\"vbllandadresbuitenlandcode\" VARCHAR(4)  ,\"vbllandadresbuitenlandomschrijving\" VARCHAR(40)  ,\"vbldatumaanvangadresbuitenland\" DATE ,\"vbldatumaanvangadresbuitenlandindicator\" VARCHAR(1)  ,\"vblregel1adresbuitenland\" VARCHAR(45)  ,\"vblregel2adresbuitenland\" VARCHAR(45)  ,\"vblregel3adresbuitenland\" VARCHAR(45)  ,\"vbllandvanwaaringeschrevencode\" VARCHAR(4)  ,\"vbllandvanwaaringeschrevenomschrijving\" VARCHAR(40)  ,\"vbldatumvestiginginnederland\" DATE ,\"vbldatumvestiginginnederlandindicator\" VARCHAR(1)  ,\"vblomschrijvingvanaangifteadreshouding\" VARCHAR(1)  ,\"vblindicatiedocument\" NUMERIC(1,0)  ,\"vblaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vbldatumingangonderzoek\" DATE ,\"vbldatumingangonderzoekindicator\" VARCHAR(1)  ,\"vbldatumeindeonderzoek\" DATE ,\"vbldatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vblingangsdatumgeldigheid\" DATE ,\"vblingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vbldatumvanopneming\" DATE ,\"vbldatumvanopnemingindicator\" VARCHAR(1)  ,\"vblsoortpandcode\" VARCHAR(4)  ,\"vblsoortpandomschrijving\" VARCHAR(35)  ,\"vblwijkcode\" VARCHAR(3)  ,\"vblwijkomschrijving\" VARCHAR(35)  ,\"vblplanalogischewijkcode\" VARCHAR(3)  ,\"vblplanalogischewijkomschrijving\" VARCHAR(35)  ,\"vblanummerhoofdbewoner\" NUMERIC(10,0)  ,\"vbtaanduidingverblijfstitelcode\" VARCHAR(2)  ,\"vbtverblijfstitelvervallen\" VARCHAR(1)  ,\"vbtaanduidingverblijfstitelomschrijving\" VARCHAR(80)  ,\"vbtdatumeindeverblijfstitel\" DATE ,\"vbtdatumeindeverblijfstitelindicator\" VARCHAR(1)  ,\"vbtingangsdatumverblijfstitel\" DATE ,\"vbtingangsdatumverblijfstitelindicator\" VARCHAR(1)  ,\"vbtaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vbtdatumingangonderzoek\" DATE ,\"vbtdatumingangonderzoekindicator\" VARCHAR(1)  ,\"vbtdatumeindeonderzoek\" DATE ,\"vbtdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vbtingangsdatumgeldigheid\" DATE ,\"vbtingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vbtdatumvanopneming\" DATE ,\"vbtdatumvanopnemingindicator\" VARCHAR(1)  ,\"gzvindicatiegezagminderjarige\" VARCHAR(2)  ,\"gzvindicatiecurateleregister\" NUMERIC(1,0)  ,\"gzvgemeentedocumentcode\" VARCHAR(4)  ,\"gzvgemeentedocumentomschrijving\" VARCHAR(35)  ,\"gzvdatumdocument\" DATE ,\"gzvdatumdocumentindicator\" VARCHAR(1)  ,\"gzvbeschrijvingdocument\" VARCHAR(50)  ,\"gzvaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"gzvdatumingangonderzoek\" DATE ,\"gzvdatumingangonderzoekindicator\" VARCHAR(1)  ,\"gzvdatumeindeonderzoek\" DATE ,\"gzvdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"gzvingangsdatumgeldigheid\" DATE ,\"gzvingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"gzvdatumvanopneming\" DATE ,\"gzvdatumvanopnemingindicator\" VARCHAR(1)  ,\"ksraanduidingeuropeeskiesrecht\" NUMERIC(1,0)  ,\"ksrdatumverzoekofmededelingeuropeeskiesrecht\" DATE ,\"ksrdatumverzoekofmededelingeuropeeskiesrechtindicator\" VARCHAR(1)  ,\"ksreinddatumuitsluitingeuropeeskiesrecht\" DATE ,\"ksreinddatumuitsluitingeuropeeskiesrechtindicator\" VARCHAR(1)  ,\"ksraanduidinguitgeslotenkiesrecht\" VARCHAR(1)  ,\"ksreinddatumuitsluitingkiesrecht\" DATE ,\"ksreinddatumuitsluitingkiesrechtindicator\" VARCHAR(1)  ,\"ksrgemeentedocumentcode\" VARCHAR(4)  ,\"ksrgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ksrdatumdocument\" DATE ,\"ksrdatumdocumentindicator\" VARCHAR(1)  ,\"ksrbeschrijvingdocument\" VARCHAR(50)  ,\"vwsgemeentevaninschrijvingcode\" VARCHAR(4)  ,\"vwsgemeentevaninschrijvingomschrijving\" VARCHAR(35)  ,\"vwsdatuminschrijving\" DATE ,\"vwsdatuminschrijvingindicator\" VARCHAR(1)  ,\"vwsindicatiegeheim\" VARCHAR(1)  ,primary key(\"prsanummer\"))");                
		            
                }
        if(conn_tCreateTable_1 != null && !conn_tCreateTable_1.isClosed()) {
conn_tCreateTable_1.close();
}

        globalMap.put("tCreateTable_1_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_1 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"prsburgerservicenummer\" NUMERIC(9,0)  ,\"prsvoornamen\" VARCHAR(220)  ,\"prseerstevoornaam\" VARCHAR(30)  ,\"prsvoorletters\" VARCHAR(50)  ,\"prsadellijketitelcode\" VARCHAR(2)  ,\"prsadellijketitelomschrijving\" VARCHAR(20)  ,\"prsvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"prsgeslachtsnaam\" VARCHAR(220)  ,\"prsnaamopgemaakt\" VARCHAR(500)  ,\"prsgeboortedatum\" DATE ,\"prsgeboortedatumindicator\" VARCHAR(1)  ,\"prsgeboorteplaatscode\" VARCHAR(4)  ,\"prsgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"prsgeboortelandcode\" VARCHAR(4)  ,\"prsgeboortelandomschrijving\" VARCHAR(40)  ,\"prsgeslachtsaanduidingcode\" VARCHAR(1)  ,\"prsgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"prsvoriganummer\" NUMERIC(10,0)  ,\"prsvolgendanummer\" NUMERIC(10,0)  ,\"prsaanduidingnaamgebruik\" VARCHAR(1)  ,\"prsregistergemeenteaktecode\" VARCHAR(4)  ,\"prsregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"prsaktenummer\" VARCHAR(7)  ,\"prsgemeentedocumentcode\" VARCHAR(4)  ,\"prsgemeentedocumentomschrijving\" VARCHAR(35)  ,\"prsdatumdocument\" DATE ,\"prsdatumdocumentindicator\" VARCHAR(1)  ,\"prsbeschrijvingdocument\" VARCHAR(50)  ,\"prsaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"prsdatumingangonderzoek\" DATE ,\"prsdatumingangonderzoekindicator\" VARCHAR(1)  ,\"prsdatumeindeonderzoek\" DATE ,\"prsdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"prsingangsdatumgeldigheid\" DATE ,\"prsingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"prsdatumvanopneming\" DATE ,\"prsdatumvanopnemingindicator\" VARCHAR(1)  ,\"prsstatuspersoon\" NUMERIC(1,0)  ,\"prsrijkskodenationaliteit\" NUMERIC(1,0)  ,\"prsgezinsverhouding\" NUMERIC(1,0)  ,\"prsgezinssterkte\" NUMERIC(2,0)  ,\"prsanummergezinshoofd\" NUMERIC(10,0)  ,\"prsburgerlijkestaat\" VARCHAR(1)  ,\"prsnaamswijzigingindicatie\" VARCHAR(1)  ,\"prsdatumadreshoudingaaneengesloten\" DATE ,\"prsdatumadreshoudingaaneengeslotenindicator\" VARCHAR(1)  ,\"ou1anummer\" NUMERIC(10,0)  ,\"ou1burgerservicenummer\" NUMERIC(9,0)  ,\"ou1voornamen\" VARCHAR(220)  ,\"ou1voorletters\" VARCHAR(50)  ,\"ou1adellijketitelcode\" VARCHAR(2)  ,\"ou1adellijketitelomschrijving\" VARCHAR(20)  ,\"ou1voorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou1geslachtsnaam\" VARCHAR(220)  ,\"ou1naamopgemaakt\" VARCHAR(300)  ,\"ou1geboortedatum\" DATE ,\"ou1geboortedatumindicator\" VARCHAR(1)  ,\"ou1geboorteplaatscode\" VARCHAR(4)  ,\"ou1geboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou1geboortelandcode\" VARCHAR(4)  ,\"ou1geboortelandomschrijving\" VARCHAR(40)  ,\"ou1geslachtsaanduidingcode\" VARCHAR(1)  ,\"ou1geslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou1datumingangfamilierechtelijkebetrekking\" DATE ,\"ou1datumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou1registergemeenteaktecode\" VARCHAR(4)  ,\"ou1registergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou1aktenummer\" VARCHAR(7)  ,\"ou1gemeentedocumentcode\" VARCHAR(4)  ,\"ou1gemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou1datumdocument\" DATE ,\"ou1datumdocumentindicator\" VARCHAR(1)  ,\"ou1beschrijvingdocument\" VARCHAR(50)  ,\"ou1aanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou1datumingangonderzoek\" DATE ,\"ou1datumingangonderzoekindicator\" VARCHAR(1)  ,\"ou1datumeindeonderzoek\" DATE ,\"ou1datumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou1ingangsdatumgeldigheid\" DATE ,\"ou1ingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou1datumvanopneming\" DATE ,\"ou1datumvanopnemingindicator\" VARCHAR(1)  ,\"ou2anummer\" NUMERIC(10,0)  ,\"ou2burgerservicenummer\" NUMERIC(9,0)  ,\"ou2voornamen\" VARCHAR(220)  ,\"ou2voorletters\" VARCHAR(50)  ,\"ou2adellijketitelcode\" VARCHAR(2)  ,\"ou2adellijketitelomschrijving\" VARCHAR(20)  ,\"ou2voorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou2geslachtsnaam\" VARCHAR(220)  ,\"ou2naamopgemaakt\" VARCHAR(300)  ,\"ou2geboortedatum\" DATE ,\"ou2geboortedatumindicator\" VARCHAR(1)  ,\"ou2geboorteplaatscode\" VARCHAR(4)  ,\"ou2geboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou2geboortelandcode\" VARCHAR(4)  ,\"ou2geboortelandomschrijving\" VARCHAR(40)  ,\"ou2geslachtsaanduidingcode\" VARCHAR(1)  ,\"ou2geslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou2datumingangfamilierechtelijkebetrekking\" DATE ,\"ou2datumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou2registergemeenteaktecode\" VARCHAR(4)  ,\"ou2registergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou2aktenummer\" VARCHAR(7)  ,\"ou2gemeentedocumentcode\" VARCHAR(4)  ,\"ou2gemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou2datumdocument\" DATE ,\"ou2datumdocumentindicator\" VARCHAR(1)  ,\"ou2beschrijvingdocument\" VARCHAR(50)  ,\"ou2aanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou2datumingangonderzoek\" DATE ,\"ou2datumingangonderzoekindicator\" VARCHAR(1)  ,\"ou2datumeindeonderzoek\" DATE ,\"ou2datumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou2ingangsdatumgeldigheid\" DATE ,\"ou2ingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou2datumvanopneming\" DATE ,\"ou2datumvanopnemingindicator\" VARCHAR(1)  ,\"ovldatumoverlijden\" DATE ,\"ovldatumoverlijdenindicator\" VARCHAR(1)  ,\"ovlplaatsoverlijdencode\" VARCHAR(4)  ,\"ovlplaatsoverlijdenomschrijving\" VARCHAR(50)  ,\"ovllandoverlijdencode\" VARCHAR(4)  ,\"ovllandoverlijdenomschrijving\" VARCHAR(40)  ,\"ovlregistergemeenteaktecode\" VARCHAR(4)  ,\"ovlregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ovlaktenummer\" VARCHAR(7)  ,\"ovlgemeentedocumentcode\" VARCHAR(4)  ,\"ovlgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ovldatumdocument\" DATE ,\"ovldatumdocumentindicator\" VARCHAR(1)  ,\"ovlbeschrijvingdocument\" VARCHAR(50)  ,\"ovlaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ovldatumingangonderzoek\" DATE ,\"ovldatumingangonderzoekindicator\" VARCHAR(1)  ,\"ovldatumeindeonderzoek\" DATE ,\"ovldatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ovlingangsdatumgeldigheid\" DATE ,\"ovlingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ovldatumvanopneming\" DATE ,\"ovldatumvanopnemingindicator\" VARCHAR(1)  ,\"insdatumingangblokkeringpl\" DATE ,\"insdatumingangblokkeringplindicator\" VARCHAR(1)  ,\"insdatumopschortingbijhouding\" DATE ,\"insdatumopschortingbijhoudingindicator\" VARCHAR(1)  ,\"insomschrijvingredenopschortingbijhouding\" VARCHAR(1)  ,\"insdatumeersteinschrijvinggba\" DATE ,\"insdatumeersteinschrijvingindicator\" VARCHAR(1)  ,\"insgemeentewaarpkzichbevindtcode\" VARCHAR(4)  ,\"insgemeentewaarpkzichbevindtomschrijving\" VARCHAR(35)  ,\"insindicatiegeheim\" VARCHAR(1)  ,\"insversienummer\" NUMERIC(4,0)  ,\"insdatumtijdstempel\" VARCHAR(17)  ,\"inspkgegevensvolledigmeegeconverteerd\" VARCHAR(1)  ,\"vblgemeentevaninschrijvingcode\" VARCHAR(4)  ,\"vblgemeentevaninschrijvingomschrijving\" VARCHAR(35)  ,\"vbldatuminschrijving\" DATE ,\"vbldatuminschrijvingindicator\" VARCHAR(1)  ,\"vblfunctieadres\" VARCHAR(1)  ,\"vblgemeentedeel\" VARCHAR(24)  ,\"vbldatumaanvangadreshouding\" DATE ,\"vbldatumaanvangadreshoudingindicator\" VARCHAR(1)  ,\"vblstraatnaam\" VARCHAR(24)  ,\"vblnaamopenbareruimte\" VARCHAR(80)  ,\"vbladresopgemaakt\" VARCHAR(50)  ,\"vblwoonplaatsopgemaakt\" VARCHAR(40)  ,\"vblhuisnummer\" NUMERIC(5,0)  ,\"vblhuisletter\" VARCHAR(1)  ,\"vblhuisnummertoevoeging\" VARCHAR(4)  ,\"vblaanduidingbijhuisnummer\" VARCHAR(2)  ,\"vblpostcode\" VARCHAR(6)  ,\"vblwoonplaatsnaam\" VARCHAR(80)  ,\"vblidentificatiecodeverblijfplaats\" VARCHAR(16)  ,\"vblidentificatiecodenummeraanduiding\" VARCHAR(16)  ,\"vbllocatiebeschrijving\" VARCHAR(35)  ,\"vbllandadresbuitenlandcode\" VARCHAR(4)  ,\"vbllandadresbuitenlandomschrijving\" VARCHAR(40)  ,\"vbldatumaanvangadresbuitenland\" DATE ,\"vbldatumaanvangadresbuitenlandindicator\" VARCHAR(1)  ,\"vblregel1adresbuitenland\" VARCHAR(45)  ,\"vblregel2adresbuitenland\" VARCHAR(45)  ,\"vblregel3adresbuitenland\" VARCHAR(45)  ,\"vbllandvanwaaringeschrevencode\" VARCHAR(4)  ,\"vbllandvanwaaringeschrevenomschrijving\" VARCHAR(40)  ,\"vbldatumvestiginginnederland\" DATE ,\"vbldatumvestiginginnederlandindicator\" VARCHAR(1)  ,\"vblomschrijvingvanaangifteadreshouding\" VARCHAR(1)  ,\"vblindicatiedocument\" NUMERIC(1,0)  ,\"vblaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vbldatumingangonderzoek\" DATE ,\"vbldatumingangonderzoekindicator\" VARCHAR(1)  ,\"vbldatumeindeonderzoek\" DATE ,\"vbldatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vblingangsdatumgeldigheid\" DATE ,\"vblingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vbldatumvanopneming\" DATE ,\"vbldatumvanopnemingindicator\" VARCHAR(1)  ,\"vblsoortpandcode\" VARCHAR(4)  ,\"vblsoortpandomschrijving\" VARCHAR(35)  ,\"vblwijkcode\" VARCHAR(3)  ,\"vblwijkomschrijving\" VARCHAR(35)  ,\"vblplanalogischewijkcode\" VARCHAR(3)  ,\"vblplanalogischewijkomschrijving\" VARCHAR(35)  ,\"vblanummerhoofdbewoner\" NUMERIC(10,0)  ,\"vbtaanduidingverblijfstitelcode\" VARCHAR(2)  ,\"vbtverblijfstitelvervallen\" VARCHAR(1)  ,\"vbtaanduidingverblijfstitelomschrijving\" VARCHAR(80)  ,\"vbtdatumeindeverblijfstitel\" DATE ,\"vbtdatumeindeverblijfstitelindicator\" VARCHAR(1)  ,\"vbtingangsdatumverblijfstitel\" DATE ,\"vbtingangsdatumverblijfstitelindicator\" VARCHAR(1)  ,\"vbtaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vbtdatumingangonderzoek\" DATE ,\"vbtdatumingangonderzoekindicator\" VARCHAR(1)  ,\"vbtdatumeindeonderzoek\" DATE ,\"vbtdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vbtingangsdatumgeldigheid\" DATE ,\"vbtingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vbtdatumvanopneming\" DATE ,\"vbtdatumvanopnemingindicator\" VARCHAR(1)  ,\"gzvindicatiegezagminderjarige\" VARCHAR(2)  ,\"gzvindicatiecurateleregister\" NUMERIC(1,0)  ,\"gzvgemeentedocumentcode\" VARCHAR(4)  ,\"gzvgemeentedocumentomschrijving\" VARCHAR(35)  ,\"gzvdatumdocument\" DATE ,\"gzvdatumdocumentindicator\" VARCHAR(1)  ,\"gzvbeschrijvingdocument\" VARCHAR(50)  ,\"gzvaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"gzvdatumingangonderzoek\" DATE ,\"gzvdatumingangonderzoekindicator\" VARCHAR(1)  ,\"gzvdatumeindeonderzoek\" DATE ,\"gzvdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"gzvingangsdatumgeldigheid\" DATE ,\"gzvingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"gzvdatumvanopneming\" DATE ,\"gzvdatumvanopnemingindicator\" VARCHAR(1)  ,\"ksraanduidingeuropeeskiesrecht\" NUMERIC(1,0)  ,\"ksrdatumverzoekofmededelingeuropeeskiesrecht\" DATE ,\"ksrdatumverzoekofmededelingeuropeeskiesrechtindicator\" VARCHAR(1)  ,\"ksreinddatumuitsluitingeuropeeskiesrecht\" DATE ,\"ksreinddatumuitsluitingeuropeeskiesrechtindicator\" VARCHAR(1)  ,\"ksraanduidinguitgeslotenkiesrecht\" VARCHAR(1)  ,\"ksreinddatumuitsluitingkiesrecht\" DATE ,\"ksreinddatumuitsluitingkiesrechtindicator\" VARCHAR(1)  ,\"ksrgemeentedocumentcode\" VARCHAR(4)  ,\"ksrgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ksrdatumdocument\" DATE ,\"ksrdatumdocumentindicator\" VARCHAR(1)  ,\"ksrbeschrijvingdocument\" VARCHAR(50)  ,\"vwsgemeentevaninschrijvingcode\" VARCHAR(4)  ,\"vwsgemeentevaninschrijvingomschrijving\" VARCHAR(35)  ,\"vwsdatuminschrijving\" DATE ,\"vwsdatuminschrijvingindicator\" VARCHAR(1)  ,\"vwsindicatiegeheim\" VARCHAR(1)  ,primary key(\"prsanummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_1_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_1++;

/**
 * [tCreateTable_1 main ] stop
 */
	
	/**
	 * [tCreateTable_1 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 

ok_Hash.put("tCreateTable_1", true);
end_Hash.put("tCreateTable_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tCreateTable_2Process(globalMap);



/**
 * [tCreateTable_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_1 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 



/**
 * [tCreateTable_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_1_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_2", false);
		start_Hash.put("tCreateTable_2", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_2";

	
		int tos_count_tCreateTable_2 = 0;
		
    	class BytesLimit65535_tCreateTable_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_2().limitLog4jByte();

 



/**
 * [tCreateTable_2 begin ] stop
 */
	
	/**
	 * [tCreateTable_2 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

    try{
            String driverClass_tCreateTable_2="org.postgresql.Driver";
String url_tCreateTable_2="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_2="mks_owner";

        String tableName_tCreateTable_2 = "ibz_cip_nationaliteit";
String dbSchema_tCreateTable_2 = "ldf";
if(dbSchema_tCreateTable_2 != null && dbSchema_tCreateTable_2.trim().length() != 0) {tableName_tCreateTable_2 = dbSchema_tCreateTable_2 + "\".\"" + tableName_tCreateTable_2;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_2= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_2= java.sql.DriverManager.getConnection(url_tCreateTable_2,dbUser_tCreateTable_2, decryptedPassword_tCreateTable_2);

            boolean whetherExist_tCreateTable_2 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_2 = conn_tCreateTable_2.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_2 = dbMetaData_tCreateTable_2.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_2 = "public";
                if(dbSchema_tCreateTable_2 == null || dbSchema_tCreateTable_2.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_2 = conn_tCreateTable_2.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_2 = stmtSchema_tCreateTable_2.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_2.next()){
                                defaultSchema_tCreateTable_2 = rsSchema_tCreateTable_2.getString("current_schema");
                	}
                	rsSchema_tCreateTable_2.close();
                	stmtSchema_tCreateTable_2.close();
                }
                while(rsTable_tCreateTable_2.next()) {
                    String table_tCreateTable_2 = rsTable_tCreateTable_2.getString("TABLE_NAME");
                    String schema_tCreateTable_2 = rsTable_tCreateTable_2.getString("TABLE_SCHEM");
                    if(table_tCreateTable_2.equals("ibz_cip_nationaliteit") 
                        && (schema_tCreateTable_2.equals(dbSchema_tCreateTable_2) || ((dbSchema_tCreateTable_2 ==null || dbSchema_tCreateTable_2.trim().length() ==0) && defaultSchema_tCreateTable_2.equals(schema_tCreateTable_2)))) {
                        whetherExist_tCreateTable_2 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_2.close();
                if(!whetherExist_tCreateTable_2) {
                    java.sql.Statement stmt_tCreateTable_2 = conn_tCreateTable_2.createStatement();
                    stmt_tCreateTable_2.execute("CREATE TABLE \"" + tableName_tCreateTable_2 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"natsleutelnationaliteitcode\" NUMERIC(8,0)  ,\"natsleutelvolgnummer\" NUMERIC(1,0)  ,\"natnationaliteitcode\" VARCHAR(4)  ,\"natnationaliteitomschrijving\" VARCHAR(42)  ,\"natnationaliteitvervallen\" VARCHAR(1)  ,\"natredenopnamenationaliteitcode\" VARCHAR(3)  ,\"natredenopnamenationaliteitomschrijving\" VARCHAR(80)  ,\"natredenbeeindigennationaliteitcode\" VARCHAR(3)  ,\"natredenbeeindigennationaliteitomschrijving\" VARCHAR(80)  ,\"nataanduidingbijzondernederlanderschap\" VARCHAR(1)  ,\"nateupersoonsnummer\" VARCHAR(40)  ,\"natgemeentedocumentcode\" VARCHAR(4)  ,\"natgemeentedocumentomschrijving\" VARCHAR(35)  ,\"natdatumdocument\" DATE ,\"natdatumdocumentindicator\" VARCHAR(1)  ,\"natbeschrijvingdocument\" VARCHAR(50)  ,\"nataanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"natdatumingangonderzoek\" DATE ,\"natdatumingangonderzoekindicator\" VARCHAR(1)  ,\"natdatumeindeonderzoek\" DATE ,\"natdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"natingangsdatumgeldigheid\" DATE ,\"natingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"natdatumvanopneming\" DATE ,\"natdatumvanopnemingindicator\" VARCHAR(1)  ,\"natdatumverkrijging\" DATE ,\"natdatumverkrijgingindicator\" VARCHAR(1)  ,\"natdatumbeeindiging\" DATE ,\"natdatumbeeindigingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"natsleutelnationaliteitcode\",\"natsleutelvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_2 != null && !conn_tCreateTable_2.isClosed()) {
conn_tCreateTable_2.close();
}

        globalMap.put("tCreateTable_2_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_2 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"natsleutelnationaliteitcode\" NUMERIC(8,0)  ,\"natsleutelvolgnummer\" NUMERIC(1,0)  ,\"natnationaliteitcode\" VARCHAR(4)  ,\"natnationaliteitomschrijving\" VARCHAR(42)  ,\"natnationaliteitvervallen\" VARCHAR(1)  ,\"natredenopnamenationaliteitcode\" VARCHAR(3)  ,\"natredenopnamenationaliteitomschrijving\" VARCHAR(80)  ,\"natredenbeeindigennationaliteitcode\" VARCHAR(3)  ,\"natredenbeeindigennationaliteitomschrijving\" VARCHAR(80)  ,\"nataanduidingbijzondernederlanderschap\" VARCHAR(1)  ,\"nateupersoonsnummer\" VARCHAR(40)  ,\"natgemeentedocumentcode\" VARCHAR(4)  ,\"natgemeentedocumentomschrijving\" VARCHAR(35)  ,\"natdatumdocument\" DATE ,\"natdatumdocumentindicator\" VARCHAR(1)  ,\"natbeschrijvingdocument\" VARCHAR(50)  ,\"nataanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"natdatumingangonderzoek\" DATE ,\"natdatumingangonderzoekindicator\" VARCHAR(1)  ,\"natdatumeindeonderzoek\" DATE ,\"natdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"natingangsdatumgeldigheid\" DATE ,\"natingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"natdatumvanopneming\" DATE ,\"natdatumvanopnemingindicator\" VARCHAR(1)  ,\"natdatumverkrijging\" DATE ,\"natdatumverkrijgingindicator\" VARCHAR(1)  ,\"natdatumbeeindiging\" DATE ,\"natdatumbeeindigingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"natsleutelnationaliteitcode\",\"natsleutelvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_2_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_2++;

/**
 * [tCreateTable_2 main ] stop
 */
	
	/**
	 * [tCreateTable_2 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 

ok_Hash.put("tCreateTable_2", true);
end_Hash.put("tCreateTable_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tCreateTable_3Process(globalMap);



/**
 * [tCreateTable_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_2 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_2_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_3", false);
		start_Hash.put("tCreateTable_3", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_3";

	
		int tos_count_tCreateTable_3 = 0;
		
    	class BytesLimit65535_tCreateTable_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_3().limitLog4jByte();

 



/**
 * [tCreateTable_3 begin ] stop
 */
	
	/**
	 * [tCreateTable_3 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

    try{
            String driverClass_tCreateTable_3="org.postgresql.Driver";
String url_tCreateTable_3="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_3="mks_owner";

        String tableName_tCreateTable_3 = "ibz_cip_huwelijk";
String dbSchema_tCreateTable_3 = "ldf";
if(dbSchema_tCreateTable_3 != null && dbSchema_tCreateTable_3.trim().length() != 0) {tableName_tCreateTable_3 = dbSchema_tCreateTable_3 + "\".\"" + tableName_tCreateTable_3;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_3= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_3= java.sql.DriverManager.getConnection(url_tCreateTable_3,dbUser_tCreateTable_3, decryptedPassword_tCreateTable_3);

            boolean whetherExist_tCreateTable_3 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_3 = conn_tCreateTable_3.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_3 = dbMetaData_tCreateTable_3.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_3 = "public";
                if(dbSchema_tCreateTable_3 == null || dbSchema_tCreateTable_3.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_3 = conn_tCreateTable_3.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_3 = stmtSchema_tCreateTable_3.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_3.next()){
                                defaultSchema_tCreateTable_3 = rsSchema_tCreateTable_3.getString("current_schema");
                	}
                	rsSchema_tCreateTable_3.close();
                	stmtSchema_tCreateTable_3.close();
                }
                while(rsTable_tCreateTable_3.next()) {
                    String table_tCreateTable_3 = rsTable_tCreateTable_3.getString("TABLE_NAME");
                    String schema_tCreateTable_3 = rsTable_tCreateTable_3.getString("TABLE_SCHEM");
                    if(table_tCreateTable_3.equals("ibz_cip_huwelijk") 
                        && (schema_tCreateTable_3.equals(dbSchema_tCreateTable_3) || ((dbSchema_tCreateTable_3 ==null || dbSchema_tCreateTable_3.trim().length() ==0) && defaultSchema_tCreateTable_3.equals(schema_tCreateTable_3)))) {
                        whetherExist_tCreateTable_3 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_3.close();
                if(!whetherExist_tCreateTable_3) {
                    java.sql.Statement stmt_tCreateTable_3 = conn_tCreateTable_3.createStatement();
                    stmt_tCreateTable_3.execute("CREATE TABLE \"" + tableName_tCreateTable_3 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"huwsleuteldatum\" NUMERIC(8,0)  ,\"huwsleutelvolgnummer\" NUMERIC(1,0)  ,\"huwanummer\" NUMERIC(10,0)  ,\"huwburgerservicenummer\" NUMERIC(9,0)  ,\"huwvoornamen\" VARCHAR(220)  ,\"huwvoorletters\" VARCHAR(50)  ,\"huwadellijketitelcode\" VARCHAR(2)  ,\"huwadellijketitelomschrijving\" VARCHAR(20)  ,\"huwvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"huwgeslachtsnaam\" VARCHAR(220)  ,\"huwnaamopgemaakt\" VARCHAR(300)  ,\"huwgeboortedatum\" DATE ,\"huwgeboortedatumindicator\" VARCHAR(1)  ,\"huwgeboorteplaatscode\" VARCHAR(4)  ,\"huwgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"huwgeboortelandcode\" VARCHAR(4)  ,\"huwgeboortelandomschrijving\" VARCHAR(40)  ,\"huwgeslachtsaanduidingcode\" VARCHAR(1)  ,\"huwgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"huwdatumsluitinghuwelijkpartnerschap\" DATE ,\"huwdatumsluitinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwplaatssluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwplaatssluitinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwlandsluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwlandsluitinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwdatumontbindinghuwelijkpartnerschap\" DATE ,\"huwdatumontbindinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwplaatsontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwplaatsontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwlandontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwlandontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwredenontbindinghuwelijkpartnerschap\" VARCHAR(1)  ,\"huwsoortverbintenis\" VARCHAR(1)  ,\"huwregistergemeenteaktecode\" VARCHAR(4)  ,\"huwregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"huwaktenummer\" VARCHAR(7)  ,\"huwgemeentedocumentcode\" VARCHAR(4)  ,\"huwgemeentedocumentomschrijving\" VARCHAR(35)  ,\"huwdatumdocument\" DATE ,\"huwdatumdocumentindicator\" VARCHAR(1)  ,\"huwbeschrijvingdocument\" VARCHAR(50)  ,\"huwaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"huwdatumingangonderzoek\" DATE ,\"huwdatumingangonderzoekindicator\" VARCHAR(1)  ,\"huwdatumeindeonderzoek\" DATE ,\"huwdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"huwingangsdatumgeldigheid\" DATE ,\"huwingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"huwdatumvanopneming\" DATE ,\"huwdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"huwsleuteldatum\",\"huwsleutelvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_3 != null && !conn_tCreateTable_3.isClosed()) {
conn_tCreateTable_3.close();
}

        globalMap.put("tCreateTable_3_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_3 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"huwsleuteldatum\" NUMERIC(8,0)  ,\"huwsleutelvolgnummer\" NUMERIC(1,0)  ,\"huwanummer\" NUMERIC(10,0)  ,\"huwburgerservicenummer\" NUMERIC(9,0)  ,\"huwvoornamen\" VARCHAR(220)  ,\"huwvoorletters\" VARCHAR(50)  ,\"huwadellijketitelcode\" VARCHAR(2)  ,\"huwadellijketitelomschrijving\" VARCHAR(20)  ,\"huwvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"huwgeslachtsnaam\" VARCHAR(220)  ,\"huwnaamopgemaakt\" VARCHAR(300)  ,\"huwgeboortedatum\" DATE ,\"huwgeboortedatumindicator\" VARCHAR(1)  ,\"huwgeboorteplaatscode\" VARCHAR(4)  ,\"huwgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"huwgeboortelandcode\" VARCHAR(4)  ,\"huwgeboortelandomschrijving\" VARCHAR(40)  ,\"huwgeslachtsaanduidingcode\" VARCHAR(1)  ,\"huwgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"huwdatumsluitinghuwelijkpartnerschap\" DATE ,\"huwdatumsluitinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwplaatssluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwplaatssluitinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwlandsluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwlandsluitinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwdatumontbindinghuwelijkpartnerschap\" DATE ,\"huwdatumontbindinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwplaatsontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwplaatsontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwlandontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwlandontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwredenontbindinghuwelijkpartnerschap\" VARCHAR(1)  ,\"huwsoortverbintenis\" VARCHAR(1)  ,\"huwregistergemeenteaktecode\" VARCHAR(4)  ,\"huwregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"huwaktenummer\" VARCHAR(7)  ,\"huwgemeentedocumentcode\" VARCHAR(4)  ,\"huwgemeentedocumentomschrijving\" VARCHAR(35)  ,\"huwdatumdocument\" DATE ,\"huwdatumdocumentindicator\" VARCHAR(1)  ,\"huwbeschrijvingdocument\" VARCHAR(50)  ,\"huwaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"huwdatumingangonderzoek\" DATE ,\"huwdatumingangonderzoekindicator\" VARCHAR(1)  ,\"huwdatumeindeonderzoek\" DATE ,\"huwdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"huwingangsdatumgeldigheid\" DATE ,\"huwingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"huwdatumvanopneming\" DATE ,\"huwdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"huwsleuteldatum\",\"huwsleutelvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_3_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_3++;

/**
 * [tCreateTable_3 main ] stop
 */
	
	/**
	 * [tCreateTable_3 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

 

ok_Hash.put("tCreateTable_3", true);
end_Hash.put("tCreateTable_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tCreateTable_4Process(globalMap);



/**
 * [tCreateTable_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_3 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

 



/**
 * [tCreateTable_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_3_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_4", false);
		start_Hash.put("tCreateTable_4", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_4";

	
		int tos_count_tCreateTable_4 = 0;
		
    	class BytesLimit65535_tCreateTable_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_4().limitLog4jByte();

 



/**
 * [tCreateTable_4 begin ] stop
 */
	
	/**
	 * [tCreateTable_4 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_4";

	

    try{
            String driverClass_tCreateTable_4="org.postgresql.Driver";
String url_tCreateTable_4="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_4="mks_owner";

        String tableName_tCreateTable_4 = "ibz_cip_kind";
String dbSchema_tCreateTable_4 = "ldf";
if(dbSchema_tCreateTable_4 != null && dbSchema_tCreateTable_4.trim().length() != 0) {tableName_tCreateTable_4 = dbSchema_tCreateTable_4 + "\".\"" + tableName_tCreateTable_4;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_4= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_4= java.sql.DriverManager.getConnection(url_tCreateTable_4,dbUser_tCreateTable_4, decryptedPassword_tCreateTable_4);

            boolean whetherExist_tCreateTable_4 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_4 = conn_tCreateTable_4.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_4 = dbMetaData_tCreateTable_4.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_4 = "public";
                if(dbSchema_tCreateTable_4 == null || dbSchema_tCreateTable_4.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_4 = conn_tCreateTable_4.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_4 = stmtSchema_tCreateTable_4.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_4.next()){
                                defaultSchema_tCreateTable_4 = rsSchema_tCreateTable_4.getString("current_schema");
                	}
                	rsSchema_tCreateTable_4.close();
                	stmtSchema_tCreateTable_4.close();
                }
                while(rsTable_tCreateTable_4.next()) {
                    String table_tCreateTable_4 = rsTable_tCreateTable_4.getString("TABLE_NAME");
                    String schema_tCreateTable_4 = rsTable_tCreateTable_4.getString("TABLE_SCHEM");
                    if(table_tCreateTable_4.equals("ibz_cip_kind") 
                        && (schema_tCreateTable_4.equals(dbSchema_tCreateTable_4) || ((dbSchema_tCreateTable_4 ==null || dbSchema_tCreateTable_4.trim().length() ==0) && defaultSchema_tCreateTable_4.equals(schema_tCreateTable_4)))) {
                        whetherExist_tCreateTable_4 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_4.close();
                if(!whetherExist_tCreateTable_4) {
                    java.sql.Statement stmt_tCreateTable_4 = conn_tCreateTable_4.createStatement();
                    stmt_tCreateTable_4.execute("CREATE TABLE \"" + tableName_tCreateTable_4 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"kndsleuteldatum\" NUMERIC(8,0)  ,\"kndsleutelvolgnummer\" NUMERIC(1,0)  ,\"kndanummer\" NUMERIC(10,0)  ,\"kndburgerservicenummer\" NUMERIC(9,0)  ,\"kndvoornamen\" VARCHAR(220)  ,\"kndvoorletters\" VARCHAR(50)  ,\"kndadellijketitelcode\" VARCHAR(2)  ,\"kndadellijketitelomschrijving\" VARCHAR(20)  ,\"kndvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"kndgeslachtsnaam\" VARCHAR(220)  ,\"kndnaamopgemaakt\" VARCHAR(300)  ,\"kndgeboortedatum\" DATE ,\"kndgeboortedatumindicator\" VARCHAR(1)  ,\"kndgeboorteplaatscode\" VARCHAR(4)  ,\"kndgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"kndgeboortelandcode\" VARCHAR(4)  ,\"kndgeboortelandomschrijving\" VARCHAR(40)  ,\"kndregistergemeenteaktecode\" VARCHAR(4)  ,\"kndregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"kndaktenummer\" VARCHAR(7)  ,\"kndgemeentedocumentcode\" VARCHAR(4)  ,\"kndgemeentedocumentomschrijving\" VARCHAR(35)  ,\"knddatumdocument\" DATE ,\"knddatumdocumentindicator\" VARCHAR(1)  ,\"kndbeschrijvingdocument\" VARCHAR(50)  ,\"kndaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"knddatumingangonderzoek\" DATE ,\"knddatumingangonderzoekindicator\" VARCHAR(1)  ,\"knddatumeindeonderzoek\" DATE ,\"knddatumeindeonderzoekindicator\" VARCHAR(1)  ,\"kndingangsdatumgeldigheid\" DATE ,\"kndingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"knddatumvanopneming\" DATE ,\"knddatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"kndsleuteldatum\",\"kndsleutelvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_4 != null && !conn_tCreateTable_4.isClosed()) {
conn_tCreateTable_4.close();
}

        globalMap.put("tCreateTable_4_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_4 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"kndsleuteldatum\" NUMERIC(8,0)  ,\"kndsleutelvolgnummer\" NUMERIC(1,0)  ,\"kndanummer\" NUMERIC(10,0)  ,\"kndburgerservicenummer\" NUMERIC(9,0)  ,\"kndvoornamen\" VARCHAR(220)  ,\"kndvoorletters\" VARCHAR(50)  ,\"kndadellijketitelcode\" VARCHAR(2)  ,\"kndadellijketitelomschrijving\" VARCHAR(20)  ,\"kndvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"kndgeslachtsnaam\" VARCHAR(220)  ,\"kndnaamopgemaakt\" VARCHAR(300)  ,\"kndgeboortedatum\" DATE ,\"kndgeboortedatumindicator\" VARCHAR(1)  ,\"kndgeboorteplaatscode\" VARCHAR(4)  ,\"kndgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"kndgeboortelandcode\" VARCHAR(4)  ,\"kndgeboortelandomschrijving\" VARCHAR(40)  ,\"kndregistergemeenteaktecode\" VARCHAR(4)  ,\"kndregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"kndaktenummer\" VARCHAR(7)  ,\"kndgemeentedocumentcode\" VARCHAR(4)  ,\"kndgemeentedocumentomschrijving\" VARCHAR(35)  ,\"knddatumdocument\" DATE ,\"knddatumdocumentindicator\" VARCHAR(1)  ,\"kndbeschrijvingdocument\" VARCHAR(50)  ,\"kndaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"knddatumingangonderzoek\" DATE ,\"knddatumingangonderzoekindicator\" VARCHAR(1)  ,\"knddatumeindeonderzoek\" DATE ,\"knddatumeindeonderzoekindicator\" VARCHAR(1)  ,\"kndingangsdatumgeldigheid\" DATE ,\"kndingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"knddatumvanopneming\" DATE ,\"knddatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"kndsleuteldatum\",\"kndsleutelvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_4_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_4++;

/**
 * [tCreateTable_4 main ] stop
 */
	
	/**
	 * [tCreateTable_4 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_4";

	

 

ok_Hash.put("tCreateTable_4", true);
end_Hash.put("tCreateTable_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tCreateTable_5Process(globalMap);



/**
 * [tCreateTable_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_4 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_4";

	

 



/**
 * [tCreateTable_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_4_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_5", false);
		start_Hash.put("tCreateTable_5", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_5";

	
		int tos_count_tCreateTable_5 = 0;
		
    	class BytesLimit65535_tCreateTable_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_5().limitLog4jByte();

 



/**
 * [tCreateTable_5 begin ] stop
 */
	
	/**
	 * [tCreateTable_5 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_5";

	

    try{
            String driverClass_tCreateTable_5="org.postgresql.Driver";
String url_tCreateTable_5="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_5="mks_owner";

        String tableName_tCreateTable_5 = "ibz_cip_reisdocument";
String dbSchema_tCreateTable_5 = "ldf";
if(dbSchema_tCreateTable_5 != null && dbSchema_tCreateTable_5.trim().length() != 0) {tableName_tCreateTable_5 = dbSchema_tCreateTable_5 + "\".\"" + tableName_tCreateTable_5;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_5= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_5= java.sql.DriverManager.getConnection(url_tCreateTable_5,dbUser_tCreateTable_5, decryptedPassword_tCreateTable_5);

            boolean whetherExist_tCreateTable_5 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_5 = conn_tCreateTable_5.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_5 = dbMetaData_tCreateTable_5.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_5 = "public";
                if(dbSchema_tCreateTable_5 == null || dbSchema_tCreateTable_5.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_5 = conn_tCreateTable_5.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_5 = stmtSchema_tCreateTable_5.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_5.next()){
                                defaultSchema_tCreateTable_5 = rsSchema_tCreateTable_5.getString("current_schema");
                	}
                	rsSchema_tCreateTable_5.close();
                	stmtSchema_tCreateTable_5.close();
                }
                while(rsTable_tCreateTable_5.next()) {
                    String table_tCreateTable_5 = rsTable_tCreateTable_5.getString("TABLE_NAME");
                    String schema_tCreateTable_5 = rsTable_tCreateTable_5.getString("TABLE_SCHEM");
                    if(table_tCreateTable_5.equals("ibz_cip_reisdocument") 
                        && (schema_tCreateTable_5.equals(dbSchema_tCreateTable_5) || ((dbSchema_tCreateTable_5 ==null || dbSchema_tCreateTable_5.trim().length() ==0) && defaultSchema_tCreateTable_5.equals(schema_tCreateTable_5)))) {
                        whetherExist_tCreateTable_5 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_5.close();
                if(!whetherExist_tCreateTable_5) {
                    java.sql.Statement stmt_tCreateTable_5 = conn_tCreateTable_5.createStatement();
                    stmt_tCreateTable_5.execute("CREATE TABLE \"" + tableName_tCreateTable_5 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"rsdsleuteldatum\" NUMERIC(8,0)  ,\"rsdsleutelvolgnummer\" NUMERIC(1,0)  ,\"rsdsoortnederlandsreisdocumentcode\" VARCHAR(2)  ,\"rsdsoortnederlandsreisdocumentomschrijving\" VARCHAR(35)  ,\"rsdnummernederlandsreisdocument\" VARCHAR(9)  ,\"rsddatumuitgiftenederlandsreisdocument\" DATE ,\"rsddatumuitgiftenederlandsreisdocumentindicator\" VARCHAR(1)  ,\"rsdautoriteitvanafgiftenederlandsreisdocument\" VARCHAR(6)  ,\"rsddatumeindegeldigheidnederlandsreisdocument\" DATE ,\"rsddatumeindegeldigheidnederlandsreisdocumentindicator\" VARCHAR(1)  ,\"rsddatuminhoudingvermissingnederlandsreisdocument\" DATE ,\"rsddatuminhoudingvermissingnederlandsreisdocumentindicator\" VARCHAR(1)  ,\"rsdaanduidinginhoudingvermissingnederlandsreisdocument\" VARCHAR(1)  ,\"rsdsignaleringbetrekkingverstrekkennederlandsreisdocument\" NUMERIC(1,0)  ,\"rsdgemeentedocumentcode\" VARCHAR(4)  ,\"rsdgemeentedocumentomschrijving\" VARCHAR(35)  ,\"rsddatumdocument\" DATE ,\"rsddatumdocumentindicator\" VARCHAR(1)  ,\"rsdbeschrijvingdocument\" VARCHAR(50)  ,\"rsdaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"rsddatumingangonderzoek\" DATE ,\"rsddatumingangonderzoekindicator\" VARCHAR(1)  ,\"rsddatumeindeonderzoek\" DATE ,\"rsddatumeindeonderzoekindicator\" VARCHAR(1)  ,\"rsdingangsdatumgeldigheid\" DATE ,\"rsdingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"rsddatumvanopneming\" DATE ,\"rsddatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"rsdsleuteldatum\",\"rsdsleutelvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_5 != null && !conn_tCreateTable_5.isClosed()) {
conn_tCreateTable_5.close();
}

        globalMap.put("tCreateTable_5_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_5 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"rsdsleuteldatum\" NUMERIC(8,0)  ,\"rsdsleutelvolgnummer\" NUMERIC(1,0)  ,\"rsdsoortnederlandsreisdocumentcode\" VARCHAR(2)  ,\"rsdsoortnederlandsreisdocumentomschrijving\" VARCHAR(35)  ,\"rsdnummernederlandsreisdocument\" VARCHAR(9)  ,\"rsddatumuitgiftenederlandsreisdocument\" DATE ,\"rsddatumuitgiftenederlandsreisdocumentindicator\" VARCHAR(1)  ,\"rsdautoriteitvanafgiftenederlandsreisdocument\" VARCHAR(6)  ,\"rsddatumeindegeldigheidnederlandsreisdocument\" DATE ,\"rsddatumeindegeldigheidnederlandsreisdocumentindicator\" VARCHAR(1)  ,\"rsddatuminhoudingvermissingnederlandsreisdocument\" DATE ,\"rsddatuminhoudingvermissingnederlandsreisdocumentindicator\" VARCHAR(1)  ,\"rsdaanduidinginhoudingvermissingnederlandsreisdocument\" VARCHAR(1)  ,\"rsdsignaleringbetrekkingverstrekkennederlandsreisdocument\" NUMERIC(1,0)  ,\"rsdgemeentedocumentcode\" VARCHAR(4)  ,\"rsdgemeentedocumentomschrijving\" VARCHAR(35)  ,\"rsddatumdocument\" DATE ,\"rsddatumdocumentindicator\" VARCHAR(1)  ,\"rsdbeschrijvingdocument\" VARCHAR(50)  ,\"rsdaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"rsddatumingangonderzoek\" DATE ,\"rsddatumingangonderzoekindicator\" VARCHAR(1)  ,\"rsddatumeindeonderzoek\" DATE ,\"rsddatumeindeonderzoekindicator\" VARCHAR(1)  ,\"rsdingangsdatumgeldigheid\" DATE ,\"rsdingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"rsddatumvanopneming\" DATE ,\"rsddatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"rsdsleuteldatum\",\"rsdsleutelvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_5_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_5++;

/**
 * [tCreateTable_5 main ] stop
 */
	
	/**
	 * [tCreateTable_5 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_5";

	

 

ok_Hash.put("tCreateTable_5", true);
end_Hash.put("tCreateTable_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tCreateTable_6Process(globalMap);



/**
 * [tCreateTable_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_5 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_5";

	

 



/**
 * [tCreateTable_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_5_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_6", false);
		start_Hash.put("tCreateTable_6", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_6";

	
		int tos_count_tCreateTable_6 = 0;
		
    	class BytesLimit65535_tCreateTable_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_6().limitLog4jByte();

 



/**
 * [tCreateTable_6 begin ] stop
 */
	
	/**
	 * [tCreateTable_6 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_6";

	

    try{
            String driverClass_tCreateTable_6="org.postgresql.Driver";
String url_tCreateTable_6="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_6="mks_owner";

        String tableName_tCreateTable_6 = "ibz_cip_persoon_historie";
String dbSchema_tCreateTable_6 = "ldf";
if(dbSchema_tCreateTable_6 != null && dbSchema_tCreateTable_6.trim().length() != 0) {tableName_tCreateTable_6 = dbSchema_tCreateTable_6 + "\".\"" + tableName_tCreateTable_6;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_6= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_6= java.sql.DriverManager.getConnection(url_tCreateTable_6,dbUser_tCreateTable_6, decryptedPassword_tCreateTable_6);

            boolean whetherExist_tCreateTable_6 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_6 = conn_tCreateTable_6.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_6 = dbMetaData_tCreateTable_6.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_6 = "public";
                if(dbSchema_tCreateTable_6 == null || dbSchema_tCreateTable_6.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_6 = conn_tCreateTable_6.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_6 = stmtSchema_tCreateTable_6.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_6.next()){
                                defaultSchema_tCreateTable_6 = rsSchema_tCreateTable_6.getString("current_schema");
                	}
                	rsSchema_tCreateTable_6.close();
                	stmtSchema_tCreateTable_6.close();
                }
                while(rsTable_tCreateTable_6.next()) {
                    String table_tCreateTable_6 = rsTable_tCreateTable_6.getString("TABLE_NAME");
                    String schema_tCreateTable_6 = rsTable_tCreateTable_6.getString("TABLE_SCHEM");
                    if(table_tCreateTable_6.equals("ibz_cip_persoon_historie") 
                        && (schema_tCreateTable_6.equals(dbSchema_tCreateTable_6) || ((dbSchema_tCreateTable_6 ==null || dbSchema_tCreateTable_6.trim().length() ==0) && defaultSchema_tCreateTable_6.equals(schema_tCreateTable_6)))) {
                        whetherExist_tCreateTable_6 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_6.close();
                if(!whetherExist_tCreateTable_6) {
                    java.sql.Statement stmt_tCreateTable_6 = conn_tCreateTable_6.createStatement();
                    stmt_tCreateTable_6.execute("CREATE TABLE \"" + tableName_tCreateTable_6 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"prshstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"prshstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"prshstanummer\" NUMERIC(10,0)  ,\"prshstburgerservicenummer\" NUMERIC(9,0)  ,\"prshstvoornamen\" VARCHAR(220)  ,\"prshstvoorletters\" VARCHAR(50)  ,\"prshstadellijketitelcode\" VARCHAR(2)  ,\"prshstadellijketitelomschrijving\" VARCHAR(20)  ,\"prshstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"prshstgeslachtsnaam\" VARCHAR(220)  ,\"prshstgeboortedatumindicator\" VARCHAR(1)  ,\"prshstgeboortedatum\" DATE ,\"prshstgeboorteplaatscode\" VARCHAR(4)  ,\"prshstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"prshstgeboortelandcode\" VARCHAR(4)  ,\"prshstgeboortelandomschrijving\" VARCHAR(40)  ,\"prshstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"prshstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"prshstvoriganummer\" NUMERIC(10,0)  ,\"prshstvolgendanummer\" NUMERIC(10,0)  ,\"prshstaanduidingnaamgebruik\" VARCHAR(1)  ,\"prshstregistergemeenteaktecode\" VARCHAR(4)  ,\"prshstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"prshstaktenummer\" VARCHAR(7)  ,\"prshstgemeentedocumentcode\" VARCHAR(4)  ,\"prshstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"prshstdatumdocument\" DATE ,\"prshstdatumdocumentindicator\" VARCHAR(1)  ,\"prshstbeschrijvingdocument\" VARCHAR(50)  ,\"prshstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"prshstdatumingangonderzoek\" DATE ,\"prshstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"prshstdatumeindeonderzoek\" DATE ,\"prshstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"prshstingangsdatumgeldigheid\" DATE ,\"prshstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"prshstdatumvanopneming\" DATE ,\"prshstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"prshstsleutelgeldigdatum\",\"prshstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_6 != null && !conn_tCreateTable_6.isClosed()) {
conn_tCreateTable_6.close();
}

        globalMap.put("tCreateTable_6_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_6 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"prshstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"prshstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"prshstanummer\" NUMERIC(10,0)  ,\"prshstburgerservicenummer\" NUMERIC(9,0)  ,\"prshstvoornamen\" VARCHAR(220)  ,\"prshstvoorletters\" VARCHAR(50)  ,\"prshstadellijketitelcode\" VARCHAR(2)  ,\"prshstadellijketitelomschrijving\" VARCHAR(20)  ,\"prshstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"prshstgeslachtsnaam\" VARCHAR(220)  ,\"prshstgeboortedatumindicator\" VARCHAR(1)  ,\"prshstgeboortedatum\" DATE ,\"prshstgeboorteplaatscode\" VARCHAR(4)  ,\"prshstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"prshstgeboortelandcode\" VARCHAR(4)  ,\"prshstgeboortelandomschrijving\" VARCHAR(40)  ,\"prshstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"prshstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"prshstvoriganummer\" NUMERIC(10,0)  ,\"prshstvolgendanummer\" NUMERIC(10,0)  ,\"prshstaanduidingnaamgebruik\" VARCHAR(1)  ,\"prshstregistergemeenteaktecode\" VARCHAR(4)  ,\"prshstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"prshstaktenummer\" VARCHAR(7)  ,\"prshstgemeentedocumentcode\" VARCHAR(4)  ,\"prshstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"prshstdatumdocument\" DATE ,\"prshstdatumdocumentindicator\" VARCHAR(1)  ,\"prshstbeschrijvingdocument\" VARCHAR(50)  ,\"prshstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"prshstdatumingangonderzoek\" DATE ,\"prshstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"prshstdatumeindeonderzoek\" DATE ,\"prshstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"prshstingangsdatumgeldigheid\" DATE ,\"prshstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"prshstdatumvanopneming\" DATE ,\"prshstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"prshstsleutelgeldigdatum\",\"prshstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_6_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_6++;

/**
 * [tCreateTable_6 main ] stop
 */
	
	/**
	 * [tCreateTable_6 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_6";

	

 

ok_Hash.put("tCreateTable_6", true);
end_Hash.put("tCreateTable_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tCreateTable_7Process(globalMap);



/**
 * [tCreateTable_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_6 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_6";

	

 



/**
 * [tCreateTable_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_6_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_7", false);
		start_Hash.put("tCreateTable_7", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_7";

	
		int tos_count_tCreateTable_7 = 0;
		
    	class BytesLimit65535_tCreateTable_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_7().limitLog4jByte();

 



/**
 * [tCreateTable_7 begin ] stop
 */
	
	/**
	 * [tCreateTable_7 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

    try{
            String driverClass_tCreateTable_7="org.postgresql.Driver";
String url_tCreateTable_7="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_7="mks_owner";

        String tableName_tCreateTable_7 = "ibz_cip_ouder1_historie";
String dbSchema_tCreateTable_7 = "ldf";
if(dbSchema_tCreateTable_7 != null && dbSchema_tCreateTable_7.trim().length() != 0) {tableName_tCreateTable_7 = dbSchema_tCreateTable_7 + "\".\"" + tableName_tCreateTable_7;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_7= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_7= java.sql.DriverManager.getConnection(url_tCreateTable_7,dbUser_tCreateTable_7, decryptedPassword_tCreateTable_7);

            boolean whetherExist_tCreateTable_7 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_7 = conn_tCreateTable_7.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_7 = dbMetaData_tCreateTable_7.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_7 = "public";
                if(dbSchema_tCreateTable_7 == null || dbSchema_tCreateTable_7.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_7 = conn_tCreateTable_7.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_7 = stmtSchema_tCreateTable_7.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_7.next()){
                                defaultSchema_tCreateTable_7 = rsSchema_tCreateTable_7.getString("current_schema");
                	}
                	rsSchema_tCreateTable_7.close();
                	stmtSchema_tCreateTable_7.close();
                }
                while(rsTable_tCreateTable_7.next()) {
                    String table_tCreateTable_7 = rsTable_tCreateTable_7.getString("TABLE_NAME");
                    String schema_tCreateTable_7 = rsTable_tCreateTable_7.getString("TABLE_SCHEM");
                    if(table_tCreateTable_7.equals("ibz_cip_ouder1_historie") 
                        && (schema_tCreateTable_7.equals(dbSchema_tCreateTable_7) || ((dbSchema_tCreateTable_7 ==null || dbSchema_tCreateTable_7.trim().length() ==0) && defaultSchema_tCreateTable_7.equals(schema_tCreateTable_7)))) {
                        whetherExist_tCreateTable_7 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_7.close();
                if(!whetherExist_tCreateTable_7) {
                    java.sql.Statement stmt_tCreateTable_7 = conn_tCreateTable_7.createStatement();
                    stmt_tCreateTable_7.execute("CREATE TABLE \"" + tableName_tCreateTable_7 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"ou1hstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"ou1hstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"ou1hstanummer\" NUMERIC(10,0)  ,\"ou1hstburgerservicenummer\" NUMERIC(9,0)  ,\"ou1hstvoornamen\" VARCHAR(220)  ,\"ou1hstvoorletters\" VARCHAR(50)  ,\"ou1hstadellijketitelcode\" VARCHAR(2)  ,\"ou1hstadellijketitelomschrijving\" VARCHAR(20)  ,\"ou1hstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou1hstgeslachtsnaam\" VARCHAR(220)  ,\"ou1hstgeboortedatum\" DATE ,\"ou1hstgeboortedatumindicator\" VARCHAR(1)  ,\"ou1hstgeboorteplaatscode\" VARCHAR(4)  ,\"ou1hstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou1hstgeboortelandcode\" VARCHAR(4)  ,\"ou1hstgeboortelandomschrijving\" VARCHAR(40)  ,\"ou1hstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"ou1hstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou1hstdatumingangfamilierechtelijkebetrekking\" DATE ,\"ou1hstdatumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou1hstregistergemeenteaktecode\" VARCHAR(4)  ,\"ou1hstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou1hstaktenummer\" VARCHAR(7)  ,\"ou1hstgemeentedocumentcode\" VARCHAR(4)  ,\"ou1hstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou1hstdatumdocument\" DATE ,\"ou1hstdatumdocumentindicator\" VARCHAR(1)  ,\"ou1hstbeschrijvingdocument\" VARCHAR(50)  ,\"ou1hstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou1hstdatumingangonderzoek\" DATE ,\"ou1hstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"ou1hstdatumeindeonderzoek\" DATE ,\"ou1hstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou1hstingangsdatumgeldigheid\" DATE ,\"ou1hstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou1hstdatumvanopneming\" DATE ,\"ou1hstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"ou1hstsleutelgeldigdatum\",\"ou1hstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_7 != null && !conn_tCreateTable_7.isClosed()) {
conn_tCreateTable_7.close();
}

        globalMap.put("tCreateTable_7_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_7 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"ou1hstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"ou1hstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"ou1hstanummer\" NUMERIC(10,0)  ,\"ou1hstburgerservicenummer\" NUMERIC(9,0)  ,\"ou1hstvoornamen\" VARCHAR(220)  ,\"ou1hstvoorletters\" VARCHAR(50)  ,\"ou1hstadellijketitelcode\" VARCHAR(2)  ,\"ou1hstadellijketitelomschrijving\" VARCHAR(20)  ,\"ou1hstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou1hstgeslachtsnaam\" VARCHAR(220)  ,\"ou1hstgeboortedatum\" DATE ,\"ou1hstgeboortedatumindicator\" VARCHAR(1)  ,\"ou1hstgeboorteplaatscode\" VARCHAR(4)  ,\"ou1hstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou1hstgeboortelandcode\" VARCHAR(4)  ,\"ou1hstgeboortelandomschrijving\" VARCHAR(40)  ,\"ou1hstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"ou1hstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou1hstdatumingangfamilierechtelijkebetrekking\" DATE ,\"ou1hstdatumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou1hstregistergemeenteaktecode\" VARCHAR(4)  ,\"ou1hstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou1hstaktenummer\" VARCHAR(7)  ,\"ou1hstgemeentedocumentcode\" VARCHAR(4)  ,\"ou1hstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou1hstdatumdocument\" DATE ,\"ou1hstdatumdocumentindicator\" VARCHAR(1)  ,\"ou1hstbeschrijvingdocument\" VARCHAR(50)  ,\"ou1hstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou1hstdatumingangonderzoek\" DATE ,\"ou1hstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"ou1hstdatumeindeonderzoek\" DATE ,\"ou1hstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou1hstingangsdatumgeldigheid\" DATE ,\"ou1hstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou1hstdatumvanopneming\" DATE ,\"ou1hstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"ou1hstsleutelgeldigdatum\",\"ou1hstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_7_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_7++;

/**
 * [tCreateTable_7 main ] stop
 */
	
	/**
	 * [tCreateTable_7 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

 

ok_Hash.put("tCreateTable_7", true);
end_Hash.put("tCreateTable_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tCreateTable_8Process(globalMap);



/**
 * [tCreateTable_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_7 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_7";

	

 



/**
 * [tCreateTable_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_7_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_8", false);
		start_Hash.put("tCreateTable_8", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_8";

	
		int tos_count_tCreateTable_8 = 0;
		
    	class BytesLimit65535_tCreateTable_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_8().limitLog4jByte();

 



/**
 * [tCreateTable_8 begin ] stop
 */
	
	/**
	 * [tCreateTable_8 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_8";

	

    try{
            String driverClass_tCreateTable_8="org.postgresql.Driver";
String url_tCreateTable_8="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_8="mks_owner";

        String tableName_tCreateTable_8 = "ibz_cip_ouder2_historie";
String dbSchema_tCreateTable_8 = "ldf";
if(dbSchema_tCreateTable_8 != null && dbSchema_tCreateTable_8.trim().length() != 0) {tableName_tCreateTable_8 = dbSchema_tCreateTable_8 + "\".\"" + tableName_tCreateTable_8;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_8= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_8= java.sql.DriverManager.getConnection(url_tCreateTable_8,dbUser_tCreateTable_8, decryptedPassword_tCreateTable_8);

            boolean whetherExist_tCreateTable_8 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_8 = conn_tCreateTable_8.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_8 = dbMetaData_tCreateTable_8.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_8 = "public";
                if(dbSchema_tCreateTable_8 == null || dbSchema_tCreateTable_8.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_8 = conn_tCreateTable_8.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_8 = stmtSchema_tCreateTable_8.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_8.next()){
                                defaultSchema_tCreateTable_8 = rsSchema_tCreateTable_8.getString("current_schema");
                	}
                	rsSchema_tCreateTable_8.close();
                	stmtSchema_tCreateTable_8.close();
                }
                while(rsTable_tCreateTable_8.next()) {
                    String table_tCreateTable_8 = rsTable_tCreateTable_8.getString("TABLE_NAME");
                    String schema_tCreateTable_8 = rsTable_tCreateTable_8.getString("TABLE_SCHEM");
                    if(table_tCreateTable_8.equals("ibz_cip_ouder2_historie") 
                        && (schema_tCreateTable_8.equals(dbSchema_tCreateTable_8) || ((dbSchema_tCreateTable_8 ==null || dbSchema_tCreateTable_8.trim().length() ==0) && defaultSchema_tCreateTable_8.equals(schema_tCreateTable_8)))) {
                        whetherExist_tCreateTable_8 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_8.close();
                if(!whetherExist_tCreateTable_8) {
                    java.sql.Statement stmt_tCreateTable_8 = conn_tCreateTable_8.createStatement();
                    stmt_tCreateTable_8.execute("CREATE TABLE \"" + tableName_tCreateTable_8 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"ou2hstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"ou2hstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"ou2hstanummer\" NUMERIC(10,0)  ,\"ou2hstburgerservicenummer\" NUMERIC(9,0)  ,\"ou2hstvoornamen\" VARCHAR(220)  ,\"ou2hstvoorletters\" VARCHAR(50)  ,\"ou2hstadellijketitelcode\" VARCHAR(2)  ,\"ou2hstadellijketitelomschrijving\" VARCHAR(20)  ,\"ou2hstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou2hstgeslachtsnaam\" VARCHAR(220)  ,\"ou2hstgeboortedatum\" DATE ,\"ou2hstgeboortedatumindicator\" VARCHAR(1)  ,\"ou2hstgeboorteplaatscode\" VARCHAR(4)  ,\"ou2hstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou2hstgeboortelandcode\" VARCHAR(4)  ,\"ou2hstgeboortelandomschrijving\" VARCHAR(40)  ,\"ou2hstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"ou2hstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou2hstdatumingangfamilierechtelijkebetrekking\" DATE ,\"ou2hstdatumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou2hstregistergemeenteaktecode\" VARCHAR(4)  ,\"ou2hstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou2hstaktenummer\" VARCHAR(7)  ,\"ou2hstgemeentedocumentcode\" VARCHAR(4)  ,\"ou2hstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou2hstdatumdocument\" DATE ,\"ou2hstdatumdocumentindicator\" VARCHAR(1)  ,\"ou2hstbeschrijvingdocument\" VARCHAR(50)  ,\"ou2hstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou2hstdatumingangonderzoek\" DATE ,\"ou2hstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"ou2hstdatumeindeonderzoek\" DATE ,\"ou2hstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou2hstingangsdatumgeldigheid\" DATE ,\"ou2hstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou2hstdatumvanopneming\" DATE ,\"ou2hstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"ou2hstsleutelgeldigdatum\",\"ou2hstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_8 != null && !conn_tCreateTable_8.isClosed()) {
conn_tCreateTable_8.close();
}

        globalMap.put("tCreateTable_8_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_8 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"ou2hstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"ou2hstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"ou2hstanummer\" NUMERIC(10,0)  ,\"ou2hstburgerservicenummer\" NUMERIC(9,0)  ,\"ou2hstvoornamen\" VARCHAR(220)  ,\"ou2hstvoorletters\" VARCHAR(50)  ,\"ou2hstadellijketitelcode\" VARCHAR(2)  ,\"ou2hstadellijketitelomschrijving\" VARCHAR(20)  ,\"ou2hstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"ou2hstgeslachtsnaam\" VARCHAR(220)  ,\"ou2hstgeboortedatum\" DATE ,\"ou2hstgeboortedatumindicator\" VARCHAR(1)  ,\"ou2hstgeboorteplaatscode\" VARCHAR(4)  ,\"ou2hstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"ou2hstgeboortelandcode\" VARCHAR(4)  ,\"ou2hstgeboortelandomschrijving\" VARCHAR(40)  ,\"ou2hstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"ou2hstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"ou2hstdatumingangfamilierechtelijkebetrekking\" DATE ,\"ou2hstdatumingangfamilierechtelijkebetrekkingindicator\" VARCHAR(1)  ,\"ou2hstregistergemeenteaktecode\" VARCHAR(4)  ,\"ou2hstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ou2hstaktenummer\" VARCHAR(7)  ,\"ou2hstgemeentedocumentcode\" VARCHAR(4)  ,\"ou2hstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ou2hstdatumdocument\" DATE ,\"ou2hstdatumdocumentindicator\" VARCHAR(1)  ,\"ou2hstbeschrijvingdocument\" VARCHAR(50)  ,\"ou2hstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ou2hstdatumingangonderzoek\" DATE ,\"ou2hstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"ou2hstdatumeindeonderzoek\" DATE ,\"ou2hstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ou2hstingangsdatumgeldigheid\" DATE ,\"ou2hstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ou2hstdatumvanopneming\" DATE ,\"ou2hstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"ou2hstsleutelgeldigdatum\",\"ou2hstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_8_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_8++;

/**
 * [tCreateTable_8 main ] stop
 */
	
	/**
	 * [tCreateTable_8 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_8";

	

 

ok_Hash.put("tCreateTable_8", true);
end_Hash.put("tCreateTable_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tCreateTable_9Process(globalMap);



/**
 * [tCreateTable_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_8 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_8";

	

 



/**
 * [tCreateTable_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_8_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_9", false);
		start_Hash.put("tCreateTable_9", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_9";

	
		int tos_count_tCreateTable_9 = 0;
		
    	class BytesLimit65535_tCreateTable_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_9().limitLog4jByte();

 



/**
 * [tCreateTable_9 begin ] stop
 */
	
	/**
	 * [tCreateTable_9 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_9";

	

    try{
            String driverClass_tCreateTable_9="org.postgresql.Driver";
String url_tCreateTable_9="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_9="mks_owner";

        String tableName_tCreateTable_9 = "ibz_cip_nationaliteit_historie";
String dbSchema_tCreateTable_9 = "ldf";
if(dbSchema_tCreateTable_9 != null && dbSchema_tCreateTable_9.trim().length() != 0) {tableName_tCreateTable_9 = dbSchema_tCreateTable_9 + "\".\"" + tableName_tCreateTable_9;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_9= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_9= java.sql.DriverManager.getConnection(url_tCreateTable_9,dbUser_tCreateTable_9, decryptedPassword_tCreateTable_9);

            boolean whetherExist_tCreateTable_9 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_9 = conn_tCreateTable_9.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_9 = dbMetaData_tCreateTable_9.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_9 = "public";
                if(dbSchema_tCreateTable_9 == null || dbSchema_tCreateTable_9.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_9 = conn_tCreateTable_9.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_9 = stmtSchema_tCreateTable_9.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_9.next()){
                                defaultSchema_tCreateTable_9 = rsSchema_tCreateTable_9.getString("current_schema");
                	}
                	rsSchema_tCreateTable_9.close();
                	stmtSchema_tCreateTable_9.close();
                }
                while(rsTable_tCreateTable_9.next()) {
                    String table_tCreateTable_9 = rsTable_tCreateTable_9.getString("TABLE_NAME");
                    String schema_tCreateTable_9 = rsTable_tCreateTable_9.getString("TABLE_SCHEM");
                    if(table_tCreateTable_9.equals("ibz_cip_nationaliteit_historie") 
                        && (schema_tCreateTable_9.equals(dbSchema_tCreateTable_9) || ((dbSchema_tCreateTable_9 ==null || dbSchema_tCreateTable_9.trim().length() ==0) && defaultSchema_tCreateTable_9.equals(schema_tCreateTable_9)))) {
                        whetherExist_tCreateTable_9 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_9.close();
                if(!whetherExist_tCreateTable_9) {
                    java.sql.Statement stmt_tCreateTable_9 = conn_tCreateTable_9.createStatement();
                    stmt_tCreateTable_9.execute("CREATE TABLE \"" + tableName_tCreateTable_9 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"nathstsleutelnationaliteitcode\" NUMERIC(8,0)  ,\"nathstsleutelvolgnummer\" NUMERIC(1,0)  ,\"nathstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"nathstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"nathstnationaliteitcode\" VARCHAR(4)  ,\"nathstnationaliteitomschrijving\" VARCHAR(42)  ,\"nathstnationaliteitvervallen\" VARCHAR(1)  ,\"nathstredenopnamenationaliteitcode\" VARCHAR(3)  ,\"nathstredenopnamenationaliteitomschrijving\" VARCHAR(80)  ,\"nathstredenbeeindigennationaliteitcode\" VARCHAR(3)  ,\"nathstredenbeeindigennationaliteitomschrijving\" VARCHAR(80)  ,\"nathstaanduidingbijzondernederlanderschap\" VARCHAR(1)  ,\"nathsteupersoonsnummer\" VARCHAR(40)  ,\"nathstgemeentedocumentcode\" VARCHAR(4)  ,\"nathstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"nathstdatumdocument\" DATE ,\"nathstdatumdocumentindicator\" VARCHAR(1)  ,\"nathstbeschrijvingdocument\" VARCHAR(50)  ,\"nathstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"nathstdatumingangonderzoek\" DATE ,\"nathstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"nathstdatumeindeonderzoek\" DATE ,\"nathstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"nathstingangsdatumgeldigheid\" DATE ,\"nathstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"nathstdatumvanopneming\" DATE ,\"nathstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"nathstsleutelnationaliteitcode\",\"nathstsleutelvolgnummer\",\"nathstsleutelgeldigdatum\",\"nathstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_9 != null && !conn_tCreateTable_9.isClosed()) {
conn_tCreateTable_9.close();
}

        globalMap.put("tCreateTable_9_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_9 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"nathstsleutelnationaliteitcode\" NUMERIC(8,0)  ,\"nathstsleutelvolgnummer\" NUMERIC(1,0)  ,\"nathstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"nathstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"nathstnationaliteitcode\" VARCHAR(4)  ,\"nathstnationaliteitomschrijving\" VARCHAR(42)  ,\"nathstnationaliteitvervallen\" VARCHAR(1)  ,\"nathstredenopnamenationaliteitcode\" VARCHAR(3)  ,\"nathstredenopnamenationaliteitomschrijving\" VARCHAR(80)  ,\"nathstredenbeeindigennationaliteitcode\" VARCHAR(3)  ,\"nathstredenbeeindigennationaliteitomschrijving\" VARCHAR(80)  ,\"nathstaanduidingbijzondernederlanderschap\" VARCHAR(1)  ,\"nathsteupersoonsnummer\" VARCHAR(40)  ,\"nathstgemeentedocumentcode\" VARCHAR(4)  ,\"nathstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"nathstdatumdocument\" DATE ,\"nathstdatumdocumentindicator\" VARCHAR(1)  ,\"nathstbeschrijvingdocument\" VARCHAR(50)  ,\"nathstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"nathstdatumingangonderzoek\" DATE ,\"nathstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"nathstdatumeindeonderzoek\" DATE ,\"nathstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"nathstingangsdatumgeldigheid\" DATE ,\"nathstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"nathstdatumvanopneming\" DATE ,\"nathstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"nathstsleutelnationaliteitcode\",\"nathstsleutelvolgnummer\",\"nathstsleutelgeldigdatum\",\"nathstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_9_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_9++;

/**
 * [tCreateTable_9 main ] stop
 */
	
	/**
	 * [tCreateTable_9 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_9";

	

 

ok_Hash.put("tCreateTable_9", true);
end_Hash.put("tCreateTable_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tCreateTable_10Process(globalMap);



/**
 * [tCreateTable_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_9 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_9";

	

 



/**
 * [tCreateTable_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_9_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_10", false);
		start_Hash.put("tCreateTable_10", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_10";

	
		int tos_count_tCreateTable_10 = 0;
		
    	class BytesLimit65535_tCreateTable_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_10().limitLog4jByte();

 



/**
 * [tCreateTable_10 begin ] stop
 */
	
	/**
	 * [tCreateTable_10 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_10";

	

    try{
            String driverClass_tCreateTable_10="org.postgresql.Driver";
String url_tCreateTable_10="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_10="mks_owner";

        String tableName_tCreateTable_10 = "ibz_cip_huwelijk_historie";
String dbSchema_tCreateTable_10 = "ldf";
if(dbSchema_tCreateTable_10 != null && dbSchema_tCreateTable_10.trim().length() != 0) {tableName_tCreateTable_10 = dbSchema_tCreateTable_10 + "\".\"" + tableName_tCreateTable_10;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_10= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_10= java.sql.DriverManager.getConnection(url_tCreateTable_10,dbUser_tCreateTable_10, decryptedPassword_tCreateTable_10);

            boolean whetherExist_tCreateTable_10 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_10 = conn_tCreateTable_10.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_10 = dbMetaData_tCreateTable_10.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_10 = "public";
                if(dbSchema_tCreateTable_10 == null || dbSchema_tCreateTable_10.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_10 = conn_tCreateTable_10.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_10 = stmtSchema_tCreateTable_10.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_10.next()){
                                defaultSchema_tCreateTable_10 = rsSchema_tCreateTable_10.getString("current_schema");
                	}
                	rsSchema_tCreateTable_10.close();
                	stmtSchema_tCreateTable_10.close();
                }
                while(rsTable_tCreateTable_10.next()) {
                    String table_tCreateTable_10 = rsTable_tCreateTable_10.getString("TABLE_NAME");
                    String schema_tCreateTable_10 = rsTable_tCreateTable_10.getString("TABLE_SCHEM");
                    if(table_tCreateTable_10.equals("ibz_cip_huwelijk_historie") 
                        && (schema_tCreateTable_10.equals(dbSchema_tCreateTable_10) || ((dbSchema_tCreateTable_10 ==null || dbSchema_tCreateTable_10.trim().length() ==0) && defaultSchema_tCreateTable_10.equals(schema_tCreateTable_10)))) {
                        whetherExist_tCreateTable_10 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_10.close();
                if(!whetherExist_tCreateTable_10) {
                    java.sql.Statement stmt_tCreateTable_10 = conn_tCreateTable_10.createStatement();
                    stmt_tCreateTable_10.execute("CREATE TABLE \"" + tableName_tCreateTable_10 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"huwhstsleuteldatum\" NUMERIC(8,0)  ,\"huwhstsleutelvolgnummer\" NUMERIC(1,0)  ,\"huwhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"huwhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"huwhstanummer\" NUMERIC(10,0)  ,\"huwhstburgerservicenummer\" NUMERIC(9,0)  ,\"huwhstvoornamen\" VARCHAR(220)  ,\"huwhstvoorletters\" VARCHAR(50)  ,\"huwhstadellijketitelcode\" VARCHAR(2)  ,\"huwhstadellijketitelomschrijving\" VARCHAR(20)  ,\"huwhstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"huwhstgeslachtsnaam\" VARCHAR(220)  ,\"huwhstgeboortedatum\" DATE ,\"huwhstgeboortedatumindicator\" VARCHAR(1)  ,\"huwhstgeboorteplaatscode\" VARCHAR(4)  ,\"huwhstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"huwhstgeboortelandcode\" VARCHAR(4)  ,\"huwhstgeboortelandomschrijving\" VARCHAR(40)  ,\"huwhstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"huwhstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"huwhstdatumsluitinghuwelijkpartnerschap\" DATE ,\"huwhstdatumsluitinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwhstplaatssluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstplaatssluitinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwhstlandsluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstlandsluitinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwhstdatumontbindinghuwelijkpartnerschap\" DATE ,\"huwhstdatumontbindinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwhstplaatsontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstplaatsontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwhstlandontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstlandontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwhstredenontbindinghuwelijkpartnerschap\" VARCHAR(1)  ,\"huwhstsoortverbintenis\" VARCHAR(1)  ,\"huwhstregistergemeenteaktecode\" VARCHAR(4)  ,\"huwhstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"huwhstaktenummer\" VARCHAR(7)  ,\"huwhstgemeentedocumentcode\" VARCHAR(4)  ,\"huwhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"huwhstdatumdocument\" DATE ,\"huwhstdatumdocumentindicator\" VARCHAR(1)  ,\"huwhstbeschrijvingdocument\" VARCHAR(50)  ,\"huwhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"huwhstdatumingangonderzoek\" DATE ,\"huwhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"huwhstdatumeindeonderzoek\" DATE ,\"huwhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"huwhstingangsdatumgeldigheid\" DATE ,\"huwhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"huwhstdatumvanopneming\" DATE ,\"huwhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"huwhstsleuteldatum\",\"huwhstsleutelvolgnummer\",\"huwhstsleutelgeldigdatum\",\"huwhstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_10 != null && !conn_tCreateTable_10.isClosed()) {
conn_tCreateTable_10.close();
}

        globalMap.put("tCreateTable_10_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_10 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"huwhstsleuteldatum\" NUMERIC(8,0)  ,\"huwhstsleutelvolgnummer\" NUMERIC(1,0)  ,\"huwhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"huwhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"huwhstanummer\" NUMERIC(10,0)  ,\"huwhstburgerservicenummer\" NUMERIC(9,0)  ,\"huwhstvoornamen\" VARCHAR(220)  ,\"huwhstvoorletters\" VARCHAR(50)  ,\"huwhstadellijketitelcode\" VARCHAR(2)  ,\"huwhstadellijketitelomschrijving\" VARCHAR(20)  ,\"huwhstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"huwhstgeslachtsnaam\" VARCHAR(220)  ,\"huwhstgeboortedatum\" DATE ,\"huwhstgeboortedatumindicator\" VARCHAR(1)  ,\"huwhstgeboorteplaatscode\" VARCHAR(4)  ,\"huwhstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"huwhstgeboortelandcode\" VARCHAR(4)  ,\"huwhstgeboortelandomschrijving\" VARCHAR(40)  ,\"huwhstgeslachtsaanduidingcode\" VARCHAR(1)  ,\"huwhstgeslachtsaanduidingomschrijving\" VARCHAR(10)  ,\"huwhstdatumsluitinghuwelijkpartnerschap\" DATE ,\"huwhstdatumsluitinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwhstplaatssluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstplaatssluitinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwhstlandsluitinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstlandsluitinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwhstdatumontbindinghuwelijkpartnerschap\" DATE ,\"huwhstdatumontbindinghuwelijkpartnerschapindicator\" VARCHAR(1)  ,\"huwhstplaatsontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstplaatsontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(50)  ,\"huwhstlandontbindinghuwelijkpartnerschapcode\" VARCHAR(4)  ,\"huwhstlandontbindinghuwelijkpartnerschapomschrijving\" VARCHAR(40)  ,\"huwhstredenontbindinghuwelijkpartnerschap\" VARCHAR(1)  ,\"huwhstsoortverbintenis\" VARCHAR(1)  ,\"huwhstregistergemeenteaktecode\" VARCHAR(4)  ,\"huwhstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"huwhstaktenummer\" VARCHAR(7)  ,\"huwhstgemeentedocumentcode\" VARCHAR(4)  ,\"huwhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"huwhstdatumdocument\" DATE ,\"huwhstdatumdocumentindicator\" VARCHAR(1)  ,\"huwhstbeschrijvingdocument\" VARCHAR(50)  ,\"huwhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"huwhstdatumingangonderzoek\" DATE ,\"huwhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"huwhstdatumeindeonderzoek\" DATE ,\"huwhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"huwhstingangsdatumgeldigheid\" DATE ,\"huwhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"huwhstdatumvanopneming\" DATE ,\"huwhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"huwhstsleuteldatum\",\"huwhstsleutelvolgnummer\",\"huwhstsleutelgeldigdatum\",\"huwhstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_10_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_10++;

/**
 * [tCreateTable_10 main ] stop
 */
	
	/**
	 * [tCreateTable_10 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_10";

	

 

ok_Hash.put("tCreateTable_10", true);
end_Hash.put("tCreateTable_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tCreateTable_11Process(globalMap);



/**
 * [tCreateTable_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_10 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_10";

	

 



/**
 * [tCreateTable_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_10_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_11", false);
		start_Hash.put("tCreateTable_11", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_11";

	
		int tos_count_tCreateTable_11 = 0;
		
    	class BytesLimit65535_tCreateTable_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_11().limitLog4jByte();

 



/**
 * [tCreateTable_11 begin ] stop
 */
	
	/**
	 * [tCreateTable_11 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_11";

	

    try{
            String driverClass_tCreateTable_11="org.postgresql.Driver";
String url_tCreateTable_11="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_11="mks_owner";

        String tableName_tCreateTable_11 = "ibz_cip_overlijden_historie";
String dbSchema_tCreateTable_11 = "ldf";
if(dbSchema_tCreateTable_11 != null && dbSchema_tCreateTable_11.trim().length() != 0) {tableName_tCreateTable_11 = dbSchema_tCreateTable_11 + "\".\"" + tableName_tCreateTable_11;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_11= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_11= java.sql.DriverManager.getConnection(url_tCreateTable_11,dbUser_tCreateTable_11, decryptedPassword_tCreateTable_11);

            boolean whetherExist_tCreateTable_11 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_11 = conn_tCreateTable_11.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_11 = dbMetaData_tCreateTable_11.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_11 = "public";
                if(dbSchema_tCreateTable_11 == null || dbSchema_tCreateTable_11.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_11 = conn_tCreateTable_11.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_11 = stmtSchema_tCreateTable_11.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_11.next()){
                                defaultSchema_tCreateTable_11 = rsSchema_tCreateTable_11.getString("current_schema");
                	}
                	rsSchema_tCreateTable_11.close();
                	stmtSchema_tCreateTable_11.close();
                }
                while(rsTable_tCreateTable_11.next()) {
                    String table_tCreateTable_11 = rsTable_tCreateTable_11.getString("TABLE_NAME");
                    String schema_tCreateTable_11 = rsTable_tCreateTable_11.getString("TABLE_SCHEM");
                    if(table_tCreateTable_11.equals("ibz_cip_overlijden_historie") 
                        && (schema_tCreateTable_11.equals(dbSchema_tCreateTable_11) || ((dbSchema_tCreateTable_11 ==null || dbSchema_tCreateTable_11.trim().length() ==0) && defaultSchema_tCreateTable_11.equals(schema_tCreateTable_11)))) {
                        whetherExist_tCreateTable_11 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_11.close();
                if(!whetherExist_tCreateTable_11) {
                    java.sql.Statement stmt_tCreateTable_11 = conn_tCreateTable_11.createStatement();
                    stmt_tCreateTable_11.execute("CREATE TABLE \"" + tableName_tCreateTable_11 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"ovlhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"ovlhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"ovlhstdatumoverlijden\" DATE ,\"ovlhstdatumoverlijdenindicator\" VARCHAR(1)  ,\"ovlhstplaatsoverlijdencode\" VARCHAR(4)  ,\"ovlhstplaatsoverlijdenomschrijving\" VARCHAR(50)  ,\"ovlhstlandoverlijdencode\" VARCHAR(4)  ,\"ovlhstlandoverlijdenomschrijving\" VARCHAR(40)  ,\"ovlhstregistergemeenteaktecode\" VARCHAR(4)  ,\"ovlhstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ovlhstaktenummer\" VARCHAR(7)  ,\"ovlhstgemeentedocumentcode\" VARCHAR(4)  ,\"ovlhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ovlhstdatumdocument\" DATE ,\"ovlhstdatumdocumentindicator\" VARCHAR(1)  ,\"ovlhstbeschrijvingdocument\" VARCHAR(50)  ,\"ovlhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ovlhstdatumingangonderzoek\" DATE ,\"ovlhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"ovlhstdatumeindeonderzoek\" DATE ,\"ovlhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ovlhstingangsdatumgeldigheid\" DATE ,\"ovlhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ovlhstdatumvanopneming\" DATE ,\"ovlhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"ovlhstsleutelgeldigdatum\",\"ovlhstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_11 != null && !conn_tCreateTable_11.isClosed()) {
conn_tCreateTable_11.close();
}

        globalMap.put("tCreateTable_11_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_11 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"ovlhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"ovlhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"ovlhstdatumoverlijden\" DATE ,\"ovlhstdatumoverlijdenindicator\" VARCHAR(1)  ,\"ovlhstplaatsoverlijdencode\" VARCHAR(4)  ,\"ovlhstplaatsoverlijdenomschrijving\" VARCHAR(50)  ,\"ovlhstlandoverlijdencode\" VARCHAR(4)  ,\"ovlhstlandoverlijdenomschrijving\" VARCHAR(40)  ,\"ovlhstregistergemeenteaktecode\" VARCHAR(4)  ,\"ovlhstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"ovlhstaktenummer\" VARCHAR(7)  ,\"ovlhstgemeentedocumentcode\" VARCHAR(4)  ,\"ovlhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"ovlhstdatumdocument\" DATE ,\"ovlhstdatumdocumentindicator\" VARCHAR(1)  ,\"ovlhstbeschrijvingdocument\" VARCHAR(50)  ,\"ovlhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"ovlhstdatumingangonderzoek\" DATE ,\"ovlhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"ovlhstdatumeindeonderzoek\" DATE ,\"ovlhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"ovlhstingangsdatumgeldigheid\" DATE ,\"ovlhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"ovlhstdatumvanopneming\" DATE ,\"ovlhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"ovlhstsleutelgeldigdatum\",\"ovlhstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_11_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_11++;

/**
 * [tCreateTable_11 main ] stop
 */
	
	/**
	 * [tCreateTable_11 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_11";

	

 

ok_Hash.put("tCreateTable_11", true);
end_Hash.put("tCreateTable_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tCreateTable_12Process(globalMap);



/**
 * [tCreateTable_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_11 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_11";

	

 



/**
 * [tCreateTable_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_11_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_12", false);
		start_Hash.put("tCreateTable_12", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_12";

	
		int tos_count_tCreateTable_12 = 0;
		
    	class BytesLimit65535_tCreateTable_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_12().limitLog4jByte();

 



/**
 * [tCreateTable_12 begin ] stop
 */
	
	/**
	 * [tCreateTable_12 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_12";

	

    try{
            String driverClass_tCreateTable_12="org.postgresql.Driver";
String url_tCreateTable_12="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_12="mks_owner";

        String tableName_tCreateTable_12 = "ibz_cip_verblijfplaats_historie";
String dbSchema_tCreateTable_12 = "ldf";
if(dbSchema_tCreateTable_12 != null && dbSchema_tCreateTable_12.trim().length() != 0) {tableName_tCreateTable_12 = dbSchema_tCreateTable_12 + "\".\"" + tableName_tCreateTable_12;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_12= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_12= java.sql.DriverManager.getConnection(url_tCreateTable_12,dbUser_tCreateTable_12, decryptedPassword_tCreateTable_12);

            boolean whetherExist_tCreateTable_12 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_12 = conn_tCreateTable_12.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_12 = dbMetaData_tCreateTable_12.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_12 = "public";
                if(dbSchema_tCreateTable_12 == null || dbSchema_tCreateTable_12.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_12 = conn_tCreateTable_12.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_12 = stmtSchema_tCreateTable_12.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_12.next()){
                                defaultSchema_tCreateTable_12 = rsSchema_tCreateTable_12.getString("current_schema");
                	}
                	rsSchema_tCreateTable_12.close();
                	stmtSchema_tCreateTable_12.close();
                }
                while(rsTable_tCreateTable_12.next()) {
                    String table_tCreateTable_12 = rsTable_tCreateTable_12.getString("TABLE_NAME");
                    String schema_tCreateTable_12 = rsTable_tCreateTable_12.getString("TABLE_SCHEM");
                    if(table_tCreateTable_12.equals("ibz_cip_verblijfplaats_historie") 
                        && (schema_tCreateTable_12.equals(dbSchema_tCreateTable_12) || ((dbSchema_tCreateTable_12 ==null || dbSchema_tCreateTable_12.trim().length() ==0) && defaultSchema_tCreateTable_12.equals(schema_tCreateTable_12)))) {
                        whetherExist_tCreateTable_12 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_12.close();
                if(!whetherExist_tCreateTable_12) {
                    java.sql.Statement stmt_tCreateTable_12 = conn_tCreateTable_12.createStatement();
                    stmt_tCreateTable_12.execute("CREATE TABLE \"" + tableName_tCreateTable_12 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"vblhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"vblhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"vblhstgemeentevaninschrijvingcode\" VARCHAR(4)  ,\"vblhstgemeentevaninschrijvingomschrijving\" VARCHAR(35)  ,\"vblhstdatuminschrijving\" DATE ,\"vblhstdatuminschrijvingindicator\" VARCHAR(1)  ,\"vblhstfunctieadres\" VARCHAR(1)  ,\"vblhstgemeentedeel\" VARCHAR(24)  ,\"vblhstdatumaanvangadreshouding\" DATE ,\"vblhstdatumaanvangadreshoudingindicator\" VARCHAR(1)  ,\"vblhststraatnaam\" VARCHAR(24)  ,\"vblhstnaamopenbareruimte\" VARCHAR(80)  ,\"vblhstadresopgemaakt\" VARCHAR(50)  ,\"vblhstwoonplaatsopgemaakt\" VARCHAR(40)  ,\"vblhsthuisnummer\" NUMERIC(5,0)  ,\"vblhsthuisletter\" VARCHAR(1)  ,\"vblhsthuisnummertoevoeging\" VARCHAR(4)  ,\"vblhstaanduidingbijhuisnummer\" VARCHAR(2)  ,\"vblhstpostcode\" VARCHAR(6)  ,\"vblhstwoonplaatsnaam\" VARCHAR(80)  ,\"vblhstidentificatiecodeverblijfplaats\" VARCHAR(16)  ,\"vblhstidentificatiecodenummeraanduiding\" VARCHAR(16)  ,\"vblhstlocatiebeschrijving\" VARCHAR(35)  ,\"vblhstlandadresbuitenlandcode\" VARCHAR(4)  ,\"vblhstlandadresbuitenlandomschrijving\" VARCHAR(40)  ,\"vblhstdatumaanvangadresbuitenland\" DATE ,\"vblhstdatumaanvangadresbuitenlandindicator\" VARCHAR(1)  ,\"vblhstregel1adresbuitenland\" VARCHAR(45)  ,\"vblhstregel2adresbuitenland\" VARCHAR(45)  ,\"vblhstregel3adresbuitenland\" VARCHAR(45)  ,\"vblhstlandvanwaaringeschrevencode\" VARCHAR(4)  ,\"vblhstlandvanwaaringeschrevenomschrijving\" VARCHAR(40)  ,\"vblhstdatumvestiginginnederland\" DATE ,\"vblhstdatumvestiginginnederlandindicator\" VARCHAR(1)  ,\"vblhstomschrijvingvanaangifteadreshouding\" VARCHAR(1)  ,\"vblhstindicatiedocument\" NUMERIC(1,0)  ,\"vblhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vblhstdatumingangonderzoek\" DATE ,\"vblhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"vblhstdatumeindeonderzoek\" DATE ,\"vblhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vblhstingangsdatumgeldigheid\" DATE ,\"vblhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vblhstdatumvanopneming\" DATE ,\"vblhstdatumvanopnemingindicator\" VARCHAR(1)  ,\"vblhstwijkcode\" VARCHAR(3)  ,\"vblhstwijkomschrijving\" VARCHAR(35)  ,\"vblhstplanalogischewijkcode\" VARCHAR(3)  ,\"vblhstplanalogischewijkomschrijving\" VARCHAR(35)  ,primary key(\"prsanummer\",\"vblhstsleutelgeldigdatum\",\"vblhstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_12 != null && !conn_tCreateTable_12.isClosed()) {
conn_tCreateTable_12.close();
}

        globalMap.put("tCreateTable_12_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_12 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"vblhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"vblhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"vblhstgemeentevaninschrijvingcode\" VARCHAR(4)  ,\"vblhstgemeentevaninschrijvingomschrijving\" VARCHAR(35)  ,\"vblhstdatuminschrijving\" DATE ,\"vblhstdatuminschrijvingindicator\" VARCHAR(1)  ,\"vblhstfunctieadres\" VARCHAR(1)  ,\"vblhstgemeentedeel\" VARCHAR(24)  ,\"vblhstdatumaanvangadreshouding\" DATE ,\"vblhstdatumaanvangadreshoudingindicator\" VARCHAR(1)  ,\"vblhststraatnaam\" VARCHAR(24)  ,\"vblhstnaamopenbareruimte\" VARCHAR(80)  ,\"vblhstadresopgemaakt\" VARCHAR(50)  ,\"vblhstwoonplaatsopgemaakt\" VARCHAR(40)  ,\"vblhsthuisnummer\" NUMERIC(5,0)  ,\"vblhsthuisletter\" VARCHAR(1)  ,\"vblhsthuisnummertoevoeging\" VARCHAR(4)  ,\"vblhstaanduidingbijhuisnummer\" VARCHAR(2)  ,\"vblhstpostcode\" VARCHAR(6)  ,\"vblhstwoonplaatsnaam\" VARCHAR(80)  ,\"vblhstidentificatiecodeverblijfplaats\" VARCHAR(16)  ,\"vblhstidentificatiecodenummeraanduiding\" VARCHAR(16)  ,\"vblhstlocatiebeschrijving\" VARCHAR(35)  ,\"vblhstlandadresbuitenlandcode\" VARCHAR(4)  ,\"vblhstlandadresbuitenlandomschrijving\" VARCHAR(40)  ,\"vblhstdatumaanvangadresbuitenland\" DATE ,\"vblhstdatumaanvangadresbuitenlandindicator\" VARCHAR(1)  ,\"vblhstregel1adresbuitenland\" VARCHAR(45)  ,\"vblhstregel2adresbuitenland\" VARCHAR(45)  ,\"vblhstregel3adresbuitenland\" VARCHAR(45)  ,\"vblhstlandvanwaaringeschrevencode\" VARCHAR(4)  ,\"vblhstlandvanwaaringeschrevenomschrijving\" VARCHAR(40)  ,\"vblhstdatumvestiginginnederland\" DATE ,\"vblhstdatumvestiginginnederlandindicator\" VARCHAR(1)  ,\"vblhstomschrijvingvanaangifteadreshouding\" VARCHAR(1)  ,\"vblhstindicatiedocument\" NUMERIC(1,0)  ,\"vblhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vblhstdatumingangonderzoek\" DATE ,\"vblhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"vblhstdatumeindeonderzoek\" DATE ,\"vblhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vblhstingangsdatumgeldigheid\" DATE ,\"vblhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vblhstdatumvanopneming\" DATE ,\"vblhstdatumvanopnemingindicator\" VARCHAR(1)  ,\"vblhstwijkcode\" VARCHAR(3)  ,\"vblhstwijkomschrijving\" VARCHAR(35)  ,\"vblhstplanalogischewijkcode\" VARCHAR(3)  ,\"vblhstplanalogischewijkomschrijving\" VARCHAR(35)  ,primary key(\"prsanummer\",\"vblhstsleutelgeldigdatum\",\"vblhstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_12_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_12++;

/**
 * [tCreateTable_12 main ] stop
 */
	
	/**
	 * [tCreateTable_12 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_12";

	

 

ok_Hash.put("tCreateTable_12", true);
end_Hash.put("tCreateTable_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tCreateTable_13Process(globalMap);



/**
 * [tCreateTable_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_12 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_12";

	

 



/**
 * [tCreateTable_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_12_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_13", false);
		start_Hash.put("tCreateTable_13", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_13";

	
		int tos_count_tCreateTable_13 = 0;
		
    	class BytesLimit65535_tCreateTable_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_13().limitLog4jByte();

 



/**
 * [tCreateTable_13 begin ] stop
 */
	
	/**
	 * [tCreateTable_13 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_13";

	

    try{
            String driverClass_tCreateTable_13="org.postgresql.Driver";
String url_tCreateTable_13="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_13="mks_owner";

        String tableName_tCreateTable_13 = "ibz_cip_kind_historie";
String dbSchema_tCreateTable_13 = "ldf";
if(dbSchema_tCreateTable_13 != null && dbSchema_tCreateTable_13.trim().length() != 0) {tableName_tCreateTable_13 = dbSchema_tCreateTable_13 + "\".\"" + tableName_tCreateTable_13;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_13= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_13= java.sql.DriverManager.getConnection(url_tCreateTable_13,dbUser_tCreateTable_13, decryptedPassword_tCreateTable_13);

            boolean whetherExist_tCreateTable_13 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_13 = conn_tCreateTable_13.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_13 = dbMetaData_tCreateTable_13.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_13 = "public";
                if(dbSchema_tCreateTable_13 == null || dbSchema_tCreateTable_13.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_13 = conn_tCreateTable_13.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_13 = stmtSchema_tCreateTable_13.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_13.next()){
                                defaultSchema_tCreateTable_13 = rsSchema_tCreateTable_13.getString("current_schema");
                	}
                	rsSchema_tCreateTable_13.close();
                	stmtSchema_tCreateTable_13.close();
                }
                while(rsTable_tCreateTable_13.next()) {
                    String table_tCreateTable_13 = rsTable_tCreateTable_13.getString("TABLE_NAME");
                    String schema_tCreateTable_13 = rsTable_tCreateTable_13.getString("TABLE_SCHEM");
                    if(table_tCreateTable_13.equals("ibz_cip_kind_historie") 
                        && (schema_tCreateTable_13.equals(dbSchema_tCreateTable_13) || ((dbSchema_tCreateTable_13 ==null || dbSchema_tCreateTable_13.trim().length() ==0) && defaultSchema_tCreateTable_13.equals(schema_tCreateTable_13)))) {
                        whetherExist_tCreateTable_13 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_13.close();
                if(!whetherExist_tCreateTable_13) {
                    java.sql.Statement stmt_tCreateTable_13 = conn_tCreateTable_13.createStatement();
                    stmt_tCreateTable_13.execute("CREATE TABLE \"" + tableName_tCreateTable_13 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"kndhstsleuteldatum\" NUMERIC(8,0)  ,\"kndhstsleutelvolgnummer\" NUMERIC(1,0)  ,\"kndhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"kndhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"kndhstanummer\" NUMERIC(10,0)  ,\"kndhstburgerservicenummer\" NUMERIC(9,0)  ,\"kndhstvoornamen\" VARCHAR(220)  ,\"kndhstvoorletters\" VARCHAR(50)  ,\"kndhstadellijketitelcode\" VARCHAR(2)  ,\"kndhstadellijketitelomschrijving\" VARCHAR(20)  ,\"kndhstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"kndhstgeslachtsnaam\" VARCHAR(220)  ,\"kndhstgeboortedatum\" DATE ,\"kndhstgeboortedatumindicator\" VARCHAR(1)  ,\"kndhstgeboorteplaatscode\" VARCHAR(4)  ,\"kndhstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"kndhstgeboortelandcode\" VARCHAR(4)  ,\"kndhstgeboortelandomschrijving\" VARCHAR(40)  ,\"kndhstregistergemeenteaktecode\" VARCHAR(4)  ,\"kndhstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"kndhstaktenummer\" VARCHAR(7)  ,\"kndhstgemeentedocumentcode\" VARCHAR(4)  ,\"kndhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"kndhstdatumdocument\" DATE ,\"kndhstdatumdocumentindicator\" VARCHAR(1)  ,\"kndhstbeschrijvingdocument\" VARCHAR(50)  ,\"kndhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"kndhstdatumingangonderzoek\" DATE ,\"kndhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"kndhstdatumeindeonderzoek\" DATE ,\"kndhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"kndhstingangsdatumgeldigheid\" DATE ,\"kndhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"kndhstdatumvanopneming\" DATE ,\"kndhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"kndhstsleuteldatum\",\"kndhstsleutelvolgnummer\",\"kndhstsleutelgeldigdatum\",\"kndhstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_13 != null && !conn_tCreateTable_13.isClosed()) {
conn_tCreateTable_13.close();
}

        globalMap.put("tCreateTable_13_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_13 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"kndhstsleuteldatum\" NUMERIC(8,0)  ,\"kndhstsleutelvolgnummer\" NUMERIC(1,0)  ,\"kndhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"kndhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"kndhstanummer\" NUMERIC(10,0)  ,\"kndhstburgerservicenummer\" NUMERIC(9,0)  ,\"kndhstvoornamen\" VARCHAR(220)  ,\"kndhstvoorletters\" VARCHAR(50)  ,\"kndhstadellijketitelcode\" VARCHAR(2)  ,\"kndhstadellijketitelomschrijving\" VARCHAR(20)  ,\"kndhstvoorvoegselgeslachtsnaam\" VARCHAR(10)  ,\"kndhstgeslachtsnaam\" VARCHAR(220)  ,\"kndhstgeboortedatum\" DATE ,\"kndhstgeboortedatumindicator\" VARCHAR(1)  ,\"kndhstgeboorteplaatscode\" VARCHAR(4)  ,\"kndhstgeboorteplaatsomschrijving\" VARCHAR(50)  ,\"kndhstgeboortelandcode\" VARCHAR(4)  ,\"kndhstgeboortelandomschrijving\" VARCHAR(40)  ,\"kndhstregistergemeenteaktecode\" VARCHAR(4)  ,\"kndhstregistergemeenteakteomschrijving\" VARCHAR(35)  ,\"kndhstaktenummer\" VARCHAR(7)  ,\"kndhstgemeentedocumentcode\" VARCHAR(4)  ,\"kndhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"kndhstdatumdocument\" DATE ,\"kndhstdatumdocumentindicator\" VARCHAR(1)  ,\"kndhstbeschrijvingdocument\" VARCHAR(50)  ,\"kndhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"kndhstdatumingangonderzoek\" DATE ,\"kndhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"kndhstdatumeindeonderzoek\" DATE ,\"kndhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"kndhstingangsdatumgeldigheid\" DATE ,\"kndhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"kndhstdatumvanopneming\" DATE ,\"kndhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"kndhstsleuteldatum\",\"kndhstsleutelvolgnummer\",\"kndhstsleutelgeldigdatum\",\"kndhstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_13_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_13++;

/**
 * [tCreateTable_13 main ] stop
 */
	
	/**
	 * [tCreateTable_13 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_13";

	

 

ok_Hash.put("tCreateTable_13", true);
end_Hash.put("tCreateTable_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tCreateTable_14Process(globalMap);



/**
 * [tCreateTable_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_13 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_13";

	

 



/**
 * [tCreateTable_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_13_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_14", false);
		start_Hash.put("tCreateTable_14", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_14";

	
		int tos_count_tCreateTable_14 = 0;
		
    	class BytesLimit65535_tCreateTable_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_14().limitLog4jByte();

 



/**
 * [tCreateTable_14 begin ] stop
 */
	
	/**
	 * [tCreateTable_14 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_14";

	

    try{
            String driverClass_tCreateTable_14="org.postgresql.Driver";
String url_tCreateTable_14="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_14="mks_owner";

        String tableName_tCreateTable_14 = "ibz_cip_verblijfstitel_historie";
String dbSchema_tCreateTable_14 = "ldf";
if(dbSchema_tCreateTable_14 != null && dbSchema_tCreateTable_14.trim().length() != 0) {tableName_tCreateTable_14 = dbSchema_tCreateTable_14 + "\".\"" + tableName_tCreateTable_14;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_14= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_14= java.sql.DriverManager.getConnection(url_tCreateTable_14,dbUser_tCreateTable_14, decryptedPassword_tCreateTable_14);

            boolean whetherExist_tCreateTable_14 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_14 = conn_tCreateTable_14.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_14 = dbMetaData_tCreateTable_14.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_14 = "public";
                if(dbSchema_tCreateTable_14 == null || dbSchema_tCreateTable_14.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_14 = conn_tCreateTable_14.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_14 = stmtSchema_tCreateTable_14.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_14.next()){
                                defaultSchema_tCreateTable_14 = rsSchema_tCreateTable_14.getString("current_schema");
                	}
                	rsSchema_tCreateTable_14.close();
                	stmtSchema_tCreateTable_14.close();
                }
                while(rsTable_tCreateTable_14.next()) {
                    String table_tCreateTable_14 = rsTable_tCreateTable_14.getString("TABLE_NAME");
                    String schema_tCreateTable_14 = rsTable_tCreateTable_14.getString("TABLE_SCHEM");
                    if(table_tCreateTable_14.equals("ibz_cip_verblijfstitel_historie") 
                        && (schema_tCreateTable_14.equals(dbSchema_tCreateTable_14) || ((dbSchema_tCreateTable_14 ==null || dbSchema_tCreateTable_14.trim().length() ==0) && defaultSchema_tCreateTable_14.equals(schema_tCreateTable_14)))) {
                        whetherExist_tCreateTable_14 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_14.close();
                if(!whetherExist_tCreateTable_14) {
                    java.sql.Statement stmt_tCreateTable_14 = conn_tCreateTable_14.createStatement();
                    stmt_tCreateTable_14.execute("CREATE TABLE \"" + tableName_tCreateTable_14 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"vbthstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"vbthstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"vbthstaanduidingverblijfstitelcode\" VARCHAR(2)  ,\"vbthstaanduidingverblijfstitelomschrijving\" VARCHAR(80)  ,\"vbthstverblijfstitelvervallen\" VARCHAR(1)  ,\"vbthstdatumeindeverblijfstitel\" DATE ,\"vbthstdatumeindeverblijfstitelindicator\" VARCHAR(1)  ,\"vbthstingangsdatumverblijfstitel\" DATE ,\"vbthstingangsdatumverblijfstitelindicator\" VARCHAR(1)  ,\"vbthstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vbthstdatumingangonderzoek\" DATE ,\"vbthstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"vbthstdatumeindeonderzoek\" DATE ,\"vbthstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vbthstingangsdatumgeldigheid\" DATE ,\"vbthstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vbthstdatumvanopneming\" DATE ,\"vbthstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"vbthstsleutelgeldigdatum\",\"vbthstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_14 != null && !conn_tCreateTable_14.isClosed()) {
conn_tCreateTable_14.close();
}

        globalMap.put("tCreateTable_14_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_14 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"vbthstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"vbthstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"vbthstaanduidingverblijfstitelcode\" VARCHAR(2)  ,\"vbthstaanduidingverblijfstitelomschrijving\" VARCHAR(80)  ,\"vbthstverblijfstitelvervallen\" VARCHAR(1)  ,\"vbthstdatumeindeverblijfstitel\" DATE ,\"vbthstdatumeindeverblijfstitelindicator\" VARCHAR(1)  ,\"vbthstingangsdatumverblijfstitel\" DATE ,\"vbthstingangsdatumverblijfstitelindicator\" VARCHAR(1)  ,\"vbthstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"vbthstdatumingangonderzoek\" DATE ,\"vbthstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"vbthstdatumeindeonderzoek\" DATE ,\"vbthstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"vbthstingangsdatumgeldigheid\" DATE ,\"vbthstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"vbthstdatumvanopneming\" DATE ,\"vbthstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"vbthstsleutelgeldigdatum\",\"vbthstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_14_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_14++;

/**
 * [tCreateTable_14 main ] stop
 */
	
	/**
	 * [tCreateTable_14 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_14";

	

 

ok_Hash.put("tCreateTable_14", true);
end_Hash.put("tCreateTable_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tCreateTable_15Process(globalMap);



/**
 * [tCreateTable_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_14 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_14";

	

 



/**
 * [tCreateTable_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_14_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tCreateTable_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_15", false);
		start_Hash.put("tCreateTable_15", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_15";

	
		int tos_count_tCreateTable_15 = 0;
		
    	class BytesLimit65535_tCreateTable_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_15().limitLog4jByte();

 



/**
 * [tCreateTable_15 begin ] stop
 */
	
	/**
	 * [tCreateTable_15 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_15";

	

    try{
            String driverClass_tCreateTable_15="org.postgresql.Driver";
String url_tCreateTable_15="jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
String dbUser_tCreateTable_15="mks_owner";

        String tableName_tCreateTable_15 = "ibz_cip_gezagsverhouding_historie";
String dbSchema_tCreateTable_15 = "ldf";
if(dbSchema_tCreateTable_15 != null && dbSchema_tCreateTable_15.trim().length() != 0) {tableName_tCreateTable_15 = dbSchema_tCreateTable_15 + "\".\"" + tableName_tCreateTable_15;
}java.lang.Class.forName("org.postgresql.Driver");
final String decryptedPassword_tCreateTable_15= routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
java.sql.Connection conn_tCreateTable_15= java.sql.DriverManager.getConnection(url_tCreateTable_15,dbUser_tCreateTable_15, decryptedPassword_tCreateTable_15);

            boolean whetherExist_tCreateTable_15 = false;                  
                java.sql.DatabaseMetaData dbMetaData_tCreateTable_15 = conn_tCreateTable_15.getMetaData();
                java.sql.ResultSet rsTable_tCreateTable_15 = dbMetaData_tCreateTable_15.getTables(null, null, null, new String[]{"TABLE"});
                String defaultSchema_tCreateTable_15 = "public";
                if(dbSchema_tCreateTable_15 == null || dbSchema_tCreateTable_15.trim().length() == 0) {
                	java.sql.Statement stmtSchema_tCreateTable_15 = conn_tCreateTable_15.createStatement();
                	java.sql.ResultSet rsSchema_tCreateTable_15 = stmtSchema_tCreateTable_15.executeQuery("select current_schema() ");
                	while(rsSchema_tCreateTable_15.next()){
                                defaultSchema_tCreateTable_15 = rsSchema_tCreateTable_15.getString("current_schema");
                	}
                	rsSchema_tCreateTable_15.close();
                	stmtSchema_tCreateTable_15.close();
                }
                while(rsTable_tCreateTable_15.next()) {
                    String table_tCreateTable_15 = rsTable_tCreateTable_15.getString("TABLE_NAME");
                    String schema_tCreateTable_15 = rsTable_tCreateTable_15.getString("TABLE_SCHEM");
                    if(table_tCreateTable_15.equals("ibz_cip_gezagsverhouding_historie") 
                        && (schema_tCreateTable_15.equals(dbSchema_tCreateTable_15) || ((dbSchema_tCreateTable_15 ==null || dbSchema_tCreateTable_15.trim().length() ==0) && defaultSchema_tCreateTable_15.equals(schema_tCreateTable_15)))) {
                        whetherExist_tCreateTable_15 = true;
                        break;
                    }
                }
            rsTable_tCreateTable_15.close();
                if(!whetherExist_tCreateTable_15) {
                    java.sql.Statement stmt_tCreateTable_15 = conn_tCreateTable_15.createStatement();
                    stmt_tCreateTable_15.execute("CREATE TABLE \"" + tableName_tCreateTable_15 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"gzvhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"gzvhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"gzvhstindicatiegezagminderjarige\" VARCHAR(2)  ,\"gzvhstindicatiecurateleregister\" NUMERIC(1,0)  ,\"gzvhstgemeentedocumentcode\" VARCHAR(4)  ,\"gzvhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"gzvhstdatumdocument\" DATE ,\"gzvhstdatumdocumentindicator\" VARCHAR(1)  ,\"gzvhstbeschrijvingdocument\" VARCHAR(50)  ,\"gzvhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"gzvhstdatumingangonderzoek\" DATE ,\"gzvhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"gzvhstdatumeindeonderzoek\" DATE ,\"gzvhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"gzvhstingangsdatumgeldigheid\" DATE ,\"gzvhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"gzvhstdatumvanopneming\" DATE ,\"gzvhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"gzvhstsleutelgeldigdatum\",\"gzvhstsleutelgeldigvolgnummer\"))");                
		            
                }
        if(conn_tCreateTable_15 != null && !conn_tCreateTable_15.isClosed()) {
conn_tCreateTable_15.close();
}

        globalMap.put("tCreateTable_15_QUERY", "CREATE TABLE \"" + tableName_tCreateTable_15 + "\"(\"prsanummer\" NUMERIC(10,0)  ,\"gzvhstsleutelgeldigdatum\" NUMERIC(8,0)  ,\"gzvhstsleutelgeldigvolgnummer\" NUMERIC(1,0)  ,\"gzvhstindicatiegezagminderjarige\" VARCHAR(2)  ,\"gzvhstindicatiecurateleregister\" NUMERIC(1,0)  ,\"gzvhstgemeentedocumentcode\" VARCHAR(4)  ,\"gzvhstgemeentedocumentomschrijving\" VARCHAR(35)  ,\"gzvhstdatumdocument\" DATE ,\"gzvhstdatumdocumentindicator\" VARCHAR(1)  ,\"gzvhstbeschrijvingdocument\" VARCHAR(50)  ,\"gzvhstaanduidinggegevensonderzoek\" NUMERIC(6,0)  ,\"gzvhstdatumingangonderzoek\" DATE ,\"gzvhstdatumingangonderzoekindicator\" VARCHAR(1)  ,\"gzvhstdatumeindeonderzoek\" DATE ,\"gzvhstdatumeindeonderzoekindicator\" VARCHAR(1)  ,\"gzvhstingangsdatumgeldigheid\" DATE ,\"gzvhstingangsdatumgeldigheidindicator\" VARCHAR(1)  ,\"gzvhstdatumvanopneming\" DATE ,\"gzvhstdatumvanopnemingindicator\" VARCHAR(1)  ,primary key(\"prsanummer\",\"gzvhstsleutelgeldigdatum\",\"gzvhstsleutelgeldigvolgnummer\"))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_15_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_15++;

/**
 * [tCreateTable_15 main ] stop
 */
	
	/**
	 * [tCreateTable_15 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_15";

	

 

ok_Hash.put("tCreateTable_15", true);
end_Hash.put("tCreateTable_15", System.currentTimeMillis());




/**
 * [tCreateTable_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_15 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_15";

	

 



/**
 * [tCreateTable_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_15_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_create_ldf_tabellen ibz_cipers_create_ldf_tabellenClass = new ibz_cipers_create_ldf_tabellen();

        int exitCode = ibz_cipers_create_ldf_tabellenClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_create_ldf_tabellen.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_create_ldf_tabellen_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_create_ldf_tabellen");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     203385 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:49 CET
 ************************************************************************************************/