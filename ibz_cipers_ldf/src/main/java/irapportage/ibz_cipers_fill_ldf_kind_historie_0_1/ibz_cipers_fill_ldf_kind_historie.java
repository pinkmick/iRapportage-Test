// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_kind_historie_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_kind_historie Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_kind_historie implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_kind_historie";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_kind_historie.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_kind_historie.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_kind_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_kind_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_kind_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_kind_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_kind_historieStruct implements routines.system.IPersistableRow<ldf_kind_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal kndhstsleuteldatum;

				public BigDecimal getKndhstsleuteldatum () {
					return this.kndhstsleuteldatum;
				}
				
			    public BigDecimal kndhstsleutelvolgnummer;

				public BigDecimal getKndhstsleutelvolgnummer () {
					return this.kndhstsleutelvolgnummer;
				}
				
			    public BigDecimal kndhstsleutelgeldigdatum;

				public BigDecimal getKndhstsleutelgeldigdatum () {
					return this.kndhstsleutelgeldigdatum;
				}
				
			    public BigDecimal kndhstsleutelgeldigvolgnummer;

				public BigDecimal getKndhstsleutelgeldigvolgnummer () {
					return this.kndhstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal kndhstanummer;

				public BigDecimal getKndhstanummer () {
					return this.kndhstanummer;
				}
				
			    public BigDecimal kndhstburgerservicenummer;

				public BigDecimal getKndhstburgerservicenummer () {
					return this.kndhstburgerservicenummer;
				}
				
			    public String kndhstvoornamen;

				public String getKndhstvoornamen () {
					return this.kndhstvoornamen;
				}
				
			    public String kndhstvoorletters;

				public String getKndhstvoorletters () {
					return this.kndhstvoorletters;
				}
				
			    public String kndhstadellijketitelcode;

				public String getKndhstadellijketitelcode () {
					return this.kndhstadellijketitelcode;
				}
				
			    public String kndhstadellijketitelomschrijving;

				public String getKndhstadellijketitelomschrijving () {
					return this.kndhstadellijketitelomschrijving;
				}
				
			    public String kndhstvoorvoegselgeslachtsnaam;

				public String getKndhstvoorvoegselgeslachtsnaam () {
					return this.kndhstvoorvoegselgeslachtsnaam;
				}
				
			    public String kndhstgeslachtsnaam;

				public String getKndhstgeslachtsnaam () {
					return this.kndhstgeslachtsnaam;
				}
				
			    public java.util.Date kndhstgeboortedatum;

				public java.util.Date getKndhstgeboortedatum () {
					return this.kndhstgeboortedatum;
				}
				
			    public String kndhstgeboortedatumindicator;

				public String getKndhstgeboortedatumindicator () {
					return this.kndhstgeboortedatumindicator;
				}
				
			    public String kndhstgeboorteplaatscode;

				public String getKndhstgeboorteplaatscode () {
					return this.kndhstgeboorteplaatscode;
				}
				
			    public String kndhstgeboorteplaatsomschrijving;

				public String getKndhstgeboorteplaatsomschrijving () {
					return this.kndhstgeboorteplaatsomschrijving;
				}
				
			    public String kndhstgeboortelandcode;

				public String getKndhstgeboortelandcode () {
					return this.kndhstgeboortelandcode;
				}
				
			    public String kndhstgeboortelandomschrijving;

				public String getKndhstgeboortelandomschrijving () {
					return this.kndhstgeboortelandomschrijving;
				}
				
			    public String kndhstregistergemeenteaktecode;

				public String getKndhstregistergemeenteaktecode () {
					return this.kndhstregistergemeenteaktecode;
				}
				
			    public String kndhstregistergemeenteakteomschrijving;

				public String getKndhstregistergemeenteakteomschrijving () {
					return this.kndhstregistergemeenteakteomschrijving;
				}
				
			    public String kndhstaktenummer;

				public String getKndhstaktenummer () {
					return this.kndhstaktenummer;
				}
				
			    public String kndhstgemeentedocumentcode;

				public String getKndhstgemeentedocumentcode () {
					return this.kndhstgemeentedocumentcode;
				}
				
			    public String kndhstgemeentedocumentomschrijving;

				public String getKndhstgemeentedocumentomschrijving () {
					return this.kndhstgemeentedocumentomschrijving;
				}
				
			    public java.util.Date kndhstdatumdocument;

				public java.util.Date getKndhstdatumdocument () {
					return this.kndhstdatumdocument;
				}
				
			    public String kndhstdatumdocumentindicator;

				public String getKndhstdatumdocumentindicator () {
					return this.kndhstdatumdocumentindicator;
				}
				
			    public String kndhstbeschrijvingdocument;

				public String getKndhstbeschrijvingdocument () {
					return this.kndhstbeschrijvingdocument;
				}
				
			    public BigDecimal kndhstaanduidinggegevensonderzoek;

				public BigDecimal getKndhstaanduidinggegevensonderzoek () {
					return this.kndhstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date kndhstdatumingangonderzoek;

				public java.util.Date getKndhstdatumingangonderzoek () {
					return this.kndhstdatumingangonderzoek;
				}
				
			    public String kndhstdatumingangonderzoekindicator;

				public String getKndhstdatumingangonderzoekindicator () {
					return this.kndhstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date kndhstdatumeindeonderzoek;

				public java.util.Date getKndhstdatumeindeonderzoek () {
					return this.kndhstdatumeindeonderzoek;
				}
				
			    public String kndhstdatumeindeonderzoekindicator;

				public String getKndhstdatumeindeonderzoekindicator () {
					return this.kndhstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date kndhstingangsdatumgeldigheid;

				public java.util.Date getKndhstingangsdatumgeldigheid () {
					return this.kndhstingangsdatumgeldigheid;
				}
				
			    public String kndhstingangsdatumgeldigheidindicator;

				public String getKndhstingangsdatumgeldigheidindicator () {
					return this.kndhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date kndhstdatumvanopneming;

				public java.util.Date getKndhstdatumvanopneming () {
					return this.kndhstdatumvanopneming;
				}
				
			    public String kndhstdatumvanopnemingindicator;

				public String getKndhstdatumvanopnemingindicator () {
					return this.kndhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.kndhstsleuteldatum == null) ? 0 : this.kndhstsleuteldatum.hashCode());
					
						result = prime * result + ((this.kndhstsleutelvolgnummer == null) ? 0 : this.kndhstsleutelvolgnummer.hashCode());
					
						result = prime * result + ((this.kndhstsleutelgeldigdatum == null) ? 0 : this.kndhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.kndhstsleutelgeldigvolgnummer == null) ? 0 : this.kndhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_kind_historieStruct other = (ldf_kind_historieStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.kndhstsleuteldatum == null) {
							if (other.kndhstsleuteldatum != null)
								return false;
						
						} else if (!this.kndhstsleuteldatum.equals(other.kndhstsleuteldatum))
						
							return false;
					
						if (this.kndhstsleutelvolgnummer == null) {
							if (other.kndhstsleutelvolgnummer != null)
								return false;
						
						} else if (!this.kndhstsleutelvolgnummer.equals(other.kndhstsleutelvolgnummer))
						
							return false;
					
						if (this.kndhstsleutelgeldigdatum == null) {
							if (other.kndhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.kndhstsleutelgeldigdatum.equals(other.kndhstsleutelgeldigdatum))
						
							return false;
					
						if (this.kndhstsleutelgeldigvolgnummer == null) {
							if (other.kndhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.kndhstsleutelgeldigvolgnummer.equals(other.kndhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_kind_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            other.kndhstsleuteldatum = this.kndhstsleuteldatum;
	            other.kndhstsleutelvolgnummer = this.kndhstsleutelvolgnummer;
	            other.kndhstsleutelgeldigdatum = this.kndhstsleutelgeldigdatum;
	            other.kndhstsleutelgeldigvolgnummer = this.kndhstsleutelgeldigvolgnummer;
	            other.kndhstanummer = this.kndhstanummer;
	            other.kndhstburgerservicenummer = this.kndhstburgerservicenummer;
	            other.kndhstvoornamen = this.kndhstvoornamen;
	            other.kndhstvoorletters = this.kndhstvoorletters;
	            other.kndhstadellijketitelcode = this.kndhstadellijketitelcode;
	            other.kndhstadellijketitelomschrijving = this.kndhstadellijketitelomschrijving;
	            other.kndhstvoorvoegselgeslachtsnaam = this.kndhstvoorvoegselgeslachtsnaam;
	            other.kndhstgeslachtsnaam = this.kndhstgeslachtsnaam;
	            other.kndhstgeboortedatum = this.kndhstgeboortedatum;
	            other.kndhstgeboortedatumindicator = this.kndhstgeboortedatumindicator;
	            other.kndhstgeboorteplaatscode = this.kndhstgeboorteplaatscode;
	            other.kndhstgeboorteplaatsomschrijving = this.kndhstgeboorteplaatsomschrijving;
	            other.kndhstgeboortelandcode = this.kndhstgeboortelandcode;
	            other.kndhstgeboortelandomschrijving = this.kndhstgeboortelandomschrijving;
	            other.kndhstregistergemeenteaktecode = this.kndhstregistergemeenteaktecode;
	            other.kndhstregistergemeenteakteomschrijving = this.kndhstregistergemeenteakteomschrijving;
	            other.kndhstaktenummer = this.kndhstaktenummer;
	            other.kndhstgemeentedocumentcode = this.kndhstgemeentedocumentcode;
	            other.kndhstgemeentedocumentomschrijving = this.kndhstgemeentedocumentomschrijving;
	            other.kndhstdatumdocument = this.kndhstdatumdocument;
	            other.kndhstdatumdocumentindicator = this.kndhstdatumdocumentindicator;
	            other.kndhstbeschrijvingdocument = this.kndhstbeschrijvingdocument;
	            other.kndhstaanduidinggegevensonderzoek = this.kndhstaanduidinggegevensonderzoek;
	            other.kndhstdatumingangonderzoek = this.kndhstdatumingangonderzoek;
	            other.kndhstdatumingangonderzoekindicator = this.kndhstdatumingangonderzoekindicator;
	            other.kndhstdatumeindeonderzoek = this.kndhstdatumeindeonderzoek;
	            other.kndhstdatumeindeonderzoekindicator = this.kndhstdatumeindeonderzoekindicator;
	            other.kndhstingangsdatumgeldigheid = this.kndhstingangsdatumgeldigheid;
	            other.kndhstingangsdatumgeldigheidindicator = this.kndhstingangsdatumgeldigheidindicator;
	            other.kndhstdatumvanopneming = this.kndhstdatumvanopneming;
	            other.kndhstdatumvanopnemingindicator = this.kndhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_kind_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.kndhstsleuteldatum = this.kndhstsleuteldatum;
	            	other.kndhstsleutelvolgnummer = this.kndhstsleutelvolgnummer;
	            	other.kndhstsleutelgeldigdatum = this.kndhstsleutelgeldigdatum;
	            	other.kndhstsleutelgeldigvolgnummer = this.kndhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.kndhstsleuteldatum = (BigDecimal) dis.readObject();
					
						this.kndhstsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.kndhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.kndhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.kndhstanummer = (BigDecimal) dis.readObject();
					
						this.kndhstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.kndhstvoornamen = readString(dis);
					
					this.kndhstvoorletters = readString(dis);
					
					this.kndhstadellijketitelcode = readString(dis);
					
					this.kndhstadellijketitelomschrijving = readString(dis);
					
					this.kndhstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.kndhstgeslachtsnaam = readString(dis);
					
					this.kndhstgeboortedatum = readDate(dis);
					
					this.kndhstgeboortedatumindicator = readString(dis);
					
					this.kndhstgeboorteplaatscode = readString(dis);
					
					this.kndhstgeboorteplaatsomschrijving = readString(dis);
					
					this.kndhstgeboortelandcode = readString(dis);
					
					this.kndhstgeboortelandomschrijving = readString(dis);
					
					this.kndhstregistergemeenteaktecode = readString(dis);
					
					this.kndhstregistergemeenteakteomschrijving = readString(dis);
					
					this.kndhstaktenummer = readString(dis);
					
					this.kndhstgemeentedocumentcode = readString(dis);
					
					this.kndhstgemeentedocumentomschrijving = readString(dis);
					
					this.kndhstdatumdocument = readDate(dis);
					
					this.kndhstdatumdocumentindicator = readString(dis);
					
					this.kndhstbeschrijvingdocument = readString(dis);
					
						this.kndhstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.kndhstdatumingangonderzoek = readDate(dis);
					
					this.kndhstdatumingangonderzoekindicator = readString(dis);
					
					this.kndhstdatumeindeonderzoek = readDate(dis);
					
					this.kndhstdatumeindeonderzoekindicator = readString(dis);
					
					this.kndhstingangsdatumgeldigheid = readDate(dis);
					
					this.kndhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.kndhstdatumvanopneming = readDate(dis);
					
					this.kndhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstburgerservicenummer);
					
					// String
				
						writeString(this.kndhstvoornamen,dos);
					
					// String
				
						writeString(this.kndhstvoorletters,dos);
					
					// String
				
						writeString(this.kndhstadellijketitelcode,dos);
					
					// String
				
						writeString(this.kndhstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.kndhstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.kndhstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.kndhstgeboortedatum,dos);
					
					// String
				
						writeString(this.kndhstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.kndhstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.kndhstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.kndhstgeboortelandcode,dos);
					
					// String
				
						writeString(this.kndhstgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.kndhstregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.kndhstregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.kndhstaktenummer,dos);
					
					// String
				
						writeString(this.kndhstgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.kndhstgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.kndhstdatumdocument,dos);
					
					// String
				
						writeString(this.kndhstdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.kndhstbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.kndhstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.kndhstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.kndhstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.kndhstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.kndhstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.kndhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.kndhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.kndhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.kndhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",kndhstsleuteldatum="+String.valueOf(kndhstsleuteldatum));
		sb.append(",kndhstsleutelvolgnummer="+String.valueOf(kndhstsleutelvolgnummer));
		sb.append(",kndhstsleutelgeldigdatum="+String.valueOf(kndhstsleutelgeldigdatum));
		sb.append(",kndhstsleutelgeldigvolgnummer="+String.valueOf(kndhstsleutelgeldigvolgnummer));
		sb.append(",kndhstanummer="+String.valueOf(kndhstanummer));
		sb.append(",kndhstburgerservicenummer="+String.valueOf(kndhstburgerservicenummer));
		sb.append(",kndhstvoornamen="+kndhstvoornamen);
		sb.append(",kndhstvoorletters="+kndhstvoorletters);
		sb.append(",kndhstadellijketitelcode="+kndhstadellijketitelcode);
		sb.append(",kndhstadellijketitelomschrijving="+kndhstadellijketitelomschrijving);
		sb.append(",kndhstvoorvoegselgeslachtsnaam="+kndhstvoorvoegselgeslachtsnaam);
		sb.append(",kndhstgeslachtsnaam="+kndhstgeslachtsnaam);
		sb.append(",kndhstgeboortedatum="+String.valueOf(kndhstgeboortedatum));
		sb.append(",kndhstgeboortedatumindicator="+kndhstgeboortedatumindicator);
		sb.append(",kndhstgeboorteplaatscode="+kndhstgeboorteplaatscode);
		sb.append(",kndhstgeboorteplaatsomschrijving="+kndhstgeboorteplaatsomschrijving);
		sb.append(",kndhstgeboortelandcode="+kndhstgeboortelandcode);
		sb.append(",kndhstgeboortelandomschrijving="+kndhstgeboortelandomschrijving);
		sb.append(",kndhstregistergemeenteaktecode="+kndhstregistergemeenteaktecode);
		sb.append(",kndhstregistergemeenteakteomschrijving="+kndhstregistergemeenteakteomschrijving);
		sb.append(",kndhstaktenummer="+kndhstaktenummer);
		sb.append(",kndhstgemeentedocumentcode="+kndhstgemeentedocumentcode);
		sb.append(",kndhstgemeentedocumentomschrijving="+kndhstgemeentedocumentomschrijving);
		sb.append(",kndhstdatumdocument="+String.valueOf(kndhstdatumdocument));
		sb.append(",kndhstdatumdocumentindicator="+kndhstdatumdocumentindicator);
		sb.append(",kndhstbeschrijvingdocument="+kndhstbeschrijvingdocument);
		sb.append(",kndhstaanduidinggegevensonderzoek="+String.valueOf(kndhstaanduidinggegevensonderzoek));
		sb.append(",kndhstdatumingangonderzoek="+String.valueOf(kndhstdatumingangonderzoek));
		sb.append(",kndhstdatumingangonderzoekindicator="+kndhstdatumingangonderzoekindicator);
		sb.append(",kndhstdatumeindeonderzoek="+String.valueOf(kndhstdatumeindeonderzoek));
		sb.append(",kndhstdatumeindeonderzoekindicator="+kndhstdatumeindeonderzoekindicator);
		sb.append(",kndhstingangsdatumgeldigheid="+String.valueOf(kndhstingangsdatumgeldigheid));
		sb.append(",kndhstingangsdatumgeldigheidindicator="+kndhstingangsdatumgeldigheidindicator);
		sb.append(",kndhstdatumvanopneming="+String.valueOf(kndhstdatumvanopneming));
		sb.append(",kndhstdatumvanopnemingindicator="+kndhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_kind_historieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kndhstsleuteldatum, other.kndhstsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kndhstsleutelvolgnummer, other.kndhstsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kndhstsleutelgeldigdatum, other.kndhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.kndhstsleutelgeldigvolgnummer, other.kndhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_kind_historieStruct implements routines.system.IPersistableRow<cipers_kind_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal KNDHSTSLEUTELDATUM;

				public BigDecimal getKNDHSTSLEUTELDATUM () {
					return this.KNDHSTSLEUTELDATUM;
				}
				
			    public BigDecimal KNDHSTSLEUTELVOLGNUMMER;

				public BigDecimal getKNDHSTSLEUTELVOLGNUMMER () {
					return this.KNDHSTSLEUTELVOLGNUMMER;
				}
				
			    public BigDecimal KNDHSTSLEUTELGELDIGDATUM;

				public BigDecimal getKNDHSTSLEUTELGELDIGDATUM () {
					return this.KNDHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal KNDHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getKNDHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.KNDHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal KNDHSTANUMMER;

				public BigDecimal getKNDHSTANUMMER () {
					return this.KNDHSTANUMMER;
				}
				
			    public BigDecimal KNDHSTBURGERSERVICENUMMER;

				public BigDecimal getKNDHSTBURGERSERVICENUMMER () {
					return this.KNDHSTBURGERSERVICENUMMER;
				}
				
			    public String KNDHSTVOORNAMEN;

				public String getKNDHSTVOORNAMEN () {
					return this.KNDHSTVOORNAMEN;
				}
				
			    public String KNDHSTVOORLETTERS;

				public String getKNDHSTVOORLETTERS () {
					return this.KNDHSTVOORLETTERS;
				}
				
			    public String KNDHSTADELLIJKETITELCODE;

				public String getKNDHSTADELLIJKETITELCODE () {
					return this.KNDHSTADELLIJKETITELCODE;
				}
				
			    public String KNDHSTVOORVOEGSELGESLACHTSNAAM;

				public String getKNDHSTVOORVOEGSELGESLACHTSNAAM () {
					return this.KNDHSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String KNDHSTGESLACHTSNAAM;

				public String getKNDHSTGESLACHTSNAAM () {
					return this.KNDHSTGESLACHTSNAAM;
				}
				
			    public java.util.Date KNDHSTGEBOORTEDATUM;

				public java.util.Date getKNDHSTGEBOORTEDATUM () {
					return this.KNDHSTGEBOORTEDATUM;
				}
				
			    public String KNDHSTGEBOORTEDATUMINDICATOR;

				public String getKNDHSTGEBOORTEDATUMINDICATOR () {
					return this.KNDHSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String KNDHSTGEBOORTEPLAATSCODE;

				public String getKNDHSTGEBOORTEPLAATSCODE () {
					return this.KNDHSTGEBOORTEPLAATSCODE;
				}
				
			    public String KNDHSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getKNDHSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.KNDHSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String KNDHSTGEBOORTELANDCODE;

				public String getKNDHSTGEBOORTELANDCODE () {
					return this.KNDHSTGEBOORTELANDCODE;
				}
				
			    public String KNDHSTREGISTERGEMEENTEAKTECODE;

				public String getKNDHSTREGISTERGEMEENTEAKTECODE () {
					return this.KNDHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String KNDHSTAKTENUMMER;

				public String getKNDHSTAKTENUMMER () {
					return this.KNDHSTAKTENUMMER;
				}
				
			    public String KNDHSTGEMEENTEDOCUMENTCODE;

				public String getKNDHSTGEMEENTEDOCUMENTCODE () {
					return this.KNDHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date KNDHSTDATUMDOCUMENT;

				public java.util.Date getKNDHSTDATUMDOCUMENT () {
					return this.KNDHSTDATUMDOCUMENT;
				}
				
			    public String KNDHSTDATUMDOCUMENTINDICATOR;

				public String getKNDHSTDATUMDOCUMENTINDICATOR () {
					return this.KNDHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String KNDHSTBESCHRIJVINGDOCUMENT;

				public String getKNDHSTBESCHRIJVINGDOCUMENT () {
					return this.KNDHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal KNDHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getKNDHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.KNDHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date KNDHSTDATUMINGANGONDERZOEK;

				public java.util.Date getKNDHSTDATUMINGANGONDERZOEK () {
					return this.KNDHSTDATUMINGANGONDERZOEK;
				}
				
			    public String KNDHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getKNDHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.KNDHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date KNDHSTDATUMEINDEONDERZOEK;

				public java.util.Date getKNDHSTDATUMEINDEONDERZOEK () {
					return this.KNDHSTDATUMEINDEONDERZOEK;
				}
				
			    public String KNDHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getKNDHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.KNDHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date KNDHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getKNDHSTINGANGSDATUMGELDIGHEID () {
					return this.KNDHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getKNDHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date KNDHSTDATUMVANOPNEMING;

				public java.util.Date getKNDHSTDATUMVANOPNEMING () {
					return this.KNDHSTDATUMVANOPNEMING;
				}
				
			    public String KNDHSTDATUMVANOPNEMINGINDICATOR;

				public String getKNDHSTDATUMVANOPNEMINGINDICATOR () {
					return this.KNDHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELDATUM = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTANUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.KNDHSTVOORNAMEN = readString(dis);
					
					this.KNDHSTVOORLETTERS = readString(dis);
					
					this.KNDHSTADELLIJKETITELCODE = readString(dis);
					
					this.KNDHSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.KNDHSTGESLACHTSNAAM = readString(dis);
					
					this.KNDHSTGEBOORTEDATUM = readDate(dis);
					
					this.KNDHSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.KNDHSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.KNDHSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.KNDHSTGEBOORTELANDCODE = readString(dis);
					
					this.KNDHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.KNDHSTAKTENUMMER = readString(dis);
					
					this.KNDHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.KNDHSTDATUMDOCUMENT = readDate(dis);
					
					this.KNDHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.KNDHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.KNDHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.KNDHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.KNDHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.KNDHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.KNDHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.KNDHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.KNDHSTDATUMVANOPNEMING = readDate(dis);
					
					this.KNDHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.KNDHSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.KNDHSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.KNDHSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.KNDHSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.KNDHSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.KNDHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.KNDHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.KNDHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.KNDHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",KNDHSTSLEUTELDATUM="+String.valueOf(KNDHSTSLEUTELDATUM));
		sb.append(",KNDHSTSLEUTELVOLGNUMMER="+String.valueOf(KNDHSTSLEUTELVOLGNUMMER));
		sb.append(",KNDHSTSLEUTELGELDIGDATUM="+String.valueOf(KNDHSTSLEUTELGELDIGDATUM));
		sb.append(",KNDHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(KNDHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",KNDHSTANUMMER="+String.valueOf(KNDHSTANUMMER));
		sb.append(",KNDHSTBURGERSERVICENUMMER="+String.valueOf(KNDHSTBURGERSERVICENUMMER));
		sb.append(",KNDHSTVOORNAMEN="+KNDHSTVOORNAMEN);
		sb.append(",KNDHSTVOORLETTERS="+KNDHSTVOORLETTERS);
		sb.append(",KNDHSTADELLIJKETITELCODE="+KNDHSTADELLIJKETITELCODE);
		sb.append(",KNDHSTVOORVOEGSELGESLACHTSNAAM="+KNDHSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",KNDHSTGESLACHTSNAAM="+KNDHSTGESLACHTSNAAM);
		sb.append(",KNDHSTGEBOORTEDATUM="+String.valueOf(KNDHSTGEBOORTEDATUM));
		sb.append(",KNDHSTGEBOORTEDATUMINDICATOR="+KNDHSTGEBOORTEDATUMINDICATOR);
		sb.append(",KNDHSTGEBOORTEPLAATSCODE="+KNDHSTGEBOORTEPLAATSCODE);
		sb.append(",KNDHSTGEBOORTEPLAATSOMSCHRIJVING="+KNDHSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",KNDHSTGEBOORTELANDCODE="+KNDHSTGEBOORTELANDCODE);
		sb.append(",KNDHSTREGISTERGEMEENTEAKTECODE="+KNDHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",KNDHSTAKTENUMMER="+KNDHSTAKTENUMMER);
		sb.append(",KNDHSTGEMEENTEDOCUMENTCODE="+KNDHSTGEMEENTEDOCUMENTCODE);
		sb.append(",KNDHSTDATUMDOCUMENT="+String.valueOf(KNDHSTDATUMDOCUMENT));
		sb.append(",KNDHSTDATUMDOCUMENTINDICATOR="+KNDHSTDATUMDOCUMENTINDICATOR);
		sb.append(",KNDHSTBESCHRIJVINGDOCUMENT="+KNDHSTBESCHRIJVINGDOCUMENT);
		sb.append(",KNDHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(KNDHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",KNDHSTDATUMINGANGONDERZOEK="+String.valueOf(KNDHSTDATUMINGANGONDERZOEK));
		sb.append(",KNDHSTDATUMINGANGONDERZOEKINDICATOR="+KNDHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",KNDHSTDATUMEINDEONDERZOEK="+String.valueOf(KNDHSTDATUMEINDEONDERZOEK));
		sb.append(",KNDHSTDATUMEINDEONDERZOEKINDICATOR="+KNDHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",KNDHSTINGANGSDATUMGELDIGHEID="+String.valueOf(KNDHSTINGANGSDATUMGELDIGHEID));
		sb.append(",KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR="+KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",KNDHSTDATUMVANOPNEMING="+String.valueOf(KNDHSTDATUMVANOPNEMING));
		sb.append(",KNDHSTDATUMVANOPNEMINGINDICATOR="+KNDHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_kind_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal KNDHSTSLEUTELDATUM;

				public BigDecimal getKNDHSTSLEUTELDATUM () {
					return this.KNDHSTSLEUTELDATUM;
				}
				
			    public BigDecimal KNDHSTSLEUTELVOLGNUMMER;

				public BigDecimal getKNDHSTSLEUTELVOLGNUMMER () {
					return this.KNDHSTSLEUTELVOLGNUMMER;
				}
				
			    public BigDecimal KNDHSTSLEUTELGELDIGDATUM;

				public BigDecimal getKNDHSTSLEUTELGELDIGDATUM () {
					return this.KNDHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal KNDHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getKNDHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.KNDHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal KNDHSTANUMMER;

				public BigDecimal getKNDHSTANUMMER () {
					return this.KNDHSTANUMMER;
				}
				
			    public BigDecimal KNDHSTBURGERSERVICENUMMER;

				public BigDecimal getKNDHSTBURGERSERVICENUMMER () {
					return this.KNDHSTBURGERSERVICENUMMER;
				}
				
			    public String KNDHSTVOORNAMEN;

				public String getKNDHSTVOORNAMEN () {
					return this.KNDHSTVOORNAMEN;
				}
				
			    public String KNDHSTVOORLETTERS;

				public String getKNDHSTVOORLETTERS () {
					return this.KNDHSTVOORLETTERS;
				}
				
			    public String KNDHSTADELLIJKETITELCODE;

				public String getKNDHSTADELLIJKETITELCODE () {
					return this.KNDHSTADELLIJKETITELCODE;
				}
				
			    public String KNDHSTVOORVOEGSELGESLACHTSNAAM;

				public String getKNDHSTVOORVOEGSELGESLACHTSNAAM () {
					return this.KNDHSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String KNDHSTGESLACHTSNAAM;

				public String getKNDHSTGESLACHTSNAAM () {
					return this.KNDHSTGESLACHTSNAAM;
				}
				
			    public java.util.Date KNDHSTGEBOORTEDATUM;

				public java.util.Date getKNDHSTGEBOORTEDATUM () {
					return this.KNDHSTGEBOORTEDATUM;
				}
				
			    public String KNDHSTGEBOORTEDATUMINDICATOR;

				public String getKNDHSTGEBOORTEDATUMINDICATOR () {
					return this.KNDHSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String KNDHSTGEBOORTEPLAATSCODE;

				public String getKNDHSTGEBOORTEPLAATSCODE () {
					return this.KNDHSTGEBOORTEPLAATSCODE;
				}
				
			    public String KNDHSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getKNDHSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.KNDHSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String KNDHSTGEBOORTELANDCODE;

				public String getKNDHSTGEBOORTELANDCODE () {
					return this.KNDHSTGEBOORTELANDCODE;
				}
				
			    public String KNDHSTREGISTERGEMEENTEAKTECODE;

				public String getKNDHSTREGISTERGEMEENTEAKTECODE () {
					return this.KNDHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String KNDHSTAKTENUMMER;

				public String getKNDHSTAKTENUMMER () {
					return this.KNDHSTAKTENUMMER;
				}
				
			    public String KNDHSTGEMEENTEDOCUMENTCODE;

				public String getKNDHSTGEMEENTEDOCUMENTCODE () {
					return this.KNDHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date KNDHSTDATUMDOCUMENT;

				public java.util.Date getKNDHSTDATUMDOCUMENT () {
					return this.KNDHSTDATUMDOCUMENT;
				}
				
			    public String KNDHSTDATUMDOCUMENTINDICATOR;

				public String getKNDHSTDATUMDOCUMENTINDICATOR () {
					return this.KNDHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String KNDHSTBESCHRIJVINGDOCUMENT;

				public String getKNDHSTBESCHRIJVINGDOCUMENT () {
					return this.KNDHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal KNDHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getKNDHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.KNDHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date KNDHSTDATUMINGANGONDERZOEK;

				public java.util.Date getKNDHSTDATUMINGANGONDERZOEK () {
					return this.KNDHSTDATUMINGANGONDERZOEK;
				}
				
			    public String KNDHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getKNDHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.KNDHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date KNDHSTDATUMEINDEONDERZOEK;

				public java.util.Date getKNDHSTDATUMEINDEONDERZOEK () {
					return this.KNDHSTDATUMEINDEONDERZOEK;
				}
				
			    public String KNDHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getKNDHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.KNDHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date KNDHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getKNDHSTINGANGSDATUMGELDIGHEID () {
					return this.KNDHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getKNDHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date KNDHSTDATUMVANOPNEMING;

				public java.util.Date getKNDHSTDATUMVANOPNEMING () {
					return this.KNDHSTDATUMVANOPNEMING;
				}
				
			    public String KNDHSTDATUMVANOPNEMINGINDICATOR;

				public String getKNDHSTDATUMVANOPNEMINGINDICATOR () {
					return this.KNDHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELDATUM = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.KNDHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTANUMMER = (BigDecimal) dis.readObject();
					
						this.KNDHSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.KNDHSTVOORNAMEN = readString(dis);
					
					this.KNDHSTVOORLETTERS = readString(dis);
					
					this.KNDHSTADELLIJKETITELCODE = readString(dis);
					
					this.KNDHSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.KNDHSTGESLACHTSNAAM = readString(dis);
					
					this.KNDHSTGEBOORTEDATUM = readDate(dis);
					
					this.KNDHSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.KNDHSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.KNDHSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.KNDHSTGEBOORTELANDCODE = readString(dis);
					
					this.KNDHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.KNDHSTAKTENUMMER = readString(dis);
					
					this.KNDHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.KNDHSTDATUMDOCUMENT = readDate(dis);
					
					this.KNDHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.KNDHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.KNDHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.KNDHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.KNDHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.KNDHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.KNDHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.KNDHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.KNDHSTDATUMVANOPNEMING = readDate(dis);
					
					this.KNDHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.KNDHSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.KNDHSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.KNDHSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.KNDHSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.KNDHSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.KNDHSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.KNDHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.KNDHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.KNDHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.KNDHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KNDHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KNDHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.KNDHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",KNDHSTSLEUTELDATUM="+String.valueOf(KNDHSTSLEUTELDATUM));
		sb.append(",KNDHSTSLEUTELVOLGNUMMER="+String.valueOf(KNDHSTSLEUTELVOLGNUMMER));
		sb.append(",KNDHSTSLEUTELGELDIGDATUM="+String.valueOf(KNDHSTSLEUTELGELDIGDATUM));
		sb.append(",KNDHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(KNDHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",KNDHSTANUMMER="+String.valueOf(KNDHSTANUMMER));
		sb.append(",KNDHSTBURGERSERVICENUMMER="+String.valueOf(KNDHSTBURGERSERVICENUMMER));
		sb.append(",KNDHSTVOORNAMEN="+KNDHSTVOORNAMEN);
		sb.append(",KNDHSTVOORLETTERS="+KNDHSTVOORLETTERS);
		sb.append(",KNDHSTADELLIJKETITELCODE="+KNDHSTADELLIJKETITELCODE);
		sb.append(",KNDHSTVOORVOEGSELGESLACHTSNAAM="+KNDHSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",KNDHSTGESLACHTSNAAM="+KNDHSTGESLACHTSNAAM);
		sb.append(",KNDHSTGEBOORTEDATUM="+String.valueOf(KNDHSTGEBOORTEDATUM));
		sb.append(",KNDHSTGEBOORTEDATUMINDICATOR="+KNDHSTGEBOORTEDATUMINDICATOR);
		sb.append(",KNDHSTGEBOORTEPLAATSCODE="+KNDHSTGEBOORTEPLAATSCODE);
		sb.append(",KNDHSTGEBOORTEPLAATSOMSCHRIJVING="+KNDHSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",KNDHSTGEBOORTELANDCODE="+KNDHSTGEBOORTELANDCODE);
		sb.append(",KNDHSTREGISTERGEMEENTEAKTECODE="+KNDHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",KNDHSTAKTENUMMER="+KNDHSTAKTENUMMER);
		sb.append(",KNDHSTGEMEENTEDOCUMENTCODE="+KNDHSTGEMEENTEDOCUMENTCODE);
		sb.append(",KNDHSTDATUMDOCUMENT="+String.valueOf(KNDHSTDATUMDOCUMENT));
		sb.append(",KNDHSTDATUMDOCUMENTINDICATOR="+KNDHSTDATUMDOCUMENTINDICATOR);
		sb.append(",KNDHSTBESCHRIJVINGDOCUMENT="+KNDHSTBESCHRIJVINGDOCUMENT);
		sb.append(",KNDHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(KNDHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",KNDHSTDATUMINGANGONDERZOEK="+String.valueOf(KNDHSTDATUMINGANGONDERZOEK));
		sb.append(",KNDHSTDATUMINGANGONDERZOEKINDICATOR="+KNDHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",KNDHSTDATUMEINDEONDERZOEK="+String.valueOf(KNDHSTDATUMEINDEONDERZOEK));
		sb.append(",KNDHSTDATUMEINDEONDERZOEKINDICATOR="+KNDHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",KNDHSTINGANGSDATUMGELDIGHEID="+String.valueOf(KNDHSTINGANGSDATUMGELDIGHEID));
		sb.append(",KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR="+KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",KNDHSTDATUMVANOPNEMING="+String.valueOf(KNDHSTDATUMVANOPNEMING));
		sb.append(",KNDHSTDATUMVANOPNEMINGINDICATOR="+KNDHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_4Process(globalMap);

		cipers_kind_historieStruct cipers_kind_historie = new cipers_kind_historieStruct();
ldf_kind_historieStruct ldf_kind_historie = new ldf_kind_historieStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_kind_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_kind_historie";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_kind_historie";
}

        int updateKeyCount_tPostgresqlOutput_1 = 5;
        if(updateKeyCount_tPostgresqlOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;



int count_tPostgresqlOutput_1=0;
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tPostgresqlOutput_1 + "\" WHERE \"prsanummer\" = ? AND \"kndhstsleuteldatum\" = ? AND \"kndhstsleutelvolgnummer\" = ? AND \"kndhstsleutelgeldigdatum\" = ? AND \"kndhstsleutelgeldigvolgnummer\" = ?");
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"kndhstsleuteldatum\",\"kndhstsleutelvolgnummer\",\"kndhstsleutelgeldigdatum\",\"kndhstsleutelgeldigvolgnummer\",\"kndhstanummer\",\"kndhstburgerservicenummer\",\"kndhstvoornamen\",\"kndhstvoorletters\",\"kndhstadellijketitelcode\",\"kndhstadellijketitelomschrijving\",\"kndhstvoorvoegselgeslachtsnaam\",\"kndhstgeslachtsnaam\",\"kndhstgeboortedatum\",\"kndhstgeboortedatumindicator\",\"kndhstgeboorteplaatscode\",\"kndhstgeboorteplaatsomschrijving\",\"kndhstgeboortelandcode\",\"kndhstgeboortelandomschrijving\",\"kndhstregistergemeenteaktecode\",\"kndhstregistergemeenteakteomschrijving\",\"kndhstaktenummer\",\"kndhstgemeentedocumentcode\",\"kndhstgemeentedocumentomschrijving\",\"kndhstdatumdocument\",\"kndhstdatumdocumentindicator\",\"kndhstbeschrijvingdocument\",\"kndhstaanduidinggegevensonderzoek\",\"kndhstdatumingangonderzoek\",\"kndhstdatumingangonderzoekindicator\",\"kndhstdatumeindeonderzoek\",\"kndhstdatumeindeonderzoekindicator\",\"kndhstingangsdatumgeldigheid\",\"kndhstingangsdatumgeldigheidindicator\",\"kndhstdatumvanopneming\",\"kndhstdatumvanopnemingindicator\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    String update_tPostgresqlOutput_1 = "UPDATE \"" + tableName_tPostgresqlOutput_1 + "\" SET \"kndhstanummer\" = ?,\"kndhstburgerservicenummer\" = ?,\"kndhstvoornamen\" = ?,\"kndhstvoorletters\" = ?,\"kndhstadellijketitelcode\" = ?,\"kndhstadellijketitelomschrijving\" = ?,\"kndhstvoorvoegselgeslachtsnaam\" = ?,\"kndhstgeslachtsnaam\" = ?,\"kndhstgeboortedatum\" = ?,\"kndhstgeboortedatumindicator\" = ?,\"kndhstgeboorteplaatscode\" = ?,\"kndhstgeboorteplaatsomschrijving\" = ?,\"kndhstgeboortelandcode\" = ?,\"kndhstgeboortelandomschrijving\" = ?,\"kndhstregistergemeenteaktecode\" = ?,\"kndhstregistergemeenteakteomschrijving\" = ?,\"kndhstaktenummer\" = ?,\"kndhstgemeentedocumentcode\" = ?,\"kndhstgemeentedocumentomschrijving\" = ?,\"kndhstdatumdocument\" = ?,\"kndhstdatumdocumentindicator\" = ?,\"kndhstbeschrijvingdocument\" = ?,\"kndhstaanduidinggegevensonderzoek\" = ?,\"kndhstdatumingangonderzoek\" = ?,\"kndhstdatumingangonderzoekindicator\" = ?,\"kndhstdatumeindeonderzoek\" = ?,\"kndhstdatumeindeonderzoekindicator\" = ?,\"kndhstingangsdatumgeldigheid\" = ?,\"kndhstingangsdatumgeldigheidindicator\" = ?,\"kndhstdatumvanopneming\" = ?,\"kndhstdatumvanopnemingindicator\" = ? WHERE \"prsanummer\" = ? AND \"kndhstsleuteldatum\" = ? AND \"kndhstsleutelvolgnummer\" = ? AND \"kndhstsleutelgeldigdatum\" = ? AND \"kndhstsleutelgeldigvolgnummer\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(update_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_kind_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_kind_naamStruct> tHash_Lookup_ldf_titels_predikaten_kind_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_kind_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_kind_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_kind_naam" ))
					;					
					
	

ldf_titels_predikaten_kind_naamStruct ldf_titels_predikaten_kind_naamHashKey = new ldf_titels_predikaten_kind_naamStruct();
ldf_titels_predikaten_kind_naamStruct ldf_titels_predikaten_kind_naamDefault = new ldf_titels_predikaten_kind_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_kind_geboorteStruct> tHash_Lookup_ldf_landen_kind_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_kind_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_kind_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_kind_geboorte" ))
					;					
					
	

ldf_landen_kind_geboorteStruct ldf_landen_kind_geboorteHashKey = new ldf_landen_kind_geboorteStruct();
ldf_landen_kind_geboorteStruct ldf_landen_kind_geboorteDefault = new ldf_landen_kind_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_akteStruct> tHash_Lookup_ldf_gemeenten_kind_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_kind_akte" ))
					;					
					
	

ldf_gemeenten_kind_akteStruct ldf_gemeenten_kind_akteHashKey = new ldf_gemeenten_kind_akteStruct();
ldf_gemeenten_kind_akteStruct ldf_gemeenten_kind_akteDefault = new ldf_gemeenten_kind_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_documentStruct> tHash_Lookup_ldf_gemeenten_kind_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_kind_document" ))
					;					
					
	

ldf_gemeenten_kind_documentStruct ldf_gemeenten_kind_documentHashKey = new ldf_gemeenten_kind_documentStruct();
ldf_gemeenten_kind_documentStruct ldf_gemeenten_kind_documentDefault = new ldf_gemeenten_kind_documentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_kind_historieStruct ldf_kind_historie_tmp = new ldf_kind_historieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\n prsAnummer,\n kndhstSleutelDatum,\n kndhstSleutelVolgnummer,\n kndhstSleutelGeldigDatum,\n kndhstSleutelGeldigVolgnummer,\n kndhstAnummer,\n kndhstBurgerservicenummer,\n rtrim(kndhstVoornamen) as kndhstVoornamen,\n rtrim(kndhstVoorletters) as kndhstVoorletters,\n rtrim(kndhstAdellijketitelCode) as kndhstAdellijketitelCode,\n rtrim(kndhstVoorvoegselGeslachtsnaam) as kndhstVoorvoegselGeslachtsnaam,\n rtrim(kndhstGeslachtsnaam) as kndhstGeslachtsnaam,\n kndhstGeboortedatum,\n kndhstGeboortedatumIndicator,\n rtrim(kndhstGeboorteplaatsCode) as kndhstGeboorteplaatsCode,\n rtrim(kndhstGeboorteplaatsOmschrijving) as kndhstGeboorteplaatsOmschrijving,\n rtrim(kndhstGeboortelandCode) as kndhstGeboortelandCode,\n rtrim(kndhstRegistergemeenteAkteCode) as kndhstRegistergemeenteAkteCode,\n rtrim(kndhstAktenummer) as kndhstAktenummer,\n rtrim(kndhstGemeenteDocumentCode) as kndhstGemeenteDocumentCode,\n kndhstDatumDocument,\n kndhstDatumDocumentIndicator,\n rtrim(kndhstBeschrijvingDocument) as kndhstBeschrijvingDocument,\n kndhstAanduidingGegevensOnderzoek,\n kndhstDatumIngangOnderzoek,\n kndhstDatumIngangOnderzoekIndicator,\n kndhstDatumEindeOnderzoek,\n kndhstDatumEindeOnderzoekIndicator,\n kndhstIngangsdatumGeldigheid,\n kndhstIngangsdatumGeldigheidIndicator,\n kndhstDatumVanOpneming,\n kndhstDatumVanOpnemingIndicator\n  from bzsc59q00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_kind_historie.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_kind_historie.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_kind_historie.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_kind_historie.KNDHSTSLEUTELDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_kind_historie.KNDHSTSLEUTELDATUM = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_kind_historie.KNDHSTSLEUTELDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_kind_historie.KNDHSTSLEUTELVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(3) != null) {
                cipers_kind_historie.KNDHSTSLEUTELVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(3);
            } else {
                    cipers_kind_historie.KNDHSTSLEUTELVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_kind_historie.KNDHSTSLEUTELGELDIGDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(4) != null) {
                cipers_kind_historie.KNDHSTSLEUTELGELDIGDATUM = rs_tAS400Input_1.getBigDecimal(4);
            } else {
                    cipers_kind_historie.KNDHSTSLEUTELGELDIGDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_kind_historie.KNDHSTSLEUTELGELDIGVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(5) != null) {
                cipers_kind_historie.KNDHSTSLEUTELGELDIGVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(5);
            } else {
                    cipers_kind_historie.KNDHSTSLEUTELGELDIGVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_kind_historie.KNDHSTANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(6) != null) {
                cipers_kind_historie.KNDHSTANUMMER = rs_tAS400Input_1.getBigDecimal(6);
            } else {
                    cipers_kind_historie.KNDHSTANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_kind_historie.KNDHSTBURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(7) != null) {
                cipers_kind_historie.KNDHSTBURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(7);
            } else {
                    cipers_kind_historie.KNDHSTBURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_kind_historie.KNDHSTVOORNAMEN = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTVOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_kind_historie.KNDHSTVOORLETTERS = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTVOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 9, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_kind_historie.KNDHSTADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 10, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_kind_historie.KNDHSTVOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTVOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 11, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_kind_historie.KNDHSTGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 12, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_kind_historie.KNDHSTGEBOORTEDATUM = null;
							} else {
										
			cipers_kind_historie.KNDHSTGEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 13);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_kind_historie.KNDHSTGEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTGEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_kind_historie.KNDHSTGEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTGEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 15, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_kind_historie.KNDHSTGEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTGEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 16, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_kind_historie.KNDHSTGEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTGEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 17, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_kind_historie.KNDHSTREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 18, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_kind_historie.KNDHSTAKTENUMMER = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 19, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_kind_historie.KNDHSTGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 20, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_kind_historie.KNDHSTDATUMDOCUMENT = null;
							} else {
										
			cipers_kind_historie.KNDHSTDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 21);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_kind_historie.KNDHSTDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 22, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_kind_historie.KNDHSTBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 23, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 24) {
								cipers_kind_historie.KNDHSTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(24) != null) {
                cipers_kind_historie.KNDHSTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(24);
            } else {
                    cipers_kind_historie.KNDHSTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 25) {
								cipers_kind_historie.KNDHSTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_kind_historie.KNDHSTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 25);
		                    }
							if(colQtyInRs_tAS400Input_1 < 26) {
								cipers_kind_historie.KNDHSTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 26, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 27) {
								cipers_kind_historie.KNDHSTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_kind_historie.KNDHSTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 27);
		                    }
							if(colQtyInRs_tAS400Input_1 < 28) {
								cipers_kind_historie.KNDHSTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 28, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 29) {
								cipers_kind_historie.KNDHSTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_kind_historie.KNDHSTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 29);
		                    }
							if(colQtyInRs_tAS400Input_1 < 30) {
								cipers_kind_historie.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 30, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 31) {
								cipers_kind_historie.KNDHSTDATUMVANOPNEMING = null;
							} else {
										
			cipers_kind_historie.KNDHSTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 31);
		                    }
							if(colQtyInRs_tAS400Input_1 < 32) {
								cipers_kind_historie.KNDHSTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_kind_historie.KNDHSTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 32, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_kind_historie
			//cipers_kind_historie


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_kind_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_kind_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_kind_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_kind_naamStruct ldf_titels_predikaten_kind_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_kind_naamHashKey.adellijketitelcode = cipers_kind_historie.KNDHSTADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_kind_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_kind_naam.lookup( ldf_titels_predikaten_kind_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_kind_naam != null && tHash_Lookup_ldf_titels_predikaten_kind_naam.getCount(ldf_titels_predikaten_kind_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_kind_naam' and it contains more one result from keys :  ldf_titels_predikaten_kind_naam.adellijketitelcode = '" + ldf_titels_predikaten_kind_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_kind_naamStruct ldf_titels_predikaten_kind_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_kind_naamStruct fromLookup_ldf_titels_predikaten_kind_naam = null;
							ldf_titels_predikaten_kind_naam = ldf_titels_predikaten_kind_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_kind_naam !=null && tHash_Lookup_ldf_titels_predikaten_kind_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_kind_naam = tHash_Lookup_ldf_titels_predikaten_kind_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_kind_naam != null) {
								ldf_titels_predikaten_kind_naam = fromLookup_ldf_titels_predikaten_kind_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_kind_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_kind_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_kind_geboorteStruct ldf_landen_kind_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_kind_geboorteHashKey.landcode = cipers_kind_historie.KNDHSTGEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_kind_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_kind_geboorte.lookup( ldf_landen_kind_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_kind_geboorte != null && tHash_Lookup_ldf_landen_kind_geboorte.getCount(ldf_landen_kind_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_kind_geboorte' and it contains more one result from keys :  ldf_landen_kind_geboorte.landcode = '" + ldf_landen_kind_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_kind_geboorteStruct ldf_landen_kind_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_kind_geboorteStruct fromLookup_ldf_landen_kind_geboorte = null;
							ldf_landen_kind_geboorte = ldf_landen_kind_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_kind_geboorte !=null && tHash_Lookup_ldf_landen_kind_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_kind_geboorte = tHash_Lookup_ldf_landen_kind_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_kind_geboorte != null) {
								ldf_landen_kind_geboorte = fromLookup_ldf_landen_kind_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_kind_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_kind_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_kind_akteStruct ldf_gemeenten_kind_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_kind_akteHashKey.gemeentecode = cipers_kind_historie.KNDHSTREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_kind_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_kind_akte.lookup( ldf_gemeenten_kind_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_kind_akte != null && tHash_Lookup_ldf_gemeenten_kind_akte.getCount(ldf_gemeenten_kind_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_kind_akte' and it contains more one result from keys :  ldf_gemeenten_kind_akte.gemeentecode = '" + ldf_gemeenten_kind_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_kind_akteStruct ldf_gemeenten_kind_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_kind_akteStruct fromLookup_ldf_gemeenten_kind_akte = null;
							ldf_gemeenten_kind_akte = ldf_gemeenten_kind_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_kind_akte !=null && tHash_Lookup_ldf_gemeenten_kind_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_kind_akte = tHash_Lookup_ldf_gemeenten_kind_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_kind_akte != null) {
								ldf_gemeenten_kind_akte = fromLookup_ldf_gemeenten_kind_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_kind_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_kind_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_kind_documentStruct ldf_gemeenten_kind_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_kind_documentHashKey.gemeentecode = cipers_kind_historie.KNDHSTGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_kind_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_kind_document.lookup( ldf_gemeenten_kind_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_kind_document != null && tHash_Lookup_ldf_gemeenten_kind_document.getCount(ldf_gemeenten_kind_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_kind_document' and it contains more one result from keys :  ldf_gemeenten_kind_document.gemeentecode = '" + ldf_gemeenten_kind_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_kind_documentStruct ldf_gemeenten_kind_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_kind_documentStruct fromLookup_ldf_gemeenten_kind_document = null;
							ldf_gemeenten_kind_document = ldf_gemeenten_kind_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_kind_document !=null && tHash_Lookup_ldf_gemeenten_kind_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_kind_document = tHash_Lookup_ldf_gemeenten_kind_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_kind_document != null) {
								ldf_gemeenten_kind_document = fromLookup_ldf_gemeenten_kind_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_kind_historie = null;


// # Output table : 'ldf_kind_historie'
ldf_kind_historie_tmp.prsanummer = cipers_kind_historie.PRSANUMMER;
ldf_kind_historie_tmp.kndhstsleuteldatum = cipers_kind_historie.KNDHSTSLEUTELDATUM;
ldf_kind_historie_tmp.kndhstsleutelvolgnummer = cipers_kind_historie.KNDHSTSLEUTELVOLGNUMMER;
ldf_kind_historie_tmp.kndhstsleutelgeldigdatum = cipers_kind_historie.KNDHSTSLEUTELGELDIGDATUM;
ldf_kind_historie_tmp.kndhstsleutelgeldigvolgnummer = cipers_kind_historie.KNDHSTSLEUTELGELDIGVOLGNUMMER;
ldf_kind_historie_tmp.kndhstanummer = cipers_kind_historie.KNDHSTANUMMER;
ldf_kind_historie_tmp.kndhstburgerservicenummer = cipers_kind_historie.KNDHSTBURGERSERVICENUMMER;
ldf_kind_historie_tmp.kndhstvoornamen = cipers_kind_historie.KNDHSTVOORNAMEN;
ldf_kind_historie_tmp.kndhstvoorletters = cipers_kind_historie.KNDHSTVOORLETTERS;
ldf_kind_historie_tmp.kndhstadellijketitelcode = cipers_kind_historie.KNDHSTADELLIJKETITELCODE;
ldf_kind_historie_tmp.kndhstadellijketitelomschrijving = ldf_titels_predikaten_kind_naam.adellijketitelomschrijving ;
ldf_kind_historie_tmp.kndhstvoorvoegselgeslachtsnaam = cipers_kind_historie.KNDHSTVOORVOEGSELGESLACHTSNAAM;
ldf_kind_historie_tmp.kndhstgeslachtsnaam = cipers_kind_historie.KNDHSTGESLACHTSNAAM;
ldf_kind_historie_tmp.kndhstgeboortedatum = cipers_kind_historie.KNDHSTGEBOORTEDATUM;
ldf_kind_historie_tmp.kndhstgeboortedatumindicator = cipers_kind_historie.KNDHSTGEBOORTEDATUMINDICATOR;
ldf_kind_historie_tmp.kndhstgeboorteplaatscode = cipers_kind_historie.KNDHSTGEBOORTEPLAATSCODE;
ldf_kind_historie_tmp.kndhstgeboorteplaatsomschrijving = cipers_kind_historie.KNDHSTGEBOORTEPLAATSOMSCHRIJVING;
ldf_kind_historie_tmp.kndhstgeboortelandcode = cipers_kind_historie.KNDHSTGEBOORTELANDCODE;
ldf_kind_historie_tmp.kndhstgeboortelandomschrijving = ldf_landen_kind_geboorte.landomschrijving ;
ldf_kind_historie_tmp.kndhstregistergemeenteaktecode = cipers_kind_historie.KNDHSTREGISTERGEMEENTEAKTECODE;
ldf_kind_historie_tmp.kndhstregistergemeenteakteomschrijving = ldf_gemeenten_kind_akte.gemeenteomschrijving ;
ldf_kind_historie_tmp.kndhstaktenummer = cipers_kind_historie.KNDHSTAKTENUMMER;
ldf_kind_historie_tmp.kndhstgemeentedocumentcode = cipers_kind_historie.KNDHSTGEMEENTEDOCUMENTCODE;
ldf_kind_historie_tmp.kndhstgemeentedocumentomschrijving = ldf_gemeenten_kind_document.gemeenteomschrijving ;
ldf_kind_historie_tmp.kndhstdatumdocument = cipers_kind_historie.KNDHSTDATUMDOCUMENT;
ldf_kind_historie_tmp.kndhstdatumdocumentindicator = cipers_kind_historie.KNDHSTDATUMDOCUMENTINDICATOR;
ldf_kind_historie_tmp.kndhstbeschrijvingdocument = cipers_kind_historie.KNDHSTBESCHRIJVINGDOCUMENT;
ldf_kind_historie_tmp.kndhstaanduidinggegevensonderzoek = cipers_kind_historie.KNDHSTAANDUIDINGGEGEVENSONDERZOEK;
ldf_kind_historie_tmp.kndhstdatumingangonderzoek = cipers_kind_historie.KNDHSTDATUMINGANGONDERZOEK;
ldf_kind_historie_tmp.kndhstdatumingangonderzoekindicator = cipers_kind_historie.KNDHSTDATUMINGANGONDERZOEKINDICATOR;
ldf_kind_historie_tmp.kndhstdatumeindeonderzoek = cipers_kind_historie.KNDHSTDATUMEINDEONDERZOEK;
ldf_kind_historie_tmp.kndhstdatumeindeonderzoekindicator = cipers_kind_historie.KNDHSTDATUMEINDEONDERZOEKINDICATOR;
ldf_kind_historie_tmp.kndhstingangsdatumgeldigheid = cipers_kind_historie.KNDHSTINGANGSDATUMGELDIGHEID;
ldf_kind_historie_tmp.kndhstingangsdatumgeldigheidindicator = cipers_kind_historie.KNDHSTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_kind_historie_tmp.kndhstdatumvanopneming = cipers_kind_historie.KNDHSTDATUMVANOPNEMING;
ldf_kind_historie_tmp.kndhstdatumvanopnemingindicator = cipers_kind_historie.KNDHSTDATUMVANOPNEMINGINDICATOR;
ldf_kind_historie = ldf_kind_historie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_kind_historie"
if(ldf_kind_historie != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_kind_historie
			//ldf_kind_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_kind_historie"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_kind_historie.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_kind_historie.kndhstsleuteldatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, ldf_kind_historie.kndhstsleutelvolgnummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(4, ldf_kind_historie.kndhstsleutelgeldigdatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(5, ldf_kind_historie.kndhstsleutelgeldigvolgnummer);


            java.sql.ResultSet rs_tPostgresqlOutput_1 = pstmt_tPostgresqlOutput_1.executeQuery();
            int checkCount_tPostgresqlOutput_1 = -1;
            while(rs_tPostgresqlOutput_1.next()) {
                checkCount_tPostgresqlOutput_1 = rs_tPostgresqlOutput_1.getInt(1);
            }
            if(checkCount_tPostgresqlOutput_1 > 0) {
                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(1, ldf_kind_historie.kndhstanummer);

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(2, ldf_kind_historie.kndhstburgerservicenummer);

                        if(ldf_kind_historie.kndhstvoornamen == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(3, ldf_kind_historie.kndhstvoornamen);
}

                        if(ldf_kind_historie.kndhstvoorletters == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(4, ldf_kind_historie.kndhstvoorletters);
}

                        if(ldf_kind_historie.kndhstadellijketitelcode == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(5, ldf_kind_historie.kndhstadellijketitelcode);
}

                        if(ldf_kind_historie.kndhstadellijketitelomschrijving == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(6, ldf_kind_historie.kndhstadellijketitelomschrijving);
}

                        if(ldf_kind_historie.kndhstvoorvoegselgeslachtsnaam == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(7, ldf_kind_historie.kndhstvoorvoegselgeslachtsnaam);
}

                        if(ldf_kind_historie.kndhstgeslachtsnaam == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(8, ldf_kind_historie.kndhstgeslachtsnaam);
}

                        if(ldf_kind_historie.kndhstgeboortedatum != null) {
pstmtUpdate_tPostgresqlOutput_1.setTimestamp(9, new java.sql.Timestamp(ldf_kind_historie.kndhstgeboortedatum.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstgeboortedatumindicator == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(10, ldf_kind_historie.kndhstgeboortedatumindicator);
}

                        if(ldf_kind_historie.kndhstgeboorteplaatscode == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(11, ldf_kind_historie.kndhstgeboorteplaatscode);
}

                        if(ldf_kind_historie.kndhstgeboorteplaatsomschrijving == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(12, ldf_kind_historie.kndhstgeboorteplaatsomschrijving);
}

                        if(ldf_kind_historie.kndhstgeboortelandcode == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(13, ldf_kind_historie.kndhstgeboortelandcode);
}

                        if(ldf_kind_historie.kndhstgeboortelandomschrijving == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(14, ldf_kind_historie.kndhstgeboortelandomschrijving);
}

                        if(ldf_kind_historie.kndhstregistergemeenteaktecode == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(15, ldf_kind_historie.kndhstregistergemeenteaktecode);
}

                        if(ldf_kind_historie.kndhstregistergemeenteakteomschrijving == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(16, ldf_kind_historie.kndhstregistergemeenteakteomschrijving);
}

                        if(ldf_kind_historie.kndhstaktenummer == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(17, ldf_kind_historie.kndhstaktenummer);
}

                        if(ldf_kind_historie.kndhstgemeentedocumentcode == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(18, ldf_kind_historie.kndhstgemeentedocumentcode);
}

                        if(ldf_kind_historie.kndhstgemeentedocumentomschrijving == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(19, ldf_kind_historie.kndhstgemeentedocumentomschrijving);
}

                        if(ldf_kind_historie.kndhstdatumdocument != null) {
pstmtUpdate_tPostgresqlOutput_1.setTimestamp(20, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumdocument.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumdocumentindicator == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(21, ldf_kind_historie.kndhstdatumdocumentindicator);
}

                        if(ldf_kind_historie.kndhstbeschrijvingdocument == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(22, ldf_kind_historie.kndhstbeschrijvingdocument);
}

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(23, ldf_kind_historie.kndhstaanduidinggegevensonderzoek);

                        if(ldf_kind_historie.kndhstdatumingangonderzoek != null) {
pstmtUpdate_tPostgresqlOutput_1.setTimestamp(24, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumingangonderzoek.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_1.setNull(24, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumingangonderzoekindicator == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(25, ldf_kind_historie.kndhstdatumingangonderzoekindicator);
}

                        if(ldf_kind_historie.kndhstdatumeindeonderzoek != null) {
pstmtUpdate_tPostgresqlOutput_1.setTimestamp(26, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumeindeonderzoek.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_1.setNull(26, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumeindeonderzoekindicator == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(27, ldf_kind_historie.kndhstdatumeindeonderzoekindicator);
}

                        if(ldf_kind_historie.kndhstingangsdatumgeldigheid != null) {
pstmtUpdate_tPostgresqlOutput_1.setTimestamp(28, new java.sql.Timestamp(ldf_kind_historie.kndhstingangsdatumgeldigheid.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_1.setNull(28, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstingangsdatumgeldigheidindicator == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(29, ldf_kind_historie.kndhstingangsdatumgeldigheidindicator);
}

                        if(ldf_kind_historie.kndhstdatumvanopneming != null) {
pstmtUpdate_tPostgresqlOutput_1.setTimestamp(30, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumvanopneming.getTime()));
} else {
pstmtUpdate_tPostgresqlOutput_1.setNull(30, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumvanopnemingindicator == null) {
pstmtUpdate_tPostgresqlOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tPostgresqlOutput_1.setString(31, ldf_kind_historie.kndhstdatumvanopnemingindicator);
}

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(32 + count_tPostgresqlOutput_1, ldf_kind_historie.prsanummer);

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(33 + count_tPostgresqlOutput_1, ldf_kind_historie.kndhstsleuteldatum);

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(34 + count_tPostgresqlOutput_1, ldf_kind_historie.kndhstsleutelvolgnummer);

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(35 + count_tPostgresqlOutput_1, ldf_kind_historie.kndhstsleutelgeldigdatum);

                        pstmtUpdate_tPostgresqlOutput_1.setBigDecimal(36 + count_tPostgresqlOutput_1, ldf_kind_historie.kndhstsleutelgeldigvolgnummer);

                try {
					
                    updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1 + pstmtUpdate_tPostgresqlOutput_1.executeUpdate();
                    nb_line_tPostgresqlOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_1 = true;
                        nb_line_tPostgresqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(1, ldf_kind_historie.prsanummer);

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(2, ldf_kind_historie.kndhstsleuteldatum);

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(3, ldf_kind_historie.kndhstsleutelvolgnummer);

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(4, ldf_kind_historie.kndhstsleutelgeldigdatum);

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(5, ldf_kind_historie.kndhstsleutelgeldigvolgnummer);

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(6, ldf_kind_historie.kndhstanummer);

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(7, ldf_kind_historie.kndhstburgerservicenummer);

                        if(ldf_kind_historie.kndhstvoornamen == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(8, ldf_kind_historie.kndhstvoornamen);
}

                        if(ldf_kind_historie.kndhstvoorletters == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(9, ldf_kind_historie.kndhstvoorletters);
}

                        if(ldf_kind_historie.kndhstadellijketitelcode == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(10, ldf_kind_historie.kndhstadellijketitelcode);
}

                        if(ldf_kind_historie.kndhstadellijketitelomschrijving == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(11, ldf_kind_historie.kndhstadellijketitelomschrijving);
}

                        if(ldf_kind_historie.kndhstvoorvoegselgeslachtsnaam == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(12, ldf_kind_historie.kndhstvoorvoegselgeslachtsnaam);
}

                        if(ldf_kind_historie.kndhstgeslachtsnaam == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(13, ldf_kind_historie.kndhstgeslachtsnaam);
}

                        if(ldf_kind_historie.kndhstgeboortedatum != null) {
pstmtInsert_tPostgresqlOutput_1.setTimestamp(14, new java.sql.Timestamp(ldf_kind_historie.kndhstgeboortedatum.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstgeboortedatumindicator == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(15, ldf_kind_historie.kndhstgeboortedatumindicator);
}

                        if(ldf_kind_historie.kndhstgeboorteplaatscode == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(16, ldf_kind_historie.kndhstgeboorteplaatscode);
}

                        if(ldf_kind_historie.kndhstgeboorteplaatsomschrijving == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(17, ldf_kind_historie.kndhstgeboorteplaatsomschrijving);
}

                        if(ldf_kind_historie.kndhstgeboortelandcode == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(18, ldf_kind_historie.kndhstgeboortelandcode);
}

                        if(ldf_kind_historie.kndhstgeboortelandomschrijving == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(19, ldf_kind_historie.kndhstgeboortelandomschrijving);
}

                        if(ldf_kind_historie.kndhstregistergemeenteaktecode == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(20, ldf_kind_historie.kndhstregistergemeenteaktecode);
}

                        if(ldf_kind_historie.kndhstregistergemeenteakteomschrijving == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(21, ldf_kind_historie.kndhstregistergemeenteakteomschrijving);
}

                        if(ldf_kind_historie.kndhstaktenummer == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(22, ldf_kind_historie.kndhstaktenummer);
}

                        if(ldf_kind_historie.kndhstgemeentedocumentcode == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(23, ldf_kind_historie.kndhstgemeentedocumentcode);
}

                        if(ldf_kind_historie.kndhstgemeentedocumentomschrijving == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(24, ldf_kind_historie.kndhstgemeentedocumentomschrijving);
}

                        if(ldf_kind_historie.kndhstdatumdocument != null) {
pstmtInsert_tPostgresqlOutput_1.setTimestamp(25, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumdocument.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_1.setNull(25, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumdocumentindicator == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(26, ldf_kind_historie.kndhstdatumdocumentindicator);
}

                        if(ldf_kind_historie.kndhstbeschrijvingdocument == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(27, ldf_kind_historie.kndhstbeschrijvingdocument);
}

                        pstmtInsert_tPostgresqlOutput_1.setBigDecimal(28, ldf_kind_historie.kndhstaanduidinggegevensonderzoek);

                        if(ldf_kind_historie.kndhstdatumingangonderzoek != null) {
pstmtInsert_tPostgresqlOutput_1.setTimestamp(29, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumingangonderzoek.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_1.setNull(29, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumingangonderzoekindicator == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(30, ldf_kind_historie.kndhstdatumingangonderzoekindicator);
}

                        if(ldf_kind_historie.kndhstdatumeindeonderzoek != null) {
pstmtInsert_tPostgresqlOutput_1.setTimestamp(31, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumeindeonderzoek.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_1.setNull(31, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumeindeonderzoekindicator == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(32, ldf_kind_historie.kndhstdatumeindeonderzoekindicator);
}

                        if(ldf_kind_historie.kndhstingangsdatumgeldigheid != null) {
pstmtInsert_tPostgresqlOutput_1.setTimestamp(33, new java.sql.Timestamp(ldf_kind_historie.kndhstingangsdatumgeldigheid.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_1.setNull(33, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstingangsdatumgeldigheidindicator == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(34, ldf_kind_historie.kndhstingangsdatumgeldigheidindicator);
}

                        if(ldf_kind_historie.kndhstdatumvanopneming != null) {
pstmtInsert_tPostgresqlOutput_1.setTimestamp(35, new java.sql.Timestamp(ldf_kind_historie.kndhstdatumvanopneming.getTime()));
} else {
pstmtInsert_tPostgresqlOutput_1.setNull(35, java.sql.Types.TIMESTAMP);
}

                        if(ldf_kind_historie.kndhstdatumvanopnemingindicator == null) {
pstmtInsert_tPostgresqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtInsert_tPostgresqlOutput_1.setString(36, ldf_kind_historie.kndhstdatumvanopnemingindicator);
}

                try {
					
                    insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1 + pstmtInsert_tPostgresqlOutput_1.executeUpdate();
                    nb_line_tPostgresqlOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tPostgresqlOutput_1 = true;
                        nb_line_tPostgresqlOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_kind_historie"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_titels_predikaten_kind_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_kind_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_kind_naam" );

					
					
				
					if(tHash_Lookup_ldf_landen_kind_geboorte != null) {
						tHash_Lookup_ldf_landen_kind_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_kind_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_kind_akte != null) {
						tHash_Lookup_ldf_gemeenten_kind_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_kind_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_kind_document != null) {
						tHash_Lookup_ldf_gemeenten_kind_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_kind_document" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_kind_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



        if(pstmtUpdate_tPostgresqlOutput_1 != null){
            pstmtUpdate_tPostgresqlOutput_1.close();
        }
        if(pstmtInsert_tPostgresqlOutput_1 != null){
            pstmtInsert_tPostgresqlOutput_1.close();
        }
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_kind_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_kind_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_kind_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_kind_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_kind_document"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_kind_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_kind_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_kind_naamStruct other = (ldf_titels_predikaten_kind_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_kind_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_kind_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_kind_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_kind_naamStruct ldf_titels_predikaten_kind_naam = new ldf_titels_predikaten_kind_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_kind_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_kind_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_kind_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_kind_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_kind_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_kind_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_kind_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_kind_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_kind_naam
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_kind_naam,ldf_titels_predikaten_kind_naam) | target node:tAdvancedHash_ldf_titels_predikaten_kind_naam - inputs:(ldf_titels_predikaten_kind_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_kind_historie,ldf_titels_predikaten_kind_naam,ldf_landen_kind_geboorte,ldf_gemeenten_kind_akte,ldf_gemeenten_kind_document) outputs:(ldf_kind_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_kind_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_kind_naamStruct> tHash_Lookup_ldf_titels_predikaten_kind_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_kind_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_kind_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_kind_naam", tHash_Lookup_ldf_titels_predikaten_kind_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_kind_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_titels_predikaten_kind_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_kind_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_titels_predikaten_kind_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_kind_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_kind_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_kind_naam";

	

			//ldf_titels_predikaten_kind_naam
			//ldf_titels_predikaten_kind_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_kind_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_kind_naamStruct ldf_titels_predikaten_kind_naam_HashRow = new ldf_titels_predikaten_kind_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_kind_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_kind_naam.adellijketitelcode;
				
				ldf_titels_predikaten_kind_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_kind_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_kind_naam.put(ldf_titels_predikaten_kind_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_kind_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_kind_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_kind_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_kind_naam";

	

tHash_Lookup_ldf_titels_predikaten_kind_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_kind_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_kind_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_kind_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_kind_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_kind_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_kind_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_kind_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_kind_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_kind_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_kind_geboorteStruct other = (ldf_landen_kind_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_kind_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_kind_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_kind_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_kind_geboorteStruct ldf_landen_kind_geboorte = new ldf_landen_kind_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_kind_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_kind_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_kind_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_kind_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_kind_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_kind_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_kind_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_kind_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_kind_geboorte
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_kind_geboorte,ldf_landen_kind_geboorte) | target node:tAdvancedHash_ldf_landen_kind_geboorte - inputs:(ldf_landen_kind_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_kind_historie,ldf_titels_predikaten_kind_naam,ldf_landen_kind_geboorte,ldf_gemeenten_kind_akte,ldf_gemeenten_kind_document) outputs:(ldf_kind_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_kind_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_kind_geboorteStruct> tHash_Lookup_ldf_landen_kind_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_kind_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_kind_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_kind_geboorte", tHash_Lookup_ldf_landen_kind_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_kind_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_landen_kind_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_kind_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_landen_kind_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_kind_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_kind_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_kind_geboorte";

	

			//ldf_landen_kind_geboorte
			//ldf_landen_kind_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_kind_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_kind_geboorteStruct ldf_landen_kind_geboorte_HashRow = new ldf_landen_kind_geboorteStruct();
		   	   	   
				
				ldf_landen_kind_geboorte_HashRow.landcode = ldf_landen_kind_geboorte.landcode;
				
				ldf_landen_kind_geboorte_HashRow.landomschrijving = ldf_landen_kind_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_kind_geboorte.put(ldf_landen_kind_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_kind_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_kind_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_kind_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_kind_geboorte";

	

tHash_Lookup_ldf_landen_kind_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_kind_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_kind_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_kind_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_kind_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_kind_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_kind_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_kind_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_kind_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_kind_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_kind_akteStruct other = (ldf_gemeenten_kind_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_kind_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_kind_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_kind_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_kind_akteStruct ldf_gemeenten_kind_akte = new ldf_gemeenten_kind_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_kind_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_kind_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_kind_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_kind_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_kind_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_kind_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_kind_akte
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_kind_akte,ldf_gemeenten_kind_akte) | target node:tAdvancedHash_ldf_gemeenten_kind_akte - inputs:(ldf_gemeenten_kind_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_kind_historie,ldf_titels_predikaten_kind_naam,ldf_landen_kind_geboorte,ldf_gemeenten_kind_akte,ldf_gemeenten_kind_document) outputs:(ldf_kind_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_kind_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_akteStruct> tHash_Lookup_ldf_gemeenten_kind_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_kind_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_kind_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_kind_akte", tHash_Lookup_ldf_gemeenten_kind_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_kind_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_gemeenten_kind_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_kind_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_gemeenten_kind_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_kind_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_akte";

	

			//ldf_gemeenten_kind_akte
			//ldf_gemeenten_kind_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_kind_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_kind_akteStruct ldf_gemeenten_kind_akte_HashRow = new ldf_gemeenten_kind_akteStruct();
		   	   	   
				
				ldf_gemeenten_kind_akte_HashRow.gemeentecode = ldf_gemeenten_kind_akte.gemeentecode;
				
				ldf_gemeenten_kind_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_kind_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_kind_akte.put(ldf_gemeenten_kind_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_kind_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_kind_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_akte";

	

tHash_Lookup_ldf_gemeenten_kind_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_kind_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_kind_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_kind_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_kind_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_kind_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_kind_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_kind_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_kind_documentStruct other = (ldf_gemeenten_kind_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_kind_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_kind_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_kind_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_kind_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_kind_documentStruct ldf_gemeenten_kind_document = new ldf_gemeenten_kind_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_kind_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_kind_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_kind_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_kind_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_kind_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_kind_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_kind_document
			   		// source node:tPostgresqlInput_4 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_kind_document,ldf_gemeenten_kind_document) | target node:tAdvancedHash_ldf_gemeenten_kind_document - inputs:(ldf_gemeenten_kind_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_kind_historie,ldf_titels_predikaten_kind_naam,ldf_landen_kind_geboorte,ldf_gemeenten_kind_akte,ldf_gemeenten_kind_document) outputs:(ldf_kind_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_kind_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kind_documentStruct> tHash_Lookup_ldf_gemeenten_kind_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_kind_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_kind_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_kind_document", tHash_Lookup_ldf_gemeenten_kind_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_kind_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_4);
			   	String dbUser_tPostgresqlInput_4 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;
		        
				
			String url_tPostgresqlInput_4 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_4,dbUser_tPostgresqlInput_4,dbPwd_tPostgresqlInput_4);
		        
				conn_tPostgresqlInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);

		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;
		try{
		    rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								ldf_gemeenten_kind_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_kind_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								ldf_gemeenten_kind_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_kind_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_document";

	

			//ldf_gemeenten_kind_document
			//ldf_gemeenten_kind_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_kind_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_kind_documentStruct ldf_gemeenten_kind_document_HashRow = new ldf_gemeenten_kind_documentStruct();
		   	   	   
				
				ldf_gemeenten_kind_document_HashRow.gemeentecode = ldf_gemeenten_kind_document.gemeentecode;
				
				ldf_gemeenten_kind_document_HashRow.gemeenteomschrijving = ldf_gemeenten_kind_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_kind_document.put(ldf_gemeenten_kind_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_kind_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_kind_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	stmt_tPostgresqlInput_4.close();

	if(conn_tPostgresqlInput_4 != null && !conn_tPostgresqlInput_4.isClosed()) {
		
			conn_tPostgresqlInput_4.commit();
			
		
			conn_tPostgresqlInput_4.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_document";

	

tHash_Lookup_ldf_gemeenten_kind_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_kind_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_kind_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_kind_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_kind_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kind_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kind_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_kind_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_kind_historie ibz_cipers_fill_ldf_kind_historieClass = new ibz_cipers_fill_ldf_kind_historie();

        int exitCode = ibz_cipers_fill_ldf_kind_historieClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_kind_historie.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_kind_historie_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_kind_historie");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     248659 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:53 CET
 ************************************************************************************************/