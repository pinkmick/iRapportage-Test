// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_persoon_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_persoon Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_persoon implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_persoon";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_persoon.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_persoon.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_persoon_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_ouder1_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_ouder2_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_persoon_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_ouder1_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_ouder2_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_overlijden_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_verblijfplaats_buitenland_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_verblijfplaats_immigratie_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_persoon_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_persoon_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_ouder1_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_ouder1_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_ouder2_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_ouder2_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_inschrijving_PK_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_gezagsverhouding_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_kiesrecht_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_verwijzing_gemeente_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_verblijftitels_verblijftitel_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_overlijden_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_overlijden_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_persoonStruct implements routines.system.IPersistableRow<ldf_persoonStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal prsburgerservicenummer;

				public BigDecimal getPrsburgerservicenummer () {
					return this.prsburgerservicenummer;
				}
				
			    public String prsvoornamen;

				public String getPrsvoornamen () {
					return this.prsvoornamen;
				}
				
			    public String prseerstevoornaam;

				public String getPrseerstevoornaam () {
					return this.prseerstevoornaam;
				}
				
			    public String prsvoorletters;

				public String getPrsvoorletters () {
					return this.prsvoorletters;
				}
				
			    public String prsadellijketitelcode;

				public String getPrsadellijketitelcode () {
					return this.prsadellijketitelcode;
				}
				
			    public String prsadellijketitelomschrijving;

				public String getPrsadellijketitelomschrijving () {
					return this.prsadellijketitelomschrijving;
				}
				
			    public String prsvoorvoegselgeslachtsnaam;

				public String getPrsvoorvoegselgeslachtsnaam () {
					return this.prsvoorvoegselgeslachtsnaam;
				}
				
			    public String prsgeslachtsnaam;

				public String getPrsgeslachtsnaam () {
					return this.prsgeslachtsnaam;
				}
				
			    public String prsnaamopgemaakt;

				public String getPrsnaamopgemaakt () {
					return this.prsnaamopgemaakt;
				}
				
			    public java.util.Date prsgeboortedatum;

				public java.util.Date getPrsgeboortedatum () {
					return this.prsgeboortedatum;
				}
				
			    public String prsgeboortedatumindicator;

				public String getPrsgeboortedatumindicator () {
					return this.prsgeboortedatumindicator;
				}
				
			    public String prsgeboorteplaatscode;

				public String getPrsgeboorteplaatscode () {
					return this.prsgeboorteplaatscode;
				}
				
			    public String prsgeboorteplaatsomschrijving;

				public String getPrsgeboorteplaatsomschrijving () {
					return this.prsgeboorteplaatsomschrijving;
				}
				
			    public String prsgeboortelandcode;

				public String getPrsgeboortelandcode () {
					return this.prsgeboortelandcode;
				}
				
			    public String prsgeboortelandomschrijving;

				public String getPrsgeboortelandomschrijving () {
					return this.prsgeboortelandomschrijving;
				}
				
			    public String prsgeslachtsaanduidingcode;

				public String getPrsgeslachtsaanduidingcode () {
					return this.prsgeslachtsaanduidingcode;
				}
				
			    public String prsgeslachtsaanduidingomschrijving;

				public String getPrsgeslachtsaanduidingomschrijving () {
					return this.prsgeslachtsaanduidingomschrijving;
				}
				
			    public BigDecimal prsvoriganummer;

				public BigDecimal getPrsvoriganummer () {
					return this.prsvoriganummer;
				}
				
			    public BigDecimal prsvolgendanummer;

				public BigDecimal getPrsvolgendanummer () {
					return this.prsvolgendanummer;
				}
				
			    public String prsaanduidingnaamgebruik;

				public String getPrsaanduidingnaamgebruik () {
					return this.prsaanduidingnaamgebruik;
				}
				
			    public String prsregistergemeenteaktecode;

				public String getPrsregistergemeenteaktecode () {
					return this.prsregistergemeenteaktecode;
				}
				
			    public String prsregistergemeenteakteomschrijving;

				public String getPrsregistergemeenteakteomschrijving () {
					return this.prsregistergemeenteakteomschrijving;
				}
				
			    public String prsaktenummer;

				public String getPrsaktenummer () {
					return this.prsaktenummer;
				}
				
			    public String prsgemeentedocumentcode;

				public String getPrsgemeentedocumentcode () {
					return this.prsgemeentedocumentcode;
				}
				
			    public String prsgemeentedocumentomschrijving;

				public String getPrsgemeentedocumentomschrijving () {
					return this.prsgemeentedocumentomschrijving;
				}
				
			    public java.util.Date prsdatumdocument;

				public java.util.Date getPrsdatumdocument () {
					return this.prsdatumdocument;
				}
				
			    public String prsdatumdocumentindicator;

				public String getPrsdatumdocumentindicator () {
					return this.prsdatumdocumentindicator;
				}
				
			    public String prsbeschrijvingdocument;

				public String getPrsbeschrijvingdocument () {
					return this.prsbeschrijvingdocument;
				}
				
			    public BigDecimal prsaanduidinggegevensonderzoek;

				public BigDecimal getPrsaanduidinggegevensonderzoek () {
					return this.prsaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date prsdatumingangonderzoek;

				public java.util.Date getPrsdatumingangonderzoek () {
					return this.prsdatumingangonderzoek;
				}
				
			    public String prsdatumingangonderzoekindicator;

				public String getPrsdatumingangonderzoekindicator () {
					return this.prsdatumingangonderzoekindicator;
				}
				
			    public java.util.Date prsdatumeindeonderzoek;

				public java.util.Date getPrsdatumeindeonderzoek () {
					return this.prsdatumeindeonderzoek;
				}
				
			    public String prsdatumeindeonderzoekindicator;

				public String getPrsdatumeindeonderzoekindicator () {
					return this.prsdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date prsingangsdatumgeldigheid;

				public java.util.Date getPrsingangsdatumgeldigheid () {
					return this.prsingangsdatumgeldigheid;
				}
				
			    public String prsingangsdatumgeldigheidindicator;

				public String getPrsingangsdatumgeldigheidindicator () {
					return this.prsingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date prsdatumvanopneming;

				public java.util.Date getPrsdatumvanopneming () {
					return this.prsdatumvanopneming;
				}
				
			    public String prsdatumvanopnemingindicator;

				public String getPrsdatumvanopnemingindicator () {
					return this.prsdatumvanopnemingindicator;
				}
				
			    public BigDecimal prsstatuspersoon;

				public BigDecimal getPrsstatuspersoon () {
					return this.prsstatuspersoon;
				}
				
			    public BigDecimal prsrijkskodenationaliteit;

				public BigDecimal getPrsrijkskodenationaliteit () {
					return this.prsrijkskodenationaliteit;
				}
				
			    public BigDecimal prsgezinsverhouding;

				public BigDecimal getPrsgezinsverhouding () {
					return this.prsgezinsverhouding;
				}
				
			    public BigDecimal prsgezinssterkte;

				public BigDecimal getPrsgezinssterkte () {
					return this.prsgezinssterkte;
				}
				
			    public BigDecimal prsanummergezinshoofd;

				public BigDecimal getPrsanummergezinshoofd () {
					return this.prsanummergezinshoofd;
				}
				
			    public String prsburgerlijkestaat;

				public String getPrsburgerlijkestaat () {
					return this.prsburgerlijkestaat;
				}
				
			    public String prsnaamswijzigingindicatie;

				public String getPrsnaamswijzigingindicatie () {
					return this.prsnaamswijzigingindicatie;
				}
				
			    public java.util.Date prsdatumadreshoudingaaneengesloten;

				public java.util.Date getPrsdatumadreshoudingaaneengesloten () {
					return this.prsdatumadreshoudingaaneengesloten;
				}
				
			    public String prsdatumadreshoudingaaneengeslotenindicator;

				public String getPrsdatumadreshoudingaaneengeslotenindicator () {
					return this.prsdatumadreshoudingaaneengeslotenindicator;
				}
				
			    public BigDecimal ou1anummer;

				public BigDecimal getOu1anummer () {
					return this.ou1anummer;
				}
				
			    public BigDecimal ou1burgerservicenummer;

				public BigDecimal getOu1burgerservicenummer () {
					return this.ou1burgerservicenummer;
				}
				
			    public String ou1voornamen;

				public String getOu1voornamen () {
					return this.ou1voornamen;
				}
				
			    public String ou1voorletters;

				public String getOu1voorletters () {
					return this.ou1voorletters;
				}
				
			    public String ou1adellijketitelcode;

				public String getOu1adellijketitelcode () {
					return this.ou1adellijketitelcode;
				}
				
			    public String ou1adellijketitelomschrijving;

				public String getOu1adellijketitelomschrijving () {
					return this.ou1adellijketitelomschrijving;
				}
				
			    public String ou1voorvoegselgeslachtsnaam;

				public String getOu1voorvoegselgeslachtsnaam () {
					return this.ou1voorvoegselgeslachtsnaam;
				}
				
			    public String ou1geslachtsnaam;

				public String getOu1geslachtsnaam () {
					return this.ou1geslachtsnaam;
				}
				
			    public String ou1naamopgemaakt;

				public String getOu1naamopgemaakt () {
					return this.ou1naamopgemaakt;
				}
				
			    public java.util.Date ou1geboortedatum;

				public java.util.Date getOu1geboortedatum () {
					return this.ou1geboortedatum;
				}
				
			    public String ou1geboortedatumindicator;

				public String getOu1geboortedatumindicator () {
					return this.ou1geboortedatumindicator;
				}
				
			    public String ou1geboorteplaatscode;

				public String getOu1geboorteplaatscode () {
					return this.ou1geboorteplaatscode;
				}
				
			    public String ou1geboorteplaatsomschrijving;

				public String getOu1geboorteplaatsomschrijving () {
					return this.ou1geboorteplaatsomschrijving;
				}
				
			    public String ou1geboortelandcode;

				public String getOu1geboortelandcode () {
					return this.ou1geboortelandcode;
				}
				
			    public String ou1geboortelandomschrijving;

				public String getOu1geboortelandomschrijving () {
					return this.ou1geboortelandomschrijving;
				}
				
			    public String ou1geslachtsaanduidingcode;

				public String getOu1geslachtsaanduidingcode () {
					return this.ou1geslachtsaanduidingcode;
				}
				
			    public String ou1geslachtsaanduidingomschrijving;

				public String getOu1geslachtsaanduidingomschrijving () {
					return this.ou1geslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date ou1datumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu1datumingangfamilierechtelijkebetrekking () {
					return this.ou1datumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou1datumingangfamilierechtelijkebetrekkingindicator;

				public String getOu1datumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou1datumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public String ou1registergemeenteaktecode;

				public String getOu1registergemeenteaktecode () {
					return this.ou1registergemeenteaktecode;
				}
				
			    public String ou1registergemeenteakteomschrijving;

				public String getOu1registergemeenteakteomschrijving () {
					return this.ou1registergemeenteakteomschrijving;
				}
				
			    public String ou1aktenummer;

				public String getOu1aktenummer () {
					return this.ou1aktenummer;
				}
				
			    public String ou1gemeentedocumentcode;

				public String getOu1gemeentedocumentcode () {
					return this.ou1gemeentedocumentcode;
				}
				
			    public String ou1gemeentedocumentomschrijving;

				public String getOu1gemeentedocumentomschrijving () {
					return this.ou1gemeentedocumentomschrijving;
				}
				
			    public java.util.Date ou1datumdocument;

				public java.util.Date getOu1datumdocument () {
					return this.ou1datumdocument;
				}
				
			    public String ou1datumdocumentindicator;

				public String getOu1datumdocumentindicator () {
					return this.ou1datumdocumentindicator;
				}
				
			    public String ou1beschrijvingdocument;

				public String getOu1beschrijvingdocument () {
					return this.ou1beschrijvingdocument;
				}
				
			    public BigDecimal ou1aanduidinggegevensonderzoek;

				public BigDecimal getOu1aanduidinggegevensonderzoek () {
					return this.ou1aanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ou1datumingangonderzoek;

				public java.util.Date getOu1datumingangonderzoek () {
					return this.ou1datumingangonderzoek;
				}
				
			    public String ou1datumingangonderzoekindicator;

				public String getOu1datumingangonderzoekindicator () {
					return this.ou1datumingangonderzoekindicator;
				}
				
			    public java.util.Date ou1datumeindeonderzoek;

				public java.util.Date getOu1datumeindeonderzoek () {
					return this.ou1datumeindeonderzoek;
				}
				
			    public String ou1datumeindeonderzoekindicator;

				public String getOu1datumeindeonderzoekindicator () {
					return this.ou1datumeindeonderzoekindicator;
				}
				
			    public java.util.Date ou1ingangsdatumgeldigheid;

				public java.util.Date getOu1ingangsdatumgeldigheid () {
					return this.ou1ingangsdatumgeldigheid;
				}
				
			    public String ou1ingangsdatumgeldigheidindicator;

				public String getOu1ingangsdatumgeldigheidindicator () {
					return this.ou1ingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou1datumvanopneming;

				public java.util.Date getOu1datumvanopneming () {
					return this.ou1datumvanopneming;
				}
				
			    public String ou1datumvanopnemingindicator;

				public String getOu1datumvanopnemingindicator () {
					return this.ou1datumvanopnemingindicator;
				}
				
			    public BigDecimal ou2anummer;

				public BigDecimal getOu2anummer () {
					return this.ou2anummer;
				}
				
			    public BigDecimal ou2burgerservicenummer;

				public BigDecimal getOu2burgerservicenummer () {
					return this.ou2burgerservicenummer;
				}
				
			    public String ou2voornamen;

				public String getOu2voornamen () {
					return this.ou2voornamen;
				}
				
			    public String ou2voorletters;

				public String getOu2voorletters () {
					return this.ou2voorletters;
				}
				
			    public String ou2adellijketitelcode;

				public String getOu2adellijketitelcode () {
					return this.ou2adellijketitelcode;
				}
				
			    public String ou2adellijketitelomschrijving;

				public String getOu2adellijketitelomschrijving () {
					return this.ou2adellijketitelomschrijving;
				}
				
			    public String ou2voorvoegselgeslachtsnaam;

				public String getOu2voorvoegselgeslachtsnaam () {
					return this.ou2voorvoegselgeslachtsnaam;
				}
				
			    public String ou2geslachtsnaam;

				public String getOu2geslachtsnaam () {
					return this.ou2geslachtsnaam;
				}
				
			    public String ou2naamopgemaakt;

				public String getOu2naamopgemaakt () {
					return this.ou2naamopgemaakt;
				}
				
			    public java.util.Date ou2geboortedatum;

				public java.util.Date getOu2geboortedatum () {
					return this.ou2geboortedatum;
				}
				
			    public String ou2geboortedatumindicator;

				public String getOu2geboortedatumindicator () {
					return this.ou2geboortedatumindicator;
				}
				
			    public String ou2geboorteplaatscode;

				public String getOu2geboorteplaatscode () {
					return this.ou2geboorteplaatscode;
				}
				
			    public String ou2geboorteplaatsomschrijving;

				public String getOu2geboorteplaatsomschrijving () {
					return this.ou2geboorteplaatsomschrijving;
				}
				
			    public String ou2geboortelandcode;

				public String getOu2geboortelandcode () {
					return this.ou2geboortelandcode;
				}
				
			    public String ou2geboortelandomschrijving;

				public String getOu2geboortelandomschrijving () {
					return this.ou2geboortelandomschrijving;
				}
				
			    public String ou2geslachtsaanduidingcode;

				public String getOu2geslachtsaanduidingcode () {
					return this.ou2geslachtsaanduidingcode;
				}
				
			    public String ou2geslachtsaanduidingomschrijving;

				public String getOu2geslachtsaanduidingomschrijving () {
					return this.ou2geslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date ou2datumingangfamilierechtelijkebetrekking;

				public java.util.Date getOu2datumingangfamilierechtelijkebetrekking () {
					return this.ou2datumingangfamilierechtelijkebetrekking;
				}
				
			    public String ou2datumingangfamilierechtelijkebetrekkingindicator;

				public String getOu2datumingangfamilierechtelijkebetrekkingindicator () {
					return this.ou2datumingangfamilierechtelijkebetrekkingindicator;
				}
				
			    public String ou2registergemeenteaktecode;

				public String getOu2registergemeenteaktecode () {
					return this.ou2registergemeenteaktecode;
				}
				
			    public String ou2registergemeenteakteomschrijving;

				public String getOu2registergemeenteakteomschrijving () {
					return this.ou2registergemeenteakteomschrijving;
				}
				
			    public String ou2aktenummer;

				public String getOu2aktenummer () {
					return this.ou2aktenummer;
				}
				
			    public String ou2gemeentedocumentcode;

				public String getOu2gemeentedocumentcode () {
					return this.ou2gemeentedocumentcode;
				}
				
			    public String ou2gemeentedocumentomschrijving;

				public String getOu2gemeentedocumentomschrijving () {
					return this.ou2gemeentedocumentomschrijving;
				}
				
			    public java.util.Date ou2datumdocument;

				public java.util.Date getOu2datumdocument () {
					return this.ou2datumdocument;
				}
				
			    public String ou2datumdocumentindicator;

				public String getOu2datumdocumentindicator () {
					return this.ou2datumdocumentindicator;
				}
				
			    public String ou2beschrijvingdocument;

				public String getOu2beschrijvingdocument () {
					return this.ou2beschrijvingdocument;
				}
				
			    public BigDecimal ou2aanduidinggegevensonderzoek;

				public BigDecimal getOu2aanduidinggegevensonderzoek () {
					return this.ou2aanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ou2datumingangonderzoek;

				public java.util.Date getOu2datumingangonderzoek () {
					return this.ou2datumingangonderzoek;
				}
				
			    public String ou2datumingangonderzoekindicator;

				public String getOu2datumingangonderzoekindicator () {
					return this.ou2datumingangonderzoekindicator;
				}
				
			    public java.util.Date ou2datumeindeonderzoek;

				public java.util.Date getOu2datumeindeonderzoek () {
					return this.ou2datumeindeonderzoek;
				}
				
			    public String ou2datumeindeonderzoekindicator;

				public String getOu2datumeindeonderzoekindicator () {
					return this.ou2datumeindeonderzoekindicator;
				}
				
			    public java.util.Date ou2ingangsdatumgeldigheid;

				public java.util.Date getOu2ingangsdatumgeldigheid () {
					return this.ou2ingangsdatumgeldigheid;
				}
				
			    public String ou2ingangsdatumgeldigheidindicator;

				public String getOu2ingangsdatumgeldigheidindicator () {
					return this.ou2ingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ou2datumvanopneming;

				public java.util.Date getOu2datumvanopneming () {
					return this.ou2datumvanopneming;
				}
				
			    public String ou2datumvanopnemingindicator;

				public String getOu2datumvanopnemingindicator () {
					return this.ou2datumvanopnemingindicator;
				}
				
			    public java.util.Date ovldatumoverlijden;

				public java.util.Date getOvldatumoverlijden () {
					return this.ovldatumoverlijden;
				}
				
			    public String ovldatumoverlijdenindicator;

				public String getOvldatumoverlijdenindicator () {
					return this.ovldatumoverlijdenindicator;
				}
				
			    public String ovlplaatsoverlijdencode;

				public String getOvlplaatsoverlijdencode () {
					return this.ovlplaatsoverlijdencode;
				}
				
			    public String ovlplaatsoverlijdenomschrijving;

				public String getOvlplaatsoverlijdenomschrijving () {
					return this.ovlplaatsoverlijdenomschrijving;
				}
				
			    public String ovllandoverlijdencode;

				public String getOvllandoverlijdencode () {
					return this.ovllandoverlijdencode;
				}
				
			    public String ovllandoverlijdenomschrijving;

				public String getOvllandoverlijdenomschrijving () {
					return this.ovllandoverlijdenomschrijving;
				}
				
			    public String ovlregistergemeenteaktecode;

				public String getOvlregistergemeenteaktecode () {
					return this.ovlregistergemeenteaktecode;
				}
				
			    public String ovlregistergemeenteakteomschrijving;

				public String getOvlregistergemeenteakteomschrijving () {
					return this.ovlregistergemeenteakteomschrijving;
				}
				
			    public String ovlaktenummer;

				public String getOvlaktenummer () {
					return this.ovlaktenummer;
				}
				
			    public String ovlgemeentedocumentcode;

				public String getOvlgemeentedocumentcode () {
					return this.ovlgemeentedocumentcode;
				}
				
			    public String ovlgemeentedocumentomschrijving;

				public String getOvlgemeentedocumentomschrijving () {
					return this.ovlgemeentedocumentomschrijving;
				}
				
			    public java.util.Date ovldatumdocument;

				public java.util.Date getOvldatumdocument () {
					return this.ovldatumdocument;
				}
				
			    public String ovldatumdocumentindicator;

				public String getOvldatumdocumentindicator () {
					return this.ovldatumdocumentindicator;
				}
				
			    public String ovlbeschrijvingdocument;

				public String getOvlbeschrijvingdocument () {
					return this.ovlbeschrijvingdocument;
				}
				
			    public BigDecimal ovlaanduidinggegevensonderzoek;

				public BigDecimal getOvlaanduidinggegevensonderzoek () {
					return this.ovlaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date ovldatumingangonderzoek;

				public java.util.Date getOvldatumingangonderzoek () {
					return this.ovldatumingangonderzoek;
				}
				
			    public String ovldatumingangonderzoekindicator;

				public String getOvldatumingangonderzoekindicator () {
					return this.ovldatumingangonderzoekindicator;
				}
				
			    public java.util.Date ovldatumeindeonderzoek;

				public java.util.Date getOvldatumeindeonderzoek () {
					return this.ovldatumeindeonderzoek;
				}
				
			    public String ovldatumeindeonderzoekindicator;

				public String getOvldatumeindeonderzoekindicator () {
					return this.ovldatumeindeonderzoekindicator;
				}
				
			    public java.util.Date ovlingangsdatumgeldigheid;

				public java.util.Date getOvlingangsdatumgeldigheid () {
					return this.ovlingangsdatumgeldigheid;
				}
				
			    public String ovlingangsdatumgeldigheidindicator;

				public String getOvlingangsdatumgeldigheidindicator () {
					return this.ovlingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date ovldatumvanopneming;

				public java.util.Date getOvldatumvanopneming () {
					return this.ovldatumvanopneming;
				}
				
			    public String ovldatumvanopnemingindicator;

				public String getOvldatumvanopnemingindicator () {
					return this.ovldatumvanopnemingindicator;
				}
				
			    public java.util.Date insdatumingangblokkeringpl;

				public java.util.Date getInsdatumingangblokkeringpl () {
					return this.insdatumingangblokkeringpl;
				}
				
			    public String insdatumingangblokkeringplindicator;

				public String getInsdatumingangblokkeringplindicator () {
					return this.insdatumingangblokkeringplindicator;
				}
				
			    public java.util.Date insdatumopschortingbijhouding;

				public java.util.Date getInsdatumopschortingbijhouding () {
					return this.insdatumopschortingbijhouding;
				}
				
			    public String insdatumopschortingbijhoudingindicator;

				public String getInsdatumopschortingbijhoudingindicator () {
					return this.insdatumopschortingbijhoudingindicator;
				}
				
			    public String insomschrijvingredenopschortingbijhouding;

				public String getInsomschrijvingredenopschortingbijhouding () {
					return this.insomschrijvingredenopschortingbijhouding;
				}
				
			    public java.util.Date insdatumeersteinschrijvinggba;

				public java.util.Date getInsdatumeersteinschrijvinggba () {
					return this.insdatumeersteinschrijvinggba;
				}
				
			    public String insdatumeersteinschrijvingindicator;

				public String getInsdatumeersteinschrijvingindicator () {
					return this.insdatumeersteinschrijvingindicator;
				}
				
			    public String insgemeentewaarpkzichbevindtcode;

				public String getInsgemeentewaarpkzichbevindtcode () {
					return this.insgemeentewaarpkzichbevindtcode;
				}
				
			    public String insgemeentewaarpkzichbevindtomschrijving;

				public String getInsgemeentewaarpkzichbevindtomschrijving () {
					return this.insgemeentewaarpkzichbevindtomschrijving;
				}
				
			    public String insindicatiegeheim;

				public String getInsindicatiegeheim () {
					return this.insindicatiegeheim;
				}
				
			    public BigDecimal insversienummer;

				public BigDecimal getInsversienummer () {
					return this.insversienummer;
				}
				
			    public String insdatumtijdstempel;

				public String getInsdatumtijdstempel () {
					return this.insdatumtijdstempel;
				}
				
			    public String inspkgegevensvolledigmeegeconverteerd;

				public String getInspkgegevensvolledigmeegeconverteerd () {
					return this.inspkgegevensvolledigmeegeconverteerd;
				}
				
			    public String vblgemeentevaninschrijvingcode;

				public String getVblgemeentevaninschrijvingcode () {
					return this.vblgemeentevaninschrijvingcode;
				}
				
			    public String vblgemeentevaninschrijvingomschrijving;

				public String getVblgemeentevaninschrijvingomschrijving () {
					return this.vblgemeentevaninschrijvingomschrijving;
				}
				
			    public java.util.Date vbldatuminschrijving;

				public java.util.Date getVbldatuminschrijving () {
					return this.vbldatuminschrijving;
				}
				
			    public String vbldatuminschrijvingindicator;

				public String getVbldatuminschrijvingindicator () {
					return this.vbldatuminschrijvingindicator;
				}
				
			    public String vblfunctieadres;

				public String getVblfunctieadres () {
					return this.vblfunctieadres;
				}
				
			    public String vblgemeentedeel;

				public String getVblgemeentedeel () {
					return this.vblgemeentedeel;
				}
				
			    public java.util.Date vbldatumaanvangadreshouding;

				public java.util.Date getVbldatumaanvangadreshouding () {
					return this.vbldatumaanvangadreshouding;
				}
				
			    public String vbldatumaanvangadreshoudingindicator;

				public String getVbldatumaanvangadreshoudingindicator () {
					return this.vbldatumaanvangadreshoudingindicator;
				}
				
			    public String vblstraatnaam;

				public String getVblstraatnaam () {
					return this.vblstraatnaam;
				}
				
			    public String vblnaamopenbareruimte;

				public String getVblnaamopenbareruimte () {
					return this.vblnaamopenbareruimte;
				}
				
			    public String vbladresopgemaakt;

				public String getVbladresopgemaakt () {
					return this.vbladresopgemaakt;
				}
				
			    public String vblwoonplaatsopgemaakt;

				public String getVblwoonplaatsopgemaakt () {
					return this.vblwoonplaatsopgemaakt;
				}
				
			    public BigDecimal vblhuisnummer;

				public BigDecimal getVblhuisnummer () {
					return this.vblhuisnummer;
				}
				
			    public String vblhuisletter;

				public String getVblhuisletter () {
					return this.vblhuisletter;
				}
				
			    public String vblhuisnummertoevoeging;

				public String getVblhuisnummertoevoeging () {
					return this.vblhuisnummertoevoeging;
				}
				
			    public String vblaanduidingbijhuisnummer;

				public String getVblaanduidingbijhuisnummer () {
					return this.vblaanduidingbijhuisnummer;
				}
				
			    public String vblpostcode;

				public String getVblpostcode () {
					return this.vblpostcode;
				}
				
			    public String vblwoonplaatsnaam;

				public String getVblwoonplaatsnaam () {
					return this.vblwoonplaatsnaam;
				}
				
			    public String vblidentificatiecodeverblijfplaats;

				public String getVblidentificatiecodeverblijfplaats () {
					return this.vblidentificatiecodeverblijfplaats;
				}
				
			    public String vblidentificatiecodenummeraanduiding;

				public String getVblidentificatiecodenummeraanduiding () {
					return this.vblidentificatiecodenummeraanduiding;
				}
				
			    public String vbllocatiebeschrijving;

				public String getVbllocatiebeschrijving () {
					return this.vbllocatiebeschrijving;
				}
				
			    public String vbllandadresbuitenlandcode;

				public String getVbllandadresbuitenlandcode () {
					return this.vbllandadresbuitenlandcode;
				}
				
			    public String vbllandadresbuitenlandomschrijving;

				public String getVbllandadresbuitenlandomschrijving () {
					return this.vbllandadresbuitenlandomschrijving;
				}
				
			    public java.util.Date vbldatumaanvangadresbuitenland;

				public java.util.Date getVbldatumaanvangadresbuitenland () {
					return this.vbldatumaanvangadresbuitenland;
				}
				
			    public String vbldatumaanvangadresbuitenlandindicator;

				public String getVbldatumaanvangadresbuitenlandindicator () {
					return this.vbldatumaanvangadresbuitenlandindicator;
				}
				
			    public String vblregel1adresbuitenland;

				public String getVblregel1adresbuitenland () {
					return this.vblregel1adresbuitenland;
				}
				
			    public String vblregel2adresbuitenland;

				public String getVblregel2adresbuitenland () {
					return this.vblregel2adresbuitenland;
				}
				
			    public String vblregel3adresbuitenland;

				public String getVblregel3adresbuitenland () {
					return this.vblregel3adresbuitenland;
				}
				
			    public String vbllandvanwaaringeschrevencode;

				public String getVbllandvanwaaringeschrevencode () {
					return this.vbllandvanwaaringeschrevencode;
				}
				
			    public String vbllandvanwaaringeschrevenomschrijving;

				public String getVbllandvanwaaringeschrevenomschrijving () {
					return this.vbllandvanwaaringeschrevenomschrijving;
				}
				
			    public java.util.Date vbldatumvestiginginnederland;

				public java.util.Date getVbldatumvestiginginnederland () {
					return this.vbldatumvestiginginnederland;
				}
				
			    public String vbldatumvestiginginnederlandindicator;

				public String getVbldatumvestiginginnederlandindicator () {
					return this.vbldatumvestiginginnederlandindicator;
				}
				
			    public String vblomschrijvingvanaangifteadreshouding;

				public String getVblomschrijvingvanaangifteadreshouding () {
					return this.vblomschrijvingvanaangifteadreshouding;
				}
				
			    public BigDecimal vblindicatiedocument;

				public BigDecimal getVblindicatiedocument () {
					return this.vblindicatiedocument;
				}
				
			    public BigDecimal vblaanduidinggegevensonderzoek;

				public BigDecimal getVblaanduidinggegevensonderzoek () {
					return this.vblaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vbldatumingangonderzoek;

				public java.util.Date getVbldatumingangonderzoek () {
					return this.vbldatumingangonderzoek;
				}
				
			    public String vbldatumingangonderzoekindicator;

				public String getVbldatumingangonderzoekindicator () {
					return this.vbldatumingangonderzoekindicator;
				}
				
			    public java.util.Date vbldatumeindeonderzoek;

				public java.util.Date getVbldatumeindeonderzoek () {
					return this.vbldatumeindeonderzoek;
				}
				
			    public String vbldatumeindeonderzoekindicator;

				public String getVbldatumeindeonderzoekindicator () {
					return this.vbldatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vblingangsdatumgeldigheid;

				public java.util.Date getVblingangsdatumgeldigheid () {
					return this.vblingangsdatumgeldigheid;
				}
				
			    public String vblingangsdatumgeldigheidindicator;

				public String getVblingangsdatumgeldigheidindicator () {
					return this.vblingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vbldatumvanopneming;

				public java.util.Date getVbldatumvanopneming () {
					return this.vbldatumvanopneming;
				}
				
			    public String vbldatumvanopnemingindicator;

				public String getVbldatumvanopnemingindicator () {
					return this.vbldatumvanopnemingindicator;
				}
				
			    public String vblsoortpandcode;

				public String getVblsoortpandcode () {
					return this.vblsoortpandcode;
				}
				
			    public String vblsoortpandomschrijving;

				public String getVblsoortpandomschrijving () {
					return this.vblsoortpandomschrijving;
				}
				
			    public String vblwijkcode;

				public String getVblwijkcode () {
					return this.vblwijkcode;
				}
				
			    public String vblwijkomschrijving;

				public String getVblwijkomschrijving () {
					return this.vblwijkomschrijving;
				}
				
			    public String vblplanalogischewijkcode;

				public String getVblplanalogischewijkcode () {
					return this.vblplanalogischewijkcode;
				}
				
			    public String vblplanalogischewijkomschrijving;

				public String getVblplanalogischewijkomschrijving () {
					return this.vblplanalogischewijkomschrijving;
				}
				
			    public BigDecimal vblanummerhoofdbewoner;

				public BigDecimal getVblanummerhoofdbewoner () {
					return this.vblanummerhoofdbewoner;
				}
				
			    public String vbtaanduidingverblijfstitelcode;

				public String getVbtaanduidingverblijfstitelcode () {
					return this.vbtaanduidingverblijfstitelcode;
				}
				
			    public String vbtverblijfstitelvervallen;

				public String getVbtverblijfstitelvervallen () {
					return this.vbtverblijfstitelvervallen;
				}
				
			    public String vbtaanduidingverblijfstitelomschrijving;

				public String getVbtaanduidingverblijfstitelomschrijving () {
					return this.vbtaanduidingverblijfstitelomschrijving;
				}
				
			    public java.util.Date vbtdatumeindeverblijfstitel;

				public java.util.Date getVbtdatumeindeverblijfstitel () {
					return this.vbtdatumeindeverblijfstitel;
				}
				
			    public String vbtdatumeindeverblijfstitelindicator;

				public String getVbtdatumeindeverblijfstitelindicator () {
					return this.vbtdatumeindeverblijfstitelindicator;
				}
				
			    public java.util.Date vbtingangsdatumverblijfstitel;

				public java.util.Date getVbtingangsdatumverblijfstitel () {
					return this.vbtingangsdatumverblijfstitel;
				}
				
			    public String vbtingangsdatumverblijfstitelindicator;

				public String getVbtingangsdatumverblijfstitelindicator () {
					return this.vbtingangsdatumverblijfstitelindicator;
				}
				
			    public BigDecimal vbtaanduidinggegevensonderzoek;

				public BigDecimal getVbtaanduidinggegevensonderzoek () {
					return this.vbtaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vbtdatumingangonderzoek;

				public java.util.Date getVbtdatumingangonderzoek () {
					return this.vbtdatumingangonderzoek;
				}
				
			    public String vbtdatumingangonderzoekindicator;

				public String getVbtdatumingangonderzoekindicator () {
					return this.vbtdatumingangonderzoekindicator;
				}
				
			    public java.util.Date vbtdatumeindeonderzoek;

				public java.util.Date getVbtdatumeindeonderzoek () {
					return this.vbtdatumeindeonderzoek;
				}
				
			    public String vbtdatumeindeonderzoekindicator;

				public String getVbtdatumeindeonderzoekindicator () {
					return this.vbtdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vbtingangsdatumgeldigheid;

				public java.util.Date getVbtingangsdatumgeldigheid () {
					return this.vbtingangsdatumgeldigheid;
				}
				
			    public String vbtingangsdatumgeldigheidindicator;

				public String getVbtingangsdatumgeldigheidindicator () {
					return this.vbtingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vbtdatumvanopneming;

				public java.util.Date getVbtdatumvanopneming () {
					return this.vbtdatumvanopneming;
				}
				
			    public String vbtdatumvanopnemingindicator;

				public String getVbtdatumvanopnemingindicator () {
					return this.vbtdatumvanopnemingindicator;
				}
				
			    public String gzvindicatiegezagminderjarige;

				public String getGzvindicatiegezagminderjarige () {
					return this.gzvindicatiegezagminderjarige;
				}
				
			    public BigDecimal gzvindicatiecurateleregister;

				public BigDecimal getGzvindicatiecurateleregister () {
					return this.gzvindicatiecurateleregister;
				}
				
			    public String gzvgemeentedocumentcode;

				public String getGzvgemeentedocumentcode () {
					return this.gzvgemeentedocumentcode;
				}
				
			    public String gzvgemeentedocumentomschrijving;

				public String getGzvgemeentedocumentomschrijving () {
					return this.gzvgemeentedocumentomschrijving;
				}
				
			    public java.util.Date gzvdatumdocument;

				public java.util.Date getGzvdatumdocument () {
					return this.gzvdatumdocument;
				}
				
			    public String gzvdatumdocumentindicator;

				public String getGzvdatumdocumentindicator () {
					return this.gzvdatumdocumentindicator;
				}
				
			    public String gzvbeschrijvingdocument;

				public String getGzvbeschrijvingdocument () {
					return this.gzvbeschrijvingdocument;
				}
				
			    public BigDecimal gzvaanduidinggegevensonderzoek;

				public BigDecimal getGzvaanduidinggegevensonderzoek () {
					return this.gzvaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date gzvdatumingangonderzoek;

				public java.util.Date getGzvdatumingangonderzoek () {
					return this.gzvdatumingangonderzoek;
				}
				
			    public String gzvdatumingangonderzoekindicator;

				public String getGzvdatumingangonderzoekindicator () {
					return this.gzvdatumingangonderzoekindicator;
				}
				
			    public java.util.Date gzvdatumeindeonderzoek;

				public java.util.Date getGzvdatumeindeonderzoek () {
					return this.gzvdatumeindeonderzoek;
				}
				
			    public String gzvdatumeindeonderzoekindicator;

				public String getGzvdatumeindeonderzoekindicator () {
					return this.gzvdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date gzvingangsdatumgeldigheid;

				public java.util.Date getGzvingangsdatumgeldigheid () {
					return this.gzvingangsdatumgeldigheid;
				}
				
			    public String gzvingangsdatumgeldigheidindicator;

				public String getGzvingangsdatumgeldigheidindicator () {
					return this.gzvingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date gzvdatumvanopneming;

				public java.util.Date getGzvdatumvanopneming () {
					return this.gzvdatumvanopneming;
				}
				
			    public String gzvdatumvanopnemingindicator;

				public String getGzvdatumvanopnemingindicator () {
					return this.gzvdatumvanopnemingindicator;
				}
				
			    public BigDecimal ksraanduidingeuropeeskiesrecht;

				public BigDecimal getKsraanduidingeuropeeskiesrecht () {
					return this.ksraanduidingeuropeeskiesrecht;
				}
				
			    public java.util.Date ksrdatumverzoekofmededelingeuropeeskiesrecht;

				public java.util.Date getKsrdatumverzoekofmededelingeuropeeskiesrecht () {
					return this.ksrdatumverzoekofmededelingeuropeeskiesrecht;
				}
				
			    public String ksrdatumverzoekofmededelingeuropeeskiesrechtindicator;

				public String getKsrdatumverzoekofmededelingeuropeeskiesrechtindicator () {
					return this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator;
				}
				
			    public java.util.Date ksreinddatumuitsluitingeuropeeskiesrecht;

				public java.util.Date getKsreinddatumuitsluitingeuropeeskiesrecht () {
					return this.ksreinddatumuitsluitingeuropeeskiesrecht;
				}
				
			    public String ksreinddatumuitsluitingeuropeeskiesrechtindicator;

				public String getKsreinddatumuitsluitingeuropeeskiesrechtindicator () {
					return this.ksreinddatumuitsluitingeuropeeskiesrechtindicator;
				}
				
			    public String ksraanduidinguitgeslotenkiesrecht;

				public String getKsraanduidinguitgeslotenkiesrecht () {
					return this.ksraanduidinguitgeslotenkiesrecht;
				}
				
			    public java.util.Date ksreinddatumuitsluitingkiesrecht;

				public java.util.Date getKsreinddatumuitsluitingkiesrecht () {
					return this.ksreinddatumuitsluitingkiesrecht;
				}
				
			    public String ksreinddatumuitsluitingkiesrechtindicator;

				public String getKsreinddatumuitsluitingkiesrechtindicator () {
					return this.ksreinddatumuitsluitingkiesrechtindicator;
				}
				
			    public String ksrgemeentedocumentcode;

				public String getKsrgemeentedocumentcode () {
					return this.ksrgemeentedocumentcode;
				}
				
			    public String ksrgemeentedocumentomschrijving;

				public String getKsrgemeentedocumentomschrijving () {
					return this.ksrgemeentedocumentomschrijving;
				}
				
			    public java.util.Date ksrdatumdocument;

				public java.util.Date getKsrdatumdocument () {
					return this.ksrdatumdocument;
				}
				
			    public String ksrdatumdocumentindicator;

				public String getKsrdatumdocumentindicator () {
					return this.ksrdatumdocumentindicator;
				}
				
			    public String ksrbeschrijvingdocument;

				public String getKsrbeschrijvingdocument () {
					return this.ksrbeschrijvingdocument;
				}
				
			    public String vwsgemeentevaninschrijvingcode;

				public String getVwsgemeentevaninschrijvingcode () {
					return this.vwsgemeentevaninschrijvingcode;
				}
				
			    public String vwsgemeentevaninschrijvingomschrijving;

				public String getVwsgemeentevaninschrijvingomschrijving () {
					return this.vwsgemeentevaninschrijvingomschrijving;
				}
				
			    public java.util.Date vwsdatuminschrijving;

				public java.util.Date getVwsdatuminschrijving () {
					return this.vwsdatuminschrijving;
				}
				
			    public String vwsdatuminschrijvingindicator;

				public String getVwsdatuminschrijvingindicator () {
					return this.vwsdatuminschrijvingindicator;
				}
				
			    public String vwsindicatiegeheim;

				public String getVwsindicatiegeheim () {
					return this.vwsindicatiegeheim;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_persoonStruct other = (ldf_persoonStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_persoonStruct other) {

		other.prsanummer = this.prsanummer;
	            other.prsburgerservicenummer = this.prsburgerservicenummer;
	            other.prsvoornamen = this.prsvoornamen;
	            other.prseerstevoornaam = this.prseerstevoornaam;
	            other.prsvoorletters = this.prsvoorletters;
	            other.prsadellijketitelcode = this.prsadellijketitelcode;
	            other.prsadellijketitelomschrijving = this.prsadellijketitelomschrijving;
	            other.prsvoorvoegselgeslachtsnaam = this.prsvoorvoegselgeslachtsnaam;
	            other.prsgeslachtsnaam = this.prsgeslachtsnaam;
	            other.prsnaamopgemaakt = this.prsnaamopgemaakt;
	            other.prsgeboortedatum = this.prsgeboortedatum;
	            other.prsgeboortedatumindicator = this.prsgeboortedatumindicator;
	            other.prsgeboorteplaatscode = this.prsgeboorteplaatscode;
	            other.prsgeboorteplaatsomschrijving = this.prsgeboorteplaatsomschrijving;
	            other.prsgeboortelandcode = this.prsgeboortelandcode;
	            other.prsgeboortelandomschrijving = this.prsgeboortelandomschrijving;
	            other.prsgeslachtsaanduidingcode = this.prsgeslachtsaanduidingcode;
	            other.prsgeslachtsaanduidingomschrijving = this.prsgeslachtsaanduidingomschrijving;
	            other.prsvoriganummer = this.prsvoriganummer;
	            other.prsvolgendanummer = this.prsvolgendanummer;
	            other.prsaanduidingnaamgebruik = this.prsaanduidingnaamgebruik;
	            other.prsregistergemeenteaktecode = this.prsregistergemeenteaktecode;
	            other.prsregistergemeenteakteomschrijving = this.prsregistergemeenteakteomschrijving;
	            other.prsaktenummer = this.prsaktenummer;
	            other.prsgemeentedocumentcode = this.prsgemeentedocumentcode;
	            other.prsgemeentedocumentomschrijving = this.prsgemeentedocumentomschrijving;
	            other.prsdatumdocument = this.prsdatumdocument;
	            other.prsdatumdocumentindicator = this.prsdatumdocumentindicator;
	            other.prsbeschrijvingdocument = this.prsbeschrijvingdocument;
	            other.prsaanduidinggegevensonderzoek = this.prsaanduidinggegevensonderzoek;
	            other.prsdatumingangonderzoek = this.prsdatumingangonderzoek;
	            other.prsdatumingangonderzoekindicator = this.prsdatumingangonderzoekindicator;
	            other.prsdatumeindeonderzoek = this.prsdatumeindeonderzoek;
	            other.prsdatumeindeonderzoekindicator = this.prsdatumeindeonderzoekindicator;
	            other.prsingangsdatumgeldigheid = this.prsingangsdatumgeldigheid;
	            other.prsingangsdatumgeldigheidindicator = this.prsingangsdatumgeldigheidindicator;
	            other.prsdatumvanopneming = this.prsdatumvanopneming;
	            other.prsdatumvanopnemingindicator = this.prsdatumvanopnemingindicator;
	            other.prsstatuspersoon = this.prsstatuspersoon;
	            other.prsrijkskodenationaliteit = this.prsrijkskodenationaliteit;
	            other.prsgezinsverhouding = this.prsgezinsverhouding;
	            other.prsgezinssterkte = this.prsgezinssterkte;
	            other.prsanummergezinshoofd = this.prsanummergezinshoofd;
	            other.prsburgerlijkestaat = this.prsburgerlijkestaat;
	            other.prsnaamswijzigingindicatie = this.prsnaamswijzigingindicatie;
	            other.prsdatumadreshoudingaaneengesloten = this.prsdatumadreshoudingaaneengesloten;
	            other.prsdatumadreshoudingaaneengeslotenindicator = this.prsdatumadreshoudingaaneengeslotenindicator;
	            other.ou1anummer = this.ou1anummer;
	            other.ou1burgerservicenummer = this.ou1burgerservicenummer;
	            other.ou1voornamen = this.ou1voornamen;
	            other.ou1voorletters = this.ou1voorletters;
	            other.ou1adellijketitelcode = this.ou1adellijketitelcode;
	            other.ou1adellijketitelomschrijving = this.ou1adellijketitelomschrijving;
	            other.ou1voorvoegselgeslachtsnaam = this.ou1voorvoegselgeslachtsnaam;
	            other.ou1geslachtsnaam = this.ou1geslachtsnaam;
	            other.ou1naamopgemaakt = this.ou1naamopgemaakt;
	            other.ou1geboortedatum = this.ou1geboortedatum;
	            other.ou1geboortedatumindicator = this.ou1geboortedatumindicator;
	            other.ou1geboorteplaatscode = this.ou1geboorteplaatscode;
	            other.ou1geboorteplaatsomschrijving = this.ou1geboorteplaatsomschrijving;
	            other.ou1geboortelandcode = this.ou1geboortelandcode;
	            other.ou1geboortelandomschrijving = this.ou1geboortelandomschrijving;
	            other.ou1geslachtsaanduidingcode = this.ou1geslachtsaanduidingcode;
	            other.ou1geslachtsaanduidingomschrijving = this.ou1geslachtsaanduidingomschrijving;
	            other.ou1datumingangfamilierechtelijkebetrekking = this.ou1datumingangfamilierechtelijkebetrekking;
	            other.ou1datumingangfamilierechtelijkebetrekkingindicator = this.ou1datumingangfamilierechtelijkebetrekkingindicator;
	            other.ou1registergemeenteaktecode = this.ou1registergemeenteaktecode;
	            other.ou1registergemeenteakteomschrijving = this.ou1registergemeenteakteomschrijving;
	            other.ou1aktenummer = this.ou1aktenummer;
	            other.ou1gemeentedocumentcode = this.ou1gemeentedocumentcode;
	            other.ou1gemeentedocumentomschrijving = this.ou1gemeentedocumentomschrijving;
	            other.ou1datumdocument = this.ou1datumdocument;
	            other.ou1datumdocumentindicator = this.ou1datumdocumentindicator;
	            other.ou1beschrijvingdocument = this.ou1beschrijvingdocument;
	            other.ou1aanduidinggegevensonderzoek = this.ou1aanduidinggegevensonderzoek;
	            other.ou1datumingangonderzoek = this.ou1datumingangonderzoek;
	            other.ou1datumingangonderzoekindicator = this.ou1datumingangonderzoekindicator;
	            other.ou1datumeindeonderzoek = this.ou1datumeindeonderzoek;
	            other.ou1datumeindeonderzoekindicator = this.ou1datumeindeonderzoekindicator;
	            other.ou1ingangsdatumgeldigheid = this.ou1ingangsdatumgeldigheid;
	            other.ou1ingangsdatumgeldigheidindicator = this.ou1ingangsdatumgeldigheidindicator;
	            other.ou1datumvanopneming = this.ou1datumvanopneming;
	            other.ou1datumvanopnemingindicator = this.ou1datumvanopnemingindicator;
	            other.ou2anummer = this.ou2anummer;
	            other.ou2burgerservicenummer = this.ou2burgerservicenummer;
	            other.ou2voornamen = this.ou2voornamen;
	            other.ou2voorletters = this.ou2voorletters;
	            other.ou2adellijketitelcode = this.ou2adellijketitelcode;
	            other.ou2adellijketitelomschrijving = this.ou2adellijketitelomschrijving;
	            other.ou2voorvoegselgeslachtsnaam = this.ou2voorvoegselgeslachtsnaam;
	            other.ou2geslachtsnaam = this.ou2geslachtsnaam;
	            other.ou2naamopgemaakt = this.ou2naamopgemaakt;
	            other.ou2geboortedatum = this.ou2geboortedatum;
	            other.ou2geboortedatumindicator = this.ou2geboortedatumindicator;
	            other.ou2geboorteplaatscode = this.ou2geboorteplaatscode;
	            other.ou2geboorteplaatsomschrijving = this.ou2geboorteplaatsomschrijving;
	            other.ou2geboortelandcode = this.ou2geboortelandcode;
	            other.ou2geboortelandomschrijving = this.ou2geboortelandomschrijving;
	            other.ou2geslachtsaanduidingcode = this.ou2geslachtsaanduidingcode;
	            other.ou2geslachtsaanduidingomschrijving = this.ou2geslachtsaanduidingomschrijving;
	            other.ou2datumingangfamilierechtelijkebetrekking = this.ou2datumingangfamilierechtelijkebetrekking;
	            other.ou2datumingangfamilierechtelijkebetrekkingindicator = this.ou2datumingangfamilierechtelijkebetrekkingindicator;
	            other.ou2registergemeenteaktecode = this.ou2registergemeenteaktecode;
	            other.ou2registergemeenteakteomschrijving = this.ou2registergemeenteakteomschrijving;
	            other.ou2aktenummer = this.ou2aktenummer;
	            other.ou2gemeentedocumentcode = this.ou2gemeentedocumentcode;
	            other.ou2gemeentedocumentomschrijving = this.ou2gemeentedocumentomschrijving;
	            other.ou2datumdocument = this.ou2datumdocument;
	            other.ou2datumdocumentindicator = this.ou2datumdocumentindicator;
	            other.ou2beschrijvingdocument = this.ou2beschrijvingdocument;
	            other.ou2aanduidinggegevensonderzoek = this.ou2aanduidinggegevensonderzoek;
	            other.ou2datumingangonderzoek = this.ou2datumingangonderzoek;
	            other.ou2datumingangonderzoekindicator = this.ou2datumingangonderzoekindicator;
	            other.ou2datumeindeonderzoek = this.ou2datumeindeonderzoek;
	            other.ou2datumeindeonderzoekindicator = this.ou2datumeindeonderzoekindicator;
	            other.ou2ingangsdatumgeldigheid = this.ou2ingangsdatumgeldigheid;
	            other.ou2ingangsdatumgeldigheidindicator = this.ou2ingangsdatumgeldigheidindicator;
	            other.ou2datumvanopneming = this.ou2datumvanopneming;
	            other.ou2datumvanopnemingindicator = this.ou2datumvanopnemingindicator;
	            other.ovldatumoverlijden = this.ovldatumoverlijden;
	            other.ovldatumoverlijdenindicator = this.ovldatumoverlijdenindicator;
	            other.ovlplaatsoverlijdencode = this.ovlplaatsoverlijdencode;
	            other.ovlplaatsoverlijdenomschrijving = this.ovlplaatsoverlijdenomschrijving;
	            other.ovllandoverlijdencode = this.ovllandoverlijdencode;
	            other.ovllandoverlijdenomschrijving = this.ovllandoverlijdenomschrijving;
	            other.ovlregistergemeenteaktecode = this.ovlregistergemeenteaktecode;
	            other.ovlregistergemeenteakteomschrijving = this.ovlregistergemeenteakteomschrijving;
	            other.ovlaktenummer = this.ovlaktenummer;
	            other.ovlgemeentedocumentcode = this.ovlgemeentedocumentcode;
	            other.ovlgemeentedocumentomschrijving = this.ovlgemeentedocumentomschrijving;
	            other.ovldatumdocument = this.ovldatumdocument;
	            other.ovldatumdocumentindicator = this.ovldatumdocumentindicator;
	            other.ovlbeschrijvingdocument = this.ovlbeschrijvingdocument;
	            other.ovlaanduidinggegevensonderzoek = this.ovlaanduidinggegevensonderzoek;
	            other.ovldatumingangonderzoek = this.ovldatumingangonderzoek;
	            other.ovldatumingangonderzoekindicator = this.ovldatumingangonderzoekindicator;
	            other.ovldatumeindeonderzoek = this.ovldatumeindeonderzoek;
	            other.ovldatumeindeonderzoekindicator = this.ovldatumeindeonderzoekindicator;
	            other.ovlingangsdatumgeldigheid = this.ovlingangsdatumgeldigheid;
	            other.ovlingangsdatumgeldigheidindicator = this.ovlingangsdatumgeldigheidindicator;
	            other.ovldatumvanopneming = this.ovldatumvanopneming;
	            other.ovldatumvanopnemingindicator = this.ovldatumvanopnemingindicator;
	            other.insdatumingangblokkeringpl = this.insdatumingangblokkeringpl;
	            other.insdatumingangblokkeringplindicator = this.insdatumingangblokkeringplindicator;
	            other.insdatumopschortingbijhouding = this.insdatumopschortingbijhouding;
	            other.insdatumopschortingbijhoudingindicator = this.insdatumopschortingbijhoudingindicator;
	            other.insomschrijvingredenopschortingbijhouding = this.insomschrijvingredenopschortingbijhouding;
	            other.insdatumeersteinschrijvinggba = this.insdatumeersteinschrijvinggba;
	            other.insdatumeersteinschrijvingindicator = this.insdatumeersteinschrijvingindicator;
	            other.insgemeentewaarpkzichbevindtcode = this.insgemeentewaarpkzichbevindtcode;
	            other.insgemeentewaarpkzichbevindtomschrijving = this.insgemeentewaarpkzichbevindtomschrijving;
	            other.insindicatiegeheim = this.insindicatiegeheim;
	            other.insversienummer = this.insversienummer;
	            other.insdatumtijdstempel = this.insdatumtijdstempel;
	            other.inspkgegevensvolledigmeegeconverteerd = this.inspkgegevensvolledigmeegeconverteerd;
	            other.vblgemeentevaninschrijvingcode = this.vblgemeentevaninschrijvingcode;
	            other.vblgemeentevaninschrijvingomschrijving = this.vblgemeentevaninschrijvingomschrijving;
	            other.vbldatuminschrijving = this.vbldatuminschrijving;
	            other.vbldatuminschrijvingindicator = this.vbldatuminschrijvingindicator;
	            other.vblfunctieadres = this.vblfunctieadres;
	            other.vblgemeentedeel = this.vblgemeentedeel;
	            other.vbldatumaanvangadreshouding = this.vbldatumaanvangadreshouding;
	            other.vbldatumaanvangadreshoudingindicator = this.vbldatumaanvangadreshoudingindicator;
	            other.vblstraatnaam = this.vblstraatnaam;
	            other.vblnaamopenbareruimte = this.vblnaamopenbareruimte;
	            other.vbladresopgemaakt = this.vbladresopgemaakt;
	            other.vblwoonplaatsopgemaakt = this.vblwoonplaatsopgemaakt;
	            other.vblhuisnummer = this.vblhuisnummer;
	            other.vblhuisletter = this.vblhuisletter;
	            other.vblhuisnummertoevoeging = this.vblhuisnummertoevoeging;
	            other.vblaanduidingbijhuisnummer = this.vblaanduidingbijhuisnummer;
	            other.vblpostcode = this.vblpostcode;
	            other.vblwoonplaatsnaam = this.vblwoonplaatsnaam;
	            other.vblidentificatiecodeverblijfplaats = this.vblidentificatiecodeverblijfplaats;
	            other.vblidentificatiecodenummeraanduiding = this.vblidentificatiecodenummeraanduiding;
	            other.vbllocatiebeschrijving = this.vbllocatiebeschrijving;
	            other.vbllandadresbuitenlandcode = this.vbllandadresbuitenlandcode;
	            other.vbllandadresbuitenlandomschrijving = this.vbllandadresbuitenlandomschrijving;
	            other.vbldatumaanvangadresbuitenland = this.vbldatumaanvangadresbuitenland;
	            other.vbldatumaanvangadresbuitenlandindicator = this.vbldatumaanvangadresbuitenlandindicator;
	            other.vblregel1adresbuitenland = this.vblregel1adresbuitenland;
	            other.vblregel2adresbuitenland = this.vblregel2adresbuitenland;
	            other.vblregel3adresbuitenland = this.vblregel3adresbuitenland;
	            other.vbllandvanwaaringeschrevencode = this.vbllandvanwaaringeschrevencode;
	            other.vbllandvanwaaringeschrevenomschrijving = this.vbllandvanwaaringeschrevenomschrijving;
	            other.vbldatumvestiginginnederland = this.vbldatumvestiginginnederland;
	            other.vbldatumvestiginginnederlandindicator = this.vbldatumvestiginginnederlandindicator;
	            other.vblomschrijvingvanaangifteadreshouding = this.vblomschrijvingvanaangifteadreshouding;
	            other.vblindicatiedocument = this.vblindicatiedocument;
	            other.vblaanduidinggegevensonderzoek = this.vblaanduidinggegevensonderzoek;
	            other.vbldatumingangonderzoek = this.vbldatumingangonderzoek;
	            other.vbldatumingangonderzoekindicator = this.vbldatumingangonderzoekindicator;
	            other.vbldatumeindeonderzoek = this.vbldatumeindeonderzoek;
	            other.vbldatumeindeonderzoekindicator = this.vbldatumeindeonderzoekindicator;
	            other.vblingangsdatumgeldigheid = this.vblingangsdatumgeldigheid;
	            other.vblingangsdatumgeldigheidindicator = this.vblingangsdatumgeldigheidindicator;
	            other.vbldatumvanopneming = this.vbldatumvanopneming;
	            other.vbldatumvanopnemingindicator = this.vbldatumvanopnemingindicator;
	            other.vblsoortpandcode = this.vblsoortpandcode;
	            other.vblsoortpandomschrijving = this.vblsoortpandomschrijving;
	            other.vblwijkcode = this.vblwijkcode;
	            other.vblwijkomschrijving = this.vblwijkomschrijving;
	            other.vblplanalogischewijkcode = this.vblplanalogischewijkcode;
	            other.vblplanalogischewijkomschrijving = this.vblplanalogischewijkomschrijving;
	            other.vblanummerhoofdbewoner = this.vblanummerhoofdbewoner;
	            other.vbtaanduidingverblijfstitelcode = this.vbtaanduidingverblijfstitelcode;
	            other.vbtverblijfstitelvervallen = this.vbtverblijfstitelvervallen;
	            other.vbtaanduidingverblijfstitelomschrijving = this.vbtaanduidingverblijfstitelomschrijving;
	            other.vbtdatumeindeverblijfstitel = this.vbtdatumeindeverblijfstitel;
	            other.vbtdatumeindeverblijfstitelindicator = this.vbtdatumeindeverblijfstitelindicator;
	            other.vbtingangsdatumverblijfstitel = this.vbtingangsdatumverblijfstitel;
	            other.vbtingangsdatumverblijfstitelindicator = this.vbtingangsdatumverblijfstitelindicator;
	            other.vbtaanduidinggegevensonderzoek = this.vbtaanduidinggegevensonderzoek;
	            other.vbtdatumingangonderzoek = this.vbtdatumingangonderzoek;
	            other.vbtdatumingangonderzoekindicator = this.vbtdatumingangonderzoekindicator;
	            other.vbtdatumeindeonderzoek = this.vbtdatumeindeonderzoek;
	            other.vbtdatumeindeonderzoekindicator = this.vbtdatumeindeonderzoekindicator;
	            other.vbtingangsdatumgeldigheid = this.vbtingangsdatumgeldigheid;
	            other.vbtingangsdatumgeldigheidindicator = this.vbtingangsdatumgeldigheidindicator;
	            other.vbtdatumvanopneming = this.vbtdatumvanopneming;
	            other.vbtdatumvanopnemingindicator = this.vbtdatumvanopnemingindicator;
	            other.gzvindicatiegezagminderjarige = this.gzvindicatiegezagminderjarige;
	            other.gzvindicatiecurateleregister = this.gzvindicatiecurateleregister;
	            other.gzvgemeentedocumentcode = this.gzvgemeentedocumentcode;
	            other.gzvgemeentedocumentomschrijving = this.gzvgemeentedocumentomschrijving;
	            other.gzvdatumdocument = this.gzvdatumdocument;
	            other.gzvdatumdocumentindicator = this.gzvdatumdocumentindicator;
	            other.gzvbeschrijvingdocument = this.gzvbeschrijvingdocument;
	            other.gzvaanduidinggegevensonderzoek = this.gzvaanduidinggegevensonderzoek;
	            other.gzvdatumingangonderzoek = this.gzvdatumingangonderzoek;
	            other.gzvdatumingangonderzoekindicator = this.gzvdatumingangonderzoekindicator;
	            other.gzvdatumeindeonderzoek = this.gzvdatumeindeonderzoek;
	            other.gzvdatumeindeonderzoekindicator = this.gzvdatumeindeonderzoekindicator;
	            other.gzvingangsdatumgeldigheid = this.gzvingangsdatumgeldigheid;
	            other.gzvingangsdatumgeldigheidindicator = this.gzvingangsdatumgeldigheidindicator;
	            other.gzvdatumvanopneming = this.gzvdatumvanopneming;
	            other.gzvdatumvanopnemingindicator = this.gzvdatumvanopnemingindicator;
	            other.ksraanduidingeuropeeskiesrecht = this.ksraanduidingeuropeeskiesrecht;
	            other.ksrdatumverzoekofmededelingeuropeeskiesrecht = this.ksrdatumverzoekofmededelingeuropeeskiesrecht;
	            other.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator = this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator;
	            other.ksreinddatumuitsluitingeuropeeskiesrecht = this.ksreinddatumuitsluitingeuropeeskiesrecht;
	            other.ksreinddatumuitsluitingeuropeeskiesrechtindicator = this.ksreinddatumuitsluitingeuropeeskiesrechtindicator;
	            other.ksraanduidinguitgeslotenkiesrecht = this.ksraanduidinguitgeslotenkiesrecht;
	            other.ksreinddatumuitsluitingkiesrecht = this.ksreinddatumuitsluitingkiesrecht;
	            other.ksreinddatumuitsluitingkiesrechtindicator = this.ksreinddatumuitsluitingkiesrechtindicator;
	            other.ksrgemeentedocumentcode = this.ksrgemeentedocumentcode;
	            other.ksrgemeentedocumentomschrijving = this.ksrgemeentedocumentomschrijving;
	            other.ksrdatumdocument = this.ksrdatumdocument;
	            other.ksrdatumdocumentindicator = this.ksrdatumdocumentindicator;
	            other.ksrbeschrijvingdocument = this.ksrbeschrijvingdocument;
	            other.vwsgemeentevaninschrijvingcode = this.vwsgemeentevaninschrijvingcode;
	            other.vwsgemeentevaninschrijvingomschrijving = this.vwsgemeentevaninschrijvingomschrijving;
	            other.vwsdatuminschrijving = this.vwsdatuminschrijving;
	            other.vwsdatuminschrijvingindicator = this.vwsdatuminschrijvingindicator;
	            other.vwsindicatiegeheim = this.vwsindicatiegeheim;
	            
	}

	public void copyKeysDataTo(ldf_persoonStruct other) {

		other.prsanummer = this.prsanummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.prsburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.prsvoornamen = readString(dis);
					
					this.prseerstevoornaam = readString(dis);
					
					this.prsvoorletters = readString(dis);
					
					this.prsadellijketitelcode = readString(dis);
					
					this.prsadellijketitelomschrijving = readString(dis);
					
					this.prsvoorvoegselgeslachtsnaam = readString(dis);
					
					this.prsgeslachtsnaam = readString(dis);
					
					this.prsnaamopgemaakt = readString(dis);
					
					this.prsgeboortedatum = readDate(dis);
					
					this.prsgeboortedatumindicator = readString(dis);
					
					this.prsgeboorteplaatscode = readString(dis);
					
					this.prsgeboorteplaatsomschrijving = readString(dis);
					
					this.prsgeboortelandcode = readString(dis);
					
					this.prsgeboortelandomschrijving = readString(dis);
					
					this.prsgeslachtsaanduidingcode = readString(dis);
					
					this.prsgeslachtsaanduidingomschrijving = readString(dis);
					
						this.prsvoriganummer = (BigDecimal) dis.readObject();
					
						this.prsvolgendanummer = (BigDecimal) dis.readObject();
					
					this.prsaanduidingnaamgebruik = readString(dis);
					
					this.prsregistergemeenteaktecode = readString(dis);
					
					this.prsregistergemeenteakteomschrijving = readString(dis);
					
					this.prsaktenummer = readString(dis);
					
					this.prsgemeentedocumentcode = readString(dis);
					
					this.prsgemeentedocumentomschrijving = readString(dis);
					
					this.prsdatumdocument = readDate(dis);
					
					this.prsdatumdocumentindicator = readString(dis);
					
					this.prsbeschrijvingdocument = readString(dis);
					
						this.prsaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.prsdatumingangonderzoek = readDate(dis);
					
					this.prsdatumingangonderzoekindicator = readString(dis);
					
					this.prsdatumeindeonderzoek = readDate(dis);
					
					this.prsdatumeindeonderzoekindicator = readString(dis);
					
					this.prsingangsdatumgeldigheid = readDate(dis);
					
					this.prsingangsdatumgeldigheidindicator = readString(dis);
					
					this.prsdatumvanopneming = readDate(dis);
					
					this.prsdatumvanopnemingindicator = readString(dis);
					
						this.prsstatuspersoon = (BigDecimal) dis.readObject();
					
						this.prsrijkskodenationaliteit = (BigDecimal) dis.readObject();
					
						this.prsgezinsverhouding = (BigDecimal) dis.readObject();
					
						this.prsgezinssterkte = (BigDecimal) dis.readObject();
					
						this.prsanummergezinshoofd = (BigDecimal) dis.readObject();
					
					this.prsburgerlijkestaat = readString(dis);
					
					this.prsnaamswijzigingindicatie = readString(dis);
					
					this.prsdatumadreshoudingaaneengesloten = readDate(dis);
					
					this.prsdatumadreshoudingaaneengeslotenindicator = readString(dis);
					
						this.ou1anummer = (BigDecimal) dis.readObject();
					
						this.ou1burgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou1voornamen = readString(dis);
					
					this.ou1voorletters = readString(dis);
					
					this.ou1adellijketitelcode = readString(dis);
					
					this.ou1adellijketitelomschrijving = readString(dis);
					
					this.ou1voorvoegselgeslachtsnaam = readString(dis);
					
					this.ou1geslachtsnaam = readString(dis);
					
					this.ou1naamopgemaakt = readString(dis);
					
					this.ou1geboortedatum = readDate(dis);
					
					this.ou1geboortedatumindicator = readString(dis);
					
					this.ou1geboorteplaatscode = readString(dis);
					
					this.ou1geboorteplaatsomschrijving = readString(dis);
					
					this.ou1geboortelandcode = readString(dis);
					
					this.ou1geboortelandomschrijving = readString(dis);
					
					this.ou1geslachtsaanduidingcode = readString(dis);
					
					this.ou1geslachtsaanduidingomschrijving = readString(dis);
					
					this.ou1datumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou1datumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou1registergemeenteaktecode = readString(dis);
					
					this.ou1registergemeenteakteomschrijving = readString(dis);
					
					this.ou1aktenummer = readString(dis);
					
					this.ou1gemeentedocumentcode = readString(dis);
					
					this.ou1gemeentedocumentomschrijving = readString(dis);
					
					this.ou1datumdocument = readDate(dis);
					
					this.ou1datumdocumentindicator = readString(dis);
					
					this.ou1beschrijvingdocument = readString(dis);
					
						this.ou1aanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ou1datumingangonderzoek = readDate(dis);
					
					this.ou1datumingangonderzoekindicator = readString(dis);
					
					this.ou1datumeindeonderzoek = readDate(dis);
					
					this.ou1datumeindeonderzoekindicator = readString(dis);
					
					this.ou1ingangsdatumgeldigheid = readDate(dis);
					
					this.ou1ingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou1datumvanopneming = readDate(dis);
					
					this.ou1datumvanopnemingindicator = readString(dis);
					
						this.ou2anummer = (BigDecimal) dis.readObject();
					
						this.ou2burgerservicenummer = (BigDecimal) dis.readObject();
					
					this.ou2voornamen = readString(dis);
					
					this.ou2voorletters = readString(dis);
					
					this.ou2adellijketitelcode = readString(dis);
					
					this.ou2adellijketitelomschrijving = readString(dis);
					
					this.ou2voorvoegselgeslachtsnaam = readString(dis);
					
					this.ou2geslachtsnaam = readString(dis);
					
					this.ou2naamopgemaakt = readString(dis);
					
					this.ou2geboortedatum = readDate(dis);
					
					this.ou2geboortedatumindicator = readString(dis);
					
					this.ou2geboorteplaatscode = readString(dis);
					
					this.ou2geboorteplaatsomschrijving = readString(dis);
					
					this.ou2geboortelandcode = readString(dis);
					
					this.ou2geboortelandomschrijving = readString(dis);
					
					this.ou2geslachtsaanduidingcode = readString(dis);
					
					this.ou2geslachtsaanduidingomschrijving = readString(dis);
					
					this.ou2datumingangfamilierechtelijkebetrekking = readDate(dis);
					
					this.ou2datumingangfamilierechtelijkebetrekkingindicator = readString(dis);
					
					this.ou2registergemeenteaktecode = readString(dis);
					
					this.ou2registergemeenteakteomschrijving = readString(dis);
					
					this.ou2aktenummer = readString(dis);
					
					this.ou2gemeentedocumentcode = readString(dis);
					
					this.ou2gemeentedocumentomschrijving = readString(dis);
					
					this.ou2datumdocument = readDate(dis);
					
					this.ou2datumdocumentindicator = readString(dis);
					
					this.ou2beschrijvingdocument = readString(dis);
					
						this.ou2aanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ou2datumingangonderzoek = readDate(dis);
					
					this.ou2datumingangonderzoekindicator = readString(dis);
					
					this.ou2datumeindeonderzoek = readDate(dis);
					
					this.ou2datumeindeonderzoekindicator = readString(dis);
					
					this.ou2ingangsdatumgeldigheid = readDate(dis);
					
					this.ou2ingangsdatumgeldigheidindicator = readString(dis);
					
					this.ou2datumvanopneming = readDate(dis);
					
					this.ou2datumvanopnemingindicator = readString(dis);
					
					this.ovldatumoverlijden = readDate(dis);
					
					this.ovldatumoverlijdenindicator = readString(dis);
					
					this.ovlplaatsoverlijdencode = readString(dis);
					
					this.ovlplaatsoverlijdenomschrijving = readString(dis);
					
					this.ovllandoverlijdencode = readString(dis);
					
					this.ovllandoverlijdenomschrijving = readString(dis);
					
					this.ovlregistergemeenteaktecode = readString(dis);
					
					this.ovlregistergemeenteakteomschrijving = readString(dis);
					
					this.ovlaktenummer = readString(dis);
					
					this.ovlgemeentedocumentcode = readString(dis);
					
					this.ovlgemeentedocumentomschrijving = readString(dis);
					
					this.ovldatumdocument = readDate(dis);
					
					this.ovldatumdocumentindicator = readString(dis);
					
					this.ovlbeschrijvingdocument = readString(dis);
					
						this.ovlaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.ovldatumingangonderzoek = readDate(dis);
					
					this.ovldatumingangonderzoekindicator = readString(dis);
					
					this.ovldatumeindeonderzoek = readDate(dis);
					
					this.ovldatumeindeonderzoekindicator = readString(dis);
					
					this.ovlingangsdatumgeldigheid = readDate(dis);
					
					this.ovlingangsdatumgeldigheidindicator = readString(dis);
					
					this.ovldatumvanopneming = readDate(dis);
					
					this.ovldatumvanopnemingindicator = readString(dis);
					
					this.insdatumingangblokkeringpl = readDate(dis);
					
					this.insdatumingangblokkeringplindicator = readString(dis);
					
					this.insdatumopschortingbijhouding = readDate(dis);
					
					this.insdatumopschortingbijhoudingindicator = readString(dis);
					
					this.insomschrijvingredenopschortingbijhouding = readString(dis);
					
					this.insdatumeersteinschrijvinggba = readDate(dis);
					
					this.insdatumeersteinschrijvingindicator = readString(dis);
					
					this.insgemeentewaarpkzichbevindtcode = readString(dis);
					
					this.insgemeentewaarpkzichbevindtomschrijving = readString(dis);
					
					this.insindicatiegeheim = readString(dis);
					
						this.insversienummer = (BigDecimal) dis.readObject();
					
					this.insdatumtijdstempel = readString(dis);
					
					this.inspkgegevensvolledigmeegeconverteerd = readString(dis);
					
					this.vblgemeentevaninschrijvingcode = readString(dis);
					
					this.vblgemeentevaninschrijvingomschrijving = readString(dis);
					
					this.vbldatuminschrijving = readDate(dis);
					
					this.vbldatuminschrijvingindicator = readString(dis);
					
					this.vblfunctieadres = readString(dis);
					
					this.vblgemeentedeel = readString(dis);
					
					this.vbldatumaanvangadreshouding = readDate(dis);
					
					this.vbldatumaanvangadreshoudingindicator = readString(dis);
					
					this.vblstraatnaam = readString(dis);
					
					this.vblnaamopenbareruimte = readString(dis);
					
					this.vbladresopgemaakt = readString(dis);
					
					this.vblwoonplaatsopgemaakt = readString(dis);
					
						this.vblhuisnummer = (BigDecimal) dis.readObject();
					
					this.vblhuisletter = readString(dis);
					
					this.vblhuisnummertoevoeging = readString(dis);
					
					this.vblaanduidingbijhuisnummer = readString(dis);
					
					this.vblpostcode = readString(dis);
					
					this.vblwoonplaatsnaam = readString(dis);
					
					this.vblidentificatiecodeverblijfplaats = readString(dis);
					
					this.vblidentificatiecodenummeraanduiding = readString(dis);
					
					this.vbllocatiebeschrijving = readString(dis);
					
					this.vbllandadresbuitenlandcode = readString(dis);
					
					this.vbllandadresbuitenlandomschrijving = readString(dis);
					
					this.vbldatumaanvangadresbuitenland = readDate(dis);
					
					this.vbldatumaanvangadresbuitenlandindicator = readString(dis);
					
					this.vblregel1adresbuitenland = readString(dis);
					
					this.vblregel2adresbuitenland = readString(dis);
					
					this.vblregel3adresbuitenland = readString(dis);
					
					this.vbllandvanwaaringeschrevencode = readString(dis);
					
					this.vbllandvanwaaringeschrevenomschrijving = readString(dis);
					
					this.vbldatumvestiginginnederland = readDate(dis);
					
					this.vbldatumvestiginginnederlandindicator = readString(dis);
					
					this.vblomschrijvingvanaangifteadreshouding = readString(dis);
					
						this.vblindicatiedocument = (BigDecimal) dis.readObject();
					
						this.vblaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vbldatumingangonderzoek = readDate(dis);
					
					this.vbldatumingangonderzoekindicator = readString(dis);
					
					this.vbldatumeindeonderzoek = readDate(dis);
					
					this.vbldatumeindeonderzoekindicator = readString(dis);
					
					this.vblingangsdatumgeldigheid = readDate(dis);
					
					this.vblingangsdatumgeldigheidindicator = readString(dis);
					
					this.vbldatumvanopneming = readDate(dis);
					
					this.vbldatumvanopnemingindicator = readString(dis);
					
					this.vblsoortpandcode = readString(dis);
					
					this.vblsoortpandomschrijving = readString(dis);
					
					this.vblwijkcode = readString(dis);
					
					this.vblwijkomschrijving = readString(dis);
					
					this.vblplanalogischewijkcode = readString(dis);
					
					this.vblplanalogischewijkomschrijving = readString(dis);
					
						this.vblanummerhoofdbewoner = (BigDecimal) dis.readObject();
					
					this.vbtaanduidingverblijfstitelcode = readString(dis);
					
					this.vbtverblijfstitelvervallen = readString(dis);
					
					this.vbtaanduidingverblijfstitelomschrijving = readString(dis);
					
					this.vbtdatumeindeverblijfstitel = readDate(dis);
					
					this.vbtdatumeindeverblijfstitelindicator = readString(dis);
					
					this.vbtingangsdatumverblijfstitel = readDate(dis);
					
					this.vbtingangsdatumverblijfstitelindicator = readString(dis);
					
						this.vbtaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vbtdatumingangonderzoek = readDate(dis);
					
					this.vbtdatumingangonderzoekindicator = readString(dis);
					
					this.vbtdatumeindeonderzoek = readDate(dis);
					
					this.vbtdatumeindeonderzoekindicator = readString(dis);
					
					this.vbtingangsdatumgeldigheid = readDate(dis);
					
					this.vbtingangsdatumgeldigheidindicator = readString(dis);
					
					this.vbtdatumvanopneming = readDate(dis);
					
					this.vbtdatumvanopnemingindicator = readString(dis);
					
					this.gzvindicatiegezagminderjarige = readString(dis);
					
						this.gzvindicatiecurateleregister = (BigDecimal) dis.readObject();
					
					this.gzvgemeentedocumentcode = readString(dis);
					
					this.gzvgemeentedocumentomschrijving = readString(dis);
					
					this.gzvdatumdocument = readDate(dis);
					
					this.gzvdatumdocumentindicator = readString(dis);
					
					this.gzvbeschrijvingdocument = readString(dis);
					
						this.gzvaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.gzvdatumingangonderzoek = readDate(dis);
					
					this.gzvdatumingangonderzoekindicator = readString(dis);
					
					this.gzvdatumeindeonderzoek = readDate(dis);
					
					this.gzvdatumeindeonderzoekindicator = readString(dis);
					
					this.gzvingangsdatumgeldigheid = readDate(dis);
					
					this.gzvingangsdatumgeldigheidindicator = readString(dis);
					
					this.gzvdatumvanopneming = readDate(dis);
					
					this.gzvdatumvanopnemingindicator = readString(dis);
					
						this.ksraanduidingeuropeeskiesrecht = (BigDecimal) dis.readObject();
					
					this.ksrdatumverzoekofmededelingeuropeeskiesrecht = readDate(dis);
					
					this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator = readString(dis);
					
					this.ksreinddatumuitsluitingeuropeeskiesrecht = readDate(dis);
					
					this.ksreinddatumuitsluitingeuropeeskiesrechtindicator = readString(dis);
					
					this.ksraanduidinguitgeslotenkiesrecht = readString(dis);
					
					this.ksreinddatumuitsluitingkiesrecht = readDate(dis);
					
					this.ksreinddatumuitsluitingkiesrechtindicator = readString(dis);
					
					this.ksrgemeentedocumentcode = readString(dis);
					
					this.ksrgemeentedocumentomschrijving = readString(dis);
					
					this.ksrdatumdocument = readDate(dis);
					
					this.ksrdatumdocumentindicator = readString(dis);
					
					this.ksrbeschrijvingdocument = readString(dis);
					
					this.vwsgemeentevaninschrijvingcode = readString(dis);
					
					this.vwsgemeentevaninschrijvingomschrijving = readString(dis);
					
					this.vwsdatuminschrijving = readDate(dis);
					
					this.vwsdatuminschrijvingindicator = readString(dis);
					
					this.vwsindicatiegeheim = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsburgerservicenummer);
					
					// String
				
						writeString(this.prsvoornamen,dos);
					
					// String
				
						writeString(this.prseerstevoornaam,dos);
					
					// String
				
						writeString(this.prsvoorletters,dos);
					
					// String
				
						writeString(this.prsadellijketitelcode,dos);
					
					// String
				
						writeString(this.prsadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.prsvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prsgeslachtsnaam,dos);
					
					// String
				
						writeString(this.prsnaamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.prsgeboortedatum,dos);
					
					// String
				
						writeString(this.prsgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.prsgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.prsgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.prsgeboortelandcode,dos);
					
					// String
				
						writeString(this.prsgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.prsgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.prsgeslachtsaanduidingomschrijving,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsvoriganummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsvolgendanummer);
					
					// String
				
						writeString(this.prsaanduidingnaamgebruik,dos);
					
					// String
				
						writeString(this.prsregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.prsregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.prsaktenummer,dos);
					
					// String
				
						writeString(this.prsgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.prsgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumdocument,dos);
					
					// String
				
						writeString(this.prsdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.prsbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.prsdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.prsdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.prsdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prsingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.prsingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumvanopneming,dos);
					
					// String
				
						writeString(this.prsdatumvanopnemingindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsstatuspersoon);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsrijkskodenationaliteit);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsgezinsverhouding);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsgezinssterkte);
					
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummergezinshoofd);
					
					// String
				
						writeString(this.prsburgerlijkestaat,dos);
					
					// String
				
						writeString(this.prsnaamswijzigingindicatie,dos);
					
					// java.util.Date
				
						writeDate(this.prsdatumadreshoudingaaneengesloten,dos);
					
					// String
				
						writeString(this.prsdatumadreshoudingaaneengeslotenindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1anummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1burgerservicenummer);
					
					// String
				
						writeString(this.ou1voornamen,dos);
					
					// String
				
						writeString(this.ou1voorletters,dos);
					
					// String
				
						writeString(this.ou1adellijketitelcode,dos);
					
					// String
				
						writeString(this.ou1adellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou1voorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou1geslachtsnaam,dos);
					
					// String
				
						writeString(this.ou1naamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.ou1geboortedatum,dos);
					
					// String
				
						writeString(this.ou1geboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou1geboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou1geboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou1geboortelandcode,dos);
					
					// String
				
						writeString(this.ou1geboortelandomschrijving,dos);
					
					// String
				
						writeString(this.ou1geslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.ou1geslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou1datumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// String
				
						writeString(this.ou1registergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ou1registergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ou1aktenummer,dos);
					
					// String
				
						writeString(this.ou1gemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ou1gemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumdocument,dos);
					
					// String
				
						writeString(this.ou1datumdocumentindicator,dos);
					
					// String
				
						writeString(this.ou1beschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou1aanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ou1datumingangonderzoek,dos);
					
					// String
				
						writeString(this.ou1datumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ou1datumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1ingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou1ingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou1datumvanopneming,dos);
					
					// String
				
						writeString(this.ou1datumvanopnemingindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2anummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2burgerservicenummer);
					
					// String
				
						writeString(this.ou2voornamen,dos);
					
					// String
				
						writeString(this.ou2voorletters,dos);
					
					// String
				
						writeString(this.ou2adellijketitelcode,dos);
					
					// String
				
						writeString(this.ou2adellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.ou2voorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.ou2geslachtsnaam,dos);
					
					// String
				
						writeString(this.ou2naamopgemaakt,dos);
					
					// java.util.Date
				
						writeDate(this.ou2geboortedatum,dos);
					
					// String
				
						writeString(this.ou2geboortedatumindicator,dos);
					
					// String
				
						writeString(this.ou2geboorteplaatscode,dos);
					
					// String
				
						writeString(this.ou2geboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.ou2geboortelandcode,dos);
					
					// String
				
						writeString(this.ou2geboortelandomschrijving,dos);
					
					// String
				
						writeString(this.ou2geslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.ou2geslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumingangfamilierechtelijkebetrekking,dos);
					
					// String
				
						writeString(this.ou2datumingangfamilierechtelijkebetrekkingindicator,dos);
					
					// String
				
						writeString(this.ou2registergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ou2registergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ou2aktenummer,dos);
					
					// String
				
						writeString(this.ou2gemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ou2gemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumdocument,dos);
					
					// String
				
						writeString(this.ou2datumdocumentindicator,dos);
					
					// String
				
						writeString(this.ou2beschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ou2aanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ou2datumingangonderzoek,dos);
					
					// String
				
						writeString(this.ou2datumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ou2datumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2ingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ou2ingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ou2datumvanopneming,dos);
					
					// String
				
						writeString(this.ou2datumvanopnemingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumoverlijden,dos);
					
					// String
				
						writeString(this.ovldatumoverlijdenindicator,dos);
					
					// String
				
						writeString(this.ovlplaatsoverlijdencode,dos);
					
					// String
				
						writeString(this.ovlplaatsoverlijdenomschrijving,dos);
					
					// String
				
						writeString(this.ovllandoverlijdencode,dos);
					
					// String
				
						writeString(this.ovllandoverlijdenomschrijving,dos);
					
					// String
				
						writeString(this.ovlregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.ovlregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.ovlaktenummer,dos);
					
					// String
				
						writeString(this.ovlgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ovlgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumdocument,dos);
					
					// String
				
						writeString(this.ovldatumdocumentindicator,dos);
					
					// String
				
						writeString(this.ovlbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ovlaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.ovldatumingangonderzoek,dos);
					
					// String
				
						writeString(this.ovldatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.ovldatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovlingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.ovlingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ovldatumvanopneming,dos);
					
					// String
				
						writeString(this.ovldatumvanopnemingindicator,dos);
					
					// java.util.Date
				
						writeDate(this.insdatumingangblokkeringpl,dos);
					
					// String
				
						writeString(this.insdatumingangblokkeringplindicator,dos);
					
					// java.util.Date
				
						writeDate(this.insdatumopschortingbijhouding,dos);
					
					// String
				
						writeString(this.insdatumopschortingbijhoudingindicator,dos);
					
					// String
				
						writeString(this.insomschrijvingredenopschortingbijhouding,dos);
					
					// java.util.Date
				
						writeDate(this.insdatumeersteinschrijvinggba,dos);
					
					// String
				
						writeString(this.insdatumeersteinschrijvingindicator,dos);
					
					// String
				
						writeString(this.insgemeentewaarpkzichbevindtcode,dos);
					
					// String
				
						writeString(this.insgemeentewaarpkzichbevindtomschrijving,dos);
					
					// String
				
						writeString(this.insindicatiegeheim,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.insversienummer);
					
					// String
				
						writeString(this.insdatumtijdstempel,dos);
					
					// String
				
						writeString(this.inspkgegevensvolledigmeegeconverteerd,dos);
					
					// String
				
						writeString(this.vblgemeentevaninschrijvingcode,dos);
					
					// String
				
						writeString(this.vblgemeentevaninschrijvingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatuminschrijving,dos);
					
					// String
				
						writeString(this.vbldatuminschrijvingindicator,dos);
					
					// String
				
						writeString(this.vblfunctieadres,dos);
					
					// String
				
						writeString(this.vblgemeentedeel,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumaanvangadreshouding,dos);
					
					// String
				
						writeString(this.vbldatumaanvangadreshoudingindicator,dos);
					
					// String
				
						writeString(this.vblstraatnaam,dos);
					
					// String
				
						writeString(this.vblnaamopenbareruimte,dos);
					
					// String
				
						writeString(this.vbladresopgemaakt,dos);
					
					// String
				
						writeString(this.vblwoonplaatsopgemaakt,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhuisnummer);
					
					// String
				
						writeString(this.vblhuisletter,dos);
					
					// String
				
						writeString(this.vblhuisnummertoevoeging,dos);
					
					// String
				
						writeString(this.vblaanduidingbijhuisnummer,dos);
					
					// String
				
						writeString(this.vblpostcode,dos);
					
					// String
				
						writeString(this.vblwoonplaatsnaam,dos);
					
					// String
				
						writeString(this.vblidentificatiecodeverblijfplaats,dos);
					
					// String
				
						writeString(this.vblidentificatiecodenummeraanduiding,dos);
					
					// String
				
						writeString(this.vbllocatiebeschrijving,dos);
					
					// String
				
						writeString(this.vbllandadresbuitenlandcode,dos);
					
					// String
				
						writeString(this.vbllandadresbuitenlandomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumaanvangadresbuitenland,dos);
					
					// String
				
						writeString(this.vbldatumaanvangadresbuitenlandindicator,dos);
					
					// String
				
						writeString(this.vblregel1adresbuitenland,dos);
					
					// String
				
						writeString(this.vblregel2adresbuitenland,dos);
					
					// String
				
						writeString(this.vblregel3adresbuitenland,dos);
					
					// String
				
						writeString(this.vbllandvanwaaringeschrevencode,dos);
					
					// String
				
						writeString(this.vbllandvanwaaringeschrevenomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumvestiginginnederland,dos);
					
					// String
				
						writeString(this.vbldatumvestiginginnederlandindicator,dos);
					
					// String
				
						writeString(this.vblomschrijvingvanaangifteadreshouding,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblindicatiedocument);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vbldatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vbldatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vbldatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vblingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbldatumvanopneming,dos);
					
					// String
				
						writeString(this.vbldatumvanopnemingindicator,dos);
					
					// String
				
						writeString(this.vblsoortpandcode,dos);
					
					// String
				
						writeString(this.vblsoortpandomschrijving,dos);
					
					// String
				
						writeString(this.vblwijkcode,dos);
					
					// String
				
						writeString(this.vblwijkomschrijving,dos);
					
					// String
				
						writeString(this.vblplanalogischewijkcode,dos);
					
					// String
				
						writeString(this.vblplanalogischewijkomschrijving,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblanummerhoofdbewoner);
					
					// String
				
						writeString(this.vbtaanduidingverblijfstitelcode,dos);
					
					// String
				
						writeString(this.vbtverblijfstitelvervallen,dos);
					
					// String
				
						writeString(this.vbtaanduidingverblijfstitelomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vbtdatumeindeverblijfstitel,dos);
					
					// String
				
						writeString(this.vbtdatumeindeverblijfstitelindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtingangsdatumverblijfstitel,dos);
					
					// String
				
						writeString(this.vbtingangsdatumverblijfstitelindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vbtaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vbtdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vbtdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vbtdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vbtingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vbtdatumvanopneming,dos);
					
					// String
				
						writeString(this.vbtdatumvanopnemingindicator,dos);
					
					// String
				
						writeString(this.gzvindicatiegezagminderjarige,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gzvindicatiecurateleregister);
					
					// String
				
						writeString(this.gzvgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.gzvgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.gzvdatumdocument,dos);
					
					// String
				
						writeString(this.gzvdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.gzvbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.gzvaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.gzvdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.gzvdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.gzvdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.gzvingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.gzvdatumvanopneming,dos);
					
					// String
				
						writeString(this.gzvdatumvanopnemingindicator,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ksraanduidingeuropeeskiesrecht);
					
					// java.util.Date
				
						writeDate(this.ksrdatumverzoekofmededelingeuropeeskiesrecht,dos);
					
					// String
				
						writeString(this.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator,dos);
					
					// java.util.Date
				
						writeDate(this.ksreinddatumuitsluitingeuropeeskiesrecht,dos);
					
					// String
				
						writeString(this.ksreinddatumuitsluitingeuropeeskiesrechtindicator,dos);
					
					// String
				
						writeString(this.ksraanduidinguitgeslotenkiesrecht,dos);
					
					// java.util.Date
				
						writeDate(this.ksreinddatumuitsluitingkiesrecht,dos);
					
					// String
				
						writeString(this.ksreinddatumuitsluitingkiesrechtindicator,dos);
					
					// String
				
						writeString(this.ksrgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.ksrgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.ksrdatumdocument,dos);
					
					// String
				
						writeString(this.ksrdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.ksrbeschrijvingdocument,dos);
					
					// String
				
						writeString(this.vwsgemeentevaninschrijvingcode,dos);
					
					// String
				
						writeString(this.vwsgemeentevaninschrijvingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vwsdatuminschrijving,dos);
					
					// String
				
						writeString(this.vwsdatuminschrijvingindicator,dos);
					
					// String
				
						writeString(this.vwsindicatiegeheim,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",prsburgerservicenummer="+String.valueOf(prsburgerservicenummer));
		sb.append(",prsvoornamen="+prsvoornamen);
		sb.append(",prseerstevoornaam="+prseerstevoornaam);
		sb.append(",prsvoorletters="+prsvoorletters);
		sb.append(",prsadellijketitelcode="+prsadellijketitelcode);
		sb.append(",prsadellijketitelomschrijving="+prsadellijketitelomschrijving);
		sb.append(",prsvoorvoegselgeslachtsnaam="+prsvoorvoegselgeslachtsnaam);
		sb.append(",prsgeslachtsnaam="+prsgeslachtsnaam);
		sb.append(",prsnaamopgemaakt="+prsnaamopgemaakt);
		sb.append(",prsgeboortedatum="+String.valueOf(prsgeboortedatum));
		sb.append(",prsgeboortedatumindicator="+prsgeboortedatumindicator);
		sb.append(",prsgeboorteplaatscode="+prsgeboorteplaatscode);
		sb.append(",prsgeboorteplaatsomschrijving="+prsgeboorteplaatsomschrijving);
		sb.append(",prsgeboortelandcode="+prsgeboortelandcode);
		sb.append(",prsgeboortelandomschrijving="+prsgeboortelandomschrijving);
		sb.append(",prsgeslachtsaanduidingcode="+prsgeslachtsaanduidingcode);
		sb.append(",prsgeslachtsaanduidingomschrijving="+prsgeslachtsaanduidingomschrijving);
		sb.append(",prsvoriganummer="+String.valueOf(prsvoriganummer));
		sb.append(",prsvolgendanummer="+String.valueOf(prsvolgendanummer));
		sb.append(",prsaanduidingnaamgebruik="+prsaanduidingnaamgebruik);
		sb.append(",prsregistergemeenteaktecode="+prsregistergemeenteaktecode);
		sb.append(",prsregistergemeenteakteomschrijving="+prsregistergemeenteakteomschrijving);
		sb.append(",prsaktenummer="+prsaktenummer);
		sb.append(",prsgemeentedocumentcode="+prsgemeentedocumentcode);
		sb.append(",prsgemeentedocumentomschrijving="+prsgemeentedocumentomschrijving);
		sb.append(",prsdatumdocument="+String.valueOf(prsdatumdocument));
		sb.append(",prsdatumdocumentindicator="+prsdatumdocumentindicator);
		sb.append(",prsbeschrijvingdocument="+prsbeschrijvingdocument);
		sb.append(",prsaanduidinggegevensonderzoek="+String.valueOf(prsaanduidinggegevensonderzoek));
		sb.append(",prsdatumingangonderzoek="+String.valueOf(prsdatumingangonderzoek));
		sb.append(",prsdatumingangonderzoekindicator="+prsdatumingangonderzoekindicator);
		sb.append(",prsdatumeindeonderzoek="+String.valueOf(prsdatumeindeonderzoek));
		sb.append(",prsdatumeindeonderzoekindicator="+prsdatumeindeonderzoekindicator);
		sb.append(",prsingangsdatumgeldigheid="+String.valueOf(prsingangsdatumgeldigheid));
		sb.append(",prsingangsdatumgeldigheidindicator="+prsingangsdatumgeldigheidindicator);
		sb.append(",prsdatumvanopneming="+String.valueOf(prsdatumvanopneming));
		sb.append(",prsdatumvanopnemingindicator="+prsdatumvanopnemingindicator);
		sb.append(",prsstatuspersoon="+String.valueOf(prsstatuspersoon));
		sb.append(",prsrijkskodenationaliteit="+String.valueOf(prsrijkskodenationaliteit));
		sb.append(",prsgezinsverhouding="+String.valueOf(prsgezinsverhouding));
		sb.append(",prsgezinssterkte="+String.valueOf(prsgezinssterkte));
		sb.append(",prsanummergezinshoofd="+String.valueOf(prsanummergezinshoofd));
		sb.append(",prsburgerlijkestaat="+prsburgerlijkestaat);
		sb.append(",prsnaamswijzigingindicatie="+prsnaamswijzigingindicatie);
		sb.append(",prsdatumadreshoudingaaneengesloten="+String.valueOf(prsdatumadreshoudingaaneengesloten));
		sb.append(",prsdatumadreshoudingaaneengeslotenindicator="+prsdatumadreshoudingaaneengeslotenindicator);
		sb.append(",ou1anummer="+String.valueOf(ou1anummer));
		sb.append(",ou1burgerservicenummer="+String.valueOf(ou1burgerservicenummer));
		sb.append(",ou1voornamen="+ou1voornamen);
		sb.append(",ou1voorletters="+ou1voorletters);
		sb.append(",ou1adellijketitelcode="+ou1adellijketitelcode);
		sb.append(",ou1adellijketitelomschrijving="+ou1adellijketitelomschrijving);
		sb.append(",ou1voorvoegselgeslachtsnaam="+ou1voorvoegselgeslachtsnaam);
		sb.append(",ou1geslachtsnaam="+ou1geslachtsnaam);
		sb.append(",ou1naamopgemaakt="+ou1naamopgemaakt);
		sb.append(",ou1geboortedatum="+String.valueOf(ou1geboortedatum));
		sb.append(",ou1geboortedatumindicator="+ou1geboortedatumindicator);
		sb.append(",ou1geboorteplaatscode="+ou1geboorteplaatscode);
		sb.append(",ou1geboorteplaatsomschrijving="+ou1geboorteplaatsomschrijving);
		sb.append(",ou1geboortelandcode="+ou1geboortelandcode);
		sb.append(",ou1geboortelandomschrijving="+ou1geboortelandomschrijving);
		sb.append(",ou1geslachtsaanduidingcode="+ou1geslachtsaanduidingcode);
		sb.append(",ou1geslachtsaanduidingomschrijving="+ou1geslachtsaanduidingomschrijving);
		sb.append(",ou1datumingangfamilierechtelijkebetrekking="+String.valueOf(ou1datumingangfamilierechtelijkebetrekking));
		sb.append(",ou1datumingangfamilierechtelijkebetrekkingindicator="+ou1datumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou1registergemeenteaktecode="+ou1registergemeenteaktecode);
		sb.append(",ou1registergemeenteakteomschrijving="+ou1registergemeenteakteomschrijving);
		sb.append(",ou1aktenummer="+ou1aktenummer);
		sb.append(",ou1gemeentedocumentcode="+ou1gemeentedocumentcode);
		sb.append(",ou1gemeentedocumentomschrijving="+ou1gemeentedocumentomschrijving);
		sb.append(",ou1datumdocument="+String.valueOf(ou1datumdocument));
		sb.append(",ou1datumdocumentindicator="+ou1datumdocumentindicator);
		sb.append(",ou1beschrijvingdocument="+ou1beschrijvingdocument);
		sb.append(",ou1aanduidinggegevensonderzoek="+String.valueOf(ou1aanduidinggegevensonderzoek));
		sb.append(",ou1datumingangonderzoek="+String.valueOf(ou1datumingangonderzoek));
		sb.append(",ou1datumingangonderzoekindicator="+ou1datumingangonderzoekindicator);
		sb.append(",ou1datumeindeonderzoek="+String.valueOf(ou1datumeindeonderzoek));
		sb.append(",ou1datumeindeonderzoekindicator="+ou1datumeindeonderzoekindicator);
		sb.append(",ou1ingangsdatumgeldigheid="+String.valueOf(ou1ingangsdatumgeldigheid));
		sb.append(",ou1ingangsdatumgeldigheidindicator="+ou1ingangsdatumgeldigheidindicator);
		sb.append(",ou1datumvanopneming="+String.valueOf(ou1datumvanopneming));
		sb.append(",ou1datumvanopnemingindicator="+ou1datumvanopnemingindicator);
		sb.append(",ou2anummer="+String.valueOf(ou2anummer));
		sb.append(",ou2burgerservicenummer="+String.valueOf(ou2burgerservicenummer));
		sb.append(",ou2voornamen="+ou2voornamen);
		sb.append(",ou2voorletters="+ou2voorletters);
		sb.append(",ou2adellijketitelcode="+ou2adellijketitelcode);
		sb.append(",ou2adellijketitelomschrijving="+ou2adellijketitelomschrijving);
		sb.append(",ou2voorvoegselgeslachtsnaam="+ou2voorvoegselgeslachtsnaam);
		sb.append(",ou2geslachtsnaam="+ou2geslachtsnaam);
		sb.append(",ou2naamopgemaakt="+ou2naamopgemaakt);
		sb.append(",ou2geboortedatum="+String.valueOf(ou2geboortedatum));
		sb.append(",ou2geboortedatumindicator="+ou2geboortedatumindicator);
		sb.append(",ou2geboorteplaatscode="+ou2geboorteplaatscode);
		sb.append(",ou2geboorteplaatsomschrijving="+ou2geboorteplaatsomschrijving);
		sb.append(",ou2geboortelandcode="+ou2geboortelandcode);
		sb.append(",ou2geboortelandomschrijving="+ou2geboortelandomschrijving);
		sb.append(",ou2geslachtsaanduidingcode="+ou2geslachtsaanduidingcode);
		sb.append(",ou2geslachtsaanduidingomschrijving="+ou2geslachtsaanduidingomschrijving);
		sb.append(",ou2datumingangfamilierechtelijkebetrekking="+String.valueOf(ou2datumingangfamilierechtelijkebetrekking));
		sb.append(",ou2datumingangfamilierechtelijkebetrekkingindicator="+ou2datumingangfamilierechtelijkebetrekkingindicator);
		sb.append(",ou2registergemeenteaktecode="+ou2registergemeenteaktecode);
		sb.append(",ou2registergemeenteakteomschrijving="+ou2registergemeenteakteomschrijving);
		sb.append(",ou2aktenummer="+ou2aktenummer);
		sb.append(",ou2gemeentedocumentcode="+ou2gemeentedocumentcode);
		sb.append(",ou2gemeentedocumentomschrijving="+ou2gemeentedocumentomschrijving);
		sb.append(",ou2datumdocument="+String.valueOf(ou2datumdocument));
		sb.append(",ou2datumdocumentindicator="+ou2datumdocumentindicator);
		sb.append(",ou2beschrijvingdocument="+ou2beschrijvingdocument);
		sb.append(",ou2aanduidinggegevensonderzoek="+String.valueOf(ou2aanduidinggegevensonderzoek));
		sb.append(",ou2datumingangonderzoek="+String.valueOf(ou2datumingangonderzoek));
		sb.append(",ou2datumingangonderzoekindicator="+ou2datumingangonderzoekindicator);
		sb.append(",ou2datumeindeonderzoek="+String.valueOf(ou2datumeindeonderzoek));
		sb.append(",ou2datumeindeonderzoekindicator="+ou2datumeindeonderzoekindicator);
		sb.append(",ou2ingangsdatumgeldigheid="+String.valueOf(ou2ingangsdatumgeldigheid));
		sb.append(",ou2ingangsdatumgeldigheidindicator="+ou2ingangsdatumgeldigheidindicator);
		sb.append(",ou2datumvanopneming="+String.valueOf(ou2datumvanopneming));
		sb.append(",ou2datumvanopnemingindicator="+ou2datumvanopnemingindicator);
		sb.append(",ovldatumoverlijden="+String.valueOf(ovldatumoverlijden));
		sb.append(",ovldatumoverlijdenindicator="+ovldatumoverlijdenindicator);
		sb.append(",ovlplaatsoverlijdencode="+ovlplaatsoverlijdencode);
		sb.append(",ovlplaatsoverlijdenomschrijving="+ovlplaatsoverlijdenomschrijving);
		sb.append(",ovllandoverlijdencode="+ovllandoverlijdencode);
		sb.append(",ovllandoverlijdenomschrijving="+ovllandoverlijdenomschrijving);
		sb.append(",ovlregistergemeenteaktecode="+ovlregistergemeenteaktecode);
		sb.append(",ovlregistergemeenteakteomschrijving="+ovlregistergemeenteakteomschrijving);
		sb.append(",ovlaktenummer="+ovlaktenummer);
		sb.append(",ovlgemeentedocumentcode="+ovlgemeentedocumentcode);
		sb.append(",ovlgemeentedocumentomschrijving="+ovlgemeentedocumentomschrijving);
		sb.append(",ovldatumdocument="+String.valueOf(ovldatumdocument));
		sb.append(",ovldatumdocumentindicator="+ovldatumdocumentindicator);
		sb.append(",ovlbeschrijvingdocument="+ovlbeschrijvingdocument);
		sb.append(",ovlaanduidinggegevensonderzoek="+String.valueOf(ovlaanduidinggegevensonderzoek));
		sb.append(",ovldatumingangonderzoek="+String.valueOf(ovldatumingangonderzoek));
		sb.append(",ovldatumingangonderzoekindicator="+ovldatumingangonderzoekindicator);
		sb.append(",ovldatumeindeonderzoek="+String.valueOf(ovldatumeindeonderzoek));
		sb.append(",ovldatumeindeonderzoekindicator="+ovldatumeindeonderzoekindicator);
		sb.append(",ovlingangsdatumgeldigheid="+String.valueOf(ovlingangsdatumgeldigheid));
		sb.append(",ovlingangsdatumgeldigheidindicator="+ovlingangsdatumgeldigheidindicator);
		sb.append(",ovldatumvanopneming="+String.valueOf(ovldatumvanopneming));
		sb.append(",ovldatumvanopnemingindicator="+ovldatumvanopnemingindicator);
		sb.append(",insdatumingangblokkeringpl="+String.valueOf(insdatumingangblokkeringpl));
		sb.append(",insdatumingangblokkeringplindicator="+insdatumingangblokkeringplindicator);
		sb.append(",insdatumopschortingbijhouding="+String.valueOf(insdatumopschortingbijhouding));
		sb.append(",insdatumopschortingbijhoudingindicator="+insdatumopschortingbijhoudingindicator);
		sb.append(",insomschrijvingredenopschortingbijhouding="+insomschrijvingredenopschortingbijhouding);
		sb.append(",insdatumeersteinschrijvinggba="+String.valueOf(insdatumeersteinschrijvinggba));
		sb.append(",insdatumeersteinschrijvingindicator="+insdatumeersteinschrijvingindicator);
		sb.append(",insgemeentewaarpkzichbevindtcode="+insgemeentewaarpkzichbevindtcode);
		sb.append(",insgemeentewaarpkzichbevindtomschrijving="+insgemeentewaarpkzichbevindtomschrijving);
		sb.append(",insindicatiegeheim="+insindicatiegeheim);
		sb.append(",insversienummer="+String.valueOf(insversienummer));
		sb.append(",insdatumtijdstempel="+insdatumtijdstempel);
		sb.append(",inspkgegevensvolledigmeegeconverteerd="+inspkgegevensvolledigmeegeconverteerd);
		sb.append(",vblgemeentevaninschrijvingcode="+vblgemeentevaninschrijvingcode);
		sb.append(",vblgemeentevaninschrijvingomschrijving="+vblgemeentevaninschrijvingomschrijving);
		sb.append(",vbldatuminschrijving="+String.valueOf(vbldatuminschrijving));
		sb.append(",vbldatuminschrijvingindicator="+vbldatuminschrijvingindicator);
		sb.append(",vblfunctieadres="+vblfunctieadres);
		sb.append(",vblgemeentedeel="+vblgemeentedeel);
		sb.append(",vbldatumaanvangadreshouding="+String.valueOf(vbldatumaanvangadreshouding));
		sb.append(",vbldatumaanvangadreshoudingindicator="+vbldatumaanvangadreshoudingindicator);
		sb.append(",vblstraatnaam="+vblstraatnaam);
		sb.append(",vblnaamopenbareruimte="+vblnaamopenbareruimte);
		sb.append(",vbladresopgemaakt="+vbladresopgemaakt);
		sb.append(",vblwoonplaatsopgemaakt="+vblwoonplaatsopgemaakt);
		sb.append(",vblhuisnummer="+String.valueOf(vblhuisnummer));
		sb.append(",vblhuisletter="+vblhuisletter);
		sb.append(",vblhuisnummertoevoeging="+vblhuisnummertoevoeging);
		sb.append(",vblaanduidingbijhuisnummer="+vblaanduidingbijhuisnummer);
		sb.append(",vblpostcode="+vblpostcode);
		sb.append(",vblwoonplaatsnaam="+vblwoonplaatsnaam);
		sb.append(",vblidentificatiecodeverblijfplaats="+vblidentificatiecodeverblijfplaats);
		sb.append(",vblidentificatiecodenummeraanduiding="+vblidentificatiecodenummeraanduiding);
		sb.append(",vbllocatiebeschrijving="+vbllocatiebeschrijving);
		sb.append(",vbllandadresbuitenlandcode="+vbllandadresbuitenlandcode);
		sb.append(",vbllandadresbuitenlandomschrijving="+vbllandadresbuitenlandomschrijving);
		sb.append(",vbldatumaanvangadresbuitenland="+String.valueOf(vbldatumaanvangadresbuitenland));
		sb.append(",vbldatumaanvangadresbuitenlandindicator="+vbldatumaanvangadresbuitenlandindicator);
		sb.append(",vblregel1adresbuitenland="+vblregel1adresbuitenland);
		sb.append(",vblregel2adresbuitenland="+vblregel2adresbuitenland);
		sb.append(",vblregel3adresbuitenland="+vblregel3adresbuitenland);
		sb.append(",vbllandvanwaaringeschrevencode="+vbllandvanwaaringeschrevencode);
		sb.append(",vbllandvanwaaringeschrevenomschrijving="+vbllandvanwaaringeschrevenomschrijving);
		sb.append(",vbldatumvestiginginnederland="+String.valueOf(vbldatumvestiginginnederland));
		sb.append(",vbldatumvestiginginnederlandindicator="+vbldatumvestiginginnederlandindicator);
		sb.append(",vblomschrijvingvanaangifteadreshouding="+vblomschrijvingvanaangifteadreshouding);
		sb.append(",vblindicatiedocument="+String.valueOf(vblindicatiedocument));
		sb.append(",vblaanduidinggegevensonderzoek="+String.valueOf(vblaanduidinggegevensonderzoek));
		sb.append(",vbldatumingangonderzoek="+String.valueOf(vbldatumingangonderzoek));
		sb.append(",vbldatumingangonderzoekindicator="+vbldatumingangonderzoekindicator);
		sb.append(",vbldatumeindeonderzoek="+String.valueOf(vbldatumeindeonderzoek));
		sb.append(",vbldatumeindeonderzoekindicator="+vbldatumeindeonderzoekindicator);
		sb.append(",vblingangsdatumgeldigheid="+String.valueOf(vblingangsdatumgeldigheid));
		sb.append(",vblingangsdatumgeldigheidindicator="+vblingangsdatumgeldigheidindicator);
		sb.append(",vbldatumvanopneming="+String.valueOf(vbldatumvanopneming));
		sb.append(",vbldatumvanopnemingindicator="+vbldatumvanopnemingindicator);
		sb.append(",vblsoortpandcode="+vblsoortpandcode);
		sb.append(",vblsoortpandomschrijving="+vblsoortpandomschrijving);
		sb.append(",vblwijkcode="+vblwijkcode);
		sb.append(",vblwijkomschrijving="+vblwijkomschrijving);
		sb.append(",vblplanalogischewijkcode="+vblplanalogischewijkcode);
		sb.append(",vblplanalogischewijkomschrijving="+vblplanalogischewijkomschrijving);
		sb.append(",vblanummerhoofdbewoner="+String.valueOf(vblanummerhoofdbewoner));
		sb.append(",vbtaanduidingverblijfstitelcode="+vbtaanduidingverblijfstitelcode);
		sb.append(",vbtverblijfstitelvervallen="+vbtverblijfstitelvervallen);
		sb.append(",vbtaanduidingverblijfstitelomschrijving="+vbtaanduidingverblijfstitelomschrijving);
		sb.append(",vbtdatumeindeverblijfstitel="+String.valueOf(vbtdatumeindeverblijfstitel));
		sb.append(",vbtdatumeindeverblijfstitelindicator="+vbtdatumeindeverblijfstitelindicator);
		sb.append(",vbtingangsdatumverblijfstitel="+String.valueOf(vbtingangsdatumverblijfstitel));
		sb.append(",vbtingangsdatumverblijfstitelindicator="+vbtingangsdatumverblijfstitelindicator);
		sb.append(",vbtaanduidinggegevensonderzoek="+String.valueOf(vbtaanduidinggegevensonderzoek));
		sb.append(",vbtdatumingangonderzoek="+String.valueOf(vbtdatumingangonderzoek));
		sb.append(",vbtdatumingangonderzoekindicator="+vbtdatumingangonderzoekindicator);
		sb.append(",vbtdatumeindeonderzoek="+String.valueOf(vbtdatumeindeonderzoek));
		sb.append(",vbtdatumeindeonderzoekindicator="+vbtdatumeindeonderzoekindicator);
		sb.append(",vbtingangsdatumgeldigheid="+String.valueOf(vbtingangsdatumgeldigheid));
		sb.append(",vbtingangsdatumgeldigheidindicator="+vbtingangsdatumgeldigheidindicator);
		sb.append(",vbtdatumvanopneming="+String.valueOf(vbtdatumvanopneming));
		sb.append(",vbtdatumvanopnemingindicator="+vbtdatumvanopnemingindicator);
		sb.append(",gzvindicatiegezagminderjarige="+gzvindicatiegezagminderjarige);
		sb.append(",gzvindicatiecurateleregister="+String.valueOf(gzvindicatiecurateleregister));
		sb.append(",gzvgemeentedocumentcode="+gzvgemeentedocumentcode);
		sb.append(",gzvgemeentedocumentomschrijving="+gzvgemeentedocumentomschrijving);
		sb.append(",gzvdatumdocument="+String.valueOf(gzvdatumdocument));
		sb.append(",gzvdatumdocumentindicator="+gzvdatumdocumentindicator);
		sb.append(",gzvbeschrijvingdocument="+gzvbeschrijvingdocument);
		sb.append(",gzvaanduidinggegevensonderzoek="+String.valueOf(gzvaanduidinggegevensonderzoek));
		sb.append(",gzvdatumingangonderzoek="+String.valueOf(gzvdatumingangonderzoek));
		sb.append(",gzvdatumingangonderzoekindicator="+gzvdatumingangonderzoekindicator);
		sb.append(",gzvdatumeindeonderzoek="+String.valueOf(gzvdatumeindeonderzoek));
		sb.append(",gzvdatumeindeonderzoekindicator="+gzvdatumeindeonderzoekindicator);
		sb.append(",gzvingangsdatumgeldigheid="+String.valueOf(gzvingangsdatumgeldigheid));
		sb.append(",gzvingangsdatumgeldigheidindicator="+gzvingangsdatumgeldigheidindicator);
		sb.append(",gzvdatumvanopneming="+String.valueOf(gzvdatumvanopneming));
		sb.append(",gzvdatumvanopnemingindicator="+gzvdatumvanopnemingindicator);
		sb.append(",ksraanduidingeuropeeskiesrecht="+String.valueOf(ksraanduidingeuropeeskiesrecht));
		sb.append(",ksrdatumverzoekofmededelingeuropeeskiesrecht="+String.valueOf(ksrdatumverzoekofmededelingeuropeeskiesrecht));
		sb.append(",ksrdatumverzoekofmededelingeuropeeskiesrechtindicator="+ksrdatumverzoekofmededelingeuropeeskiesrechtindicator);
		sb.append(",ksreinddatumuitsluitingeuropeeskiesrecht="+String.valueOf(ksreinddatumuitsluitingeuropeeskiesrecht));
		sb.append(",ksreinddatumuitsluitingeuropeeskiesrechtindicator="+ksreinddatumuitsluitingeuropeeskiesrechtindicator);
		sb.append(",ksraanduidinguitgeslotenkiesrecht="+ksraanduidinguitgeslotenkiesrecht);
		sb.append(",ksreinddatumuitsluitingkiesrecht="+String.valueOf(ksreinddatumuitsluitingkiesrecht));
		sb.append(",ksreinddatumuitsluitingkiesrechtindicator="+ksreinddatumuitsluitingkiesrechtindicator);
		sb.append(",ksrgemeentedocumentcode="+ksrgemeentedocumentcode);
		sb.append(",ksrgemeentedocumentomschrijving="+ksrgemeentedocumentomschrijving);
		sb.append(",ksrdatumdocument="+String.valueOf(ksrdatumdocument));
		sb.append(",ksrdatumdocumentindicator="+ksrdatumdocumentindicator);
		sb.append(",ksrbeschrijvingdocument="+ksrbeschrijvingdocument);
		sb.append(",vwsgemeentevaninschrijvingcode="+vwsgemeentevaninschrijvingcode);
		sb.append(",vwsgemeentevaninschrijvingomschrijving="+vwsgemeentevaninschrijvingomschrijving);
		sb.append(",vwsdatuminschrijving="+String.valueOf(vwsdatuminschrijving));
		sb.append(",vwsdatuminschrijvingindicator="+vwsdatuminschrijvingindicator);
		sb.append(",vwsindicatiegeheim="+vwsindicatiegeheim);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_persoonStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_persoonStruct implements routines.system.IPersistableRow<cipers_persoonStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal PRSBURGERSERVICENUMMER;

				public BigDecimal getPRSBURGERSERVICENUMMER () {
					return this.PRSBURGERSERVICENUMMER;
				}
				
			    public String PRSVOORNAMEN;

				public String getPRSVOORNAMEN () {
					return this.PRSVOORNAMEN;
				}
				
			    public String PRSEERSTEVOORNAAM;

				public String getPRSEERSTEVOORNAAM () {
					return this.PRSEERSTEVOORNAAM;
				}
				
			    public String PRSVOORLETTERS;

				public String getPRSVOORLETTERS () {
					return this.PRSVOORLETTERS;
				}
				
			    public String PRSADELLIJKETITELCODE;

				public String getPRSADELLIJKETITELCODE () {
					return this.PRSADELLIJKETITELCODE;
				}
				
			    public String PRSVOORVOEGSELGESLACHTSNAAM;

				public String getPRSVOORVOEGSELGESLACHTSNAAM () {
					return this.PRSVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String PRSGESLACHTSNAAM;

				public String getPRSGESLACHTSNAAM () {
					return this.PRSGESLACHTSNAAM;
				}
				
			    public String PRSNAAMOPGEMAAKT;

				public String getPRSNAAMOPGEMAAKT () {
					return this.PRSNAAMOPGEMAAKT;
				}
				
			    public java.util.Date PRSGEBOORTEDATUM;

				public java.util.Date getPRSGEBOORTEDATUM () {
					return this.PRSGEBOORTEDATUM;
				}
				
			    public String PRSGEBOORTEDATUMINDICATOR;

				public String getPRSGEBOORTEDATUMINDICATOR () {
					return this.PRSGEBOORTEDATUMINDICATOR;
				}
				
			    public String PRSGEBOORTEPLAATSCODE;

				public String getPRSGEBOORTEPLAATSCODE () {
					return this.PRSGEBOORTEPLAATSCODE;
				}
				
			    public String PRSGEBOORTEPLAATSOMSCHRIJVING;

				public String getPRSGEBOORTEPLAATSOMSCHRIJVING () {
					return this.PRSGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String PRSGEBOORTELANDCODE;

				public String getPRSGEBOORTELANDCODE () {
					return this.PRSGEBOORTELANDCODE;
				}
				
			    public String PRSGESLACHTSAANDUIDINGCODE;

				public String getPRSGESLACHTSAANDUIDINGCODE () {
					return this.PRSGESLACHTSAANDUIDINGCODE;
				}
				
			    public BigDecimal PRSVORIGANUMMER;

				public BigDecimal getPRSVORIGANUMMER () {
					return this.PRSVORIGANUMMER;
				}
				
			    public BigDecimal PRSVOLGENDANUMMER;

				public BigDecimal getPRSVOLGENDANUMMER () {
					return this.PRSVOLGENDANUMMER;
				}
				
			    public String PRSAANDUIDINGNAAMGEBRUIK;

				public String getPRSAANDUIDINGNAAMGEBRUIK () {
					return this.PRSAANDUIDINGNAAMGEBRUIK;
				}
				
			    public String PRSREGISTERGEMEENTEAKTECODE;

				public String getPRSREGISTERGEMEENTEAKTECODE () {
					return this.PRSREGISTERGEMEENTEAKTECODE;
				}
				
			    public String PRSAKTENUMMER;

				public String getPRSAKTENUMMER () {
					return this.PRSAKTENUMMER;
				}
				
			    public String PRSGEMEENTEDOCUMENTCODE;

				public String getPRSGEMEENTEDOCUMENTCODE () {
					return this.PRSGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date PRSDATUMDOCUMENT;

				public java.util.Date getPRSDATUMDOCUMENT () {
					return this.PRSDATUMDOCUMENT;
				}
				
			    public String PRSDATUMDOCUMENTINDICATOR;

				public String getPRSDATUMDOCUMENTINDICATOR () {
					return this.PRSDATUMDOCUMENTINDICATOR;
				}
				
			    public String PRSBESCHRIJVINGDOCUMENT;

				public String getPRSBESCHRIJVINGDOCUMENT () {
					return this.PRSBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal PRSAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getPRSAANDUIDINGGEGEVENSONDERZOEK () {
					return this.PRSAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date PRSDATUMINGANGONDERZOEK;

				public java.util.Date getPRSDATUMINGANGONDERZOEK () {
					return this.PRSDATUMINGANGONDERZOEK;
				}
				
			    public String PRSDATUMINGANGONDERZOEKINDICATOR;

				public String getPRSDATUMINGANGONDERZOEKINDICATOR () {
					return this.PRSDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSDATUMEINDEONDERZOEK;

				public java.util.Date getPRSDATUMEINDEONDERZOEK () {
					return this.PRSDATUMEINDEONDERZOEK;
				}
				
			    public String PRSDATUMEINDEONDERZOEKINDICATOR;

				public String getPRSDATUMEINDEONDERZOEKINDICATOR () {
					return this.PRSDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSINGANGSDATUMGELDIGHEID;

				public java.util.Date getPRSINGANGSDATUMGELDIGHEID () {
					return this.PRSINGANGSDATUMGELDIGHEID;
				}
				
			    public String PRSINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getPRSINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.PRSINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date PRSDATUMVANOPNEMING;

				public java.util.Date getPRSDATUMVANOPNEMING () {
					return this.PRSDATUMVANOPNEMING;
				}
				
			    public String PRSDATUMVANOPNEMINGINDICATOR;

				public String getPRSDATUMVANOPNEMINGINDICATOR () {
					return this.PRSDATUMVANOPNEMINGINDICATOR;
				}
				
			    public BigDecimal PRSSTATUSPERSOON;

				public BigDecimal getPRSSTATUSPERSOON () {
					return this.PRSSTATUSPERSOON;
				}
				
			    public BigDecimal PRSRIJKSKODENATIONALITEIT;

				public BigDecimal getPRSRIJKSKODENATIONALITEIT () {
					return this.PRSRIJKSKODENATIONALITEIT;
				}
				
			    public BigDecimal PRSGEZINSVERHOUDING;

				public BigDecimal getPRSGEZINSVERHOUDING () {
					return this.PRSGEZINSVERHOUDING;
				}
				
			    public BigDecimal PRSGEZINSSTERKTE;

				public BigDecimal getPRSGEZINSSTERKTE () {
					return this.PRSGEZINSSTERKTE;
				}
				
			    public BigDecimal PRSANUMMERGEZINSHOOFD;

				public BigDecimal getPRSANUMMERGEZINSHOOFD () {
					return this.PRSANUMMERGEZINSHOOFD;
				}
				
			    public String PRSBURGERLIJKESTAAT;

				public String getPRSBURGERLIJKESTAAT () {
					return this.PRSBURGERLIJKESTAAT;
				}
				
			    public String PRSNAAMSWIJZIGINGINDICATIE;

				public String getPRSNAAMSWIJZIGINGINDICATIE () {
					return this.PRSNAAMSWIJZIGINGINDICATIE;
				}
				
			    public java.util.Date PRSDATUMADRESHOUDINGAANEENGESLOTEN;

				public java.util.Date getPRSDATUMADRESHOUDINGAANEENGESLOTEN () {
					return this.PRSDATUMADRESHOUDINGAANEENGESLOTEN;
				}
				
			    public String PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR;

				public String getPRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR () {
					return this.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR;
				}
				
			    public BigDecimal OU1ANUMMER;

				public BigDecimal getOU1ANUMMER () {
					return this.OU1ANUMMER;
				}
				
			    public BigDecimal OU1BURGERSERVICENUMMER;

				public BigDecimal getOU1BURGERSERVICENUMMER () {
					return this.OU1BURGERSERVICENUMMER;
				}
				
			    public String OU1VOORNAMEN;

				public String getOU1VOORNAMEN () {
					return this.OU1VOORNAMEN;
				}
				
			    public String OU1VOORLETTERS;

				public String getOU1VOORLETTERS () {
					return this.OU1VOORLETTERS;
				}
				
			    public String OU1ADELLIJKETITELCODE;

				public String getOU1ADELLIJKETITELCODE () {
					return this.OU1ADELLIJKETITELCODE;
				}
				
			    public String OU1VOORVOEGSELGESLACHTSNAAM;

				public String getOU1VOORVOEGSELGESLACHTSNAAM () {
					return this.OU1VOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String OU1GESLACHTSNAAM;

				public String getOU1GESLACHTSNAAM () {
					return this.OU1GESLACHTSNAAM;
				}
				
			    public String OU1NAAMOPGEMAAKT;

				public String getOU1NAAMOPGEMAAKT () {
					return this.OU1NAAMOPGEMAAKT;
				}
				
			    public java.util.Date OU1GEBOORTEDATUM;

				public java.util.Date getOU1GEBOORTEDATUM () {
					return this.OU1GEBOORTEDATUM;
				}
				
			    public String OU1GEBOORTEDATUMINDICATOR;

				public String getOU1GEBOORTEDATUMINDICATOR () {
					return this.OU1GEBOORTEDATUMINDICATOR;
				}
				
			    public String OU1GEBOORTEPLAATSCODE;

				public String getOU1GEBOORTEPLAATSCODE () {
					return this.OU1GEBOORTEPLAATSCODE;
				}
				
			    public String OU1GEBOORTEPLAATSOMSCHRIJVING;

				public String getOU1GEBOORTEPLAATSOMSCHRIJVING () {
					return this.OU1GEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String OU1GEBOORTELANDCODE;

				public String getOU1GEBOORTELANDCODE () {
					return this.OU1GEBOORTELANDCODE;
				}
				
			    public String OU1GESLACHTSAANDUIDINGCODE;

				public String getOU1GESLACHTSAANDUIDINGCODE () {
					return this.OU1GESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING;

				public java.util.Date getOU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING () {
					return this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING;
				}
				
			    public String OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;

				public String getOU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR () {
					return this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
				}
				
			    public String OU1REGISTERGEMEENTEAKTECODE;

				public String getOU1REGISTERGEMEENTEAKTECODE () {
					return this.OU1REGISTERGEMEENTEAKTECODE;
				}
				
			    public String OU1AKTENUMMER;

				public String getOU1AKTENUMMER () {
					return this.OU1AKTENUMMER;
				}
				
			    public String OU1GEMEENTEDOCUMENTCODE;

				public String getOU1GEMEENTEDOCUMENTCODE () {
					return this.OU1GEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OU1DATUMDOCUMENT;

				public java.util.Date getOU1DATUMDOCUMENT () {
					return this.OU1DATUMDOCUMENT;
				}
				
			    public String OU1DATUMDOCUMENTINDICATOR;

				public String getOU1DATUMDOCUMENTINDICATOR () {
					return this.OU1DATUMDOCUMENTINDICATOR;
				}
				
			    public String OU1BESCHRIJVINGDOCUMENT;

				public String getOU1BESCHRIJVINGDOCUMENT () {
					return this.OU1BESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OU1AANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOU1AANDUIDINGGEGEVENSONDERZOEK () {
					return this.OU1AANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OU1DATUMINGANGONDERZOEK;

				public java.util.Date getOU1DATUMINGANGONDERZOEK () {
					return this.OU1DATUMINGANGONDERZOEK;
				}
				
			    public String OU1DATUMINGANGONDERZOEKINDICATOR;

				public String getOU1DATUMINGANGONDERZOEKINDICATOR () {
					return this.OU1DATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1DATUMEINDEONDERZOEK;

				public java.util.Date getOU1DATUMEINDEONDERZOEK () {
					return this.OU1DATUMEINDEONDERZOEK;
				}
				
			    public String OU1DATUMEINDEONDERZOEKINDICATOR;

				public String getOU1DATUMEINDEONDERZOEKINDICATOR () {
					return this.OU1DATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1INGANGSDATUMGELDIGHEID;

				public java.util.Date getOU1INGANGSDATUMGELDIGHEID () {
					return this.OU1INGANGSDATUMGELDIGHEID;
				}
				
			    public String OU1INGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOU1INGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OU1INGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OU1DATUMVANOPNEMING;

				public java.util.Date getOU1DATUMVANOPNEMING () {
					return this.OU1DATUMVANOPNEMING;
				}
				
			    public String OU1DATUMVANOPNEMINGINDICATOR;

				public String getOU1DATUMVANOPNEMINGINDICATOR () {
					return this.OU1DATUMVANOPNEMINGINDICATOR;
				}
				
			    public BigDecimal OU2ANUMMER;

				public BigDecimal getOU2ANUMMER () {
					return this.OU2ANUMMER;
				}
				
			    public BigDecimal OU2BURGERSERVICENUMMER;

				public BigDecimal getOU2BURGERSERVICENUMMER () {
					return this.OU2BURGERSERVICENUMMER;
				}
				
			    public String OU2VOORNAMEN;

				public String getOU2VOORNAMEN () {
					return this.OU2VOORNAMEN;
				}
				
			    public String OU2VOORLETTERS;

				public String getOU2VOORLETTERS () {
					return this.OU2VOORLETTERS;
				}
				
			    public String OU2ADELLIJKETITELCODE;

				public String getOU2ADELLIJKETITELCODE () {
					return this.OU2ADELLIJKETITELCODE;
				}
				
			    public String OU2VOORVOEGSELGESLACHTSNAAM;

				public String getOU2VOORVOEGSELGESLACHTSNAAM () {
					return this.OU2VOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String OU2GESLACHTSNAAM;

				public String getOU2GESLACHTSNAAM () {
					return this.OU2GESLACHTSNAAM;
				}
				
			    public String OU2NAAMOPGEMAAKT;

				public String getOU2NAAMOPGEMAAKT () {
					return this.OU2NAAMOPGEMAAKT;
				}
				
			    public java.util.Date OU2GEBOORTEDATUM;

				public java.util.Date getOU2GEBOORTEDATUM () {
					return this.OU2GEBOORTEDATUM;
				}
				
			    public String OU2GEBOORTEDATUMINDICATOR;

				public String getOU2GEBOORTEDATUMINDICATOR () {
					return this.OU2GEBOORTEDATUMINDICATOR;
				}
				
			    public String OU2GEBOORTEPLAATSCODE;

				public String getOU2GEBOORTEPLAATSCODE () {
					return this.OU2GEBOORTEPLAATSCODE;
				}
				
			    public String OU2GEBOORTEPLAATSOMSCHRIJVING;

				public String getOU2GEBOORTEPLAATSOMSCHRIJVING () {
					return this.OU2GEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String OU2GEBOORTELANDCODE;

				public String getOU2GEBOORTELANDCODE () {
					return this.OU2GEBOORTELANDCODE;
				}
				
			    public String OU2GESLACHTSAANDUIDINGCODE;

				public String getOU2GESLACHTSAANDUIDINGCODE () {
					return this.OU2GESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING;

				public java.util.Date getOU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING () {
					return this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING;
				}
				
			    public String OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;

				public String getOU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR () {
					return this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
				}
				
			    public String OU2REGISTERGEMEENTEAKTECODE;

				public String getOU2REGISTERGEMEENTEAKTECODE () {
					return this.OU2REGISTERGEMEENTEAKTECODE;
				}
				
			    public String OU2AKTENUMMER;

				public String getOU2AKTENUMMER () {
					return this.OU2AKTENUMMER;
				}
				
			    public String OU2GEMEENTEDOCUMENTCODE;

				public String getOU2GEMEENTEDOCUMENTCODE () {
					return this.OU2GEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OU2DATUMDOCUMENT;

				public java.util.Date getOU2DATUMDOCUMENT () {
					return this.OU2DATUMDOCUMENT;
				}
				
			    public String OU2DATUMDOCUMENTINDICATOR;

				public String getOU2DATUMDOCUMENTINDICATOR () {
					return this.OU2DATUMDOCUMENTINDICATOR;
				}
				
			    public String OU2BESCHRIJVINGDOCUMENT;

				public String getOU2BESCHRIJVINGDOCUMENT () {
					return this.OU2BESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OU2AANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOU2AANDUIDINGGEGEVENSONDERZOEK () {
					return this.OU2AANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OU2DATUMINGANGONDERZOEK;

				public java.util.Date getOU2DATUMINGANGONDERZOEK () {
					return this.OU2DATUMINGANGONDERZOEK;
				}
				
			    public String OU2DATUMINGANGONDERZOEKINDICATOR;

				public String getOU2DATUMINGANGONDERZOEKINDICATOR () {
					return this.OU2DATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU2DATUMEINDEONDERZOEK;

				public java.util.Date getOU2DATUMEINDEONDERZOEK () {
					return this.OU2DATUMEINDEONDERZOEK;
				}
				
			    public String OU2DATUMEINDEONDERZOEKINDICATOR;

				public String getOU2DATUMEINDEONDERZOEKINDICATOR () {
					return this.OU2DATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU2INGANGSDATUMGELDIGHEID;

				public java.util.Date getOU2INGANGSDATUMGELDIGHEID () {
					return this.OU2INGANGSDATUMGELDIGHEID;
				}
				
			    public String OU2INGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOU2INGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OU2INGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OU2DATUMVANOPNEMING;

				public java.util.Date getOU2DATUMVANOPNEMING () {
					return this.OU2DATUMVANOPNEMING;
				}
				
			    public String OU2DATUMVANOPNEMINGINDICATOR;

				public String getOU2DATUMVANOPNEMINGINDICATOR () {
					return this.OU2DATUMVANOPNEMINGINDICATOR;
				}
				
			    public java.util.Date OVLDATUMOVERLIJDEN;

				public java.util.Date getOVLDATUMOVERLIJDEN () {
					return this.OVLDATUMOVERLIJDEN;
				}
				
			    public String OVLDATUMOVERLIJDENINDICATOR;

				public String getOVLDATUMOVERLIJDENINDICATOR () {
					return this.OVLDATUMOVERLIJDENINDICATOR;
				}
				
			    public String OVLPLAATSOVERLIJDENCODE;

				public String getOVLPLAATSOVERLIJDENCODE () {
					return this.OVLPLAATSOVERLIJDENCODE;
				}
				
			    public String OVLPLAATSOVERLIJDENOMSCHRIJVING;

				public String getOVLPLAATSOVERLIJDENOMSCHRIJVING () {
					return this.OVLPLAATSOVERLIJDENOMSCHRIJVING;
				}
				
			    public String OVLLANDOVERLIJDENCODE;

				public String getOVLLANDOVERLIJDENCODE () {
					return this.OVLLANDOVERLIJDENCODE;
				}
				
			    public String OVLREGISTERGEMEENTEAKTECODE;

				public String getOVLREGISTERGEMEENTEAKTECODE () {
					return this.OVLREGISTERGEMEENTEAKTECODE;
				}
				
			    public String OVLAKTENUMMER;

				public String getOVLAKTENUMMER () {
					return this.OVLAKTENUMMER;
				}
				
			    public String OVLGEMEENTEDOCUMENTCODE;

				public String getOVLGEMEENTEDOCUMENTCODE () {
					return this.OVLGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OVLDATUMDOCUMENT;

				public java.util.Date getOVLDATUMDOCUMENT () {
					return this.OVLDATUMDOCUMENT;
				}
				
			    public String OVLDATUMDOCUMENTINDICATOR;

				public String getOVLDATUMDOCUMENTINDICATOR () {
					return this.OVLDATUMDOCUMENTINDICATOR;
				}
				
			    public String OVLBESCHRIJVINGDOCUMENT;

				public String getOVLBESCHRIJVINGDOCUMENT () {
					return this.OVLBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OVLAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOVLAANDUIDINGGEGEVENSONDERZOEK () {
					return this.OVLAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OVLDATUMINGANGONDERZOEK;

				public java.util.Date getOVLDATUMINGANGONDERZOEK () {
					return this.OVLDATUMINGANGONDERZOEK;
				}
				
			    public String OVLDATUMINGANGONDERZOEKINDICATOR;

				public String getOVLDATUMINGANGONDERZOEKINDICATOR () {
					return this.OVLDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLDATUMEINDEONDERZOEK;

				public java.util.Date getOVLDATUMEINDEONDERZOEK () {
					return this.OVLDATUMEINDEONDERZOEK;
				}
				
			    public String OVLDATUMEINDEONDERZOEKINDICATOR;

				public String getOVLDATUMEINDEONDERZOEKINDICATOR () {
					return this.OVLDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLINGANGSDATUMGELDIGHEID;

				public java.util.Date getOVLINGANGSDATUMGELDIGHEID () {
					return this.OVLINGANGSDATUMGELDIGHEID;
				}
				
			    public String OVLINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOVLINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OVLINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OVLDATUMVANOPNEMING;

				public java.util.Date getOVLDATUMVANOPNEMING () {
					return this.OVLDATUMVANOPNEMING;
				}
				
			    public String OVLDATUMVANOPNEMINGINDICATOR;

				public String getOVLDATUMVANOPNEMINGINDICATOR () {
					return this.OVLDATUMVANOPNEMINGINDICATOR;
				}
				
			    public java.util.Date INSDATUMINGANGBLOKKERINGPL;

				public java.util.Date getINSDATUMINGANGBLOKKERINGPL () {
					return this.INSDATUMINGANGBLOKKERINGPL;
				}
				
			    public String INSDATUMINGANGBLOKKERINGPLINDICATOR;

				public String getINSDATUMINGANGBLOKKERINGPLINDICATOR () {
					return this.INSDATUMINGANGBLOKKERINGPLINDICATOR;
				}
				
			    public java.util.Date INSDATUMOPSCHORTINGBIJHOUDING;

				public java.util.Date getINSDATUMOPSCHORTINGBIJHOUDING () {
					return this.INSDATUMOPSCHORTINGBIJHOUDING;
				}
				
			    public String INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR;

				public String getINSDATUMOPSCHORTINGBIJHOUDINGINDICATOR () {
					return this.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR;
				}
				
			    public String INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING;

				public String getINSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING () {
					return this.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING;
				}
				
			    public java.util.Date INSDATUMEERSTEINSCHRIJVINGGBA;

				public java.util.Date getINSDATUMEERSTEINSCHRIJVINGGBA () {
					return this.INSDATUMEERSTEINSCHRIJVINGGBA;
				}
				
			    public String INSDATUMEERSTEINSCHRIJVINGINDICATOR;

				public String getINSDATUMEERSTEINSCHRIJVINGINDICATOR () {
					return this.INSDATUMEERSTEINSCHRIJVINGINDICATOR;
				}
				
			    public String INSGEMEENTEWAARPKZICHBEVINDTCODE;

				public String getINSGEMEENTEWAARPKZICHBEVINDTCODE () {
					return this.INSGEMEENTEWAARPKZICHBEVINDTCODE;
				}
				
			    public String INSINDICATIEGEHEIM;

				public String getINSINDICATIEGEHEIM () {
					return this.INSINDICATIEGEHEIM;
				}
				
			    public BigDecimal INSVERSIENUMMER;

				public BigDecimal getINSVERSIENUMMER () {
					return this.INSVERSIENUMMER;
				}
				
			    public String INSDATUMTIJDSTEMPEL;

				public String getINSDATUMTIJDSTEMPEL () {
					return this.INSDATUMTIJDSTEMPEL;
				}
				
			    public String INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD;

				public String getINSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD () {
					return this.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD;
				}
				
			    public String VBLGEMEENTEVANINSCHRIJVINGCODE;

				public String getVBLGEMEENTEVANINSCHRIJVINGCODE () {
					return this.VBLGEMEENTEVANINSCHRIJVINGCODE;
				}
				
			    public java.util.Date VBLDATUMINSCHRIJVING;

				public java.util.Date getVBLDATUMINSCHRIJVING () {
					return this.VBLDATUMINSCHRIJVING;
				}
				
			    public String VBLDATUMINSCHRIJVINGINDICATOR;

				public String getVBLDATUMINSCHRIJVINGINDICATOR () {
					return this.VBLDATUMINSCHRIJVINGINDICATOR;
				}
				
			    public String VBLFUNCTIEADRES;

				public String getVBLFUNCTIEADRES () {
					return this.VBLFUNCTIEADRES;
				}
				
			    public String VBLGEMEENTEDEEL;

				public String getVBLGEMEENTEDEEL () {
					return this.VBLGEMEENTEDEEL;
				}
				
			    public java.util.Date VBLDATUMAANVANGADRESHOUDING;

				public java.util.Date getVBLDATUMAANVANGADRESHOUDING () {
					return this.VBLDATUMAANVANGADRESHOUDING;
				}
				
			    public String VBLDATUMAANVANGADRESHOUDINGINDICATOR;

				public String getVBLDATUMAANVANGADRESHOUDINGINDICATOR () {
					return this.VBLDATUMAANVANGADRESHOUDINGINDICATOR;
				}
				
			    public String VBLSTRAATNAAM;

				public String getVBLSTRAATNAAM () {
					return this.VBLSTRAATNAAM;
				}
				
			    public String VBLNAAMOPENBARERUIMTE;

				public String getVBLNAAMOPENBARERUIMTE () {
					return this.VBLNAAMOPENBARERUIMTE;
				}
				
			    public String VBLADRESOPGEMAAKT;

				public String getVBLADRESOPGEMAAKT () {
					return this.VBLADRESOPGEMAAKT;
				}
				
			    public String VBLWOONPLAATSOPGEMAAKT;

				public String getVBLWOONPLAATSOPGEMAAKT () {
					return this.VBLWOONPLAATSOPGEMAAKT;
				}
				
			    public BigDecimal VBLHUISNUMMER;

				public BigDecimal getVBLHUISNUMMER () {
					return this.VBLHUISNUMMER;
				}
				
			    public String VBLHUISLETTER;

				public String getVBLHUISLETTER () {
					return this.VBLHUISLETTER;
				}
				
			    public String VBLHUISNUMMERTOEVOEGING;

				public String getVBLHUISNUMMERTOEVOEGING () {
					return this.VBLHUISNUMMERTOEVOEGING;
				}
				
			    public String VBLAANDUIDINGBIJHUISNUMMER;

				public String getVBLAANDUIDINGBIJHUISNUMMER () {
					return this.VBLAANDUIDINGBIJHUISNUMMER;
				}
				
			    public String VBLPOSTCODE;

				public String getVBLPOSTCODE () {
					return this.VBLPOSTCODE;
				}
				
			    public String VBLWOONPLAATSNAAM;

				public String getVBLWOONPLAATSNAAM () {
					return this.VBLWOONPLAATSNAAM;
				}
				
			    public String VBLIDENTIFICATIECODEVERBLIJFPLAATS;

				public String getVBLIDENTIFICATIECODEVERBLIJFPLAATS () {
					return this.VBLIDENTIFICATIECODEVERBLIJFPLAATS;
				}
				
			    public String VBLIDENTIFICATIECODENUMMERAANDUIDING;

				public String getVBLIDENTIFICATIECODENUMMERAANDUIDING () {
					return this.VBLIDENTIFICATIECODENUMMERAANDUIDING;
				}
				
			    public String VBLLOCATIEBESCHRIJVING;

				public String getVBLLOCATIEBESCHRIJVING () {
					return this.VBLLOCATIEBESCHRIJVING;
				}
				
			    public String VBLLANDADRESBUITENLANDCODE;

				public String getVBLLANDADRESBUITENLANDCODE () {
					return this.VBLLANDADRESBUITENLANDCODE;
				}
				
			    public java.util.Date VBLDATUMAANVANGADRESBUITENLAND;

				public java.util.Date getVBLDATUMAANVANGADRESBUITENLAND () {
					return this.VBLDATUMAANVANGADRESBUITENLAND;
				}
				
			    public String VBLDATUMAANVANGADRESBUITENLANDINDICATOR;

				public String getVBLDATUMAANVANGADRESBUITENLANDINDICATOR () {
					return this.VBLDATUMAANVANGADRESBUITENLANDINDICATOR;
				}
				
			    public String VBLREGEL1ADRESBUITENLAND;

				public String getVBLREGEL1ADRESBUITENLAND () {
					return this.VBLREGEL1ADRESBUITENLAND;
				}
				
			    public String VBLREGEL2ADRESBUITENLAND;

				public String getVBLREGEL2ADRESBUITENLAND () {
					return this.VBLREGEL2ADRESBUITENLAND;
				}
				
			    public String VBLREGEL3ADRESBUITENLAND;

				public String getVBLREGEL3ADRESBUITENLAND () {
					return this.VBLREGEL3ADRESBUITENLAND;
				}
				
			    public String VBLLANDVANWAARINGESCHREVENCODE;

				public String getVBLLANDVANWAARINGESCHREVENCODE () {
					return this.VBLLANDVANWAARINGESCHREVENCODE;
				}
				
			    public java.util.Date VBLDATUMVESTIGINGINNEDERLAND;

				public java.util.Date getVBLDATUMVESTIGINGINNEDERLAND () {
					return this.VBLDATUMVESTIGINGINNEDERLAND;
				}
				
			    public String VBLDATUMVESTIGINGINNEDERLANDINDICATOR;

				public String getVBLDATUMVESTIGINGINNEDERLANDINDICATOR () {
					return this.VBLDATUMVESTIGINGINNEDERLANDINDICATOR;
				}
				
			    public String VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING;

				public String getVBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING () {
					return this.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING;
				}
				
			    public BigDecimal VBLINDICATIEDOCUMENT;

				public BigDecimal getVBLINDICATIEDOCUMENT () {
					return this.VBLINDICATIEDOCUMENT;
				}
				
			    public BigDecimal VBLAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getVBLAANDUIDINGGEGEVENSONDERZOEK () {
					return this.VBLAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date VBLDATUMINGANGONDERZOEK;

				public java.util.Date getVBLDATUMINGANGONDERZOEK () {
					return this.VBLDATUMINGANGONDERZOEK;
				}
				
			    public String VBLDATUMINGANGONDERZOEKINDICATOR;

				public String getVBLDATUMINGANGONDERZOEKINDICATOR () {
					return this.VBLDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLDATUMEINDEONDERZOEK;

				public java.util.Date getVBLDATUMEINDEONDERZOEK () {
					return this.VBLDATUMEINDEONDERZOEK;
				}
				
			    public String VBLDATUMEINDEONDERZOEKINDICATOR;

				public String getVBLDATUMEINDEONDERZOEKINDICATOR () {
					return this.VBLDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLINGANGSDATUMGELDIGHEID;

				public java.util.Date getVBLINGANGSDATUMGELDIGHEID () {
					return this.VBLINGANGSDATUMGELDIGHEID;
				}
				
			    public String VBLINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getVBLINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.VBLINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date VBLDATUMVANOPNEMING;

				public java.util.Date getVBLDATUMVANOPNEMING () {
					return this.VBLDATUMVANOPNEMING;
				}
				
			    public String VBLDATUMVANOPNEMINGINDICATOR;

				public String getVBLDATUMVANOPNEMINGINDICATOR () {
					return this.VBLDATUMVANOPNEMINGINDICATOR;
				}
				
			    public String VBLSOORTPANDCODE;

				public String getVBLSOORTPANDCODE () {
					return this.VBLSOORTPANDCODE;
				}
				
			    public String VBLSOORTPANDOMSCHRIJVING;

				public String getVBLSOORTPANDOMSCHRIJVING () {
					return this.VBLSOORTPANDOMSCHRIJVING;
				}
				
			    public String VBLWIJKCODE;

				public String getVBLWIJKCODE () {
					return this.VBLWIJKCODE;
				}
				
			    public String VBLWIJKOMSCHRIJVING;

				public String getVBLWIJKOMSCHRIJVING () {
					return this.VBLWIJKOMSCHRIJVING;
				}
				
			    public String VBLPLANALOGISCHEWIJKCODE;

				public String getVBLPLANALOGISCHEWIJKCODE () {
					return this.VBLPLANALOGISCHEWIJKCODE;
				}
				
			    public String VBLPLANALOGISCHEWIJKOMSCHRIJVING;

				public String getVBLPLANALOGISCHEWIJKOMSCHRIJVING () {
					return this.VBLPLANALOGISCHEWIJKOMSCHRIJVING;
				}
				
			    public BigDecimal VBLANUMMERHOOFDBEWONER;

				public BigDecimal getVBLANUMMERHOOFDBEWONER () {
					return this.VBLANUMMERHOOFDBEWONER;
				}
				
			    public String VBTAANDUIDINGVERBLIJFSTITELCODE;

				public String getVBTAANDUIDINGVERBLIJFSTITELCODE () {
					return this.VBTAANDUIDINGVERBLIJFSTITELCODE;
				}
				
			    public String VBTVERBLIJFSTITELVERVALLEN;

				public String getVBTVERBLIJFSTITELVERVALLEN () {
					return this.VBTVERBLIJFSTITELVERVALLEN;
				}
				
			    public java.util.Date VBTDATUMEINDEVERBLIJFSTITEL;

				public java.util.Date getVBTDATUMEINDEVERBLIJFSTITEL () {
					return this.VBTDATUMEINDEVERBLIJFSTITEL;
				}
				
			    public String VBTDATUMEINDEVERBLIJFSTITELINDICATOR;

				public String getVBTDATUMEINDEVERBLIJFSTITELINDICATOR () {
					return this.VBTDATUMEINDEVERBLIJFSTITELINDICATOR;
				}
				
			    public java.util.Date VBTINGANGSDATUMVERBLIJFSTITEL;

				public java.util.Date getVBTINGANGSDATUMVERBLIJFSTITEL () {
					return this.VBTINGANGSDATUMVERBLIJFSTITEL;
				}
				
			    public String VBTINGANGSDATUMVERBLIJFSTITELINDICATOR;

				public String getVBTINGANGSDATUMVERBLIJFSTITELINDICATOR () {
					return this.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR;
				}
				
			    public BigDecimal VBTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getVBTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.VBTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date VBTDATUMINGANGONDERZOEK;

				public java.util.Date getVBTDATUMINGANGONDERZOEK () {
					return this.VBTDATUMINGANGONDERZOEK;
				}
				
			    public String VBTDATUMINGANGONDERZOEKINDICATOR;

				public String getVBTDATUMINGANGONDERZOEKINDICATOR () {
					return this.VBTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBTDATUMEINDEONDERZOEK;

				public java.util.Date getVBTDATUMEINDEONDERZOEK () {
					return this.VBTDATUMEINDEONDERZOEK;
				}
				
			    public String VBTDATUMEINDEONDERZOEKINDICATOR;

				public String getVBTDATUMEINDEONDERZOEKINDICATOR () {
					return this.VBTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBTINGANGSDATUMGELDIGHEID;

				public java.util.Date getVBTINGANGSDATUMGELDIGHEID () {
					return this.VBTINGANGSDATUMGELDIGHEID;
				}
				
			    public String VBTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getVBTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.VBTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date VBTDATUMVANOPNEMING;

				public java.util.Date getVBTDATUMVANOPNEMING () {
					return this.VBTDATUMVANOPNEMING;
				}
				
			    public String VBTDATUMVANOPNEMINGINDICATOR;

				public String getVBTDATUMVANOPNEMINGINDICATOR () {
					return this.VBTDATUMVANOPNEMINGINDICATOR;
				}
				
			    public String GZVINDICATIEGEZAGMINDERJARIGE;

				public String getGZVINDICATIEGEZAGMINDERJARIGE () {
					return this.GZVINDICATIEGEZAGMINDERJARIGE;
				}
				
			    public BigDecimal GZVINDICATIECURATELEREGISTER;

				public BigDecimal getGZVINDICATIECURATELEREGISTER () {
					return this.GZVINDICATIECURATELEREGISTER;
				}
				
			    public String GZVGEMEENTEDOCUMENTCODE;

				public String getGZVGEMEENTEDOCUMENTCODE () {
					return this.GZVGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date GZVDATUMDOCUMENT;

				public java.util.Date getGZVDATUMDOCUMENT () {
					return this.GZVDATUMDOCUMENT;
				}
				
			    public String GZVDATUMDOCUMENTINDICATOR;

				public String getGZVDATUMDOCUMENTINDICATOR () {
					return this.GZVDATUMDOCUMENTINDICATOR;
				}
				
			    public String GZVBESCHRIJVINGDOCUMENT;

				public String getGZVBESCHRIJVINGDOCUMENT () {
					return this.GZVBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal GZVAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getGZVAANDUIDINGGEGEVENSONDERZOEK () {
					return this.GZVAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date GZVDATUMINGANGONDERZOEK;

				public java.util.Date getGZVDATUMINGANGONDERZOEK () {
					return this.GZVDATUMINGANGONDERZOEK;
				}
				
			    public String GZVDATUMINGANGONDERZOEKINDICATOR;

				public String getGZVDATUMINGANGONDERZOEKINDICATOR () {
					return this.GZVDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date GZVDATUMEINDEONDERZOEK;

				public java.util.Date getGZVDATUMEINDEONDERZOEK () {
					return this.GZVDATUMEINDEONDERZOEK;
				}
				
			    public String GZVDATUMEINDEONDERZOEKINDICATOR;

				public String getGZVDATUMEINDEONDERZOEKINDICATOR () {
					return this.GZVDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date GZVINGANGSDATUMGELDIGHEID;

				public java.util.Date getGZVINGANGSDATUMGELDIGHEID () {
					return this.GZVINGANGSDATUMGELDIGHEID;
				}
				
			    public String GZVINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getGZVINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.GZVINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date GZVDATUMVANOPNEMING;

				public java.util.Date getGZVDATUMVANOPNEMING () {
					return this.GZVDATUMVANOPNEMING;
				}
				
			    public String GZVDATUMVANOPNEMINGINDICATOR;

				public String getGZVDATUMVANOPNEMINGINDICATOR () {
					return this.GZVDATUMVANOPNEMINGINDICATOR;
				}
				
			    public BigDecimal KSRAANDUIDINGEUROPEESKIESRECHT;

				public BigDecimal getKSRAANDUIDINGEUROPEESKIESRECHT () {
					return this.KSRAANDUIDINGEUROPEESKIESRECHT;
				}
				
			    public java.util.Date KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT;

				public java.util.Date getKSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT () {
					return this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT;
				}
				
			    public String KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR;

				public String getKSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR () {
					return this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR;
				}
				
			    public java.util.Date KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT;

				public java.util.Date getKSREINDDATUMUITSLUITINGEUROPEESKIESRECHT () {
					return this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT;
				}
				
			    public String KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR;

				public String getKSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR () {
					return this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR;
				}
				
			    public String KSRAANDUIDINGUITGESLOTENKIESRECHT;

				public String getKSRAANDUIDINGUITGESLOTENKIESRECHT () {
					return this.KSRAANDUIDINGUITGESLOTENKIESRECHT;
				}
				
			    public java.util.Date KSREINDDATUMUITSLUITINGKIESRECHT;

				public java.util.Date getKSREINDDATUMUITSLUITINGKIESRECHT () {
					return this.KSREINDDATUMUITSLUITINGKIESRECHT;
				}
				
			    public String KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR;

				public String getKSREINDDATUMUITSLUITINGKIESRECHTINDICATOR () {
					return this.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR;
				}
				
			    public String KSRGEMEENTEDOCUMENTCODE;

				public String getKSRGEMEENTEDOCUMENTCODE () {
					return this.KSRGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date KSRDATUMDOCUMENT;

				public java.util.Date getKSRDATUMDOCUMENT () {
					return this.KSRDATUMDOCUMENT;
				}
				
			    public String KSRDATUMDOCUMENTINDICATOR;

				public String getKSRDATUMDOCUMENTINDICATOR () {
					return this.KSRDATUMDOCUMENTINDICATOR;
				}
				
			    public String KSRBESCHRIJVINGDOCUMENT;

				public String getKSRBESCHRIJVINGDOCUMENT () {
					return this.KSRBESCHRIJVINGDOCUMENT;
				}
				
			    public String VWSGEMEENTEVANINSCHRIJVINGCODE;

				public String getVWSGEMEENTEVANINSCHRIJVINGCODE () {
					return this.VWSGEMEENTEVANINSCHRIJVINGCODE;
				}
				
			    public java.util.Date VWSDATUMINSCHRIJVING;

				public java.util.Date getVWSDATUMINSCHRIJVING () {
					return this.VWSDATUMINSCHRIJVING;
				}
				
			    public String VWSDATUMINSCHRIJVINGINDICATOR;

				public String getVWSDATUMINSCHRIJVINGINDICATOR () {
					return this.VWSDATUMINSCHRIJVINGINDICATOR;
				}
				
			    public String VWSINDICATIEGEHEIM;

				public String getVWSINDICATIEGEHEIM () {
					return this.VWSINDICATIEGEHEIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.PRSVOORNAMEN = readString(dis);
					
					this.PRSEERSTEVOORNAAM = readString(dis);
					
					this.PRSVOORLETTERS = readString(dis);
					
					this.PRSADELLIJKETITELCODE = readString(dis);
					
					this.PRSVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.PRSGESLACHTSNAAM = readString(dis);
					
					this.PRSNAAMOPGEMAAKT = readString(dis);
					
					this.PRSGEBOORTEDATUM = readDate(dis);
					
					this.PRSGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.PRSGEBOORTEPLAATSCODE = readString(dis);
					
					this.PRSGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.PRSGEBOORTELANDCODE = readString(dis);
					
					this.PRSGESLACHTSAANDUIDINGCODE = readString(dis);
					
						this.PRSVORIGANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSVOLGENDANUMMER = (BigDecimal) dis.readObject();
					
					this.PRSAANDUIDINGNAAMGEBRUIK = readString(dis);
					
					this.PRSREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.PRSAKTENUMMER = readString(dis);
					
					this.PRSGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.PRSDATUMDOCUMENT = readDate(dis);
					
					this.PRSDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.PRSBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.PRSAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.PRSDATUMINGANGONDERZOEK = readDate(dis);
					
					this.PRSDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.PRSDATUMEINDEONDERZOEK = readDate(dis);
					
					this.PRSDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.PRSINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.PRSINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.PRSDATUMVANOPNEMING = readDate(dis);
					
					this.PRSDATUMVANOPNEMINGINDICATOR = readString(dis);
					
						this.PRSSTATUSPERSOON = (BigDecimal) dis.readObject();
					
						this.PRSRIJKSKODENATIONALITEIT = (BigDecimal) dis.readObject();
					
						this.PRSGEZINSVERHOUDING = (BigDecimal) dis.readObject();
					
						this.PRSGEZINSSTERKTE = (BigDecimal) dis.readObject();
					
						this.PRSANUMMERGEZINSHOOFD = (BigDecimal) dis.readObject();
					
					this.PRSBURGERLIJKESTAAT = readString(dis);
					
					this.PRSNAAMSWIJZIGINGINDICATIE = readString(dis);
					
					this.PRSDATUMADRESHOUDINGAANEENGESLOTEN = readDate(dis);
					
					this.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR = readString(dis);
					
						this.OU1ANUMMER = (BigDecimal) dis.readObject();
					
						this.OU1BURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.OU1VOORNAMEN = readString(dis);
					
					this.OU1VOORLETTERS = readString(dis);
					
					this.OU1ADELLIJKETITELCODE = readString(dis);
					
					this.OU1VOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.OU1GESLACHTSNAAM = readString(dis);
					
					this.OU1NAAMOPGEMAAKT = readString(dis);
					
					this.OU1GEBOORTEDATUM = readDate(dis);
					
					this.OU1GEBOORTEDATUMINDICATOR = readString(dis);
					
					this.OU1GEBOORTEPLAATSCODE = readString(dis);
					
					this.OU1GEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.OU1GEBOORTELANDCODE = readString(dis);
					
					this.OU1GESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING = readDate(dis);
					
					this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = readString(dis);
					
					this.OU1REGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OU1AKTENUMMER = readString(dis);
					
					this.OU1GEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OU1DATUMDOCUMENT = readDate(dis);
					
					this.OU1DATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OU1BESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OU1AANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OU1DATUMINGANGONDERZOEK = readDate(dis);
					
					this.OU1DATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OU1DATUMEINDEONDERZOEK = readDate(dis);
					
					this.OU1DATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OU1INGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OU1INGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OU1DATUMVANOPNEMING = readDate(dis);
					
					this.OU1DATUMVANOPNEMINGINDICATOR = readString(dis);
					
						this.OU2ANUMMER = (BigDecimal) dis.readObject();
					
						this.OU2BURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.OU2VOORNAMEN = readString(dis);
					
					this.OU2VOORLETTERS = readString(dis);
					
					this.OU2ADELLIJKETITELCODE = readString(dis);
					
					this.OU2VOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.OU2GESLACHTSNAAM = readString(dis);
					
					this.OU2NAAMOPGEMAAKT = readString(dis);
					
					this.OU2GEBOORTEDATUM = readDate(dis);
					
					this.OU2GEBOORTEDATUMINDICATOR = readString(dis);
					
					this.OU2GEBOORTEPLAATSCODE = readString(dis);
					
					this.OU2GEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.OU2GEBOORTELANDCODE = readString(dis);
					
					this.OU2GESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING = readDate(dis);
					
					this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = readString(dis);
					
					this.OU2REGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OU2AKTENUMMER = readString(dis);
					
					this.OU2GEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OU2DATUMDOCUMENT = readDate(dis);
					
					this.OU2DATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OU2BESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OU2AANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OU2DATUMINGANGONDERZOEK = readDate(dis);
					
					this.OU2DATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OU2DATUMEINDEONDERZOEK = readDate(dis);
					
					this.OU2DATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OU2INGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OU2INGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OU2DATUMVANOPNEMING = readDate(dis);
					
					this.OU2DATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.OVLDATUMOVERLIJDEN = readDate(dis);
					
					this.OVLDATUMOVERLIJDENINDICATOR = readString(dis);
					
					this.OVLPLAATSOVERLIJDENCODE = readString(dis);
					
					this.OVLPLAATSOVERLIJDENOMSCHRIJVING = readString(dis);
					
					this.OVLLANDOVERLIJDENCODE = readString(dis);
					
					this.OVLREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OVLAKTENUMMER = readString(dis);
					
					this.OVLGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OVLDATUMDOCUMENT = readDate(dis);
					
					this.OVLDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OVLBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OVLAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OVLDATUMINGANGONDERZOEK = readDate(dis);
					
					this.OVLDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OVLDATUMEINDEONDERZOEK = readDate(dis);
					
					this.OVLDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OVLINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OVLINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OVLDATUMVANOPNEMING = readDate(dis);
					
					this.OVLDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.INSDATUMINGANGBLOKKERINGPL = readDate(dis);
					
					this.INSDATUMINGANGBLOKKERINGPLINDICATOR = readString(dis);
					
					this.INSDATUMOPSCHORTINGBIJHOUDING = readDate(dis);
					
					this.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR = readString(dis);
					
					this.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING = readString(dis);
					
					this.INSDATUMEERSTEINSCHRIJVINGGBA = readDate(dis);
					
					this.INSDATUMEERSTEINSCHRIJVINGINDICATOR = readString(dis);
					
					this.INSGEMEENTEWAARPKZICHBEVINDTCODE = readString(dis);
					
					this.INSINDICATIEGEHEIM = readString(dis);
					
						this.INSVERSIENUMMER = (BigDecimal) dis.readObject();
					
					this.INSDATUMTIJDSTEMPEL = readString(dis);
					
					this.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD = readString(dis);
					
					this.VBLGEMEENTEVANINSCHRIJVINGCODE = readString(dis);
					
					this.VBLDATUMINSCHRIJVING = readDate(dis);
					
					this.VBLDATUMINSCHRIJVINGINDICATOR = readString(dis);
					
					this.VBLFUNCTIEADRES = readString(dis);
					
					this.VBLGEMEENTEDEEL = readString(dis);
					
					this.VBLDATUMAANVANGADRESHOUDING = readDate(dis);
					
					this.VBLDATUMAANVANGADRESHOUDINGINDICATOR = readString(dis);
					
					this.VBLSTRAATNAAM = readString(dis);
					
					this.VBLNAAMOPENBARERUIMTE = readString(dis);
					
					this.VBLADRESOPGEMAAKT = readString(dis);
					
					this.VBLWOONPLAATSOPGEMAAKT = readString(dis);
					
						this.VBLHUISNUMMER = (BigDecimal) dis.readObject();
					
					this.VBLHUISLETTER = readString(dis);
					
					this.VBLHUISNUMMERTOEVOEGING = readString(dis);
					
					this.VBLAANDUIDINGBIJHUISNUMMER = readString(dis);
					
					this.VBLPOSTCODE = readString(dis);
					
					this.VBLWOONPLAATSNAAM = readString(dis);
					
					this.VBLIDENTIFICATIECODEVERBLIJFPLAATS = readString(dis);
					
					this.VBLIDENTIFICATIECODENUMMERAANDUIDING = readString(dis);
					
					this.VBLLOCATIEBESCHRIJVING = readString(dis);
					
					this.VBLLANDADRESBUITENLANDCODE = readString(dis);
					
					this.VBLDATUMAANVANGADRESBUITENLAND = readDate(dis);
					
					this.VBLDATUMAANVANGADRESBUITENLANDINDICATOR = readString(dis);
					
					this.VBLREGEL1ADRESBUITENLAND = readString(dis);
					
					this.VBLREGEL2ADRESBUITENLAND = readString(dis);
					
					this.VBLREGEL3ADRESBUITENLAND = readString(dis);
					
					this.VBLLANDVANWAARINGESCHREVENCODE = readString(dis);
					
					this.VBLDATUMVESTIGINGINNEDERLAND = readDate(dis);
					
					this.VBLDATUMVESTIGINGINNEDERLANDINDICATOR = readString(dis);
					
					this.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING = readString(dis);
					
						this.VBLINDICATIEDOCUMENT = (BigDecimal) dis.readObject();
					
						this.VBLAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.VBLDATUMINGANGONDERZOEK = readDate(dis);
					
					this.VBLDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.VBLDATUMEINDEONDERZOEK = readDate(dis);
					
					this.VBLDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.VBLINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.VBLINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.VBLDATUMVANOPNEMING = readDate(dis);
					
					this.VBLDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.VBLSOORTPANDCODE = readString(dis);
					
					this.VBLSOORTPANDOMSCHRIJVING = readString(dis);
					
					this.VBLWIJKCODE = readString(dis);
					
					this.VBLWIJKOMSCHRIJVING = readString(dis);
					
					this.VBLPLANALOGISCHEWIJKCODE = readString(dis);
					
					this.VBLPLANALOGISCHEWIJKOMSCHRIJVING = readString(dis);
					
						this.VBLANUMMERHOOFDBEWONER = (BigDecimal) dis.readObject();
					
					this.VBTAANDUIDINGVERBLIJFSTITELCODE = readString(dis);
					
					this.VBTVERBLIJFSTITELVERVALLEN = readString(dis);
					
					this.VBTDATUMEINDEVERBLIJFSTITEL = readDate(dis);
					
					this.VBTDATUMEINDEVERBLIJFSTITELINDICATOR = readString(dis);
					
					this.VBTINGANGSDATUMVERBLIJFSTITEL = readDate(dis);
					
					this.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR = readString(dis);
					
						this.VBTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.VBTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.VBTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.VBTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.VBTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.VBTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.VBTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.VBTDATUMVANOPNEMING = readDate(dis);
					
					this.VBTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.GZVINDICATIEGEZAGMINDERJARIGE = readString(dis);
					
						this.GZVINDICATIECURATELEREGISTER = (BigDecimal) dis.readObject();
					
					this.GZVGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.GZVDATUMDOCUMENT = readDate(dis);
					
					this.GZVDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.GZVBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.GZVAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.GZVDATUMINGANGONDERZOEK = readDate(dis);
					
					this.GZVDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.GZVDATUMEINDEONDERZOEK = readDate(dis);
					
					this.GZVDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.GZVINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.GZVINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.GZVDATUMVANOPNEMING = readDate(dis);
					
					this.GZVDATUMVANOPNEMINGINDICATOR = readString(dis);
					
						this.KSRAANDUIDINGEUROPEESKIESRECHT = (BigDecimal) dis.readObject();
					
					this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT = readDate(dis);
					
					this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR = readString(dis);
					
					this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT = readDate(dis);
					
					this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR = readString(dis);
					
					this.KSRAANDUIDINGUITGESLOTENKIESRECHT = readString(dis);
					
					this.KSREINDDATUMUITSLUITINGKIESRECHT = readDate(dis);
					
					this.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR = readString(dis);
					
					this.KSRGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.KSRDATUMDOCUMENT = readDate(dis);
					
					this.KSRDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.KSRBESCHRIJVINGDOCUMENT = readString(dis);
					
					this.VWSGEMEENTEVANINSCHRIJVINGCODE = readString(dis);
					
					this.VWSDATUMINSCHRIJVING = readDate(dis);
					
					this.VWSDATUMINSCHRIJVINGINDICATOR = readString(dis);
					
					this.VWSINDICATIEGEHEIM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.PRSVOORNAMEN,dos);
					
					// String
				
						writeString(this.PRSEERSTEVOORNAAM,dos);
					
					// String
				
						writeString(this.PRSVOORLETTERS,dos);
					
					// String
				
						writeString(this.PRSADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.PRSVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.PRSGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.PRSNAAMOPGEMAAKT,dos);
					
					// java.util.Date
				
						writeDate(this.PRSGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.PRSGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.PRSGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.PRSGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.PRSGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.PRSGESLACHTSAANDUIDINGCODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSVORIGANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSVOLGENDANUMMER);
					
					// String
				
						writeString(this.PRSAANDUIDINGNAAMGEBRUIK,dos);
					
					// String
				
						writeString(this.PRSREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.PRSAKTENUMMER,dos);
					
					// String
				
						writeString(this.PRSGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.PRSDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.PRSBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.PRSINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.PRSDATUMVANOPNEMINGINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSSTATUSPERSOON);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSRIJKSKODENATIONALITEIT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSGEZINSVERHOUDING);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSGEZINSSTERKTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMERGEZINSHOOFD);
					
					// String
				
						writeString(this.PRSBURGERLIJKESTAAT,dos);
					
					// String
				
						writeString(this.PRSNAAMSWIJZIGINGINDICATIE,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMADRESHOUDINGAANEENGESLOTEN,dos);
					
					// String
				
						writeString(this.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1ANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1BURGERSERVICENUMMER);
					
					// String
				
						writeString(this.OU1VOORNAMEN,dos);
					
					// String
				
						writeString(this.OU1VOORLETTERS,dos);
					
					// String
				
						writeString(this.OU1ADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.OU1VOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU1GESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU1NAAMOPGEMAAKT,dos);
					
					// java.util.Date
				
						writeDate(this.OU1GEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.OU1GEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.OU1GEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.OU1GEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OU1GEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.OU1GESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING,dos);
					
					// String
				
						writeString(this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR,dos);
					
					// String
				
						writeString(this.OU1REGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OU1AKTENUMMER,dos);
					
					// String
				
						writeString(this.OU1GEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OU1DATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OU1BESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1AANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1DATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1DATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1INGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OU1INGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OU1DATUMVANOPNEMINGINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU2ANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU2BURGERSERVICENUMMER);
					
					// String
				
						writeString(this.OU2VOORNAMEN,dos);
					
					// String
				
						writeString(this.OU2VOORLETTERS,dos);
					
					// String
				
						writeString(this.OU2ADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.OU2VOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU2GESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU2NAAMOPGEMAAKT,dos);
					
					// java.util.Date
				
						writeDate(this.OU2GEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.OU2GEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.OU2GEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.OU2GEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OU2GEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.OU2GESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING,dos);
					
					// String
				
						writeString(this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR,dos);
					
					// String
				
						writeString(this.OU2REGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OU2AKTENUMMER,dos);
					
					// String
				
						writeString(this.OU2GEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OU2DATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OU2BESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU2AANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OU2DATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OU2DATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU2INGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OU2INGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OU2DATUMVANOPNEMINGINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMOVERLIJDEN,dos);
					
					// String
				
						writeString(this.OVLDATUMOVERLIJDENINDICATOR,dos);
					
					// String
				
						writeString(this.OVLPLAATSOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLPLAATSOVERLIJDENOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OVLLANDOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OVLAKTENUMMER,dos);
					
					// String
				
						writeString(this.OVLGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OVLDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OVLBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OVLINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OVLDATUMVANOPNEMINGINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.INSDATUMINGANGBLOKKERINGPL,dos);
					
					// String
				
						writeString(this.INSDATUMINGANGBLOKKERINGPLINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.INSDATUMOPSCHORTINGBIJHOUDING,dos);
					
					// String
				
						writeString(this.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR,dos);
					
					// String
				
						writeString(this.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING,dos);
					
					// java.util.Date
				
						writeDate(this.INSDATUMEERSTEINSCHRIJVINGGBA,dos);
					
					// String
				
						writeString(this.INSDATUMEERSTEINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.INSGEMEENTEWAARPKZICHBEVINDTCODE,dos);
					
					// String
				
						writeString(this.INSINDICATIEGEHEIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSVERSIENUMMER);
					
					// String
				
						writeString(this.INSDATUMTIJDSTEMPEL,dos);
					
					// String
				
						writeString(this.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD,dos);
					
					// String
				
						writeString(this.VBLGEMEENTEVANINSCHRIJVINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMINSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLDATUMINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLFUNCTIEADRES,dos);
					
					// String
				
						writeString(this.VBLGEMEENTEDEEL,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMAANVANGADRESHOUDING,dos);
					
					// String
				
						writeString(this.VBLDATUMAANVANGADRESHOUDINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLSTRAATNAAM,dos);
					
					// String
				
						writeString(this.VBLNAAMOPENBARERUIMTE,dos);
					
					// String
				
						writeString(this.VBLADRESOPGEMAAKT,dos);
					
					// String
				
						writeString(this.VBLWOONPLAATSOPGEMAAKT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHUISNUMMER);
					
					// String
				
						writeString(this.VBLHUISLETTER,dos);
					
					// String
				
						writeString(this.VBLHUISNUMMERTOEVOEGING,dos);
					
					// String
				
						writeString(this.VBLAANDUIDINGBIJHUISNUMMER,dos);
					
					// String
				
						writeString(this.VBLPOSTCODE,dos);
					
					// String
				
						writeString(this.VBLWOONPLAATSNAAM,dos);
					
					// String
				
						writeString(this.VBLIDENTIFICATIECODEVERBLIJFPLAATS,dos);
					
					// String
				
						writeString(this.VBLIDENTIFICATIECODENUMMERAANDUIDING,dos);
					
					// String
				
						writeString(this.VBLLOCATIEBESCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLLANDADRESBUITENLANDCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMAANVANGADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLDATUMAANVANGADRESBUITENLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLREGEL1ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLREGEL2ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLREGEL3ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLLANDVANWAARINGESCHREVENCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMVESTIGINGINNEDERLAND,dos);
					
					// String
				
						writeString(this.VBLDATUMVESTIGINGINNEDERLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLINDICATIEDOCUMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.VBLINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.VBLDATUMVANOPNEMINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLSOORTPANDCODE,dos);
					
					// String
				
						writeString(this.VBLSOORTPANDOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLWIJKOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLPLANALOGISCHEWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLPLANALOGISCHEWIJKOMSCHRIJVING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLANUMMERHOOFDBEWONER);
					
					// String
				
						writeString(this.VBTAANDUIDINGVERBLIJFSTITELCODE,dos);
					
					// String
				
						writeString(this.VBTVERBLIJFSTITELVERVALLEN,dos);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMEINDEVERBLIJFSTITEL,dos);
					
					// String
				
						writeString(this.VBTDATUMEINDEVERBLIJFSTITELINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTINGANGSDATUMVERBLIJFSTITEL,dos);
					
					// String
				
						writeString(this.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.VBTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.VBTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.VBTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.VBTDATUMVANOPNEMINGINDICATOR,dos);
					
					// String
				
						writeString(this.GZVINDICATIEGEZAGMINDERJARIGE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GZVINDICATIECURATELEREGISTER);
					
					// String
				
						writeString(this.GZVGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.GZVDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.GZVBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GZVAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.GZVDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.GZVDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.GZVINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.GZVINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.GZVDATUMVANOPNEMINGINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KSRAANDUIDINGEUROPEESKIESRECHT);
					
					// java.util.Date
				
						writeDate(this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT,dos);
					
					// String
				
						writeString(this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT,dos);
					
					// String
				
						writeString(this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR,dos);
					
					// String
				
						writeString(this.KSRAANDUIDINGUITGESLOTENKIESRECHT,dos);
					
					// java.util.Date
				
						writeDate(this.KSREINDDATUMUITSLUITINGKIESRECHT,dos);
					
					// String
				
						writeString(this.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR,dos);
					
					// String
				
						writeString(this.KSRGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.KSRDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.KSRDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.KSRBESCHRIJVINGDOCUMENT,dos);
					
					// String
				
						writeString(this.VWSGEMEENTEVANINSCHRIJVINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VWSDATUMINSCHRIJVING,dos);
					
					// String
				
						writeString(this.VWSDATUMINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.VWSINDICATIEGEHEIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",PRSBURGERSERVICENUMMER="+String.valueOf(PRSBURGERSERVICENUMMER));
		sb.append(",PRSVOORNAMEN="+PRSVOORNAMEN);
		sb.append(",PRSEERSTEVOORNAAM="+PRSEERSTEVOORNAAM);
		sb.append(",PRSVOORLETTERS="+PRSVOORLETTERS);
		sb.append(",PRSADELLIJKETITELCODE="+PRSADELLIJKETITELCODE);
		sb.append(",PRSVOORVOEGSELGESLACHTSNAAM="+PRSVOORVOEGSELGESLACHTSNAAM);
		sb.append(",PRSGESLACHTSNAAM="+PRSGESLACHTSNAAM);
		sb.append(",PRSNAAMOPGEMAAKT="+PRSNAAMOPGEMAAKT);
		sb.append(",PRSGEBOORTEDATUM="+String.valueOf(PRSGEBOORTEDATUM));
		sb.append(",PRSGEBOORTEDATUMINDICATOR="+PRSGEBOORTEDATUMINDICATOR);
		sb.append(",PRSGEBOORTEPLAATSCODE="+PRSGEBOORTEPLAATSCODE);
		sb.append(",PRSGEBOORTEPLAATSOMSCHRIJVING="+PRSGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",PRSGEBOORTELANDCODE="+PRSGEBOORTELANDCODE);
		sb.append(",PRSGESLACHTSAANDUIDINGCODE="+PRSGESLACHTSAANDUIDINGCODE);
		sb.append(",PRSVORIGANUMMER="+String.valueOf(PRSVORIGANUMMER));
		sb.append(",PRSVOLGENDANUMMER="+String.valueOf(PRSVOLGENDANUMMER));
		sb.append(",PRSAANDUIDINGNAAMGEBRUIK="+PRSAANDUIDINGNAAMGEBRUIK);
		sb.append(",PRSREGISTERGEMEENTEAKTECODE="+PRSREGISTERGEMEENTEAKTECODE);
		sb.append(",PRSAKTENUMMER="+PRSAKTENUMMER);
		sb.append(",PRSGEMEENTEDOCUMENTCODE="+PRSGEMEENTEDOCUMENTCODE);
		sb.append(",PRSDATUMDOCUMENT="+String.valueOf(PRSDATUMDOCUMENT));
		sb.append(",PRSDATUMDOCUMENTINDICATOR="+PRSDATUMDOCUMENTINDICATOR);
		sb.append(",PRSBESCHRIJVINGDOCUMENT="+PRSBESCHRIJVINGDOCUMENT);
		sb.append(",PRSAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(PRSAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",PRSDATUMINGANGONDERZOEK="+String.valueOf(PRSDATUMINGANGONDERZOEK));
		sb.append(",PRSDATUMINGANGONDERZOEKINDICATOR="+PRSDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",PRSDATUMEINDEONDERZOEK="+String.valueOf(PRSDATUMEINDEONDERZOEK));
		sb.append(",PRSDATUMEINDEONDERZOEKINDICATOR="+PRSDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",PRSINGANGSDATUMGELDIGHEID="+String.valueOf(PRSINGANGSDATUMGELDIGHEID));
		sb.append(",PRSINGANGSDATUMGELDIGHEIDINDICATOR="+PRSINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",PRSDATUMVANOPNEMING="+String.valueOf(PRSDATUMVANOPNEMING));
		sb.append(",PRSDATUMVANOPNEMINGINDICATOR="+PRSDATUMVANOPNEMINGINDICATOR);
		sb.append(",PRSSTATUSPERSOON="+String.valueOf(PRSSTATUSPERSOON));
		sb.append(",PRSRIJKSKODENATIONALITEIT="+String.valueOf(PRSRIJKSKODENATIONALITEIT));
		sb.append(",PRSGEZINSVERHOUDING="+String.valueOf(PRSGEZINSVERHOUDING));
		sb.append(",PRSGEZINSSTERKTE="+String.valueOf(PRSGEZINSSTERKTE));
		sb.append(",PRSANUMMERGEZINSHOOFD="+String.valueOf(PRSANUMMERGEZINSHOOFD));
		sb.append(",PRSBURGERLIJKESTAAT="+PRSBURGERLIJKESTAAT);
		sb.append(",PRSNAAMSWIJZIGINGINDICATIE="+PRSNAAMSWIJZIGINGINDICATIE);
		sb.append(",PRSDATUMADRESHOUDINGAANEENGESLOTEN="+String.valueOf(PRSDATUMADRESHOUDINGAANEENGESLOTEN));
		sb.append(",PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR="+PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR);
		sb.append(",OU1ANUMMER="+String.valueOf(OU1ANUMMER));
		sb.append(",OU1BURGERSERVICENUMMER="+String.valueOf(OU1BURGERSERVICENUMMER));
		sb.append(",OU1VOORNAMEN="+OU1VOORNAMEN);
		sb.append(",OU1VOORLETTERS="+OU1VOORLETTERS);
		sb.append(",OU1ADELLIJKETITELCODE="+OU1ADELLIJKETITELCODE);
		sb.append(",OU1VOORVOEGSELGESLACHTSNAAM="+OU1VOORVOEGSELGESLACHTSNAAM);
		sb.append(",OU1GESLACHTSNAAM="+OU1GESLACHTSNAAM);
		sb.append(",OU1NAAMOPGEMAAKT="+OU1NAAMOPGEMAAKT);
		sb.append(",OU1GEBOORTEDATUM="+String.valueOf(OU1GEBOORTEDATUM));
		sb.append(",OU1GEBOORTEDATUMINDICATOR="+OU1GEBOORTEDATUMINDICATOR);
		sb.append(",OU1GEBOORTEPLAATSCODE="+OU1GEBOORTEPLAATSCODE);
		sb.append(",OU1GEBOORTEPLAATSOMSCHRIJVING="+OU1GEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",OU1GEBOORTELANDCODE="+OU1GEBOORTELANDCODE);
		sb.append(",OU1GESLACHTSAANDUIDINGCODE="+OU1GESLACHTSAANDUIDINGCODE);
		sb.append(",OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING="+String.valueOf(OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING));
		sb.append(",OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR="+OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR);
		sb.append(",OU1REGISTERGEMEENTEAKTECODE="+OU1REGISTERGEMEENTEAKTECODE);
		sb.append(",OU1AKTENUMMER="+OU1AKTENUMMER);
		sb.append(",OU1GEMEENTEDOCUMENTCODE="+OU1GEMEENTEDOCUMENTCODE);
		sb.append(",OU1DATUMDOCUMENT="+String.valueOf(OU1DATUMDOCUMENT));
		sb.append(",OU1DATUMDOCUMENTINDICATOR="+OU1DATUMDOCUMENTINDICATOR);
		sb.append(",OU1BESCHRIJVINGDOCUMENT="+OU1BESCHRIJVINGDOCUMENT);
		sb.append(",OU1AANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OU1AANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OU1DATUMINGANGONDERZOEK="+String.valueOf(OU1DATUMINGANGONDERZOEK));
		sb.append(",OU1DATUMINGANGONDERZOEKINDICATOR="+OU1DATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OU1DATUMEINDEONDERZOEK="+String.valueOf(OU1DATUMEINDEONDERZOEK));
		sb.append(",OU1DATUMEINDEONDERZOEKINDICATOR="+OU1DATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OU1INGANGSDATUMGELDIGHEID="+String.valueOf(OU1INGANGSDATUMGELDIGHEID));
		sb.append(",OU1INGANGSDATUMGELDIGHEIDINDICATOR="+OU1INGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OU1DATUMVANOPNEMING="+String.valueOf(OU1DATUMVANOPNEMING));
		sb.append(",OU1DATUMVANOPNEMINGINDICATOR="+OU1DATUMVANOPNEMINGINDICATOR);
		sb.append(",OU2ANUMMER="+String.valueOf(OU2ANUMMER));
		sb.append(",OU2BURGERSERVICENUMMER="+String.valueOf(OU2BURGERSERVICENUMMER));
		sb.append(",OU2VOORNAMEN="+OU2VOORNAMEN);
		sb.append(",OU2VOORLETTERS="+OU2VOORLETTERS);
		sb.append(",OU2ADELLIJKETITELCODE="+OU2ADELLIJKETITELCODE);
		sb.append(",OU2VOORVOEGSELGESLACHTSNAAM="+OU2VOORVOEGSELGESLACHTSNAAM);
		sb.append(",OU2GESLACHTSNAAM="+OU2GESLACHTSNAAM);
		sb.append(",OU2NAAMOPGEMAAKT="+OU2NAAMOPGEMAAKT);
		sb.append(",OU2GEBOORTEDATUM="+String.valueOf(OU2GEBOORTEDATUM));
		sb.append(",OU2GEBOORTEDATUMINDICATOR="+OU2GEBOORTEDATUMINDICATOR);
		sb.append(",OU2GEBOORTEPLAATSCODE="+OU2GEBOORTEPLAATSCODE);
		sb.append(",OU2GEBOORTEPLAATSOMSCHRIJVING="+OU2GEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",OU2GEBOORTELANDCODE="+OU2GEBOORTELANDCODE);
		sb.append(",OU2GESLACHTSAANDUIDINGCODE="+OU2GESLACHTSAANDUIDINGCODE);
		sb.append(",OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING="+String.valueOf(OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING));
		sb.append(",OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR="+OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR);
		sb.append(",OU2REGISTERGEMEENTEAKTECODE="+OU2REGISTERGEMEENTEAKTECODE);
		sb.append(",OU2AKTENUMMER="+OU2AKTENUMMER);
		sb.append(",OU2GEMEENTEDOCUMENTCODE="+OU2GEMEENTEDOCUMENTCODE);
		sb.append(",OU2DATUMDOCUMENT="+String.valueOf(OU2DATUMDOCUMENT));
		sb.append(",OU2DATUMDOCUMENTINDICATOR="+OU2DATUMDOCUMENTINDICATOR);
		sb.append(",OU2BESCHRIJVINGDOCUMENT="+OU2BESCHRIJVINGDOCUMENT);
		sb.append(",OU2AANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OU2AANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OU2DATUMINGANGONDERZOEK="+String.valueOf(OU2DATUMINGANGONDERZOEK));
		sb.append(",OU2DATUMINGANGONDERZOEKINDICATOR="+OU2DATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OU2DATUMEINDEONDERZOEK="+String.valueOf(OU2DATUMEINDEONDERZOEK));
		sb.append(",OU2DATUMEINDEONDERZOEKINDICATOR="+OU2DATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OU2INGANGSDATUMGELDIGHEID="+String.valueOf(OU2INGANGSDATUMGELDIGHEID));
		sb.append(",OU2INGANGSDATUMGELDIGHEIDINDICATOR="+OU2INGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OU2DATUMVANOPNEMING="+String.valueOf(OU2DATUMVANOPNEMING));
		sb.append(",OU2DATUMVANOPNEMINGINDICATOR="+OU2DATUMVANOPNEMINGINDICATOR);
		sb.append(",OVLDATUMOVERLIJDEN="+String.valueOf(OVLDATUMOVERLIJDEN));
		sb.append(",OVLDATUMOVERLIJDENINDICATOR="+OVLDATUMOVERLIJDENINDICATOR);
		sb.append(",OVLPLAATSOVERLIJDENCODE="+OVLPLAATSOVERLIJDENCODE);
		sb.append(",OVLPLAATSOVERLIJDENOMSCHRIJVING="+OVLPLAATSOVERLIJDENOMSCHRIJVING);
		sb.append(",OVLLANDOVERLIJDENCODE="+OVLLANDOVERLIJDENCODE);
		sb.append(",OVLREGISTERGEMEENTEAKTECODE="+OVLREGISTERGEMEENTEAKTECODE);
		sb.append(",OVLAKTENUMMER="+OVLAKTENUMMER);
		sb.append(",OVLGEMEENTEDOCUMENTCODE="+OVLGEMEENTEDOCUMENTCODE);
		sb.append(",OVLDATUMDOCUMENT="+String.valueOf(OVLDATUMDOCUMENT));
		sb.append(",OVLDATUMDOCUMENTINDICATOR="+OVLDATUMDOCUMENTINDICATOR);
		sb.append(",OVLBESCHRIJVINGDOCUMENT="+OVLBESCHRIJVINGDOCUMENT);
		sb.append(",OVLAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OVLAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OVLDATUMINGANGONDERZOEK="+String.valueOf(OVLDATUMINGANGONDERZOEK));
		sb.append(",OVLDATUMINGANGONDERZOEKINDICATOR="+OVLDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OVLDATUMEINDEONDERZOEK="+String.valueOf(OVLDATUMEINDEONDERZOEK));
		sb.append(",OVLDATUMEINDEONDERZOEKINDICATOR="+OVLDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OVLINGANGSDATUMGELDIGHEID="+String.valueOf(OVLINGANGSDATUMGELDIGHEID));
		sb.append(",OVLINGANGSDATUMGELDIGHEIDINDICATOR="+OVLINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OVLDATUMVANOPNEMING="+String.valueOf(OVLDATUMVANOPNEMING));
		sb.append(",OVLDATUMVANOPNEMINGINDICATOR="+OVLDATUMVANOPNEMINGINDICATOR);
		sb.append(",INSDATUMINGANGBLOKKERINGPL="+String.valueOf(INSDATUMINGANGBLOKKERINGPL));
		sb.append(",INSDATUMINGANGBLOKKERINGPLINDICATOR="+INSDATUMINGANGBLOKKERINGPLINDICATOR);
		sb.append(",INSDATUMOPSCHORTINGBIJHOUDING="+String.valueOf(INSDATUMOPSCHORTINGBIJHOUDING));
		sb.append(",INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR="+INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR);
		sb.append(",INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING="+INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING);
		sb.append(",INSDATUMEERSTEINSCHRIJVINGGBA="+String.valueOf(INSDATUMEERSTEINSCHRIJVINGGBA));
		sb.append(",INSDATUMEERSTEINSCHRIJVINGINDICATOR="+INSDATUMEERSTEINSCHRIJVINGINDICATOR);
		sb.append(",INSGEMEENTEWAARPKZICHBEVINDTCODE="+INSGEMEENTEWAARPKZICHBEVINDTCODE);
		sb.append(",INSINDICATIEGEHEIM="+INSINDICATIEGEHEIM);
		sb.append(",INSVERSIENUMMER="+String.valueOf(INSVERSIENUMMER));
		sb.append(",INSDATUMTIJDSTEMPEL="+INSDATUMTIJDSTEMPEL);
		sb.append(",INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD="+INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD);
		sb.append(",VBLGEMEENTEVANINSCHRIJVINGCODE="+VBLGEMEENTEVANINSCHRIJVINGCODE);
		sb.append(",VBLDATUMINSCHRIJVING="+String.valueOf(VBLDATUMINSCHRIJVING));
		sb.append(",VBLDATUMINSCHRIJVINGINDICATOR="+VBLDATUMINSCHRIJVINGINDICATOR);
		sb.append(",VBLFUNCTIEADRES="+VBLFUNCTIEADRES);
		sb.append(",VBLGEMEENTEDEEL="+VBLGEMEENTEDEEL);
		sb.append(",VBLDATUMAANVANGADRESHOUDING="+String.valueOf(VBLDATUMAANVANGADRESHOUDING));
		sb.append(",VBLDATUMAANVANGADRESHOUDINGINDICATOR="+VBLDATUMAANVANGADRESHOUDINGINDICATOR);
		sb.append(",VBLSTRAATNAAM="+VBLSTRAATNAAM);
		sb.append(",VBLNAAMOPENBARERUIMTE="+VBLNAAMOPENBARERUIMTE);
		sb.append(",VBLADRESOPGEMAAKT="+VBLADRESOPGEMAAKT);
		sb.append(",VBLWOONPLAATSOPGEMAAKT="+VBLWOONPLAATSOPGEMAAKT);
		sb.append(",VBLHUISNUMMER="+String.valueOf(VBLHUISNUMMER));
		sb.append(",VBLHUISLETTER="+VBLHUISLETTER);
		sb.append(",VBLHUISNUMMERTOEVOEGING="+VBLHUISNUMMERTOEVOEGING);
		sb.append(",VBLAANDUIDINGBIJHUISNUMMER="+VBLAANDUIDINGBIJHUISNUMMER);
		sb.append(",VBLPOSTCODE="+VBLPOSTCODE);
		sb.append(",VBLWOONPLAATSNAAM="+VBLWOONPLAATSNAAM);
		sb.append(",VBLIDENTIFICATIECODEVERBLIJFPLAATS="+VBLIDENTIFICATIECODEVERBLIJFPLAATS);
		sb.append(",VBLIDENTIFICATIECODENUMMERAANDUIDING="+VBLIDENTIFICATIECODENUMMERAANDUIDING);
		sb.append(",VBLLOCATIEBESCHRIJVING="+VBLLOCATIEBESCHRIJVING);
		sb.append(",VBLLANDADRESBUITENLANDCODE="+VBLLANDADRESBUITENLANDCODE);
		sb.append(",VBLDATUMAANVANGADRESBUITENLAND="+String.valueOf(VBLDATUMAANVANGADRESBUITENLAND));
		sb.append(",VBLDATUMAANVANGADRESBUITENLANDINDICATOR="+VBLDATUMAANVANGADRESBUITENLANDINDICATOR);
		sb.append(",VBLREGEL1ADRESBUITENLAND="+VBLREGEL1ADRESBUITENLAND);
		sb.append(",VBLREGEL2ADRESBUITENLAND="+VBLREGEL2ADRESBUITENLAND);
		sb.append(",VBLREGEL3ADRESBUITENLAND="+VBLREGEL3ADRESBUITENLAND);
		sb.append(",VBLLANDVANWAARINGESCHREVENCODE="+VBLLANDVANWAARINGESCHREVENCODE);
		sb.append(",VBLDATUMVESTIGINGINNEDERLAND="+String.valueOf(VBLDATUMVESTIGINGINNEDERLAND));
		sb.append(",VBLDATUMVESTIGINGINNEDERLANDINDICATOR="+VBLDATUMVESTIGINGINNEDERLANDINDICATOR);
		sb.append(",VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING="+VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING);
		sb.append(",VBLINDICATIEDOCUMENT="+String.valueOf(VBLINDICATIEDOCUMENT));
		sb.append(",VBLAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(VBLAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",VBLDATUMINGANGONDERZOEK="+String.valueOf(VBLDATUMINGANGONDERZOEK));
		sb.append(",VBLDATUMINGANGONDERZOEKINDICATOR="+VBLDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",VBLDATUMEINDEONDERZOEK="+String.valueOf(VBLDATUMEINDEONDERZOEK));
		sb.append(",VBLDATUMEINDEONDERZOEKINDICATOR="+VBLDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",VBLINGANGSDATUMGELDIGHEID="+String.valueOf(VBLINGANGSDATUMGELDIGHEID));
		sb.append(",VBLINGANGSDATUMGELDIGHEIDINDICATOR="+VBLINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",VBLDATUMVANOPNEMING="+String.valueOf(VBLDATUMVANOPNEMING));
		sb.append(",VBLDATUMVANOPNEMINGINDICATOR="+VBLDATUMVANOPNEMINGINDICATOR);
		sb.append(",VBLSOORTPANDCODE="+VBLSOORTPANDCODE);
		sb.append(",VBLSOORTPANDOMSCHRIJVING="+VBLSOORTPANDOMSCHRIJVING);
		sb.append(",VBLWIJKCODE="+VBLWIJKCODE);
		sb.append(",VBLWIJKOMSCHRIJVING="+VBLWIJKOMSCHRIJVING);
		sb.append(",VBLPLANALOGISCHEWIJKCODE="+VBLPLANALOGISCHEWIJKCODE);
		sb.append(",VBLPLANALOGISCHEWIJKOMSCHRIJVING="+VBLPLANALOGISCHEWIJKOMSCHRIJVING);
		sb.append(",VBLANUMMERHOOFDBEWONER="+String.valueOf(VBLANUMMERHOOFDBEWONER));
		sb.append(",VBTAANDUIDINGVERBLIJFSTITELCODE="+VBTAANDUIDINGVERBLIJFSTITELCODE);
		sb.append(",VBTVERBLIJFSTITELVERVALLEN="+VBTVERBLIJFSTITELVERVALLEN);
		sb.append(",VBTDATUMEINDEVERBLIJFSTITEL="+String.valueOf(VBTDATUMEINDEVERBLIJFSTITEL));
		sb.append(",VBTDATUMEINDEVERBLIJFSTITELINDICATOR="+VBTDATUMEINDEVERBLIJFSTITELINDICATOR);
		sb.append(",VBTINGANGSDATUMVERBLIJFSTITEL="+String.valueOf(VBTINGANGSDATUMVERBLIJFSTITEL));
		sb.append(",VBTINGANGSDATUMVERBLIJFSTITELINDICATOR="+VBTINGANGSDATUMVERBLIJFSTITELINDICATOR);
		sb.append(",VBTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(VBTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",VBTDATUMINGANGONDERZOEK="+String.valueOf(VBTDATUMINGANGONDERZOEK));
		sb.append(",VBTDATUMINGANGONDERZOEKINDICATOR="+VBTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",VBTDATUMEINDEONDERZOEK="+String.valueOf(VBTDATUMEINDEONDERZOEK));
		sb.append(",VBTDATUMEINDEONDERZOEKINDICATOR="+VBTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",VBTINGANGSDATUMGELDIGHEID="+String.valueOf(VBTINGANGSDATUMGELDIGHEID));
		sb.append(",VBTINGANGSDATUMGELDIGHEIDINDICATOR="+VBTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",VBTDATUMVANOPNEMING="+String.valueOf(VBTDATUMVANOPNEMING));
		sb.append(",VBTDATUMVANOPNEMINGINDICATOR="+VBTDATUMVANOPNEMINGINDICATOR);
		sb.append(",GZVINDICATIEGEZAGMINDERJARIGE="+GZVINDICATIEGEZAGMINDERJARIGE);
		sb.append(",GZVINDICATIECURATELEREGISTER="+String.valueOf(GZVINDICATIECURATELEREGISTER));
		sb.append(",GZVGEMEENTEDOCUMENTCODE="+GZVGEMEENTEDOCUMENTCODE);
		sb.append(",GZVDATUMDOCUMENT="+String.valueOf(GZVDATUMDOCUMENT));
		sb.append(",GZVDATUMDOCUMENTINDICATOR="+GZVDATUMDOCUMENTINDICATOR);
		sb.append(",GZVBESCHRIJVINGDOCUMENT="+GZVBESCHRIJVINGDOCUMENT);
		sb.append(",GZVAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(GZVAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",GZVDATUMINGANGONDERZOEK="+String.valueOf(GZVDATUMINGANGONDERZOEK));
		sb.append(",GZVDATUMINGANGONDERZOEKINDICATOR="+GZVDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",GZVDATUMEINDEONDERZOEK="+String.valueOf(GZVDATUMEINDEONDERZOEK));
		sb.append(",GZVDATUMEINDEONDERZOEKINDICATOR="+GZVDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",GZVINGANGSDATUMGELDIGHEID="+String.valueOf(GZVINGANGSDATUMGELDIGHEID));
		sb.append(",GZVINGANGSDATUMGELDIGHEIDINDICATOR="+GZVINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",GZVDATUMVANOPNEMING="+String.valueOf(GZVDATUMVANOPNEMING));
		sb.append(",GZVDATUMVANOPNEMINGINDICATOR="+GZVDATUMVANOPNEMINGINDICATOR);
		sb.append(",KSRAANDUIDINGEUROPEESKIESRECHT="+String.valueOf(KSRAANDUIDINGEUROPEESKIESRECHT));
		sb.append(",KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT="+String.valueOf(KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT));
		sb.append(",KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR="+KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR);
		sb.append(",KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT="+String.valueOf(KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT));
		sb.append(",KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR="+KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR);
		sb.append(",KSRAANDUIDINGUITGESLOTENKIESRECHT="+KSRAANDUIDINGUITGESLOTENKIESRECHT);
		sb.append(",KSREINDDATUMUITSLUITINGKIESRECHT="+String.valueOf(KSREINDDATUMUITSLUITINGKIESRECHT));
		sb.append(",KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR="+KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR);
		sb.append(",KSRGEMEENTEDOCUMENTCODE="+KSRGEMEENTEDOCUMENTCODE);
		sb.append(",KSRDATUMDOCUMENT="+String.valueOf(KSRDATUMDOCUMENT));
		sb.append(",KSRDATUMDOCUMENTINDICATOR="+KSRDATUMDOCUMENTINDICATOR);
		sb.append(",KSRBESCHRIJVINGDOCUMENT="+KSRBESCHRIJVINGDOCUMENT);
		sb.append(",VWSGEMEENTEVANINSCHRIJVINGCODE="+VWSGEMEENTEVANINSCHRIJVINGCODE);
		sb.append(",VWSDATUMINSCHRIJVING="+String.valueOf(VWSDATUMINSCHRIJVING));
		sb.append(",VWSDATUMINSCHRIJVINGINDICATOR="+VWSDATUMINSCHRIJVINGINDICATOR);
		sb.append(",VWSINDICATIEGEHEIM="+VWSINDICATIEGEHEIM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_persoonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal PRSBURGERSERVICENUMMER;

				public BigDecimal getPRSBURGERSERVICENUMMER () {
					return this.PRSBURGERSERVICENUMMER;
				}
				
			    public String PRSVOORNAMEN;

				public String getPRSVOORNAMEN () {
					return this.PRSVOORNAMEN;
				}
				
			    public String PRSEERSTEVOORNAAM;

				public String getPRSEERSTEVOORNAAM () {
					return this.PRSEERSTEVOORNAAM;
				}
				
			    public String PRSVOORLETTERS;

				public String getPRSVOORLETTERS () {
					return this.PRSVOORLETTERS;
				}
				
			    public String PRSADELLIJKETITELCODE;

				public String getPRSADELLIJKETITELCODE () {
					return this.PRSADELLIJKETITELCODE;
				}
				
			    public String PRSVOORVOEGSELGESLACHTSNAAM;

				public String getPRSVOORVOEGSELGESLACHTSNAAM () {
					return this.PRSVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String PRSGESLACHTSNAAM;

				public String getPRSGESLACHTSNAAM () {
					return this.PRSGESLACHTSNAAM;
				}
				
			    public String PRSNAAMOPGEMAAKT;

				public String getPRSNAAMOPGEMAAKT () {
					return this.PRSNAAMOPGEMAAKT;
				}
				
			    public java.util.Date PRSGEBOORTEDATUM;

				public java.util.Date getPRSGEBOORTEDATUM () {
					return this.PRSGEBOORTEDATUM;
				}
				
			    public String PRSGEBOORTEDATUMINDICATOR;

				public String getPRSGEBOORTEDATUMINDICATOR () {
					return this.PRSGEBOORTEDATUMINDICATOR;
				}
				
			    public String PRSGEBOORTEPLAATSCODE;

				public String getPRSGEBOORTEPLAATSCODE () {
					return this.PRSGEBOORTEPLAATSCODE;
				}
				
			    public String PRSGEBOORTEPLAATSOMSCHRIJVING;

				public String getPRSGEBOORTEPLAATSOMSCHRIJVING () {
					return this.PRSGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String PRSGEBOORTELANDCODE;

				public String getPRSGEBOORTELANDCODE () {
					return this.PRSGEBOORTELANDCODE;
				}
				
			    public String PRSGESLACHTSAANDUIDINGCODE;

				public String getPRSGESLACHTSAANDUIDINGCODE () {
					return this.PRSGESLACHTSAANDUIDINGCODE;
				}
				
			    public BigDecimal PRSVORIGANUMMER;

				public BigDecimal getPRSVORIGANUMMER () {
					return this.PRSVORIGANUMMER;
				}
				
			    public BigDecimal PRSVOLGENDANUMMER;

				public BigDecimal getPRSVOLGENDANUMMER () {
					return this.PRSVOLGENDANUMMER;
				}
				
			    public String PRSAANDUIDINGNAAMGEBRUIK;

				public String getPRSAANDUIDINGNAAMGEBRUIK () {
					return this.PRSAANDUIDINGNAAMGEBRUIK;
				}
				
			    public String PRSREGISTERGEMEENTEAKTECODE;

				public String getPRSREGISTERGEMEENTEAKTECODE () {
					return this.PRSREGISTERGEMEENTEAKTECODE;
				}
				
			    public String PRSAKTENUMMER;

				public String getPRSAKTENUMMER () {
					return this.PRSAKTENUMMER;
				}
				
			    public String PRSGEMEENTEDOCUMENTCODE;

				public String getPRSGEMEENTEDOCUMENTCODE () {
					return this.PRSGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date PRSDATUMDOCUMENT;

				public java.util.Date getPRSDATUMDOCUMENT () {
					return this.PRSDATUMDOCUMENT;
				}
				
			    public String PRSDATUMDOCUMENTINDICATOR;

				public String getPRSDATUMDOCUMENTINDICATOR () {
					return this.PRSDATUMDOCUMENTINDICATOR;
				}
				
			    public String PRSBESCHRIJVINGDOCUMENT;

				public String getPRSBESCHRIJVINGDOCUMENT () {
					return this.PRSBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal PRSAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getPRSAANDUIDINGGEGEVENSONDERZOEK () {
					return this.PRSAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date PRSDATUMINGANGONDERZOEK;

				public java.util.Date getPRSDATUMINGANGONDERZOEK () {
					return this.PRSDATUMINGANGONDERZOEK;
				}
				
			    public String PRSDATUMINGANGONDERZOEKINDICATOR;

				public String getPRSDATUMINGANGONDERZOEKINDICATOR () {
					return this.PRSDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSDATUMEINDEONDERZOEK;

				public java.util.Date getPRSDATUMEINDEONDERZOEK () {
					return this.PRSDATUMEINDEONDERZOEK;
				}
				
			    public String PRSDATUMEINDEONDERZOEKINDICATOR;

				public String getPRSDATUMEINDEONDERZOEKINDICATOR () {
					return this.PRSDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date PRSINGANGSDATUMGELDIGHEID;

				public java.util.Date getPRSINGANGSDATUMGELDIGHEID () {
					return this.PRSINGANGSDATUMGELDIGHEID;
				}
				
			    public String PRSINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getPRSINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.PRSINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date PRSDATUMVANOPNEMING;

				public java.util.Date getPRSDATUMVANOPNEMING () {
					return this.PRSDATUMVANOPNEMING;
				}
				
			    public String PRSDATUMVANOPNEMINGINDICATOR;

				public String getPRSDATUMVANOPNEMINGINDICATOR () {
					return this.PRSDATUMVANOPNEMINGINDICATOR;
				}
				
			    public BigDecimal PRSSTATUSPERSOON;

				public BigDecimal getPRSSTATUSPERSOON () {
					return this.PRSSTATUSPERSOON;
				}
				
			    public BigDecimal PRSRIJKSKODENATIONALITEIT;

				public BigDecimal getPRSRIJKSKODENATIONALITEIT () {
					return this.PRSRIJKSKODENATIONALITEIT;
				}
				
			    public BigDecimal PRSGEZINSVERHOUDING;

				public BigDecimal getPRSGEZINSVERHOUDING () {
					return this.PRSGEZINSVERHOUDING;
				}
				
			    public BigDecimal PRSGEZINSSTERKTE;

				public BigDecimal getPRSGEZINSSTERKTE () {
					return this.PRSGEZINSSTERKTE;
				}
				
			    public BigDecimal PRSANUMMERGEZINSHOOFD;

				public BigDecimal getPRSANUMMERGEZINSHOOFD () {
					return this.PRSANUMMERGEZINSHOOFD;
				}
				
			    public String PRSBURGERLIJKESTAAT;

				public String getPRSBURGERLIJKESTAAT () {
					return this.PRSBURGERLIJKESTAAT;
				}
				
			    public String PRSNAAMSWIJZIGINGINDICATIE;

				public String getPRSNAAMSWIJZIGINGINDICATIE () {
					return this.PRSNAAMSWIJZIGINGINDICATIE;
				}
				
			    public java.util.Date PRSDATUMADRESHOUDINGAANEENGESLOTEN;

				public java.util.Date getPRSDATUMADRESHOUDINGAANEENGESLOTEN () {
					return this.PRSDATUMADRESHOUDINGAANEENGESLOTEN;
				}
				
			    public String PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR;

				public String getPRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR () {
					return this.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR;
				}
				
			    public BigDecimal OU1ANUMMER;

				public BigDecimal getOU1ANUMMER () {
					return this.OU1ANUMMER;
				}
				
			    public BigDecimal OU1BURGERSERVICENUMMER;

				public BigDecimal getOU1BURGERSERVICENUMMER () {
					return this.OU1BURGERSERVICENUMMER;
				}
				
			    public String OU1VOORNAMEN;

				public String getOU1VOORNAMEN () {
					return this.OU1VOORNAMEN;
				}
				
			    public String OU1VOORLETTERS;

				public String getOU1VOORLETTERS () {
					return this.OU1VOORLETTERS;
				}
				
			    public String OU1ADELLIJKETITELCODE;

				public String getOU1ADELLIJKETITELCODE () {
					return this.OU1ADELLIJKETITELCODE;
				}
				
			    public String OU1VOORVOEGSELGESLACHTSNAAM;

				public String getOU1VOORVOEGSELGESLACHTSNAAM () {
					return this.OU1VOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String OU1GESLACHTSNAAM;

				public String getOU1GESLACHTSNAAM () {
					return this.OU1GESLACHTSNAAM;
				}
				
			    public String OU1NAAMOPGEMAAKT;

				public String getOU1NAAMOPGEMAAKT () {
					return this.OU1NAAMOPGEMAAKT;
				}
				
			    public java.util.Date OU1GEBOORTEDATUM;

				public java.util.Date getOU1GEBOORTEDATUM () {
					return this.OU1GEBOORTEDATUM;
				}
				
			    public String OU1GEBOORTEDATUMINDICATOR;

				public String getOU1GEBOORTEDATUMINDICATOR () {
					return this.OU1GEBOORTEDATUMINDICATOR;
				}
				
			    public String OU1GEBOORTEPLAATSCODE;

				public String getOU1GEBOORTEPLAATSCODE () {
					return this.OU1GEBOORTEPLAATSCODE;
				}
				
			    public String OU1GEBOORTEPLAATSOMSCHRIJVING;

				public String getOU1GEBOORTEPLAATSOMSCHRIJVING () {
					return this.OU1GEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String OU1GEBOORTELANDCODE;

				public String getOU1GEBOORTELANDCODE () {
					return this.OU1GEBOORTELANDCODE;
				}
				
			    public String OU1GESLACHTSAANDUIDINGCODE;

				public String getOU1GESLACHTSAANDUIDINGCODE () {
					return this.OU1GESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING;

				public java.util.Date getOU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING () {
					return this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING;
				}
				
			    public String OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;

				public String getOU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR () {
					return this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
				}
				
			    public String OU1REGISTERGEMEENTEAKTECODE;

				public String getOU1REGISTERGEMEENTEAKTECODE () {
					return this.OU1REGISTERGEMEENTEAKTECODE;
				}
				
			    public String OU1AKTENUMMER;

				public String getOU1AKTENUMMER () {
					return this.OU1AKTENUMMER;
				}
				
			    public String OU1GEMEENTEDOCUMENTCODE;

				public String getOU1GEMEENTEDOCUMENTCODE () {
					return this.OU1GEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OU1DATUMDOCUMENT;

				public java.util.Date getOU1DATUMDOCUMENT () {
					return this.OU1DATUMDOCUMENT;
				}
				
			    public String OU1DATUMDOCUMENTINDICATOR;

				public String getOU1DATUMDOCUMENTINDICATOR () {
					return this.OU1DATUMDOCUMENTINDICATOR;
				}
				
			    public String OU1BESCHRIJVINGDOCUMENT;

				public String getOU1BESCHRIJVINGDOCUMENT () {
					return this.OU1BESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OU1AANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOU1AANDUIDINGGEGEVENSONDERZOEK () {
					return this.OU1AANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OU1DATUMINGANGONDERZOEK;

				public java.util.Date getOU1DATUMINGANGONDERZOEK () {
					return this.OU1DATUMINGANGONDERZOEK;
				}
				
			    public String OU1DATUMINGANGONDERZOEKINDICATOR;

				public String getOU1DATUMINGANGONDERZOEKINDICATOR () {
					return this.OU1DATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1DATUMEINDEONDERZOEK;

				public java.util.Date getOU1DATUMEINDEONDERZOEK () {
					return this.OU1DATUMEINDEONDERZOEK;
				}
				
			    public String OU1DATUMEINDEONDERZOEKINDICATOR;

				public String getOU1DATUMEINDEONDERZOEKINDICATOR () {
					return this.OU1DATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU1INGANGSDATUMGELDIGHEID;

				public java.util.Date getOU1INGANGSDATUMGELDIGHEID () {
					return this.OU1INGANGSDATUMGELDIGHEID;
				}
				
			    public String OU1INGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOU1INGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OU1INGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OU1DATUMVANOPNEMING;

				public java.util.Date getOU1DATUMVANOPNEMING () {
					return this.OU1DATUMVANOPNEMING;
				}
				
			    public String OU1DATUMVANOPNEMINGINDICATOR;

				public String getOU1DATUMVANOPNEMINGINDICATOR () {
					return this.OU1DATUMVANOPNEMINGINDICATOR;
				}
				
			    public BigDecimal OU2ANUMMER;

				public BigDecimal getOU2ANUMMER () {
					return this.OU2ANUMMER;
				}
				
			    public BigDecimal OU2BURGERSERVICENUMMER;

				public BigDecimal getOU2BURGERSERVICENUMMER () {
					return this.OU2BURGERSERVICENUMMER;
				}
				
			    public String OU2VOORNAMEN;

				public String getOU2VOORNAMEN () {
					return this.OU2VOORNAMEN;
				}
				
			    public String OU2VOORLETTERS;

				public String getOU2VOORLETTERS () {
					return this.OU2VOORLETTERS;
				}
				
			    public String OU2ADELLIJKETITELCODE;

				public String getOU2ADELLIJKETITELCODE () {
					return this.OU2ADELLIJKETITELCODE;
				}
				
			    public String OU2VOORVOEGSELGESLACHTSNAAM;

				public String getOU2VOORVOEGSELGESLACHTSNAAM () {
					return this.OU2VOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String OU2GESLACHTSNAAM;

				public String getOU2GESLACHTSNAAM () {
					return this.OU2GESLACHTSNAAM;
				}
				
			    public String OU2NAAMOPGEMAAKT;

				public String getOU2NAAMOPGEMAAKT () {
					return this.OU2NAAMOPGEMAAKT;
				}
				
			    public java.util.Date OU2GEBOORTEDATUM;

				public java.util.Date getOU2GEBOORTEDATUM () {
					return this.OU2GEBOORTEDATUM;
				}
				
			    public String OU2GEBOORTEDATUMINDICATOR;

				public String getOU2GEBOORTEDATUMINDICATOR () {
					return this.OU2GEBOORTEDATUMINDICATOR;
				}
				
			    public String OU2GEBOORTEPLAATSCODE;

				public String getOU2GEBOORTEPLAATSCODE () {
					return this.OU2GEBOORTEPLAATSCODE;
				}
				
			    public String OU2GEBOORTEPLAATSOMSCHRIJVING;

				public String getOU2GEBOORTEPLAATSOMSCHRIJVING () {
					return this.OU2GEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String OU2GEBOORTELANDCODE;

				public String getOU2GEBOORTELANDCODE () {
					return this.OU2GEBOORTELANDCODE;
				}
				
			    public String OU2GESLACHTSAANDUIDINGCODE;

				public String getOU2GESLACHTSAANDUIDINGCODE () {
					return this.OU2GESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING;

				public java.util.Date getOU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING () {
					return this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING;
				}
				
			    public String OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;

				public String getOU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR () {
					return this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
				}
				
			    public String OU2REGISTERGEMEENTEAKTECODE;

				public String getOU2REGISTERGEMEENTEAKTECODE () {
					return this.OU2REGISTERGEMEENTEAKTECODE;
				}
				
			    public String OU2AKTENUMMER;

				public String getOU2AKTENUMMER () {
					return this.OU2AKTENUMMER;
				}
				
			    public String OU2GEMEENTEDOCUMENTCODE;

				public String getOU2GEMEENTEDOCUMENTCODE () {
					return this.OU2GEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OU2DATUMDOCUMENT;

				public java.util.Date getOU2DATUMDOCUMENT () {
					return this.OU2DATUMDOCUMENT;
				}
				
			    public String OU2DATUMDOCUMENTINDICATOR;

				public String getOU2DATUMDOCUMENTINDICATOR () {
					return this.OU2DATUMDOCUMENTINDICATOR;
				}
				
			    public String OU2BESCHRIJVINGDOCUMENT;

				public String getOU2BESCHRIJVINGDOCUMENT () {
					return this.OU2BESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OU2AANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOU2AANDUIDINGGEGEVENSONDERZOEK () {
					return this.OU2AANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OU2DATUMINGANGONDERZOEK;

				public java.util.Date getOU2DATUMINGANGONDERZOEK () {
					return this.OU2DATUMINGANGONDERZOEK;
				}
				
			    public String OU2DATUMINGANGONDERZOEKINDICATOR;

				public String getOU2DATUMINGANGONDERZOEKINDICATOR () {
					return this.OU2DATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU2DATUMEINDEONDERZOEK;

				public java.util.Date getOU2DATUMEINDEONDERZOEK () {
					return this.OU2DATUMEINDEONDERZOEK;
				}
				
			    public String OU2DATUMEINDEONDERZOEKINDICATOR;

				public String getOU2DATUMEINDEONDERZOEKINDICATOR () {
					return this.OU2DATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OU2INGANGSDATUMGELDIGHEID;

				public java.util.Date getOU2INGANGSDATUMGELDIGHEID () {
					return this.OU2INGANGSDATUMGELDIGHEID;
				}
				
			    public String OU2INGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOU2INGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OU2INGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OU2DATUMVANOPNEMING;

				public java.util.Date getOU2DATUMVANOPNEMING () {
					return this.OU2DATUMVANOPNEMING;
				}
				
			    public String OU2DATUMVANOPNEMINGINDICATOR;

				public String getOU2DATUMVANOPNEMINGINDICATOR () {
					return this.OU2DATUMVANOPNEMINGINDICATOR;
				}
				
			    public java.util.Date OVLDATUMOVERLIJDEN;

				public java.util.Date getOVLDATUMOVERLIJDEN () {
					return this.OVLDATUMOVERLIJDEN;
				}
				
			    public String OVLDATUMOVERLIJDENINDICATOR;

				public String getOVLDATUMOVERLIJDENINDICATOR () {
					return this.OVLDATUMOVERLIJDENINDICATOR;
				}
				
			    public String OVLPLAATSOVERLIJDENCODE;

				public String getOVLPLAATSOVERLIJDENCODE () {
					return this.OVLPLAATSOVERLIJDENCODE;
				}
				
			    public String OVLPLAATSOVERLIJDENOMSCHRIJVING;

				public String getOVLPLAATSOVERLIJDENOMSCHRIJVING () {
					return this.OVLPLAATSOVERLIJDENOMSCHRIJVING;
				}
				
			    public String OVLLANDOVERLIJDENCODE;

				public String getOVLLANDOVERLIJDENCODE () {
					return this.OVLLANDOVERLIJDENCODE;
				}
				
			    public String OVLREGISTERGEMEENTEAKTECODE;

				public String getOVLREGISTERGEMEENTEAKTECODE () {
					return this.OVLREGISTERGEMEENTEAKTECODE;
				}
				
			    public String OVLAKTENUMMER;

				public String getOVLAKTENUMMER () {
					return this.OVLAKTENUMMER;
				}
				
			    public String OVLGEMEENTEDOCUMENTCODE;

				public String getOVLGEMEENTEDOCUMENTCODE () {
					return this.OVLGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date OVLDATUMDOCUMENT;

				public java.util.Date getOVLDATUMDOCUMENT () {
					return this.OVLDATUMDOCUMENT;
				}
				
			    public String OVLDATUMDOCUMENTINDICATOR;

				public String getOVLDATUMDOCUMENTINDICATOR () {
					return this.OVLDATUMDOCUMENTINDICATOR;
				}
				
			    public String OVLBESCHRIJVINGDOCUMENT;

				public String getOVLBESCHRIJVINGDOCUMENT () {
					return this.OVLBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal OVLAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getOVLAANDUIDINGGEGEVENSONDERZOEK () {
					return this.OVLAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date OVLDATUMINGANGONDERZOEK;

				public java.util.Date getOVLDATUMINGANGONDERZOEK () {
					return this.OVLDATUMINGANGONDERZOEK;
				}
				
			    public String OVLDATUMINGANGONDERZOEKINDICATOR;

				public String getOVLDATUMINGANGONDERZOEKINDICATOR () {
					return this.OVLDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLDATUMEINDEONDERZOEK;

				public java.util.Date getOVLDATUMEINDEONDERZOEK () {
					return this.OVLDATUMEINDEONDERZOEK;
				}
				
			    public String OVLDATUMEINDEONDERZOEKINDICATOR;

				public String getOVLDATUMEINDEONDERZOEKINDICATOR () {
					return this.OVLDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date OVLINGANGSDATUMGELDIGHEID;

				public java.util.Date getOVLINGANGSDATUMGELDIGHEID () {
					return this.OVLINGANGSDATUMGELDIGHEID;
				}
				
			    public String OVLINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getOVLINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.OVLINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date OVLDATUMVANOPNEMING;

				public java.util.Date getOVLDATUMVANOPNEMING () {
					return this.OVLDATUMVANOPNEMING;
				}
				
			    public String OVLDATUMVANOPNEMINGINDICATOR;

				public String getOVLDATUMVANOPNEMINGINDICATOR () {
					return this.OVLDATUMVANOPNEMINGINDICATOR;
				}
				
			    public java.util.Date INSDATUMINGANGBLOKKERINGPL;

				public java.util.Date getINSDATUMINGANGBLOKKERINGPL () {
					return this.INSDATUMINGANGBLOKKERINGPL;
				}
				
			    public String INSDATUMINGANGBLOKKERINGPLINDICATOR;

				public String getINSDATUMINGANGBLOKKERINGPLINDICATOR () {
					return this.INSDATUMINGANGBLOKKERINGPLINDICATOR;
				}
				
			    public java.util.Date INSDATUMOPSCHORTINGBIJHOUDING;

				public java.util.Date getINSDATUMOPSCHORTINGBIJHOUDING () {
					return this.INSDATUMOPSCHORTINGBIJHOUDING;
				}
				
			    public String INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR;

				public String getINSDATUMOPSCHORTINGBIJHOUDINGINDICATOR () {
					return this.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR;
				}
				
			    public String INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING;

				public String getINSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING () {
					return this.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING;
				}
				
			    public java.util.Date INSDATUMEERSTEINSCHRIJVINGGBA;

				public java.util.Date getINSDATUMEERSTEINSCHRIJVINGGBA () {
					return this.INSDATUMEERSTEINSCHRIJVINGGBA;
				}
				
			    public String INSDATUMEERSTEINSCHRIJVINGINDICATOR;

				public String getINSDATUMEERSTEINSCHRIJVINGINDICATOR () {
					return this.INSDATUMEERSTEINSCHRIJVINGINDICATOR;
				}
				
			    public String INSGEMEENTEWAARPKZICHBEVINDTCODE;

				public String getINSGEMEENTEWAARPKZICHBEVINDTCODE () {
					return this.INSGEMEENTEWAARPKZICHBEVINDTCODE;
				}
				
			    public String INSINDICATIEGEHEIM;

				public String getINSINDICATIEGEHEIM () {
					return this.INSINDICATIEGEHEIM;
				}
				
			    public BigDecimal INSVERSIENUMMER;

				public BigDecimal getINSVERSIENUMMER () {
					return this.INSVERSIENUMMER;
				}
				
			    public String INSDATUMTIJDSTEMPEL;

				public String getINSDATUMTIJDSTEMPEL () {
					return this.INSDATUMTIJDSTEMPEL;
				}
				
			    public String INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD;

				public String getINSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD () {
					return this.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD;
				}
				
			    public String VBLGEMEENTEVANINSCHRIJVINGCODE;

				public String getVBLGEMEENTEVANINSCHRIJVINGCODE () {
					return this.VBLGEMEENTEVANINSCHRIJVINGCODE;
				}
				
			    public java.util.Date VBLDATUMINSCHRIJVING;

				public java.util.Date getVBLDATUMINSCHRIJVING () {
					return this.VBLDATUMINSCHRIJVING;
				}
				
			    public String VBLDATUMINSCHRIJVINGINDICATOR;

				public String getVBLDATUMINSCHRIJVINGINDICATOR () {
					return this.VBLDATUMINSCHRIJVINGINDICATOR;
				}
				
			    public String VBLFUNCTIEADRES;

				public String getVBLFUNCTIEADRES () {
					return this.VBLFUNCTIEADRES;
				}
				
			    public String VBLGEMEENTEDEEL;

				public String getVBLGEMEENTEDEEL () {
					return this.VBLGEMEENTEDEEL;
				}
				
			    public java.util.Date VBLDATUMAANVANGADRESHOUDING;

				public java.util.Date getVBLDATUMAANVANGADRESHOUDING () {
					return this.VBLDATUMAANVANGADRESHOUDING;
				}
				
			    public String VBLDATUMAANVANGADRESHOUDINGINDICATOR;

				public String getVBLDATUMAANVANGADRESHOUDINGINDICATOR () {
					return this.VBLDATUMAANVANGADRESHOUDINGINDICATOR;
				}
				
			    public String VBLSTRAATNAAM;

				public String getVBLSTRAATNAAM () {
					return this.VBLSTRAATNAAM;
				}
				
			    public String VBLNAAMOPENBARERUIMTE;

				public String getVBLNAAMOPENBARERUIMTE () {
					return this.VBLNAAMOPENBARERUIMTE;
				}
				
			    public String VBLADRESOPGEMAAKT;

				public String getVBLADRESOPGEMAAKT () {
					return this.VBLADRESOPGEMAAKT;
				}
				
			    public String VBLWOONPLAATSOPGEMAAKT;

				public String getVBLWOONPLAATSOPGEMAAKT () {
					return this.VBLWOONPLAATSOPGEMAAKT;
				}
				
			    public BigDecimal VBLHUISNUMMER;

				public BigDecimal getVBLHUISNUMMER () {
					return this.VBLHUISNUMMER;
				}
				
			    public String VBLHUISLETTER;

				public String getVBLHUISLETTER () {
					return this.VBLHUISLETTER;
				}
				
			    public String VBLHUISNUMMERTOEVOEGING;

				public String getVBLHUISNUMMERTOEVOEGING () {
					return this.VBLHUISNUMMERTOEVOEGING;
				}
				
			    public String VBLAANDUIDINGBIJHUISNUMMER;

				public String getVBLAANDUIDINGBIJHUISNUMMER () {
					return this.VBLAANDUIDINGBIJHUISNUMMER;
				}
				
			    public String VBLPOSTCODE;

				public String getVBLPOSTCODE () {
					return this.VBLPOSTCODE;
				}
				
			    public String VBLWOONPLAATSNAAM;

				public String getVBLWOONPLAATSNAAM () {
					return this.VBLWOONPLAATSNAAM;
				}
				
			    public String VBLIDENTIFICATIECODEVERBLIJFPLAATS;

				public String getVBLIDENTIFICATIECODEVERBLIJFPLAATS () {
					return this.VBLIDENTIFICATIECODEVERBLIJFPLAATS;
				}
				
			    public String VBLIDENTIFICATIECODENUMMERAANDUIDING;

				public String getVBLIDENTIFICATIECODENUMMERAANDUIDING () {
					return this.VBLIDENTIFICATIECODENUMMERAANDUIDING;
				}
				
			    public String VBLLOCATIEBESCHRIJVING;

				public String getVBLLOCATIEBESCHRIJVING () {
					return this.VBLLOCATIEBESCHRIJVING;
				}
				
			    public String VBLLANDADRESBUITENLANDCODE;

				public String getVBLLANDADRESBUITENLANDCODE () {
					return this.VBLLANDADRESBUITENLANDCODE;
				}
				
			    public java.util.Date VBLDATUMAANVANGADRESBUITENLAND;

				public java.util.Date getVBLDATUMAANVANGADRESBUITENLAND () {
					return this.VBLDATUMAANVANGADRESBUITENLAND;
				}
				
			    public String VBLDATUMAANVANGADRESBUITENLANDINDICATOR;

				public String getVBLDATUMAANVANGADRESBUITENLANDINDICATOR () {
					return this.VBLDATUMAANVANGADRESBUITENLANDINDICATOR;
				}
				
			    public String VBLREGEL1ADRESBUITENLAND;

				public String getVBLREGEL1ADRESBUITENLAND () {
					return this.VBLREGEL1ADRESBUITENLAND;
				}
				
			    public String VBLREGEL2ADRESBUITENLAND;

				public String getVBLREGEL2ADRESBUITENLAND () {
					return this.VBLREGEL2ADRESBUITENLAND;
				}
				
			    public String VBLREGEL3ADRESBUITENLAND;

				public String getVBLREGEL3ADRESBUITENLAND () {
					return this.VBLREGEL3ADRESBUITENLAND;
				}
				
			    public String VBLLANDVANWAARINGESCHREVENCODE;

				public String getVBLLANDVANWAARINGESCHREVENCODE () {
					return this.VBLLANDVANWAARINGESCHREVENCODE;
				}
				
			    public java.util.Date VBLDATUMVESTIGINGINNEDERLAND;

				public java.util.Date getVBLDATUMVESTIGINGINNEDERLAND () {
					return this.VBLDATUMVESTIGINGINNEDERLAND;
				}
				
			    public String VBLDATUMVESTIGINGINNEDERLANDINDICATOR;

				public String getVBLDATUMVESTIGINGINNEDERLANDINDICATOR () {
					return this.VBLDATUMVESTIGINGINNEDERLANDINDICATOR;
				}
				
			    public String VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING;

				public String getVBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING () {
					return this.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING;
				}
				
			    public BigDecimal VBLINDICATIEDOCUMENT;

				public BigDecimal getVBLINDICATIEDOCUMENT () {
					return this.VBLINDICATIEDOCUMENT;
				}
				
			    public BigDecimal VBLAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getVBLAANDUIDINGGEGEVENSONDERZOEK () {
					return this.VBLAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date VBLDATUMINGANGONDERZOEK;

				public java.util.Date getVBLDATUMINGANGONDERZOEK () {
					return this.VBLDATUMINGANGONDERZOEK;
				}
				
			    public String VBLDATUMINGANGONDERZOEKINDICATOR;

				public String getVBLDATUMINGANGONDERZOEKINDICATOR () {
					return this.VBLDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLDATUMEINDEONDERZOEK;

				public java.util.Date getVBLDATUMEINDEONDERZOEK () {
					return this.VBLDATUMEINDEONDERZOEK;
				}
				
			    public String VBLDATUMEINDEONDERZOEKINDICATOR;

				public String getVBLDATUMEINDEONDERZOEKINDICATOR () {
					return this.VBLDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLINGANGSDATUMGELDIGHEID;

				public java.util.Date getVBLINGANGSDATUMGELDIGHEID () {
					return this.VBLINGANGSDATUMGELDIGHEID;
				}
				
			    public String VBLINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getVBLINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.VBLINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date VBLDATUMVANOPNEMING;

				public java.util.Date getVBLDATUMVANOPNEMING () {
					return this.VBLDATUMVANOPNEMING;
				}
				
			    public String VBLDATUMVANOPNEMINGINDICATOR;

				public String getVBLDATUMVANOPNEMINGINDICATOR () {
					return this.VBLDATUMVANOPNEMINGINDICATOR;
				}
				
			    public String VBLSOORTPANDCODE;

				public String getVBLSOORTPANDCODE () {
					return this.VBLSOORTPANDCODE;
				}
				
			    public String VBLSOORTPANDOMSCHRIJVING;

				public String getVBLSOORTPANDOMSCHRIJVING () {
					return this.VBLSOORTPANDOMSCHRIJVING;
				}
				
			    public String VBLWIJKCODE;

				public String getVBLWIJKCODE () {
					return this.VBLWIJKCODE;
				}
				
			    public String VBLWIJKOMSCHRIJVING;

				public String getVBLWIJKOMSCHRIJVING () {
					return this.VBLWIJKOMSCHRIJVING;
				}
				
			    public String VBLPLANALOGISCHEWIJKCODE;

				public String getVBLPLANALOGISCHEWIJKCODE () {
					return this.VBLPLANALOGISCHEWIJKCODE;
				}
				
			    public String VBLPLANALOGISCHEWIJKOMSCHRIJVING;

				public String getVBLPLANALOGISCHEWIJKOMSCHRIJVING () {
					return this.VBLPLANALOGISCHEWIJKOMSCHRIJVING;
				}
				
			    public BigDecimal VBLANUMMERHOOFDBEWONER;

				public BigDecimal getVBLANUMMERHOOFDBEWONER () {
					return this.VBLANUMMERHOOFDBEWONER;
				}
				
			    public String VBTAANDUIDINGVERBLIJFSTITELCODE;

				public String getVBTAANDUIDINGVERBLIJFSTITELCODE () {
					return this.VBTAANDUIDINGVERBLIJFSTITELCODE;
				}
				
			    public String VBTVERBLIJFSTITELVERVALLEN;

				public String getVBTVERBLIJFSTITELVERVALLEN () {
					return this.VBTVERBLIJFSTITELVERVALLEN;
				}
				
			    public java.util.Date VBTDATUMEINDEVERBLIJFSTITEL;

				public java.util.Date getVBTDATUMEINDEVERBLIJFSTITEL () {
					return this.VBTDATUMEINDEVERBLIJFSTITEL;
				}
				
			    public String VBTDATUMEINDEVERBLIJFSTITELINDICATOR;

				public String getVBTDATUMEINDEVERBLIJFSTITELINDICATOR () {
					return this.VBTDATUMEINDEVERBLIJFSTITELINDICATOR;
				}
				
			    public java.util.Date VBTINGANGSDATUMVERBLIJFSTITEL;

				public java.util.Date getVBTINGANGSDATUMVERBLIJFSTITEL () {
					return this.VBTINGANGSDATUMVERBLIJFSTITEL;
				}
				
			    public String VBTINGANGSDATUMVERBLIJFSTITELINDICATOR;

				public String getVBTINGANGSDATUMVERBLIJFSTITELINDICATOR () {
					return this.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR;
				}
				
			    public BigDecimal VBTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getVBTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.VBTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date VBTDATUMINGANGONDERZOEK;

				public java.util.Date getVBTDATUMINGANGONDERZOEK () {
					return this.VBTDATUMINGANGONDERZOEK;
				}
				
			    public String VBTDATUMINGANGONDERZOEKINDICATOR;

				public String getVBTDATUMINGANGONDERZOEKINDICATOR () {
					return this.VBTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBTDATUMEINDEONDERZOEK;

				public java.util.Date getVBTDATUMEINDEONDERZOEK () {
					return this.VBTDATUMEINDEONDERZOEK;
				}
				
			    public String VBTDATUMEINDEONDERZOEKINDICATOR;

				public String getVBTDATUMEINDEONDERZOEKINDICATOR () {
					return this.VBTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBTINGANGSDATUMGELDIGHEID;

				public java.util.Date getVBTINGANGSDATUMGELDIGHEID () {
					return this.VBTINGANGSDATUMGELDIGHEID;
				}
				
			    public String VBTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getVBTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.VBTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date VBTDATUMVANOPNEMING;

				public java.util.Date getVBTDATUMVANOPNEMING () {
					return this.VBTDATUMVANOPNEMING;
				}
				
			    public String VBTDATUMVANOPNEMINGINDICATOR;

				public String getVBTDATUMVANOPNEMINGINDICATOR () {
					return this.VBTDATUMVANOPNEMINGINDICATOR;
				}
				
			    public String GZVINDICATIEGEZAGMINDERJARIGE;

				public String getGZVINDICATIEGEZAGMINDERJARIGE () {
					return this.GZVINDICATIEGEZAGMINDERJARIGE;
				}
				
			    public BigDecimal GZVINDICATIECURATELEREGISTER;

				public BigDecimal getGZVINDICATIECURATELEREGISTER () {
					return this.GZVINDICATIECURATELEREGISTER;
				}
				
			    public String GZVGEMEENTEDOCUMENTCODE;

				public String getGZVGEMEENTEDOCUMENTCODE () {
					return this.GZVGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date GZVDATUMDOCUMENT;

				public java.util.Date getGZVDATUMDOCUMENT () {
					return this.GZVDATUMDOCUMENT;
				}
				
			    public String GZVDATUMDOCUMENTINDICATOR;

				public String getGZVDATUMDOCUMENTINDICATOR () {
					return this.GZVDATUMDOCUMENTINDICATOR;
				}
				
			    public String GZVBESCHRIJVINGDOCUMENT;

				public String getGZVBESCHRIJVINGDOCUMENT () {
					return this.GZVBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal GZVAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getGZVAANDUIDINGGEGEVENSONDERZOEK () {
					return this.GZVAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date GZVDATUMINGANGONDERZOEK;

				public java.util.Date getGZVDATUMINGANGONDERZOEK () {
					return this.GZVDATUMINGANGONDERZOEK;
				}
				
			    public String GZVDATUMINGANGONDERZOEKINDICATOR;

				public String getGZVDATUMINGANGONDERZOEKINDICATOR () {
					return this.GZVDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date GZVDATUMEINDEONDERZOEK;

				public java.util.Date getGZVDATUMEINDEONDERZOEK () {
					return this.GZVDATUMEINDEONDERZOEK;
				}
				
			    public String GZVDATUMEINDEONDERZOEKINDICATOR;

				public String getGZVDATUMEINDEONDERZOEKINDICATOR () {
					return this.GZVDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date GZVINGANGSDATUMGELDIGHEID;

				public java.util.Date getGZVINGANGSDATUMGELDIGHEID () {
					return this.GZVINGANGSDATUMGELDIGHEID;
				}
				
			    public String GZVINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getGZVINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.GZVINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date GZVDATUMVANOPNEMING;

				public java.util.Date getGZVDATUMVANOPNEMING () {
					return this.GZVDATUMVANOPNEMING;
				}
				
			    public String GZVDATUMVANOPNEMINGINDICATOR;

				public String getGZVDATUMVANOPNEMINGINDICATOR () {
					return this.GZVDATUMVANOPNEMINGINDICATOR;
				}
				
			    public BigDecimal KSRAANDUIDINGEUROPEESKIESRECHT;

				public BigDecimal getKSRAANDUIDINGEUROPEESKIESRECHT () {
					return this.KSRAANDUIDINGEUROPEESKIESRECHT;
				}
				
			    public java.util.Date KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT;

				public java.util.Date getKSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT () {
					return this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT;
				}
				
			    public String KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR;

				public String getKSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR () {
					return this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR;
				}
				
			    public java.util.Date KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT;

				public java.util.Date getKSREINDDATUMUITSLUITINGEUROPEESKIESRECHT () {
					return this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT;
				}
				
			    public String KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR;

				public String getKSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR () {
					return this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR;
				}
				
			    public String KSRAANDUIDINGUITGESLOTENKIESRECHT;

				public String getKSRAANDUIDINGUITGESLOTENKIESRECHT () {
					return this.KSRAANDUIDINGUITGESLOTENKIESRECHT;
				}
				
			    public java.util.Date KSREINDDATUMUITSLUITINGKIESRECHT;

				public java.util.Date getKSREINDDATUMUITSLUITINGKIESRECHT () {
					return this.KSREINDDATUMUITSLUITINGKIESRECHT;
				}
				
			    public String KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR;

				public String getKSREINDDATUMUITSLUITINGKIESRECHTINDICATOR () {
					return this.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR;
				}
				
			    public String KSRGEMEENTEDOCUMENTCODE;

				public String getKSRGEMEENTEDOCUMENTCODE () {
					return this.KSRGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date KSRDATUMDOCUMENT;

				public java.util.Date getKSRDATUMDOCUMENT () {
					return this.KSRDATUMDOCUMENT;
				}
				
			    public String KSRDATUMDOCUMENTINDICATOR;

				public String getKSRDATUMDOCUMENTINDICATOR () {
					return this.KSRDATUMDOCUMENTINDICATOR;
				}
				
			    public String KSRBESCHRIJVINGDOCUMENT;

				public String getKSRBESCHRIJVINGDOCUMENT () {
					return this.KSRBESCHRIJVINGDOCUMENT;
				}
				
			    public String VWSGEMEENTEVANINSCHRIJVINGCODE;

				public String getVWSGEMEENTEVANINSCHRIJVINGCODE () {
					return this.VWSGEMEENTEVANINSCHRIJVINGCODE;
				}
				
			    public java.util.Date VWSDATUMINSCHRIJVING;

				public java.util.Date getVWSDATUMINSCHRIJVING () {
					return this.VWSDATUMINSCHRIJVING;
				}
				
			    public String VWSDATUMINSCHRIJVINGINDICATOR;

				public String getVWSDATUMINSCHRIJVINGINDICATOR () {
					return this.VWSDATUMINSCHRIJVINGINDICATOR;
				}
				
			    public String VWSINDICATIEGEHEIM;

				public String getVWSINDICATIEGEHEIM () {
					return this.VWSINDICATIEGEHEIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.PRSVOORNAMEN = readString(dis);
					
					this.PRSEERSTEVOORNAAM = readString(dis);
					
					this.PRSVOORLETTERS = readString(dis);
					
					this.PRSADELLIJKETITELCODE = readString(dis);
					
					this.PRSVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.PRSGESLACHTSNAAM = readString(dis);
					
					this.PRSNAAMOPGEMAAKT = readString(dis);
					
					this.PRSGEBOORTEDATUM = readDate(dis);
					
					this.PRSGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.PRSGEBOORTEPLAATSCODE = readString(dis);
					
					this.PRSGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.PRSGEBOORTELANDCODE = readString(dis);
					
					this.PRSGESLACHTSAANDUIDINGCODE = readString(dis);
					
						this.PRSVORIGANUMMER = (BigDecimal) dis.readObject();
					
						this.PRSVOLGENDANUMMER = (BigDecimal) dis.readObject();
					
					this.PRSAANDUIDINGNAAMGEBRUIK = readString(dis);
					
					this.PRSREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.PRSAKTENUMMER = readString(dis);
					
					this.PRSGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.PRSDATUMDOCUMENT = readDate(dis);
					
					this.PRSDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.PRSBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.PRSAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.PRSDATUMINGANGONDERZOEK = readDate(dis);
					
					this.PRSDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.PRSDATUMEINDEONDERZOEK = readDate(dis);
					
					this.PRSDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.PRSINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.PRSINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.PRSDATUMVANOPNEMING = readDate(dis);
					
					this.PRSDATUMVANOPNEMINGINDICATOR = readString(dis);
					
						this.PRSSTATUSPERSOON = (BigDecimal) dis.readObject();
					
						this.PRSRIJKSKODENATIONALITEIT = (BigDecimal) dis.readObject();
					
						this.PRSGEZINSVERHOUDING = (BigDecimal) dis.readObject();
					
						this.PRSGEZINSSTERKTE = (BigDecimal) dis.readObject();
					
						this.PRSANUMMERGEZINSHOOFD = (BigDecimal) dis.readObject();
					
					this.PRSBURGERLIJKESTAAT = readString(dis);
					
					this.PRSNAAMSWIJZIGINGINDICATIE = readString(dis);
					
					this.PRSDATUMADRESHOUDINGAANEENGESLOTEN = readDate(dis);
					
					this.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR = readString(dis);
					
						this.OU1ANUMMER = (BigDecimal) dis.readObject();
					
						this.OU1BURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.OU1VOORNAMEN = readString(dis);
					
					this.OU1VOORLETTERS = readString(dis);
					
					this.OU1ADELLIJKETITELCODE = readString(dis);
					
					this.OU1VOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.OU1GESLACHTSNAAM = readString(dis);
					
					this.OU1NAAMOPGEMAAKT = readString(dis);
					
					this.OU1GEBOORTEDATUM = readDate(dis);
					
					this.OU1GEBOORTEDATUMINDICATOR = readString(dis);
					
					this.OU1GEBOORTEPLAATSCODE = readString(dis);
					
					this.OU1GEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.OU1GEBOORTELANDCODE = readString(dis);
					
					this.OU1GESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING = readDate(dis);
					
					this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = readString(dis);
					
					this.OU1REGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OU1AKTENUMMER = readString(dis);
					
					this.OU1GEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OU1DATUMDOCUMENT = readDate(dis);
					
					this.OU1DATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OU1BESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OU1AANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OU1DATUMINGANGONDERZOEK = readDate(dis);
					
					this.OU1DATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OU1DATUMEINDEONDERZOEK = readDate(dis);
					
					this.OU1DATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OU1INGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OU1INGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OU1DATUMVANOPNEMING = readDate(dis);
					
					this.OU1DATUMVANOPNEMINGINDICATOR = readString(dis);
					
						this.OU2ANUMMER = (BigDecimal) dis.readObject();
					
						this.OU2BURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.OU2VOORNAMEN = readString(dis);
					
					this.OU2VOORLETTERS = readString(dis);
					
					this.OU2ADELLIJKETITELCODE = readString(dis);
					
					this.OU2VOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.OU2GESLACHTSNAAM = readString(dis);
					
					this.OU2NAAMOPGEMAAKT = readString(dis);
					
					this.OU2GEBOORTEDATUM = readDate(dis);
					
					this.OU2GEBOORTEDATUMINDICATOR = readString(dis);
					
					this.OU2GEBOORTEPLAATSCODE = readString(dis);
					
					this.OU2GEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.OU2GEBOORTELANDCODE = readString(dis);
					
					this.OU2GESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING = readDate(dis);
					
					this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = readString(dis);
					
					this.OU2REGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OU2AKTENUMMER = readString(dis);
					
					this.OU2GEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OU2DATUMDOCUMENT = readDate(dis);
					
					this.OU2DATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OU2BESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OU2AANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OU2DATUMINGANGONDERZOEK = readDate(dis);
					
					this.OU2DATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OU2DATUMEINDEONDERZOEK = readDate(dis);
					
					this.OU2DATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OU2INGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OU2INGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OU2DATUMVANOPNEMING = readDate(dis);
					
					this.OU2DATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.OVLDATUMOVERLIJDEN = readDate(dis);
					
					this.OVLDATUMOVERLIJDENINDICATOR = readString(dis);
					
					this.OVLPLAATSOVERLIJDENCODE = readString(dis);
					
					this.OVLPLAATSOVERLIJDENOMSCHRIJVING = readString(dis);
					
					this.OVLLANDOVERLIJDENCODE = readString(dis);
					
					this.OVLREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.OVLAKTENUMMER = readString(dis);
					
					this.OVLGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.OVLDATUMDOCUMENT = readDate(dis);
					
					this.OVLDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.OVLBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.OVLAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.OVLDATUMINGANGONDERZOEK = readDate(dis);
					
					this.OVLDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.OVLDATUMEINDEONDERZOEK = readDate(dis);
					
					this.OVLDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.OVLINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.OVLINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.OVLDATUMVANOPNEMING = readDate(dis);
					
					this.OVLDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.INSDATUMINGANGBLOKKERINGPL = readDate(dis);
					
					this.INSDATUMINGANGBLOKKERINGPLINDICATOR = readString(dis);
					
					this.INSDATUMOPSCHORTINGBIJHOUDING = readDate(dis);
					
					this.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR = readString(dis);
					
					this.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING = readString(dis);
					
					this.INSDATUMEERSTEINSCHRIJVINGGBA = readDate(dis);
					
					this.INSDATUMEERSTEINSCHRIJVINGINDICATOR = readString(dis);
					
					this.INSGEMEENTEWAARPKZICHBEVINDTCODE = readString(dis);
					
					this.INSINDICATIEGEHEIM = readString(dis);
					
						this.INSVERSIENUMMER = (BigDecimal) dis.readObject();
					
					this.INSDATUMTIJDSTEMPEL = readString(dis);
					
					this.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD = readString(dis);
					
					this.VBLGEMEENTEVANINSCHRIJVINGCODE = readString(dis);
					
					this.VBLDATUMINSCHRIJVING = readDate(dis);
					
					this.VBLDATUMINSCHRIJVINGINDICATOR = readString(dis);
					
					this.VBLFUNCTIEADRES = readString(dis);
					
					this.VBLGEMEENTEDEEL = readString(dis);
					
					this.VBLDATUMAANVANGADRESHOUDING = readDate(dis);
					
					this.VBLDATUMAANVANGADRESHOUDINGINDICATOR = readString(dis);
					
					this.VBLSTRAATNAAM = readString(dis);
					
					this.VBLNAAMOPENBARERUIMTE = readString(dis);
					
					this.VBLADRESOPGEMAAKT = readString(dis);
					
					this.VBLWOONPLAATSOPGEMAAKT = readString(dis);
					
						this.VBLHUISNUMMER = (BigDecimal) dis.readObject();
					
					this.VBLHUISLETTER = readString(dis);
					
					this.VBLHUISNUMMERTOEVOEGING = readString(dis);
					
					this.VBLAANDUIDINGBIJHUISNUMMER = readString(dis);
					
					this.VBLPOSTCODE = readString(dis);
					
					this.VBLWOONPLAATSNAAM = readString(dis);
					
					this.VBLIDENTIFICATIECODEVERBLIJFPLAATS = readString(dis);
					
					this.VBLIDENTIFICATIECODENUMMERAANDUIDING = readString(dis);
					
					this.VBLLOCATIEBESCHRIJVING = readString(dis);
					
					this.VBLLANDADRESBUITENLANDCODE = readString(dis);
					
					this.VBLDATUMAANVANGADRESBUITENLAND = readDate(dis);
					
					this.VBLDATUMAANVANGADRESBUITENLANDINDICATOR = readString(dis);
					
					this.VBLREGEL1ADRESBUITENLAND = readString(dis);
					
					this.VBLREGEL2ADRESBUITENLAND = readString(dis);
					
					this.VBLREGEL3ADRESBUITENLAND = readString(dis);
					
					this.VBLLANDVANWAARINGESCHREVENCODE = readString(dis);
					
					this.VBLDATUMVESTIGINGINNEDERLAND = readDate(dis);
					
					this.VBLDATUMVESTIGINGINNEDERLANDINDICATOR = readString(dis);
					
					this.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING = readString(dis);
					
						this.VBLINDICATIEDOCUMENT = (BigDecimal) dis.readObject();
					
						this.VBLAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.VBLDATUMINGANGONDERZOEK = readDate(dis);
					
					this.VBLDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.VBLDATUMEINDEONDERZOEK = readDate(dis);
					
					this.VBLDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.VBLINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.VBLINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.VBLDATUMVANOPNEMING = readDate(dis);
					
					this.VBLDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.VBLSOORTPANDCODE = readString(dis);
					
					this.VBLSOORTPANDOMSCHRIJVING = readString(dis);
					
					this.VBLWIJKCODE = readString(dis);
					
					this.VBLWIJKOMSCHRIJVING = readString(dis);
					
					this.VBLPLANALOGISCHEWIJKCODE = readString(dis);
					
					this.VBLPLANALOGISCHEWIJKOMSCHRIJVING = readString(dis);
					
						this.VBLANUMMERHOOFDBEWONER = (BigDecimal) dis.readObject();
					
					this.VBTAANDUIDINGVERBLIJFSTITELCODE = readString(dis);
					
					this.VBTVERBLIJFSTITELVERVALLEN = readString(dis);
					
					this.VBTDATUMEINDEVERBLIJFSTITEL = readDate(dis);
					
					this.VBTDATUMEINDEVERBLIJFSTITELINDICATOR = readString(dis);
					
					this.VBTINGANGSDATUMVERBLIJFSTITEL = readDate(dis);
					
					this.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR = readString(dis);
					
						this.VBTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.VBTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.VBTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.VBTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.VBTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.VBTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.VBTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.VBTDATUMVANOPNEMING = readDate(dis);
					
					this.VBTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.GZVINDICATIEGEZAGMINDERJARIGE = readString(dis);
					
						this.GZVINDICATIECURATELEREGISTER = (BigDecimal) dis.readObject();
					
					this.GZVGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.GZVDATUMDOCUMENT = readDate(dis);
					
					this.GZVDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.GZVBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.GZVAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.GZVDATUMINGANGONDERZOEK = readDate(dis);
					
					this.GZVDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.GZVDATUMEINDEONDERZOEK = readDate(dis);
					
					this.GZVDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.GZVINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.GZVINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.GZVDATUMVANOPNEMING = readDate(dis);
					
					this.GZVDATUMVANOPNEMINGINDICATOR = readString(dis);
					
						this.KSRAANDUIDINGEUROPEESKIESRECHT = (BigDecimal) dis.readObject();
					
					this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT = readDate(dis);
					
					this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR = readString(dis);
					
					this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT = readDate(dis);
					
					this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR = readString(dis);
					
					this.KSRAANDUIDINGUITGESLOTENKIESRECHT = readString(dis);
					
					this.KSREINDDATUMUITSLUITINGKIESRECHT = readDate(dis);
					
					this.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR = readString(dis);
					
					this.KSRGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.KSRDATUMDOCUMENT = readDate(dis);
					
					this.KSRDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.KSRBESCHRIJVINGDOCUMENT = readString(dis);
					
					this.VWSGEMEENTEVANINSCHRIJVINGCODE = readString(dis);
					
					this.VWSDATUMINSCHRIJVING = readDate(dis);
					
					this.VWSDATUMINSCHRIJVINGINDICATOR = readString(dis);
					
					this.VWSINDICATIEGEHEIM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.PRSVOORNAMEN,dos);
					
					// String
				
						writeString(this.PRSEERSTEVOORNAAM,dos);
					
					// String
				
						writeString(this.PRSVOORLETTERS,dos);
					
					// String
				
						writeString(this.PRSADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.PRSVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.PRSGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.PRSNAAMOPGEMAAKT,dos);
					
					// java.util.Date
				
						writeDate(this.PRSGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.PRSGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.PRSGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.PRSGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.PRSGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.PRSGESLACHTSAANDUIDINGCODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSVORIGANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSVOLGENDANUMMER);
					
					// String
				
						writeString(this.PRSAANDUIDINGNAAMGEBRUIK,dos);
					
					// String
				
						writeString(this.PRSREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.PRSAKTENUMMER,dos);
					
					// String
				
						writeString(this.PRSGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.PRSDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.PRSBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.PRSDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.PRSINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.PRSDATUMVANOPNEMINGINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSSTATUSPERSOON);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSRIJKSKODENATIONALITEIT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSGEZINSVERHOUDING);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSGEZINSSTERKTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMERGEZINSHOOFD);
					
					// String
				
						writeString(this.PRSBURGERLIJKESTAAT,dos);
					
					// String
				
						writeString(this.PRSNAAMSWIJZIGINGINDICATIE,dos);
					
					// java.util.Date
				
						writeDate(this.PRSDATUMADRESHOUDINGAANEENGESLOTEN,dos);
					
					// String
				
						writeString(this.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1ANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1BURGERSERVICENUMMER);
					
					// String
				
						writeString(this.OU1VOORNAMEN,dos);
					
					// String
				
						writeString(this.OU1VOORLETTERS,dos);
					
					// String
				
						writeString(this.OU1ADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.OU1VOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU1GESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU1NAAMOPGEMAAKT,dos);
					
					// java.util.Date
				
						writeDate(this.OU1GEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.OU1GEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.OU1GEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.OU1GEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OU1GEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.OU1GESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING,dos);
					
					// String
				
						writeString(this.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR,dos);
					
					// String
				
						writeString(this.OU1REGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OU1AKTENUMMER,dos);
					
					// String
				
						writeString(this.OU1GEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OU1DATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OU1BESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU1AANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1DATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OU1DATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1INGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OU1INGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU1DATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OU1DATUMVANOPNEMINGINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU2ANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU2BURGERSERVICENUMMER);
					
					// String
				
						writeString(this.OU2VOORNAMEN,dos);
					
					// String
				
						writeString(this.OU2VOORLETTERS,dos);
					
					// String
				
						writeString(this.OU2ADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.OU2VOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU2GESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.OU2NAAMOPGEMAAKT,dos);
					
					// java.util.Date
				
						writeDate(this.OU2GEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.OU2GEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.OU2GEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.OU2GEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OU2GEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.OU2GESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING,dos);
					
					// String
				
						writeString(this.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR,dos);
					
					// String
				
						writeString(this.OU2REGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OU2AKTENUMMER,dos);
					
					// String
				
						writeString(this.OU2GEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OU2DATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OU2BESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OU2AANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OU2DATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OU2DATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU2INGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OU2INGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OU2DATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OU2DATUMVANOPNEMINGINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMOVERLIJDEN,dos);
					
					// String
				
						writeString(this.OVLDATUMOVERLIJDENINDICATOR,dos);
					
					// String
				
						writeString(this.OVLPLAATSOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLPLAATSOVERLIJDENOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.OVLLANDOVERLIJDENCODE,dos);
					
					// String
				
						writeString(this.OVLREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.OVLAKTENUMMER,dos);
					
					// String
				
						writeString(this.OVLGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.OVLDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.OVLBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OVLAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.OVLDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.OVLINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.OVLDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.OVLDATUMVANOPNEMINGINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.INSDATUMINGANGBLOKKERINGPL,dos);
					
					// String
				
						writeString(this.INSDATUMINGANGBLOKKERINGPLINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.INSDATUMOPSCHORTINGBIJHOUDING,dos);
					
					// String
				
						writeString(this.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR,dos);
					
					// String
				
						writeString(this.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING,dos);
					
					// java.util.Date
				
						writeDate(this.INSDATUMEERSTEINSCHRIJVINGGBA,dos);
					
					// String
				
						writeString(this.INSDATUMEERSTEINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.INSGEMEENTEWAARPKZICHBEVINDTCODE,dos);
					
					// String
				
						writeString(this.INSINDICATIEGEHEIM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INSVERSIENUMMER);
					
					// String
				
						writeString(this.INSDATUMTIJDSTEMPEL,dos);
					
					// String
				
						writeString(this.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD,dos);
					
					// String
				
						writeString(this.VBLGEMEENTEVANINSCHRIJVINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMINSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLDATUMINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLFUNCTIEADRES,dos);
					
					// String
				
						writeString(this.VBLGEMEENTEDEEL,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMAANVANGADRESHOUDING,dos);
					
					// String
				
						writeString(this.VBLDATUMAANVANGADRESHOUDINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLSTRAATNAAM,dos);
					
					// String
				
						writeString(this.VBLNAAMOPENBARERUIMTE,dos);
					
					// String
				
						writeString(this.VBLADRESOPGEMAAKT,dos);
					
					// String
				
						writeString(this.VBLWOONPLAATSOPGEMAAKT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHUISNUMMER);
					
					// String
				
						writeString(this.VBLHUISLETTER,dos);
					
					// String
				
						writeString(this.VBLHUISNUMMERTOEVOEGING,dos);
					
					// String
				
						writeString(this.VBLAANDUIDINGBIJHUISNUMMER,dos);
					
					// String
				
						writeString(this.VBLPOSTCODE,dos);
					
					// String
				
						writeString(this.VBLWOONPLAATSNAAM,dos);
					
					// String
				
						writeString(this.VBLIDENTIFICATIECODEVERBLIJFPLAATS,dos);
					
					// String
				
						writeString(this.VBLIDENTIFICATIECODENUMMERAANDUIDING,dos);
					
					// String
				
						writeString(this.VBLLOCATIEBESCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLLANDADRESBUITENLANDCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMAANVANGADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLDATUMAANVANGADRESBUITENLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLREGEL1ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLREGEL2ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLREGEL3ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLLANDVANWAARINGESCHREVENCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMVESTIGINGINNEDERLAND,dos);
					
					// String
				
						writeString(this.VBLDATUMVESTIGINGINNEDERLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLINDICATIEDOCUMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.VBLINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.VBLDATUMVANOPNEMINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLSOORTPANDCODE,dos);
					
					// String
				
						writeString(this.VBLSOORTPANDOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLWIJKOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLPLANALOGISCHEWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLPLANALOGISCHEWIJKOMSCHRIJVING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLANUMMERHOOFDBEWONER);
					
					// String
				
						writeString(this.VBTAANDUIDINGVERBLIJFSTITELCODE,dos);
					
					// String
				
						writeString(this.VBTVERBLIJFSTITELVERVALLEN,dos);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMEINDEVERBLIJFSTITEL,dos);
					
					// String
				
						writeString(this.VBTDATUMEINDEVERBLIJFSTITELINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTINGANGSDATUMVERBLIJFSTITEL,dos);
					
					// String
				
						writeString(this.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.VBTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.VBTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.VBTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.VBTDATUMVANOPNEMINGINDICATOR,dos);
					
					// String
				
						writeString(this.GZVINDICATIEGEZAGMINDERJARIGE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GZVINDICATIECURATELEREGISTER);
					
					// String
				
						writeString(this.GZVGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.GZVDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.GZVBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GZVAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.GZVDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.GZVDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.GZVINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.GZVINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.GZVDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.GZVDATUMVANOPNEMINGINDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.KSRAANDUIDINGEUROPEESKIESRECHT);
					
					// java.util.Date
				
						writeDate(this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT,dos);
					
					// String
				
						writeString(this.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT,dos);
					
					// String
				
						writeString(this.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR,dos);
					
					// String
				
						writeString(this.KSRAANDUIDINGUITGESLOTENKIESRECHT,dos);
					
					// java.util.Date
				
						writeDate(this.KSREINDDATUMUITSLUITINGKIESRECHT,dos);
					
					// String
				
						writeString(this.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR,dos);
					
					// String
				
						writeString(this.KSRGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.KSRDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.KSRDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.KSRBESCHRIJVINGDOCUMENT,dos);
					
					// String
				
						writeString(this.VWSGEMEENTEVANINSCHRIJVINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VWSDATUMINSCHRIJVING,dos);
					
					// String
				
						writeString(this.VWSDATUMINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.VWSINDICATIEGEHEIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",PRSBURGERSERVICENUMMER="+String.valueOf(PRSBURGERSERVICENUMMER));
		sb.append(",PRSVOORNAMEN="+PRSVOORNAMEN);
		sb.append(",PRSEERSTEVOORNAAM="+PRSEERSTEVOORNAAM);
		sb.append(",PRSVOORLETTERS="+PRSVOORLETTERS);
		sb.append(",PRSADELLIJKETITELCODE="+PRSADELLIJKETITELCODE);
		sb.append(",PRSVOORVOEGSELGESLACHTSNAAM="+PRSVOORVOEGSELGESLACHTSNAAM);
		sb.append(",PRSGESLACHTSNAAM="+PRSGESLACHTSNAAM);
		sb.append(",PRSNAAMOPGEMAAKT="+PRSNAAMOPGEMAAKT);
		sb.append(",PRSGEBOORTEDATUM="+String.valueOf(PRSGEBOORTEDATUM));
		sb.append(",PRSGEBOORTEDATUMINDICATOR="+PRSGEBOORTEDATUMINDICATOR);
		sb.append(",PRSGEBOORTEPLAATSCODE="+PRSGEBOORTEPLAATSCODE);
		sb.append(",PRSGEBOORTEPLAATSOMSCHRIJVING="+PRSGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",PRSGEBOORTELANDCODE="+PRSGEBOORTELANDCODE);
		sb.append(",PRSGESLACHTSAANDUIDINGCODE="+PRSGESLACHTSAANDUIDINGCODE);
		sb.append(",PRSVORIGANUMMER="+String.valueOf(PRSVORIGANUMMER));
		sb.append(",PRSVOLGENDANUMMER="+String.valueOf(PRSVOLGENDANUMMER));
		sb.append(",PRSAANDUIDINGNAAMGEBRUIK="+PRSAANDUIDINGNAAMGEBRUIK);
		sb.append(",PRSREGISTERGEMEENTEAKTECODE="+PRSREGISTERGEMEENTEAKTECODE);
		sb.append(",PRSAKTENUMMER="+PRSAKTENUMMER);
		sb.append(",PRSGEMEENTEDOCUMENTCODE="+PRSGEMEENTEDOCUMENTCODE);
		sb.append(",PRSDATUMDOCUMENT="+String.valueOf(PRSDATUMDOCUMENT));
		sb.append(",PRSDATUMDOCUMENTINDICATOR="+PRSDATUMDOCUMENTINDICATOR);
		sb.append(",PRSBESCHRIJVINGDOCUMENT="+PRSBESCHRIJVINGDOCUMENT);
		sb.append(",PRSAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(PRSAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",PRSDATUMINGANGONDERZOEK="+String.valueOf(PRSDATUMINGANGONDERZOEK));
		sb.append(",PRSDATUMINGANGONDERZOEKINDICATOR="+PRSDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",PRSDATUMEINDEONDERZOEK="+String.valueOf(PRSDATUMEINDEONDERZOEK));
		sb.append(",PRSDATUMEINDEONDERZOEKINDICATOR="+PRSDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",PRSINGANGSDATUMGELDIGHEID="+String.valueOf(PRSINGANGSDATUMGELDIGHEID));
		sb.append(",PRSINGANGSDATUMGELDIGHEIDINDICATOR="+PRSINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",PRSDATUMVANOPNEMING="+String.valueOf(PRSDATUMVANOPNEMING));
		sb.append(",PRSDATUMVANOPNEMINGINDICATOR="+PRSDATUMVANOPNEMINGINDICATOR);
		sb.append(",PRSSTATUSPERSOON="+String.valueOf(PRSSTATUSPERSOON));
		sb.append(",PRSRIJKSKODENATIONALITEIT="+String.valueOf(PRSRIJKSKODENATIONALITEIT));
		sb.append(",PRSGEZINSVERHOUDING="+String.valueOf(PRSGEZINSVERHOUDING));
		sb.append(",PRSGEZINSSTERKTE="+String.valueOf(PRSGEZINSSTERKTE));
		sb.append(",PRSANUMMERGEZINSHOOFD="+String.valueOf(PRSANUMMERGEZINSHOOFD));
		sb.append(",PRSBURGERLIJKESTAAT="+PRSBURGERLIJKESTAAT);
		sb.append(",PRSNAAMSWIJZIGINGINDICATIE="+PRSNAAMSWIJZIGINGINDICATIE);
		sb.append(",PRSDATUMADRESHOUDINGAANEENGESLOTEN="+String.valueOf(PRSDATUMADRESHOUDINGAANEENGESLOTEN));
		sb.append(",PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR="+PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR);
		sb.append(",OU1ANUMMER="+String.valueOf(OU1ANUMMER));
		sb.append(",OU1BURGERSERVICENUMMER="+String.valueOf(OU1BURGERSERVICENUMMER));
		sb.append(",OU1VOORNAMEN="+OU1VOORNAMEN);
		sb.append(",OU1VOORLETTERS="+OU1VOORLETTERS);
		sb.append(",OU1ADELLIJKETITELCODE="+OU1ADELLIJKETITELCODE);
		sb.append(",OU1VOORVOEGSELGESLACHTSNAAM="+OU1VOORVOEGSELGESLACHTSNAAM);
		sb.append(",OU1GESLACHTSNAAM="+OU1GESLACHTSNAAM);
		sb.append(",OU1NAAMOPGEMAAKT="+OU1NAAMOPGEMAAKT);
		sb.append(",OU1GEBOORTEDATUM="+String.valueOf(OU1GEBOORTEDATUM));
		sb.append(",OU1GEBOORTEDATUMINDICATOR="+OU1GEBOORTEDATUMINDICATOR);
		sb.append(",OU1GEBOORTEPLAATSCODE="+OU1GEBOORTEPLAATSCODE);
		sb.append(",OU1GEBOORTEPLAATSOMSCHRIJVING="+OU1GEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",OU1GEBOORTELANDCODE="+OU1GEBOORTELANDCODE);
		sb.append(",OU1GESLACHTSAANDUIDINGCODE="+OU1GESLACHTSAANDUIDINGCODE);
		sb.append(",OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING="+String.valueOf(OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING));
		sb.append(",OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR="+OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR);
		sb.append(",OU1REGISTERGEMEENTEAKTECODE="+OU1REGISTERGEMEENTEAKTECODE);
		sb.append(",OU1AKTENUMMER="+OU1AKTENUMMER);
		sb.append(",OU1GEMEENTEDOCUMENTCODE="+OU1GEMEENTEDOCUMENTCODE);
		sb.append(",OU1DATUMDOCUMENT="+String.valueOf(OU1DATUMDOCUMENT));
		sb.append(",OU1DATUMDOCUMENTINDICATOR="+OU1DATUMDOCUMENTINDICATOR);
		sb.append(",OU1BESCHRIJVINGDOCUMENT="+OU1BESCHRIJVINGDOCUMENT);
		sb.append(",OU1AANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OU1AANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OU1DATUMINGANGONDERZOEK="+String.valueOf(OU1DATUMINGANGONDERZOEK));
		sb.append(",OU1DATUMINGANGONDERZOEKINDICATOR="+OU1DATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OU1DATUMEINDEONDERZOEK="+String.valueOf(OU1DATUMEINDEONDERZOEK));
		sb.append(",OU1DATUMEINDEONDERZOEKINDICATOR="+OU1DATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OU1INGANGSDATUMGELDIGHEID="+String.valueOf(OU1INGANGSDATUMGELDIGHEID));
		sb.append(",OU1INGANGSDATUMGELDIGHEIDINDICATOR="+OU1INGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OU1DATUMVANOPNEMING="+String.valueOf(OU1DATUMVANOPNEMING));
		sb.append(",OU1DATUMVANOPNEMINGINDICATOR="+OU1DATUMVANOPNEMINGINDICATOR);
		sb.append(",OU2ANUMMER="+String.valueOf(OU2ANUMMER));
		sb.append(",OU2BURGERSERVICENUMMER="+String.valueOf(OU2BURGERSERVICENUMMER));
		sb.append(",OU2VOORNAMEN="+OU2VOORNAMEN);
		sb.append(",OU2VOORLETTERS="+OU2VOORLETTERS);
		sb.append(",OU2ADELLIJKETITELCODE="+OU2ADELLIJKETITELCODE);
		sb.append(",OU2VOORVOEGSELGESLACHTSNAAM="+OU2VOORVOEGSELGESLACHTSNAAM);
		sb.append(",OU2GESLACHTSNAAM="+OU2GESLACHTSNAAM);
		sb.append(",OU2NAAMOPGEMAAKT="+OU2NAAMOPGEMAAKT);
		sb.append(",OU2GEBOORTEDATUM="+String.valueOf(OU2GEBOORTEDATUM));
		sb.append(",OU2GEBOORTEDATUMINDICATOR="+OU2GEBOORTEDATUMINDICATOR);
		sb.append(",OU2GEBOORTEPLAATSCODE="+OU2GEBOORTEPLAATSCODE);
		sb.append(",OU2GEBOORTEPLAATSOMSCHRIJVING="+OU2GEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",OU2GEBOORTELANDCODE="+OU2GEBOORTELANDCODE);
		sb.append(",OU2GESLACHTSAANDUIDINGCODE="+OU2GESLACHTSAANDUIDINGCODE);
		sb.append(",OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING="+String.valueOf(OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING));
		sb.append(",OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR="+OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR);
		sb.append(",OU2REGISTERGEMEENTEAKTECODE="+OU2REGISTERGEMEENTEAKTECODE);
		sb.append(",OU2AKTENUMMER="+OU2AKTENUMMER);
		sb.append(",OU2GEMEENTEDOCUMENTCODE="+OU2GEMEENTEDOCUMENTCODE);
		sb.append(",OU2DATUMDOCUMENT="+String.valueOf(OU2DATUMDOCUMENT));
		sb.append(",OU2DATUMDOCUMENTINDICATOR="+OU2DATUMDOCUMENTINDICATOR);
		sb.append(",OU2BESCHRIJVINGDOCUMENT="+OU2BESCHRIJVINGDOCUMENT);
		sb.append(",OU2AANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OU2AANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OU2DATUMINGANGONDERZOEK="+String.valueOf(OU2DATUMINGANGONDERZOEK));
		sb.append(",OU2DATUMINGANGONDERZOEKINDICATOR="+OU2DATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OU2DATUMEINDEONDERZOEK="+String.valueOf(OU2DATUMEINDEONDERZOEK));
		sb.append(",OU2DATUMEINDEONDERZOEKINDICATOR="+OU2DATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OU2INGANGSDATUMGELDIGHEID="+String.valueOf(OU2INGANGSDATUMGELDIGHEID));
		sb.append(",OU2INGANGSDATUMGELDIGHEIDINDICATOR="+OU2INGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OU2DATUMVANOPNEMING="+String.valueOf(OU2DATUMVANOPNEMING));
		sb.append(",OU2DATUMVANOPNEMINGINDICATOR="+OU2DATUMVANOPNEMINGINDICATOR);
		sb.append(",OVLDATUMOVERLIJDEN="+String.valueOf(OVLDATUMOVERLIJDEN));
		sb.append(",OVLDATUMOVERLIJDENINDICATOR="+OVLDATUMOVERLIJDENINDICATOR);
		sb.append(",OVLPLAATSOVERLIJDENCODE="+OVLPLAATSOVERLIJDENCODE);
		sb.append(",OVLPLAATSOVERLIJDENOMSCHRIJVING="+OVLPLAATSOVERLIJDENOMSCHRIJVING);
		sb.append(",OVLLANDOVERLIJDENCODE="+OVLLANDOVERLIJDENCODE);
		sb.append(",OVLREGISTERGEMEENTEAKTECODE="+OVLREGISTERGEMEENTEAKTECODE);
		sb.append(",OVLAKTENUMMER="+OVLAKTENUMMER);
		sb.append(",OVLGEMEENTEDOCUMENTCODE="+OVLGEMEENTEDOCUMENTCODE);
		sb.append(",OVLDATUMDOCUMENT="+String.valueOf(OVLDATUMDOCUMENT));
		sb.append(",OVLDATUMDOCUMENTINDICATOR="+OVLDATUMDOCUMENTINDICATOR);
		sb.append(",OVLBESCHRIJVINGDOCUMENT="+OVLBESCHRIJVINGDOCUMENT);
		sb.append(",OVLAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(OVLAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",OVLDATUMINGANGONDERZOEK="+String.valueOf(OVLDATUMINGANGONDERZOEK));
		sb.append(",OVLDATUMINGANGONDERZOEKINDICATOR="+OVLDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",OVLDATUMEINDEONDERZOEK="+String.valueOf(OVLDATUMEINDEONDERZOEK));
		sb.append(",OVLDATUMEINDEONDERZOEKINDICATOR="+OVLDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",OVLINGANGSDATUMGELDIGHEID="+String.valueOf(OVLINGANGSDATUMGELDIGHEID));
		sb.append(",OVLINGANGSDATUMGELDIGHEIDINDICATOR="+OVLINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",OVLDATUMVANOPNEMING="+String.valueOf(OVLDATUMVANOPNEMING));
		sb.append(",OVLDATUMVANOPNEMINGINDICATOR="+OVLDATUMVANOPNEMINGINDICATOR);
		sb.append(",INSDATUMINGANGBLOKKERINGPL="+String.valueOf(INSDATUMINGANGBLOKKERINGPL));
		sb.append(",INSDATUMINGANGBLOKKERINGPLINDICATOR="+INSDATUMINGANGBLOKKERINGPLINDICATOR);
		sb.append(",INSDATUMOPSCHORTINGBIJHOUDING="+String.valueOf(INSDATUMOPSCHORTINGBIJHOUDING));
		sb.append(",INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR="+INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR);
		sb.append(",INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING="+INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING);
		sb.append(",INSDATUMEERSTEINSCHRIJVINGGBA="+String.valueOf(INSDATUMEERSTEINSCHRIJVINGGBA));
		sb.append(",INSDATUMEERSTEINSCHRIJVINGINDICATOR="+INSDATUMEERSTEINSCHRIJVINGINDICATOR);
		sb.append(",INSGEMEENTEWAARPKZICHBEVINDTCODE="+INSGEMEENTEWAARPKZICHBEVINDTCODE);
		sb.append(",INSINDICATIEGEHEIM="+INSINDICATIEGEHEIM);
		sb.append(",INSVERSIENUMMER="+String.valueOf(INSVERSIENUMMER));
		sb.append(",INSDATUMTIJDSTEMPEL="+INSDATUMTIJDSTEMPEL);
		sb.append(",INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD="+INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD);
		sb.append(",VBLGEMEENTEVANINSCHRIJVINGCODE="+VBLGEMEENTEVANINSCHRIJVINGCODE);
		sb.append(",VBLDATUMINSCHRIJVING="+String.valueOf(VBLDATUMINSCHRIJVING));
		sb.append(",VBLDATUMINSCHRIJVINGINDICATOR="+VBLDATUMINSCHRIJVINGINDICATOR);
		sb.append(",VBLFUNCTIEADRES="+VBLFUNCTIEADRES);
		sb.append(",VBLGEMEENTEDEEL="+VBLGEMEENTEDEEL);
		sb.append(",VBLDATUMAANVANGADRESHOUDING="+String.valueOf(VBLDATUMAANVANGADRESHOUDING));
		sb.append(",VBLDATUMAANVANGADRESHOUDINGINDICATOR="+VBLDATUMAANVANGADRESHOUDINGINDICATOR);
		sb.append(",VBLSTRAATNAAM="+VBLSTRAATNAAM);
		sb.append(",VBLNAAMOPENBARERUIMTE="+VBLNAAMOPENBARERUIMTE);
		sb.append(",VBLADRESOPGEMAAKT="+VBLADRESOPGEMAAKT);
		sb.append(",VBLWOONPLAATSOPGEMAAKT="+VBLWOONPLAATSOPGEMAAKT);
		sb.append(",VBLHUISNUMMER="+String.valueOf(VBLHUISNUMMER));
		sb.append(",VBLHUISLETTER="+VBLHUISLETTER);
		sb.append(",VBLHUISNUMMERTOEVOEGING="+VBLHUISNUMMERTOEVOEGING);
		sb.append(",VBLAANDUIDINGBIJHUISNUMMER="+VBLAANDUIDINGBIJHUISNUMMER);
		sb.append(",VBLPOSTCODE="+VBLPOSTCODE);
		sb.append(",VBLWOONPLAATSNAAM="+VBLWOONPLAATSNAAM);
		sb.append(",VBLIDENTIFICATIECODEVERBLIJFPLAATS="+VBLIDENTIFICATIECODEVERBLIJFPLAATS);
		sb.append(",VBLIDENTIFICATIECODENUMMERAANDUIDING="+VBLIDENTIFICATIECODENUMMERAANDUIDING);
		sb.append(",VBLLOCATIEBESCHRIJVING="+VBLLOCATIEBESCHRIJVING);
		sb.append(",VBLLANDADRESBUITENLANDCODE="+VBLLANDADRESBUITENLANDCODE);
		sb.append(",VBLDATUMAANVANGADRESBUITENLAND="+String.valueOf(VBLDATUMAANVANGADRESBUITENLAND));
		sb.append(",VBLDATUMAANVANGADRESBUITENLANDINDICATOR="+VBLDATUMAANVANGADRESBUITENLANDINDICATOR);
		sb.append(",VBLREGEL1ADRESBUITENLAND="+VBLREGEL1ADRESBUITENLAND);
		sb.append(",VBLREGEL2ADRESBUITENLAND="+VBLREGEL2ADRESBUITENLAND);
		sb.append(",VBLREGEL3ADRESBUITENLAND="+VBLREGEL3ADRESBUITENLAND);
		sb.append(",VBLLANDVANWAARINGESCHREVENCODE="+VBLLANDVANWAARINGESCHREVENCODE);
		sb.append(",VBLDATUMVESTIGINGINNEDERLAND="+String.valueOf(VBLDATUMVESTIGINGINNEDERLAND));
		sb.append(",VBLDATUMVESTIGINGINNEDERLANDINDICATOR="+VBLDATUMVESTIGINGINNEDERLANDINDICATOR);
		sb.append(",VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING="+VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING);
		sb.append(",VBLINDICATIEDOCUMENT="+String.valueOf(VBLINDICATIEDOCUMENT));
		sb.append(",VBLAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(VBLAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",VBLDATUMINGANGONDERZOEK="+String.valueOf(VBLDATUMINGANGONDERZOEK));
		sb.append(",VBLDATUMINGANGONDERZOEKINDICATOR="+VBLDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",VBLDATUMEINDEONDERZOEK="+String.valueOf(VBLDATUMEINDEONDERZOEK));
		sb.append(",VBLDATUMEINDEONDERZOEKINDICATOR="+VBLDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",VBLINGANGSDATUMGELDIGHEID="+String.valueOf(VBLINGANGSDATUMGELDIGHEID));
		sb.append(",VBLINGANGSDATUMGELDIGHEIDINDICATOR="+VBLINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",VBLDATUMVANOPNEMING="+String.valueOf(VBLDATUMVANOPNEMING));
		sb.append(",VBLDATUMVANOPNEMINGINDICATOR="+VBLDATUMVANOPNEMINGINDICATOR);
		sb.append(",VBLSOORTPANDCODE="+VBLSOORTPANDCODE);
		sb.append(",VBLSOORTPANDOMSCHRIJVING="+VBLSOORTPANDOMSCHRIJVING);
		sb.append(",VBLWIJKCODE="+VBLWIJKCODE);
		sb.append(",VBLWIJKOMSCHRIJVING="+VBLWIJKOMSCHRIJVING);
		sb.append(",VBLPLANALOGISCHEWIJKCODE="+VBLPLANALOGISCHEWIJKCODE);
		sb.append(",VBLPLANALOGISCHEWIJKOMSCHRIJVING="+VBLPLANALOGISCHEWIJKOMSCHRIJVING);
		sb.append(",VBLANUMMERHOOFDBEWONER="+String.valueOf(VBLANUMMERHOOFDBEWONER));
		sb.append(",VBTAANDUIDINGVERBLIJFSTITELCODE="+VBTAANDUIDINGVERBLIJFSTITELCODE);
		sb.append(",VBTVERBLIJFSTITELVERVALLEN="+VBTVERBLIJFSTITELVERVALLEN);
		sb.append(",VBTDATUMEINDEVERBLIJFSTITEL="+String.valueOf(VBTDATUMEINDEVERBLIJFSTITEL));
		sb.append(",VBTDATUMEINDEVERBLIJFSTITELINDICATOR="+VBTDATUMEINDEVERBLIJFSTITELINDICATOR);
		sb.append(",VBTINGANGSDATUMVERBLIJFSTITEL="+String.valueOf(VBTINGANGSDATUMVERBLIJFSTITEL));
		sb.append(",VBTINGANGSDATUMVERBLIJFSTITELINDICATOR="+VBTINGANGSDATUMVERBLIJFSTITELINDICATOR);
		sb.append(",VBTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(VBTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",VBTDATUMINGANGONDERZOEK="+String.valueOf(VBTDATUMINGANGONDERZOEK));
		sb.append(",VBTDATUMINGANGONDERZOEKINDICATOR="+VBTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",VBTDATUMEINDEONDERZOEK="+String.valueOf(VBTDATUMEINDEONDERZOEK));
		sb.append(",VBTDATUMEINDEONDERZOEKINDICATOR="+VBTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",VBTINGANGSDATUMGELDIGHEID="+String.valueOf(VBTINGANGSDATUMGELDIGHEID));
		sb.append(",VBTINGANGSDATUMGELDIGHEIDINDICATOR="+VBTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",VBTDATUMVANOPNEMING="+String.valueOf(VBTDATUMVANOPNEMING));
		sb.append(",VBTDATUMVANOPNEMINGINDICATOR="+VBTDATUMVANOPNEMINGINDICATOR);
		sb.append(",GZVINDICATIEGEZAGMINDERJARIGE="+GZVINDICATIEGEZAGMINDERJARIGE);
		sb.append(",GZVINDICATIECURATELEREGISTER="+String.valueOf(GZVINDICATIECURATELEREGISTER));
		sb.append(",GZVGEMEENTEDOCUMENTCODE="+GZVGEMEENTEDOCUMENTCODE);
		sb.append(",GZVDATUMDOCUMENT="+String.valueOf(GZVDATUMDOCUMENT));
		sb.append(",GZVDATUMDOCUMENTINDICATOR="+GZVDATUMDOCUMENTINDICATOR);
		sb.append(",GZVBESCHRIJVINGDOCUMENT="+GZVBESCHRIJVINGDOCUMENT);
		sb.append(",GZVAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(GZVAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",GZVDATUMINGANGONDERZOEK="+String.valueOf(GZVDATUMINGANGONDERZOEK));
		sb.append(",GZVDATUMINGANGONDERZOEKINDICATOR="+GZVDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",GZVDATUMEINDEONDERZOEK="+String.valueOf(GZVDATUMEINDEONDERZOEK));
		sb.append(",GZVDATUMEINDEONDERZOEKINDICATOR="+GZVDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",GZVINGANGSDATUMGELDIGHEID="+String.valueOf(GZVINGANGSDATUMGELDIGHEID));
		sb.append(",GZVINGANGSDATUMGELDIGHEIDINDICATOR="+GZVINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",GZVDATUMVANOPNEMING="+String.valueOf(GZVDATUMVANOPNEMING));
		sb.append(",GZVDATUMVANOPNEMINGINDICATOR="+GZVDATUMVANOPNEMINGINDICATOR);
		sb.append(",KSRAANDUIDINGEUROPEESKIESRECHT="+String.valueOf(KSRAANDUIDINGEUROPEESKIESRECHT));
		sb.append(",KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT="+String.valueOf(KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT));
		sb.append(",KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR="+KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR);
		sb.append(",KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT="+String.valueOf(KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT));
		sb.append(",KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR="+KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR);
		sb.append(",KSRAANDUIDINGUITGESLOTENKIESRECHT="+KSRAANDUIDINGUITGESLOTENKIESRECHT);
		sb.append(",KSREINDDATUMUITSLUITINGKIESRECHT="+String.valueOf(KSREINDDATUMUITSLUITINGKIESRECHT));
		sb.append(",KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR="+KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR);
		sb.append(",KSRGEMEENTEDOCUMENTCODE="+KSRGEMEENTEDOCUMENTCODE);
		sb.append(",KSRDATUMDOCUMENT="+String.valueOf(KSRDATUMDOCUMENT));
		sb.append(",KSRDATUMDOCUMENTINDICATOR="+KSRDATUMDOCUMENTINDICATOR);
		sb.append(",KSRBESCHRIJVINGDOCUMENT="+KSRBESCHRIJVINGDOCUMENT);
		sb.append(",VWSGEMEENTEVANINSCHRIJVINGCODE="+VWSGEMEENTEVANINSCHRIJVINGCODE);
		sb.append(",VWSDATUMINSCHRIJVING="+String.valueOf(VWSDATUMINSCHRIJVING));
		sb.append(",VWSDATUMINSCHRIJVINGINDICATOR="+VWSDATUMINSCHRIJVINGINDICATOR);
		sb.append(",VWSINDICATIEGEHEIM="+VWSINDICATIEGEHEIM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_4Process(globalMap);
		tPostgresqlInput_5Process(globalMap);
		tPostgresqlInput_6Process(globalMap);
		tPostgresqlInput_8Process(globalMap);
		tPostgresqlInput_9Process(globalMap);
		tPostgresqlInput_10Process(globalMap);
		tPostgresqlInput_7Process(globalMap);
		tPostgresqlInput_11Process(globalMap);
		tPostgresqlInput_12Process(globalMap);
		tPostgresqlInput_13Process(globalMap);
		tPostgresqlInput_14Process(globalMap);
		tPostgresqlInput_15Process(globalMap);
		tPostgresqlInput_16Process(globalMap);
		tPostgresqlInput_17Process(globalMap);
		tPostgresqlInput_18Process(globalMap);
		tPostgresqlInput_19Process(globalMap);
		tPostgresqlInput_20Process(globalMap);
		tPostgresqlInput_21Process(globalMap);
		tPostgresqlInput_22Process(globalMap);
		tPostgresqlInput_23Process(globalMap);
		tPostgresqlInput_24Process(globalMap);
		tPostgresqlInput_25Process(globalMap);
		tPostgresqlInput_26Process(globalMap);

		cipers_persoonStruct cipers_persoon = new cipers_persoonStruct();
ldf_persoonStruct ldf_persoon = new ldf_persoonStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_persoon" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_persoon";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_persoon";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"prsburgerservicenummer\",\"prsvoornamen\",\"prseerstevoornaam\",\"prsvoorletters\",\"prsadellijketitelcode\",\"prsadellijketitelomschrijving\",\"prsvoorvoegselgeslachtsnaam\",\"prsgeslachtsnaam\",\"prsnaamopgemaakt\",\"prsgeboortedatum\",\"prsgeboortedatumindicator\",\"prsgeboorteplaatscode\",\"prsgeboorteplaatsomschrijving\",\"prsgeboortelandcode\",\"prsgeboortelandomschrijving\",\"prsgeslachtsaanduidingcode\",\"prsgeslachtsaanduidingomschrijving\",\"prsvoriganummer\",\"prsvolgendanummer\",\"prsaanduidingnaamgebruik\",\"prsregistergemeenteaktecode\",\"prsregistergemeenteakteomschrijving\",\"prsaktenummer\",\"prsgemeentedocumentcode\",\"prsgemeentedocumentomschrijving\",\"prsdatumdocument\",\"prsdatumdocumentindicator\",\"prsbeschrijvingdocument\",\"prsaanduidinggegevensonderzoek\",\"prsdatumingangonderzoek\",\"prsdatumingangonderzoekindicator\",\"prsdatumeindeonderzoek\",\"prsdatumeindeonderzoekindicator\",\"prsingangsdatumgeldigheid\",\"prsingangsdatumgeldigheidindicator\",\"prsdatumvanopneming\",\"prsdatumvanopnemingindicator\",\"prsstatuspersoon\",\"prsrijkskodenationaliteit\",\"prsgezinsverhouding\",\"prsgezinssterkte\",\"prsanummergezinshoofd\",\"prsburgerlijkestaat\",\"prsnaamswijzigingindicatie\",\"prsdatumadreshoudingaaneengesloten\",\"prsdatumadreshoudingaaneengeslotenindicator\",\"ou1anummer\",\"ou1burgerservicenummer\",\"ou1voornamen\",\"ou1voorletters\",\"ou1adellijketitelcode\",\"ou1adellijketitelomschrijving\",\"ou1voorvoegselgeslachtsnaam\",\"ou1geslachtsnaam\",\"ou1naamopgemaakt\",\"ou1geboortedatum\",\"ou1geboortedatumindicator\",\"ou1geboorteplaatscode\",\"ou1geboorteplaatsomschrijving\",\"ou1geboortelandcode\",\"ou1geboortelandomschrijving\",\"ou1geslachtsaanduidingcode\",\"ou1geslachtsaanduidingomschrijving\",\"ou1datumingangfamilierechtelijkebetrekking\",\"ou1datumingangfamilierechtelijkebetrekkingindicator\",\"ou1registergemeenteaktecode\",\"ou1registergemeenteakteomschrijving\",\"ou1aktenummer\",\"ou1gemeentedocumentcode\",\"ou1gemeentedocumentomschrijving\",\"ou1datumdocument\",\"ou1datumdocumentindicator\",\"ou1beschrijvingdocument\",\"ou1aanduidinggegevensonderzoek\",\"ou1datumingangonderzoek\",\"ou1datumingangonderzoekindicator\",\"ou1datumeindeonderzoek\",\"ou1datumeindeonderzoekindicator\",\"ou1ingangsdatumgeldigheid\",\"ou1ingangsdatumgeldigheidindicator\",\"ou1datumvanopneming\",\"ou1datumvanopnemingindicator\",\"ou2anummer\",\"ou2burgerservicenummer\",\"ou2voornamen\",\"ou2voorletters\",\"ou2adellijketitelcode\",\"ou2adellijketitelomschrijving\",\"ou2voorvoegselgeslachtsnaam\",\"ou2geslachtsnaam\",\"ou2naamopgemaakt\",\"ou2geboortedatum\",\"ou2geboortedatumindicator\",\"ou2geboorteplaatscode\",\"ou2geboorteplaatsomschrijving\",\"ou2geboortelandcode\",\"ou2geboortelandomschrijving\",\"ou2geslachtsaanduidingcode\",\"ou2geslachtsaanduidingomschrijving\",\"ou2datumingangfamilierechtelijkebetrekking\",\"ou2datumingangfamilierechtelijkebetrekkingindicator\",\"ou2registergemeenteaktecode\",\"ou2registergemeenteakteomschrijving\",\"ou2aktenummer\",\"ou2gemeentedocumentcode\",\"ou2gemeentedocumentomschrijving\",\"ou2datumdocument\",\"ou2datumdocumentindicator\",\"ou2beschrijvingdocument\",\"ou2aanduidinggegevensonderzoek\",\"ou2datumingangonderzoek\",\"ou2datumingangonderzoekindicator\",\"ou2datumeindeonderzoek\",\"ou2datumeindeonderzoekindicator\",\"ou2ingangsdatumgeldigheid\",\"ou2ingangsdatumgeldigheidindicator\",\"ou2datumvanopneming\",\"ou2datumvanopnemingindicator\",\"ovldatumoverlijden\",\"ovldatumoverlijdenindicator\",\"ovlplaatsoverlijdencode\",\"ovlplaatsoverlijdenomschrijving\",\"ovllandoverlijdencode\",\"ovllandoverlijdenomschrijving\",\"ovlregistergemeenteaktecode\",\"ovlregistergemeenteakteomschrijving\",\"ovlaktenummer\",\"ovlgemeentedocumentcode\",\"ovlgemeentedocumentomschrijving\",\"ovldatumdocument\",\"ovldatumdocumentindicator\",\"ovlbeschrijvingdocument\",\"ovlaanduidinggegevensonderzoek\",\"ovldatumingangonderzoek\",\"ovldatumingangonderzoekindicator\",\"ovldatumeindeonderzoek\",\"ovldatumeindeonderzoekindicator\",\"ovlingangsdatumgeldigheid\",\"ovlingangsdatumgeldigheidindicator\",\"ovldatumvanopneming\",\"ovldatumvanopnemingindicator\",\"insdatumingangblokkeringpl\",\"insdatumingangblokkeringplindicator\",\"insdatumopschortingbijhouding\",\"insdatumopschortingbijhoudingindicator\",\"insomschrijvingredenopschortingbijhouding\",\"insdatumeersteinschrijvinggba\",\"insdatumeersteinschrijvingindicator\",\"insgemeentewaarpkzichbevindtcode\",\"insgemeentewaarpkzichbevindtomschrijving\",\"insindicatiegeheim\",\"insversienummer\",\"insdatumtijdstempel\",\"inspkgegevensvolledigmeegeconverteerd\",\"vblgemeentevaninschrijvingcode\",\"vblgemeentevaninschrijvingomschrijving\",\"vbldatuminschrijving\",\"vbldatuminschrijvingindicator\",\"vblfunctieadres\",\"vblgemeentedeel\",\"vbldatumaanvangadreshouding\",\"vbldatumaanvangadreshoudingindicator\",\"vblstraatnaam\",\"vblnaamopenbareruimte\",\"vbladresopgemaakt\",\"vblwoonplaatsopgemaakt\",\"vblhuisnummer\",\"vblhuisletter\",\"vblhuisnummertoevoeging\",\"vblaanduidingbijhuisnummer\",\"vblpostcode\",\"vblwoonplaatsnaam\",\"vblidentificatiecodeverblijfplaats\",\"vblidentificatiecodenummeraanduiding\",\"vbllocatiebeschrijving\",\"vbllandadresbuitenlandcode\",\"vbllandadresbuitenlandomschrijving\",\"vbldatumaanvangadresbuitenland\",\"vbldatumaanvangadresbuitenlandindicator\",\"vblregel1adresbuitenland\",\"vblregel2adresbuitenland\",\"vblregel3adresbuitenland\",\"vbllandvanwaaringeschrevencode\",\"vbllandvanwaaringeschrevenomschrijving\",\"vbldatumvestiginginnederland\",\"vbldatumvestiginginnederlandindicator\",\"vblomschrijvingvanaangifteadreshouding\",\"vblindicatiedocument\",\"vblaanduidinggegevensonderzoek\",\"vbldatumingangonderzoek\",\"vbldatumingangonderzoekindicator\",\"vbldatumeindeonderzoek\",\"vbldatumeindeonderzoekindicator\",\"vblingangsdatumgeldigheid\",\"vblingangsdatumgeldigheidindicator\",\"vbldatumvanopneming\",\"vbldatumvanopnemingindicator\",\"vblsoortpandcode\",\"vblsoortpandomschrijving\",\"vblwijkcode\",\"vblwijkomschrijving\",\"vblplanalogischewijkcode\",\"vblplanalogischewijkomschrijving\",\"vblanummerhoofdbewoner\",\"vbtaanduidingverblijfstitelcode\",\"vbtverblijfstitelvervallen\",\"vbtaanduidingverblijfstitelomschrijving\",\"vbtdatumeindeverblijfstitel\",\"vbtdatumeindeverblijfstitelindicator\",\"vbtingangsdatumverblijfstitel\",\"vbtingangsdatumverblijfstitelindicator\",\"vbtaanduidinggegevensonderzoek\",\"vbtdatumingangonderzoek\",\"vbtdatumingangonderzoekindicator\",\"vbtdatumeindeonderzoek\",\"vbtdatumeindeonderzoekindicator\",\"vbtingangsdatumgeldigheid\",\"vbtingangsdatumgeldigheidindicator\",\"vbtdatumvanopneming\",\"vbtdatumvanopnemingindicator\",\"gzvindicatiegezagminderjarige\",\"gzvindicatiecurateleregister\",\"gzvgemeentedocumentcode\",\"gzvgemeentedocumentomschrijving\",\"gzvdatumdocument\",\"gzvdatumdocumentindicator\",\"gzvbeschrijvingdocument\",\"gzvaanduidinggegevensonderzoek\",\"gzvdatumingangonderzoek\",\"gzvdatumingangonderzoekindicator\",\"gzvdatumeindeonderzoek\",\"gzvdatumeindeonderzoekindicator\",\"gzvingangsdatumgeldigheid\",\"gzvingangsdatumgeldigheidindicator\",\"gzvdatumvanopneming\",\"gzvdatumvanopnemingindicator\",\"ksraanduidingeuropeeskiesrecht\",\"ksrdatumverzoekofmededelingeuropeeskiesrecht\",\"ksrdatumverzoekofmededelingeuropeeskiesrechtindicator\",\"ksreinddatumuitsluitingeuropeeskiesrecht\",\"ksreinddatumuitsluitingeuropeeskiesrechtindicator\",\"ksraanduidinguitgeslotenkiesrecht\",\"ksreinddatumuitsluitingkiesrecht\",\"ksreinddatumuitsluitingkiesrechtindicator\",\"ksrgemeentedocumentcode\",\"ksrgemeentedocumentomschrijving\",\"ksrdatumdocument\",\"ksrdatumdocumentindicator\",\"ksrbeschrijvingdocument\",\"vwsgemeentevaninschrijvingcode\",\"vwsgemeentevaninschrijvingomschrijving\",\"vwsdatuminschrijving\",\"vwsdatuminschrijvingindicator\",\"vwsindicatiegeheim
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_persoon" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct> tHash_Lookup_ldf_titels_predikaten_persoon_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_persoon_naam" ))
					;					
					
	

ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naamHashKey = new ldf_titels_predikaten_persoon_naamStruct();
ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naamDefault = new ldf_titels_predikaten_persoon_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct> tHash_Lookup_ldf_titels_predikaten_ouder1_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_ouder1_naam" ))
					;					
					
	

ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naamHashKey = new ldf_titels_predikaten_ouder1_naamStruct();
ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naamDefault = new ldf_titels_predikaten_ouder1_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder2_naamStruct> tHash_Lookup_ldf_titels_predikaten_ouder2_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder2_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder2_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_ouder2_naam" ))
					;					
					
	

ldf_titels_predikaten_ouder2_naamStruct ldf_titels_predikaten_ouder2_naamHashKey = new ldf_titels_predikaten_ouder2_naamStruct();
ldf_titels_predikaten_ouder2_naamStruct ldf_titels_predikaten_ouder2_naamDefault = new ldf_titels_predikaten_ouder2_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct> tHash_Lookup_ldf_landen_persoon_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_persoon_geboorte" ))
					;					
					
	

ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorteHashKey = new ldf_landen_persoon_geboorteStruct();
ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorteDefault = new ldf_landen_persoon_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct> tHash_Lookup_ldf_landen_ouder1_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_ouder1_geboorte" ))
					;					
					
	

ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorteHashKey = new ldf_landen_ouder1_geboorteStruct();
ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorteDefault = new ldf_landen_ouder1_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder2_geboorteStruct> tHash_Lookup_ldf_landen_ouder2_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder2_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder2_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_ouder2_geboorte" ))
					;					
					
	

ldf_landen_ouder2_geboorteStruct ldf_landen_ouder2_geboorteHashKey = new ldf_landen_ouder2_geboorteStruct();
ldf_landen_ouder2_geboorteStruct ldf_landen_ouder2_geboorteDefault = new ldf_landen_ouder2_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijdenStruct> tHash_Lookup_ldf_landen_overlijden = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijdenStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijdenStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_overlijden" ))
					;					
					
	

ldf_landen_overlijdenStruct ldf_landen_overlijdenHashKey = new ldf_landen_overlijdenStruct();
ldf_landen_overlijdenStruct ldf_landen_overlijdenDefault = new ldf_landen_overlijdenStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_buitenlandStruct> tHash_Lookup_ldf_landen_verblijfplaats_buitenland = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_buitenlandStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_buitenlandStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_verblijfplaats_buitenland" ))
					;					
					
	

ldf_landen_verblijfplaats_buitenlandStruct ldf_landen_verblijfplaats_buitenlandHashKey = new ldf_landen_verblijfplaats_buitenlandStruct();
ldf_landen_verblijfplaats_buitenlandStruct ldf_landen_verblijfplaats_buitenlandDefault = new ldf_landen_verblijfplaats_buitenlandStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct> tHash_Lookup_ldf_landen_verblijfplaats_immigratie = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_verblijfplaats_immigratie" ))
					;					
					
	

ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratieHashKey = new ldf_landen_verblijfplaats_immigratieStruct();
ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratieDefault = new ldf_landen_verblijfplaats_immigratieStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct>) 
					globalMap.get( "tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht" ))
					;					
					
	

ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslachtHashKey = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();
ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslachtDefault = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct>) 
					globalMap.get( "tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht" ))
					;					
					
	

ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslachtHashKey = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();
ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslachtDefault = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder2_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder2_geslachtStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder2_geslachtStruct>) 
					globalMap.get( "tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht" ))
					;					
					
	

ldf_geslachtsaanduidingen_ouder2_geslachtStruct ldf_geslachtsaanduidingen_ouder2_geslachtHashKey = new ldf_geslachtsaanduidingen_ouder2_geslachtStruct();
ldf_geslachtsaanduidingen_ouder2_geslachtStruct ldf_geslachtsaanduidingen_ouder2_geslachtDefault = new ldf_geslachtsaanduidingen_ouder2_geslachtStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct> tHash_Lookup_ldf_gemeenten_persoon_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_persoon_akte" ))
					;					
					
	

ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akteHashKey = new ldf_gemeenten_persoon_akteStruct();
ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akteDefault = new ldf_gemeenten_persoon_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct> tHash_Lookup_ldf_gemeenten_persoon_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_persoon_document" ))
					;					
					
	

ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_documentHashKey = new ldf_gemeenten_persoon_documentStruct();
ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_documentDefault = new ldf_gemeenten_persoon_documentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct> tHash_Lookup_ldf_gemeenten_ouder1_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_ouder1_akte" ))
					;					
					
	

ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akteHashKey = new ldf_gemeenten_ouder1_akteStruct();
ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akteDefault = new ldf_gemeenten_ouder1_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct> tHash_Lookup_ldf_gemeenten_ouder1_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_ouder1_document" ))
					;					
					
	

ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_documentHashKey = new ldf_gemeenten_ouder1_documentStruct();
ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_documentDefault = new ldf_gemeenten_ouder1_documentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_akteStruct> tHash_Lookup_ldf_gemeenten_ouder2_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_ouder2_akte" ))
					;					
					
	

ldf_gemeenten_ouder2_akteStruct ldf_gemeenten_ouder2_akteHashKey = new ldf_gemeenten_ouder2_akteStruct();
ldf_gemeenten_ouder2_akteStruct ldf_gemeenten_ouder2_akteDefault = new ldf_gemeenten_ouder2_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_documentStruct> tHash_Lookup_ldf_gemeenten_ouder2_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_ouder2_document" ))
					;					
					
	

ldf_gemeenten_ouder2_documentStruct ldf_gemeenten_ouder2_documentHashKey = new ldf_gemeenten_ouder2_documentStruct();
ldf_gemeenten_ouder2_documentStruct ldf_gemeenten_ouder2_documentDefault = new ldf_gemeenten_ouder2_documentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_inschrijving_PKStruct> tHash_Lookup_ldf_gemeenten_inschrijving_PK = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_inschrijving_PKStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_inschrijving_PKStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_inschrijving_PK" ))
					;					
					
	

ldf_gemeenten_inschrijving_PKStruct ldf_gemeenten_inschrijving_PKHashKey = new ldf_gemeenten_inschrijving_PKStruct();
ldf_gemeenten_inschrijving_PKStruct ldf_gemeenten_inschrijving_PKDefault = new ldf_gemeenten_inschrijving_PKStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct> tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente" ))
					;					
					
	

ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeenteHashKey = new ldf_gemeenten_verblijfplaats_gemeenteStruct();
ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeenteDefault = new ldf_gemeenten_verblijfplaats_gemeenteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_gezagsverhouding_documentStruct> tHash_Lookup_ldf_gemeenten_gezagsverhouding_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_gezagsverhouding_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_gezagsverhouding_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_gezagsverhouding_document" ))
					;					
					
	

ldf_gemeenten_gezagsverhouding_documentStruct ldf_gemeenten_gezagsverhouding_documentHashKey = new ldf_gemeenten_gezagsverhouding_documentStruct();
ldf_gemeenten_gezagsverhouding_documentStruct ldf_gemeenten_gezagsverhouding_documentDefault = new ldf_gemeenten_gezagsverhouding_documentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kiesrecht_documentStruct> tHash_Lookup_ldf_gemeenten_kiesrecht_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kiesrecht_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kiesrecht_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_kiesrecht_document" ))
					;					
					
	

ldf_gemeenten_kiesrecht_documentStruct ldf_gemeenten_kiesrecht_documentHashKey = new ldf_gemeenten_kiesrecht_documentStruct();
ldf_gemeenten_kiesrecht_documentStruct ldf_gemeenten_kiesrecht_documentDefault = new ldf_gemeenten_kiesrecht_documentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verwijzing_gemeenteStruct> tHash_Lookup_ldf_gemeenten_verwijzing_gemeente = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verwijzing_gemeenteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verwijzing_gemeenteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_verwijzing_gemeente" ))
					;					
					
	

ldf_gemeenten_verwijzing_gemeenteStruct ldf_gemeenten_verwijzing_gemeenteHashKey = new ldf_gemeenten_verwijzing_gemeenteStruct();
ldf_gemeenten_verwijzing_gemeenteStruct ldf_gemeenten_verwijzing_gemeenteDefault = new ldf_gemeenten_verwijzing_gemeenteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_verblijftitels_verblijftitelStruct> tHash_Lookup_ldf_verblijftitels_verblijftitel = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_verblijftitels_verblijftitelStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_verblijftitels_verblijftitelStruct>) 
					globalMap.get( "tHash_Lookup_ldf_verblijftitels_verblijftitel" ))
					;					
					
	

ldf_verblijftitels_verblijftitelStruct ldf_verblijftitels_verblijftitelHashKey = new ldf_verblijftitels_verblijftitelStruct();
ldf_verblijftitels_verblijftitelStruct ldf_verblijftitels_verblijftitelDefault = new ldf_verblijftitels_verblijftitelStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct> tHash_Lookup_ldf_gemeenten_overlijden_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_overlijden_akte" ))
					;					
					
	

ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akteHashKey = new ldf_gemeenten_overlijden_akteStruct();
ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akteDefault = new ldf_gemeenten_overlijden_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct> tHash_Lookup_ldf_gemeenten_overlijden_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_overlijden_document" ))
					;					
					
	

ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_documentHashKey = new ldf_gemeenten_overlijden_documentStruct();
ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_documentDefault = new ldf_gemeenten_overlijden_documentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_persoonStruct ldf_persoon_tmp = new ldf_persoonStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\nprsAnummer,\nprsBurgerservicenummer,\nrtrim(prsVoornamen) as prsVoornamen,\nrtrim(prsEersteVoornaam) as prsEersteVoornaam,\nrtrim(prsVoorletters) as prsVoorletters,\nrtrim(prsAdellijketitelCode) as prsAdellijketitelCode,\nrtrim(prsVoorvoegselGeslachtsnaam) as prsVoorvoegselGeslachtsnaam,\nrtrim(prsGeslachtsnaam) as prsGeslachtsnaam,\nrtrim(prsNaamOpgemaakt) as prsNaamOpgemaakt,\nprsGeboortedatum,\nprsGeboortedatumIndicator,\nrtrim(prsGeboorteplaatsCode) as prsGeboorteplaatsCode,\nrtrim(prsGeboorteplaatsOmschrijving) as prsGeboorteplaatsOmschrijving,\nrtrim(prsGeboortelandCode) as prsGeboortelandCode,\nrtrim(prsGeslachtsaanduidingCode) as prsGeslachtsaanduidingCode,\nprsVorigAnummer,\nprsVolgendAnummer,\nrtrim(prsAanduidingNaamgebruik) as prsAanduidingNaamgebruik,\nrtrim(prsRegistergemeenteAkteCode) as prsRegistergemeenteAkteCode,\nrtrim(prsAktenummer) as prsAktenummer,\nrtrim(prsGemeenteDocumentCode) as prsGemeenteDocumentCode,\nprsDatumDocument,\nprsDatumDocumentIndicator,\nrtrim(prsBeschrijvingDocument) as prsBeschrijvingDocument,\nprsAanduidingGegevensOnderzoek,\nprsDatumIngangOnderzoek,\nprsDatumIngangOnderzoekIndicator,\nprsDatumEindeOnderzoek,\nprsDatumEindeOnderzoekIndicator,\nprsIngangsdatumGeldigheid,\nprsIngangsdatumGeldigheidIndicator,\nprsDatumVanOpneming,\nprsDatumVanOpnemingIndicator,\nprsStatusPersoon,\nprsRijkskodeNationaliteit,\nprsGezinsverhouding,\nprsGezinssterkte,\nprsAnummerGezinshoofd,\nrtrim(prsBurgerlijkeStaat) as prsBurgerlijkeStaat,\nrtrim(prsNaamswijzigingIndicatie) as prsNaamswijzigingIndicatie,\nprsDatumAdreshoudingAaneengesloten,\nprsDatumAdreshoudingAaneengeslotenIndicator,\nou1Anummer,\nou1Burgerservicenummer,\nrtrim(ou1Voornamen) as ou1Voornamen,\nrtrim(ou1Voorletters) as ou1Voorletters,\nrtrim(ou1AdellijketitelCode) as ou1AdellijketitelCode,\nrtrim(ou1VoorvoegselGeslachtsnaam) as ou1VoorvoegselGeslachtsnaam,\nrtrim(ou1Geslachtsnaam) as ou1Geslachtsnaam,\nrtrim(ou1NaamOpgemaakt) as ou1NaamOpgemaakt,\nou1Geboortedatum,\nou1GeboortedatumIndicator,\nrtrim(ou1GeboorteplaatsCode) as ou1GeboorteplaatsCode,\nrtrim(ou1GeboorteplaatsOmschrijving) as ou1GeboorteplaatsOmschrijving,\nrtrim(ou1GeboortelandCode) as ou1GeboortelandCode,\nrtrim(ou1GeslachtsaanduidingCode) as ou1GeslachtsaanduidingCode,\nou1DatumIngangFamilierechtelijkeBetrekking,\nou1DatumIngangFamilierechtelijkeBetrekkingIndicator,\nrtrim(ou1RegistergemeenteAkteCode) as ou1RegistergemeenteAkteCode,\nrtrim(ou1Aktenummer) as ou1Aktenummer,\nrtrim(ou1GemeenteDocumentCode) as ou1GemeenteDocumentCode,\nou1DatumDocument,\nou1DatumDocumentIndicator,\nrtrim(ou1BeschrijvingDocument) as ou1BeschrijvingDocument,\nou1AanduidingGegevensOnderzoek,\nou1DatumIngangOnderzoek,\nou1DatumIngangOnderzoekIndicator,\nou1DatumEindeOnderzoek,\nou1DatumEindeOnderzoekIndicator,\nou1IngangsdatumGeldigheid,\nou1IngangsdatumGeldigheidIndicator,\nou1DatumVanOpneming,\nou1DatumVanOpnemingIndicator,\nou2Anummer,\nou2Burgerservicenummer,\nrtrim(ou2Voornamen) as ou2Voornamen,\nrtrim(ou2Voorletters) as ou2Voorletters,\nrtrim(ou2AdellijketitelCode) as ou2AdellijketitelCode,\nrtrim(ou2VoorvoegselGeslachtsnaam) as ou2VoorvoegselGeslachtsnaam,\nrtrim(ou2Geslachtsnaam) as ou2Geslachtsnaam,\nrtrim(ou2NaamOpgemaakt) as ou2NaamOpgemaakt,\nou2Geboortedatum,\nou2GeboortedatumIndicator,\nrtrim(ou2GeboorteplaatsCode) as ou2GeboorteplaatsCode,\nrtrim(ou2GeboorteplaatsOmschrijving) as ou2GeboorteplaatsOmschrijving,\nrtrim(ou2GeboortelandCode) as ou2GeboortelandCode,\nrtrim(ou2GeslachtsaanduidingCode) as ou2GeslachtsaanduidingCode,\nou2DatumIngangFamilierechtelijkeBetrekking,\nou2DatumIngangFamilierechtelijkeBetrekkingIndicator,\nrtrim(ou2RegistergemeenteAkteCode) as ou2RegistergemeenteAkteCode,\nrtrim(ou2Aktenummer) as ou2Aktenummer,\nrtrim(ou2GemeenteDocumentCode) as ou2GemeenteDocumentCode,\nou2DatumDocument,\nou2DatumDocumentIndicator,\nrtrim(ou2BeschrijvingDocument) as ou2BeschrijvingDocument,\nou2AanduidingGegevensOnderzoek,\nou2DatumIngangOnderzoek,\nou2DatumIngangOnderzoekIndicator,\nou2DatumEindeOnderzoek,\nou2DatumEindeOnderzoekIndicator,\nou2IngangsdatumGeldigheid,\nou2IngangsdatumGeldigheidIndicator,\nou2DatumVanOpneming,\nou2DatumVanOpnemingIndicator,\novlDatumOverlijden,\novlDatumOverlijdenIndicator,\nrtrim(ovlPlaatsOverlijdenCode) as ovlPlaatsOverlijdenCode,\nrtrim(ovlPlaatsOverlijdenOmschrijving) as ovlPlaatsOverlijdenOmschrijving,\nrtrim(ovlLandOverlijdenCode) as ovlLandOverlijdenCode,\nrtrim(ovlRegistergemeenteAkteCode) as ovlRegistergemeenteAkteCode,\nrtrim(ovlAktenummer) as ovlAktenummer,\nrtrim(ovlGemeenteDocumentCode) as ovlGemeenteDocumentCode,\novlDatumDocument,\novlDatumDocumentIndicator,\nrtrim(ovlBeschrijvingDocument) as ovlBeschrijvingDocument,\novlAanduidingGegevensOnderzoek,\novlDatumIngangOnderzoek,\novlDatumIngangOnderzoekIndicator,\novlDatumEindeOnderzoek,\novlDatumEindeOnderzoekIndicator,\novlIngangsdatumGeldigheid,\novlIngangsdatumGeldigheidIndicator,\novlDatumVanOpneming,\novlDatumVanOpnemingIndicator,\ninsDatumIngangBlokkeringPL,\ninsDatumIngangBlokkeringPLIndicator,\ninsDatumOpschortingBijhouding,\ninsDatumOpschortingBijhoudingIndicator,\nrtrim(insOmschrijvingRedenOpschortingBijhouding) as insOmschrijvingRedenOpschortingBijhouding,\ninsDatumEersteInschrijvingGBA,\ninsDatumEersteInschrijvingIndicator,\nrtrim(insGemeenteWaarPKZichBevindtCode) as insGemeenteWaarPKZichBevindtCode,\nrtrim(insIndicatieGeheim) as insIndicatieGeheim,\ninsVersienummer,\ninsDatumtijdstempel,\nrtrim(insPKGegevensVolledigMeegeconverteerd) as insPKGegevensVolledigMeegeconverteerd,\nrtrim(vblGemeenteVanInschrijvingCode) as vblGemeenteVanInschrijvingCode,\nvblDatumInschrijving,\nvblDatumInschrijvingIndicator,\nrtrim(vblFunctieAdres) as vblFunctieAdres,\nrtrim(vblGemeentedeel) as vblGemeentedeel,\nvblDatumAanVangAdreshouding,\nvblDatumAanVangAdreshoudingIndicator,\nrtrim(vblStraatnaam) as vblStraatnaam,\nrtrim(vblNaamOpenbareRuimte) as vblNaamOpenbareRuimte,\nrtrim(vblAdresOpgemaakt) as vblAdresOpgemaakt,\nrtrim(vblWoonplaatsOpgemaakt) as vblWoonplaatsOpgemaakt,\nvblHuisnummer,\nrtrim(vblHuisletter) as vblHuisletter,\nrtrim(vblHuisnummertoevoeging) as vblHuisnummertoevoeging,\nrtrim(vblAanduidingBijHuisnummer) as vblAanduidingBijHuisnummer,\nrtrim(vblPostcode) as vblPostcode,\nrtrim(vblWoonplaatsnaam) as vblWoonplaatsnaam,\nrtrim(vblIdentificatiecodeVerblijfplaats) as vblIdentificatiecodeVerblijfplaats,\nrtrim(vblIdentificatiecodeNummeraanduiding) as vblIdentificatiecodeNummeraanduiding,\nrtrim(vblLocatiebeschrijving) as vblLocatiebeschrijving,\nrtrim(vblLandAdresBuitenlandCode) as vblLandAdresBuitenlandCode,\nvblDatumAanVangAdresBuitenland,\nvblDatumAanVangAdresBuitenlandIndicator,\nrtrim(vblRegel1AdresBuitenland) as vblRegel1AdresBuitenland,\nrtrim(vblRegel2AdresBuitenland) as vblRegel2AdresBuitenland,\nrtrim(vblRegel3AdresBuitenland) as vblRegel3AdresBuitenland,\nrtrim(vblLandVanwaarIngeschrevenCode) as vblLandVanwaarIngeschrevenCode,\nvblDatumVestigingInNederland,\nvblDatumVestigingInNederlandIndicator,\nrtrim(vblOmschrijvingVanAangifteAdreshouding) as vblOmschrijvingVanAangifteAdreshouding,\nvblIndicatieDocument,\nvblAanduidingGegevensOnderzoek,\nvblDatumIngangOnderzoek,\nvblDatumIngangOnderzoekIndicator,\nvblDatumEindeOnderzoek,\nvblDatumEindeOnderzoekIndicator,\nvblIngangsdatumGeldigheid,\nvblIngangsdatumGeldigheidIndicator,\nvblDatumVanOpneming,\nvblDatumVanOpnemingIndicator,\nrtrim(vblSoortPandCode) as vblSoortPandCode,\nrtrim(vblSoortPandOmschrijving) as vblSoortPandOmschrijving,\nrtrim(vblWijkCode) as vblWijkCode,\nrtrim(vblWijkOmschrijving) as vblWijkOmschrijving,\nrtrim(vblPlanalogischeWijkCode) as vblPlanalogischeWijkCode,\nrtrim(vblPlanalogischeWijkOmschrijving) as vblPlanalogischeWijkOmschrijving,\nvblAnummerHoofdbewoner,\nrtrim(vbtAanduidingVerblijfstitelCode) as vbtAanduidingVerblijfstitelCode,\nrtrim(vbtVerblijfstitelVervallen) as vbtVerblijfstitelVervallen,\nvbtDatumEindeVerblijfstitel,\nvbtDatumEindeVerblijfstitelIndicator,\nvbtIngangsdatumVerblijfstitel,\nvbtIngangsdatumVerblijfstitelIndicator,\nvbtAanduidingGegevensOnderzoek,\nvbtDatumIngangOnderzoek,\nvbtDatumIngangOnderzoekIndicator,\nvbtDatumEindeOnderzoek,\nvbtDatumEindeOnderzoekIndicator,\nvbtIngangsdatumGeldigheid,\nvbtIngangsdatumGeldigheidIndicator,\nvbtDatumVanOpneming,\nvbtDatumVanOpnemingIndicator,\nrtrim(gzvIndicatieGezagMinderjarige) as gzvIndicatieGezagMinderjarige,\ngzvIndicatieCurateleregister,\nrtrim(gzvGemeenteDocumentCode) as gzvGemeenteDocumentCode,\ngzvDatumDocument,\ngzvDatumDocumentIndicator,\nrtrim(gzvBeschrijvingDocument) as gzvBeschrijvingDocument,\ngzvAanduidingGegevensOnderzoek,\ngzvDatumIngangOnderzoek,\ngzvDatumIngangOnderzoekIndicator,\ngzvDatumEindeOnderzoek,\ngzvDatumEindeOnderzoekIndicator,\ngzvIngangsdatumGeldigheid,\ngzvIngangsdatumGeldigheidIndicator,\ngzvDatumVanOpneming,\ngzvDatumVanOpnemingIndicator,\nksrAanduidingEuropeesKiesrecht,\nksrDatumVerzoekOfMededelingEuropeesKiesrecht,\nksrDatumVerzoekOfMededelingEuropeesKiesrechtIndicator,\nksrEinddatumUitsluitingEuropeesKiesrecht,\nksrEinddatumUitsluitingEuropeesKiesrechtIndicator,\nrtrim(ksrAanduidinguitgeslotenKiesrecht) as ksrAanduidinguitgeslotenKiesrecht,\nksrEinddatumUitsluitingKiesrecht,\nksrEinddatumUitsluitingKiesrechtIndicator,\nrtrim(ksrGemeenteDocumentCode) as ksrGemeenteDocumentCode,\nksrDatumDocument,\nksrDatumDocumentIndicator,\nrtrim(ksrBeschrijvingDocument) as ksrBeschrijvingDocument,\nrtrim(vwsGemeenteVanInschrijvingCode) as vwsGemeenteVanInschrijvingCode,\nvwsDatumInschrijving,\nvwsDatumInschrijvingIndicator,\nrtrim(vwsIndicatieGeheim) as vwsIndicatieGeheim\n     from bzsprsq00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_persoon.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_persoon.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_persoon.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_persoon.PRSBURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_persoon.PRSBURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_persoon.PRSBURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_persoon.PRSVOORNAMEN = null;
							} else {
	                         		
        	cipers_persoon.PRSVOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 3, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_persoon.PRSEERSTEVOORNAAM = null;
							} else {
	                         		
        	cipers_persoon.PRSEERSTEVOORNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 4, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_persoon.PRSVOORLETTERS = null;
							} else {
	                         		
        	cipers_persoon.PRSVOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 5, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_persoon.PRSADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_persoon.PRSADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 6, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_persoon.PRSVOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon.PRSVOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 7, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_persoon.PRSGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon.PRSGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_persoon.PRSNAAMOPGEMAAKT = null;
							} else {
	                         		
        	cipers_persoon.PRSNAAMOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 9, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_persoon.PRSGEBOORTEDATUM = null;
							} else {
										
			cipers_persoon.PRSGEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 10);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_persoon.PRSGEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSGEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 11, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_persoon.PRSGEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_persoon.PRSGEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 12, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_persoon.PRSGEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.PRSGEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 13, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_persoon.PRSGEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_persoon.PRSGEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_persoon.PRSGESLACHTSAANDUIDINGCODE = null;
							} else {
	                         		
        	cipers_persoon.PRSGESLACHTSAANDUIDINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 15, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_persoon.PRSVORIGANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(16) != null) {
                cipers_persoon.PRSVORIGANUMMER = rs_tAS400Input_1.getBigDecimal(16);
            } else {
                    cipers_persoon.PRSVORIGANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_persoon.PRSVOLGENDANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(17) != null) {
                cipers_persoon.PRSVOLGENDANUMMER = rs_tAS400Input_1.getBigDecimal(17);
            } else {
                    cipers_persoon.PRSVOLGENDANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_persoon.PRSAANDUIDINGNAAMGEBRUIK = null;
							} else {
	                         		
        	cipers_persoon.PRSAANDUIDINGNAAMGEBRUIK = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 18, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_persoon.PRSREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_persoon.PRSREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 19, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_persoon.PRSAKTENUMMER = null;
							} else {
	                         		
        	cipers_persoon.PRSAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 20, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_persoon.PRSGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon.PRSGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 21, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_persoon.PRSDATUMDOCUMENT = null;
							} else {
										
			cipers_persoon.PRSDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 22);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_persoon.PRSDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 23, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 24) {
								cipers_persoon.PRSBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon.PRSBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 24, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 25) {
								cipers_persoon.PRSAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(25) != null) {
                cipers_persoon.PRSAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(25);
            } else {
                    cipers_persoon.PRSAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 26) {
								cipers_persoon.PRSDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.PRSDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 26);
		                    }
							if(colQtyInRs_tAS400Input_1 < 27) {
								cipers_persoon.PRSDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 27, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 28) {
								cipers_persoon.PRSDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.PRSDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 28);
		                    }
							if(colQtyInRs_tAS400Input_1 < 29) {
								cipers_persoon.PRSDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 29, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 30) {
								cipers_persoon.PRSINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.PRSINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 30);
		                    }
							if(colQtyInRs_tAS400Input_1 < 31) {
								cipers_persoon.PRSINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 31, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 32) {
								cipers_persoon.PRSDATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.PRSDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 32);
		                    }
							if(colQtyInRs_tAS400Input_1 < 33) {
								cipers_persoon.PRSDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 33, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 34) {
								cipers_persoon.PRSSTATUSPERSOON = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(34) != null) {
                cipers_persoon.PRSSTATUSPERSOON = rs_tAS400Input_1.getBigDecimal(34);
            } else {
                    cipers_persoon.PRSSTATUSPERSOON = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 35) {
								cipers_persoon.PRSRIJKSKODENATIONALITEIT = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(35) != null) {
                cipers_persoon.PRSRIJKSKODENATIONALITEIT = rs_tAS400Input_1.getBigDecimal(35);
            } else {
                    cipers_persoon.PRSRIJKSKODENATIONALITEIT = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 36) {
								cipers_persoon.PRSGEZINSVERHOUDING = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(36) != null) {
                cipers_persoon.PRSGEZINSVERHOUDING = rs_tAS400Input_1.getBigDecimal(36);
            } else {
                    cipers_persoon.PRSGEZINSVERHOUDING = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 37) {
								cipers_persoon.PRSGEZINSSTERKTE = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(37) != null) {
                cipers_persoon.PRSGEZINSSTERKTE = rs_tAS400Input_1.getBigDecimal(37);
            } else {
                    cipers_persoon.PRSGEZINSSTERKTE = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 38) {
								cipers_persoon.PRSANUMMERGEZINSHOOFD = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(38) != null) {
                cipers_persoon.PRSANUMMERGEZINSHOOFD = rs_tAS400Input_1.getBigDecimal(38);
            } else {
                    cipers_persoon.PRSANUMMERGEZINSHOOFD = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 39) {
								cipers_persoon.PRSBURGERLIJKESTAAT = null;
							} else {
	                         		
        	cipers_persoon.PRSBURGERLIJKESTAAT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 39, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 40) {
								cipers_persoon.PRSNAAMSWIJZIGINGINDICATIE = null;
							} else {
	                         		
        	cipers_persoon.PRSNAAMSWIJZIGINGINDICATIE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 40, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 41) {
								cipers_persoon.PRSDATUMADRESHOUDINGAANEENGESLOTEN = null;
							} else {
										
			cipers_persoon.PRSDATUMADRESHOUDINGAANEENGESLOTEN = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 41);
		                    }
							if(colQtyInRs_tAS400Input_1 < 42) {
								cipers_persoon.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 42, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 43) {
								cipers_persoon.OU1ANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(43) != null) {
                cipers_persoon.OU1ANUMMER = rs_tAS400Input_1.getBigDecimal(43);
            } else {
                    cipers_persoon.OU1ANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 44) {
								cipers_persoon.OU1BURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(44) != null) {
                cipers_persoon.OU1BURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(44);
            } else {
                    cipers_persoon.OU1BURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 45) {
								cipers_persoon.OU1VOORNAMEN = null;
							} else {
	                         		
        	cipers_persoon.OU1VOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 45, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 46) {
								cipers_persoon.OU1VOORLETTERS = null;
							} else {
	                         		
        	cipers_persoon.OU1VOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 46, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 47) {
								cipers_persoon.OU1ADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_persoon.OU1ADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 47, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 48) {
								cipers_persoon.OU1VOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon.OU1VOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 48, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 49) {
								cipers_persoon.OU1GESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon.OU1GESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 49, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 50) {
								cipers_persoon.OU1NAAMOPGEMAAKT = null;
							} else {
	                         		
        	cipers_persoon.OU1NAAMOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 50, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 51) {
								cipers_persoon.OU1GEBOORTEDATUM = null;
							} else {
										
			cipers_persoon.OU1GEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 51);
		                    }
							if(colQtyInRs_tAS400Input_1 < 52) {
								cipers_persoon.OU1GEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1GEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 52, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 53) {
								cipers_persoon.OU1GEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_persoon.OU1GEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 53, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 54) {
								cipers_persoon.OU1GEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.OU1GEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 54, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 55) {
								cipers_persoon.OU1GEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_persoon.OU1GEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 55, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 56) {
								cipers_persoon.OU1GESLACHTSAANDUIDINGCODE = null;
							} else {
	                         		
        	cipers_persoon.OU1GESLACHTSAANDUIDINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 56, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 57) {
								cipers_persoon.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING = null;
							} else {
										
			cipers_persoon.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 57);
		                    }
							if(colQtyInRs_tAS400Input_1 < 58) {
								cipers_persoon.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 58, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 59) {
								cipers_persoon.OU1REGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_persoon.OU1REGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 59, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 60) {
								cipers_persoon.OU1AKTENUMMER = null;
							} else {
	                         		
        	cipers_persoon.OU1AKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 60, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 61) {
								cipers_persoon.OU1GEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon.OU1GEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 61, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 62) {
								cipers_persoon.OU1DATUMDOCUMENT = null;
							} else {
										
			cipers_persoon.OU1DATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 62);
		                    }
							if(colQtyInRs_tAS400Input_1 < 63) {
								cipers_persoon.OU1DATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1DATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 63, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 64) {
								cipers_persoon.OU1BESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon.OU1BESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 64, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 65) {
								cipers_persoon.OU1AANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(65) != null) {
                cipers_persoon.OU1AANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(65);
            } else {
                    cipers_persoon.OU1AANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 66) {
								cipers_persoon.OU1DATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.OU1DATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 66);
		                    }
							if(colQtyInRs_tAS400Input_1 < 67) {
								cipers_persoon.OU1DATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1DATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 67, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 68) {
								cipers_persoon.OU1DATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.OU1DATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 68);
		                    }
							if(colQtyInRs_tAS400Input_1 < 69) {
								cipers_persoon.OU1DATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1DATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 69, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 70) {
								cipers_persoon.OU1INGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.OU1INGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 70);
		                    }
							if(colQtyInRs_tAS400Input_1 < 71) {
								cipers_persoon.OU1INGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1INGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 71, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 72) {
								cipers_persoon.OU1DATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.OU1DATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 72);
		                    }
							if(colQtyInRs_tAS400Input_1 < 73) {
								cipers_persoon.OU1DATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU1DATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 73, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 74) {
								cipers_persoon.OU2ANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(74) != null) {
                cipers_persoon.OU2ANUMMER = rs_tAS400Input_1.getBigDecimal(74);
            } else {
                    cipers_persoon.OU2ANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 75) {
								cipers_persoon.OU2BURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(75) != null) {
                cipers_persoon.OU2BURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(75);
            } else {
                    cipers_persoon.OU2BURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 76) {
								cipers_persoon.OU2VOORNAMEN = null;
							} else {
	                         		
        	cipers_persoon.OU2VOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 76, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 77) {
								cipers_persoon.OU2VOORLETTERS = null;
							} else {
	                         		
        	cipers_persoon.OU2VOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 77, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 78) {
								cipers_persoon.OU2ADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_persoon.OU2ADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 78, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 79) {
								cipers_persoon.OU2VOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon.OU2VOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 79, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 80) {
								cipers_persoon.OU2GESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_persoon.OU2GESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 80, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 81) {
								cipers_persoon.OU2NAAMOPGEMAAKT = null;
							} else {
	                         		
        	cipers_persoon.OU2NAAMOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 81, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 82) {
								cipers_persoon.OU2GEBOORTEDATUM = null;
							} else {
										
			cipers_persoon.OU2GEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 82);
		                    }
							if(colQtyInRs_tAS400Input_1 < 83) {
								cipers_persoon.OU2GEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2GEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 83, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 84) {
								cipers_persoon.OU2GEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_persoon.OU2GEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 84, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 85) {
								cipers_persoon.OU2GEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.OU2GEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 85, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 86) {
								cipers_persoon.OU2GEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_persoon.OU2GEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 86, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 87) {
								cipers_persoon.OU2GESLACHTSAANDUIDINGCODE = null;
							} else {
	                         		
        	cipers_persoon.OU2GESLACHTSAANDUIDINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 87, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 88) {
								cipers_persoon.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING = null;
							} else {
										
			cipers_persoon.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 88);
		                    }
							if(colQtyInRs_tAS400Input_1 < 89) {
								cipers_persoon.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 89, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 90) {
								cipers_persoon.OU2REGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_persoon.OU2REGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 90, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 91) {
								cipers_persoon.OU2AKTENUMMER = null;
							} else {
	                         		
        	cipers_persoon.OU2AKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 91, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 92) {
								cipers_persoon.OU2GEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon.OU2GEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 92, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 93) {
								cipers_persoon.OU2DATUMDOCUMENT = null;
							} else {
										
			cipers_persoon.OU2DATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 93);
		                    }
							if(colQtyInRs_tAS400Input_1 < 94) {
								cipers_persoon.OU2DATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2DATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 94, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 95) {
								cipers_persoon.OU2BESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon.OU2BESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 95, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 96) {
								cipers_persoon.OU2AANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(96) != null) {
                cipers_persoon.OU2AANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(96);
            } else {
                    cipers_persoon.OU2AANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 97) {
								cipers_persoon.OU2DATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.OU2DATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 97);
		                    }
							if(colQtyInRs_tAS400Input_1 < 98) {
								cipers_persoon.OU2DATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2DATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 98, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 99) {
								cipers_persoon.OU2DATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.OU2DATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 99);
		                    }
							if(colQtyInRs_tAS400Input_1 < 100) {
								cipers_persoon.OU2DATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2DATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 100, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 101) {
								cipers_persoon.OU2INGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.OU2INGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 101);
		                    }
							if(colQtyInRs_tAS400Input_1 < 102) {
								cipers_persoon.OU2INGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2INGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 102, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 103) {
								cipers_persoon.OU2DATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.OU2DATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 103);
		                    }
							if(colQtyInRs_tAS400Input_1 < 104) {
								cipers_persoon.OU2DATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OU2DATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 104, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 105) {
								cipers_persoon.OVLDATUMOVERLIJDEN = null;
							} else {
										
			cipers_persoon.OVLDATUMOVERLIJDEN = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 105);
		                    }
							if(colQtyInRs_tAS400Input_1 < 106) {
								cipers_persoon.OVLDATUMOVERLIJDENINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OVLDATUMOVERLIJDENINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 106, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 107) {
								cipers_persoon.OVLPLAATSOVERLIJDENCODE = null;
							} else {
	                         		
        	cipers_persoon.OVLPLAATSOVERLIJDENCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 107, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 108) {
								cipers_persoon.OVLPLAATSOVERLIJDENOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.OVLPLAATSOVERLIJDENOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 108, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 109) {
								cipers_persoon.OVLLANDOVERLIJDENCODE = null;
							} else {
	                         		
        	cipers_persoon.OVLLANDOVERLIJDENCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 109, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 110) {
								cipers_persoon.OVLREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_persoon.OVLREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 110, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 111) {
								cipers_persoon.OVLAKTENUMMER = null;
							} else {
	                         		
        	cipers_persoon.OVLAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 111, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 112) {
								cipers_persoon.OVLGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon.OVLGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 112, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 113) {
								cipers_persoon.OVLDATUMDOCUMENT = null;
							} else {
										
			cipers_persoon.OVLDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 113);
		                    }
							if(colQtyInRs_tAS400Input_1 < 114) {
								cipers_persoon.OVLDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OVLDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 114, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 115) {
								cipers_persoon.OVLBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon.OVLBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 115, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 116) {
								cipers_persoon.OVLAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(116) != null) {
                cipers_persoon.OVLAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(116);
            } else {
                    cipers_persoon.OVLAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 117) {
								cipers_persoon.OVLDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.OVLDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 117);
		                    }
							if(colQtyInRs_tAS400Input_1 < 118) {
								cipers_persoon.OVLDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OVLDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 118, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 119) {
								cipers_persoon.OVLDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.OVLDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 119);
		                    }
							if(colQtyInRs_tAS400Input_1 < 120) {
								cipers_persoon.OVLDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OVLDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 120, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 121) {
								cipers_persoon.OVLINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.OVLINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 121);
		                    }
							if(colQtyInRs_tAS400Input_1 < 122) {
								cipers_persoon.OVLINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OVLINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 122, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 123) {
								cipers_persoon.OVLDATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.OVLDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 123);
		                    }
							if(colQtyInRs_tAS400Input_1 < 124) {
								cipers_persoon.OVLDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.OVLDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 124, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 125) {
								cipers_persoon.INSDATUMINGANGBLOKKERINGPL = null;
							} else {
										
			cipers_persoon.INSDATUMINGANGBLOKKERINGPL = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 125);
		                    }
							if(colQtyInRs_tAS400Input_1 < 126) {
								cipers_persoon.INSDATUMINGANGBLOKKERINGPLINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.INSDATUMINGANGBLOKKERINGPLINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 126, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 127) {
								cipers_persoon.INSDATUMOPSCHORTINGBIJHOUDING = null;
							} else {
										
			cipers_persoon.INSDATUMOPSCHORTINGBIJHOUDING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 127);
		                    }
							if(colQtyInRs_tAS400Input_1 < 128) {
								cipers_persoon.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 128, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 129) {
								cipers_persoon.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING = null;
							} else {
	                         		
        	cipers_persoon.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 129, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 130) {
								cipers_persoon.INSDATUMEERSTEINSCHRIJVINGGBA = null;
							} else {
										
			cipers_persoon.INSDATUMEERSTEINSCHRIJVINGGBA = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 130);
		                    }
							if(colQtyInRs_tAS400Input_1 < 131) {
								cipers_persoon.INSDATUMEERSTEINSCHRIJVINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.INSDATUMEERSTEINSCHRIJVINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 131, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 132) {
								cipers_persoon.INSGEMEENTEWAARPKZICHBEVINDTCODE = null;
							} else {
	                         		
        	cipers_persoon.INSGEMEENTEWAARPKZICHBEVINDTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 132, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 133) {
								cipers_persoon.INSINDICATIEGEHEIM = null;
							} else {
	                         		
        	cipers_persoon.INSINDICATIEGEHEIM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 133, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 134) {
								cipers_persoon.INSVERSIENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(134) != null) {
                cipers_persoon.INSVERSIENUMMER = rs_tAS400Input_1.getBigDecimal(134);
            } else {
                    cipers_persoon.INSVERSIENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 135) {
								cipers_persoon.INSDATUMTIJDSTEMPEL = null;
							} else {
	                         		
        	cipers_persoon.INSDATUMTIJDSTEMPEL = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 135, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 136) {
								cipers_persoon.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD = null;
							} else {
	                         		
        	cipers_persoon.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 136, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 137) {
								cipers_persoon.VBLGEMEENTEVANINSCHRIJVINGCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLGEMEENTEVANINSCHRIJVINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 137, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 138) {
								cipers_persoon.VBLDATUMINSCHRIJVING = null;
							} else {
										
			cipers_persoon.VBLDATUMINSCHRIJVING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 138);
		                    }
							if(colQtyInRs_tAS400Input_1 < 139) {
								cipers_persoon.VBLDATUMINSCHRIJVINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMINSCHRIJVINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 139, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 140) {
								cipers_persoon.VBLFUNCTIEADRES = null;
							} else {
	                         		
        	cipers_persoon.VBLFUNCTIEADRES = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 140, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 141) {
								cipers_persoon.VBLGEMEENTEDEEL = null;
							} else {
	                         		
        	cipers_persoon.VBLGEMEENTEDEEL = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 141, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 142) {
								cipers_persoon.VBLDATUMAANVANGADRESHOUDING = null;
							} else {
										
			cipers_persoon.VBLDATUMAANVANGADRESHOUDING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 142);
		                    }
							if(colQtyInRs_tAS400Input_1 < 143) {
								cipers_persoon.VBLDATUMAANVANGADRESHOUDINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMAANVANGADRESHOUDINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 143, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 144) {
								cipers_persoon.VBLSTRAATNAAM = null;
							} else {
	                         		
        	cipers_persoon.VBLSTRAATNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 144, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 145) {
								cipers_persoon.VBLNAAMOPENBARERUIMTE = null;
							} else {
	                         		
        	cipers_persoon.VBLNAAMOPENBARERUIMTE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 145, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 146) {
								cipers_persoon.VBLADRESOPGEMAAKT = null;
							} else {
	                         		
        	cipers_persoon.VBLADRESOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 146, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 147) {
								cipers_persoon.VBLWOONPLAATSOPGEMAAKT = null;
							} else {
	                         		
        	cipers_persoon.VBLWOONPLAATSOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 147, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 148) {
								cipers_persoon.VBLHUISNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(148) != null) {
                cipers_persoon.VBLHUISNUMMER = rs_tAS400Input_1.getBigDecimal(148);
            } else {
                    cipers_persoon.VBLHUISNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 149) {
								cipers_persoon.VBLHUISLETTER = null;
							} else {
	                         		
        	cipers_persoon.VBLHUISLETTER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 149, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 150) {
								cipers_persoon.VBLHUISNUMMERTOEVOEGING = null;
							} else {
	                         		
        	cipers_persoon.VBLHUISNUMMERTOEVOEGING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 150, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 151) {
								cipers_persoon.VBLAANDUIDINGBIJHUISNUMMER = null;
							} else {
	                         		
        	cipers_persoon.VBLAANDUIDINGBIJHUISNUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 151, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 152) {
								cipers_persoon.VBLPOSTCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLPOSTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 152, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 153) {
								cipers_persoon.VBLWOONPLAATSNAAM = null;
							} else {
	                         		
        	cipers_persoon.VBLWOONPLAATSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 153, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 154) {
								cipers_persoon.VBLIDENTIFICATIECODEVERBLIJFPLAATS = null;
							} else {
	                         		
        	cipers_persoon.VBLIDENTIFICATIECODEVERBLIJFPLAATS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 154, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 155) {
								cipers_persoon.VBLIDENTIFICATIECODENUMMERAANDUIDING = null;
							} else {
	                         		
        	cipers_persoon.VBLIDENTIFICATIECODENUMMERAANDUIDING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 155, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 156) {
								cipers_persoon.VBLLOCATIEBESCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.VBLLOCATIEBESCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 156, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 157) {
								cipers_persoon.VBLLANDADRESBUITENLANDCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLLANDADRESBUITENLANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 157, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 158) {
								cipers_persoon.VBLDATUMAANVANGADRESBUITENLAND = null;
							} else {
										
			cipers_persoon.VBLDATUMAANVANGADRESBUITENLAND = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 158);
		                    }
							if(colQtyInRs_tAS400Input_1 < 159) {
								cipers_persoon.VBLDATUMAANVANGADRESBUITENLANDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMAANVANGADRESBUITENLANDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 159, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 160) {
								cipers_persoon.VBLREGEL1ADRESBUITENLAND = null;
							} else {
	                         		
        	cipers_persoon.VBLREGEL1ADRESBUITENLAND = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 160, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 161) {
								cipers_persoon.VBLREGEL2ADRESBUITENLAND = null;
							} else {
	                         		
        	cipers_persoon.VBLREGEL2ADRESBUITENLAND = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 161, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 162) {
								cipers_persoon.VBLREGEL3ADRESBUITENLAND = null;
							} else {
	                         		
        	cipers_persoon.VBLREGEL3ADRESBUITENLAND = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 162, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 163) {
								cipers_persoon.VBLLANDVANWAARINGESCHREVENCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLLANDVANWAARINGESCHREVENCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 163, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 164) {
								cipers_persoon.VBLDATUMVESTIGINGINNEDERLAND = null;
							} else {
										
			cipers_persoon.VBLDATUMVESTIGINGINNEDERLAND = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 164);
		                    }
							if(colQtyInRs_tAS400Input_1 < 165) {
								cipers_persoon.VBLDATUMVESTIGINGINNEDERLANDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMVESTIGINGINNEDERLANDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 165, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 166) {
								cipers_persoon.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING = null;
							} else {
	                         		
        	cipers_persoon.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 166, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 167) {
								cipers_persoon.VBLINDICATIEDOCUMENT = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(167) != null) {
                cipers_persoon.VBLINDICATIEDOCUMENT = rs_tAS400Input_1.getBigDecimal(167);
            } else {
                    cipers_persoon.VBLINDICATIEDOCUMENT = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 168) {
								cipers_persoon.VBLAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(168) != null) {
                cipers_persoon.VBLAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(168);
            } else {
                    cipers_persoon.VBLAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 169) {
								cipers_persoon.VBLDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.VBLDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 169);
		                    }
							if(colQtyInRs_tAS400Input_1 < 170) {
								cipers_persoon.VBLDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 170, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 171) {
								cipers_persoon.VBLDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.VBLDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 171);
		                    }
							if(colQtyInRs_tAS400Input_1 < 172) {
								cipers_persoon.VBLDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 172, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 173) {
								cipers_persoon.VBLINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.VBLINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 173);
		                    }
							if(colQtyInRs_tAS400Input_1 < 174) {
								cipers_persoon.VBLINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 174, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 175) {
								cipers_persoon.VBLDATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.VBLDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 175);
		                    }
							if(colQtyInRs_tAS400Input_1 < 176) {
								cipers_persoon.VBLDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBLDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 176, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 177) {
								cipers_persoon.VBLSOORTPANDCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLSOORTPANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 177, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 178) {
								cipers_persoon.VBLSOORTPANDOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.VBLSOORTPANDOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 178, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 179) {
								cipers_persoon.VBLWIJKCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLWIJKCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 179, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 180) {
								cipers_persoon.VBLWIJKOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.VBLWIJKOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 180, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 181) {
								cipers_persoon.VBLPLANALOGISCHEWIJKCODE = null;
							} else {
	                         		
        	cipers_persoon.VBLPLANALOGISCHEWIJKCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 181, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 182) {
								cipers_persoon.VBLPLANALOGISCHEWIJKOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_persoon.VBLPLANALOGISCHEWIJKOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 182, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 183) {
								cipers_persoon.VBLANUMMERHOOFDBEWONER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(183) != null) {
                cipers_persoon.VBLANUMMERHOOFDBEWONER = rs_tAS400Input_1.getBigDecimal(183);
            } else {
                    cipers_persoon.VBLANUMMERHOOFDBEWONER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 184) {
								cipers_persoon.VBTAANDUIDINGVERBLIJFSTITELCODE = null;
							} else {
	                         		
        	cipers_persoon.VBTAANDUIDINGVERBLIJFSTITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 184, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 185) {
								cipers_persoon.VBTVERBLIJFSTITELVERVALLEN = null;
							} else {
	                         		
        	cipers_persoon.VBTVERBLIJFSTITELVERVALLEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 185, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 186) {
								cipers_persoon.VBTDATUMEINDEVERBLIJFSTITEL = null;
							} else {
										
			cipers_persoon.VBTDATUMEINDEVERBLIJFSTITEL = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 186);
		                    }
							if(colQtyInRs_tAS400Input_1 < 187) {
								cipers_persoon.VBTDATUMEINDEVERBLIJFSTITELINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBTDATUMEINDEVERBLIJFSTITELINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 187, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 188) {
								cipers_persoon.VBTINGANGSDATUMVERBLIJFSTITEL = null;
							} else {
										
			cipers_persoon.VBTINGANGSDATUMVERBLIJFSTITEL = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 188);
		                    }
							if(colQtyInRs_tAS400Input_1 < 189) {
								cipers_persoon.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 189, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 190) {
								cipers_persoon.VBTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(190) != null) {
                cipers_persoon.VBTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(190);
            } else {
                    cipers_persoon.VBTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 191) {
								cipers_persoon.VBTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.VBTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 191);
		                    }
							if(colQtyInRs_tAS400Input_1 < 192) {
								cipers_persoon.VBTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 192, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 193) {
								cipers_persoon.VBTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.VBTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 193);
		                    }
							if(colQtyInRs_tAS400Input_1 < 194) {
								cipers_persoon.VBTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 194, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 195) {
								cipers_persoon.VBTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.VBTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 195);
		                    }
							if(colQtyInRs_tAS400Input_1 < 196) {
								cipers_persoon.VBTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 196, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 197) {
								cipers_persoon.VBTDATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.VBTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 197);
		                    }
							if(colQtyInRs_tAS400Input_1 < 198) {
								cipers_persoon.VBTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VBTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 198, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 199) {
								cipers_persoon.GZVINDICATIEGEZAGMINDERJARIGE = null;
							} else {
	                         		
        	cipers_persoon.GZVINDICATIEGEZAGMINDERJARIGE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 199, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 200) {
								cipers_persoon.GZVINDICATIECURATELEREGISTER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(200) != null) {
                cipers_persoon.GZVINDICATIECURATELEREGISTER = rs_tAS400Input_1.getBigDecimal(200);
            } else {
                    cipers_persoon.GZVINDICATIECURATELEREGISTER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 201) {
								cipers_persoon.GZVGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon.GZVGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 201, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 202) {
								cipers_persoon.GZVDATUMDOCUMENT = null;
							} else {
										
			cipers_persoon.GZVDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 202);
		                    }
							if(colQtyInRs_tAS400Input_1 < 203) {
								cipers_persoon.GZVDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.GZVDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 203, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 204) {
								cipers_persoon.GZVBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon.GZVBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 204, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 205) {
								cipers_persoon.GZVAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(205) != null) {
                cipers_persoon.GZVAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(205);
            } else {
                    cipers_persoon.GZVAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 206) {
								cipers_persoon.GZVDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_persoon.GZVDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 206);
		                    }
							if(colQtyInRs_tAS400Input_1 < 207) {
								cipers_persoon.GZVDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.GZVDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 207, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 208) {
								cipers_persoon.GZVDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_persoon.GZVDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 208);
		                    }
							if(colQtyInRs_tAS400Input_1 < 209) {
								cipers_persoon.GZVDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.GZVDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 209, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 210) {
								cipers_persoon.GZVINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_persoon.GZVINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 210);
		                    }
							if(colQtyInRs_tAS400Input_1 < 211) {
								cipers_persoon.GZVINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.GZVINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 211, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 212) {
								cipers_persoon.GZVDATUMVANOPNEMING = null;
							} else {
										
			cipers_persoon.GZVDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 212);
		                    }
							if(colQtyInRs_tAS400Input_1 < 213) {
								cipers_persoon.GZVDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.GZVDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 213, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 214) {
								cipers_persoon.KSRAANDUIDINGEUROPEESKIESRECHT = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(214) != null) {
                cipers_persoon.KSRAANDUIDINGEUROPEESKIESRECHT = rs_tAS400Input_1.getBigDecimal(214);
            } else {
                    cipers_persoon.KSRAANDUIDINGEUROPEESKIESRECHT = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 215) {
								cipers_persoon.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT = null;
							} else {
										
			cipers_persoon.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 215);
		                    }
							if(colQtyInRs_tAS400Input_1 < 216) {
								cipers_persoon.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 216, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 217) {
								cipers_persoon.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT = null;
							} else {
										
			cipers_persoon.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 217);
		                    }
							if(colQtyInRs_tAS400Input_1 < 218) {
								cipers_persoon.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 218, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 219) {
								cipers_persoon.KSRAANDUIDINGUITGESLOTENKIESRECHT = null;
							} else {
	                         		
        	cipers_persoon.KSRAANDUIDINGUITGESLOTENKIESRECHT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 219, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 220) {
								cipers_persoon.KSREINDDATUMUITSLUITINGKIESRECHT = null;
							} else {
										
			cipers_persoon.KSREINDDATUMUITSLUITINGKIESRECHT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 220);
		                    }
							if(colQtyInRs_tAS400Input_1 < 221) {
								cipers_persoon.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 221, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 222) {
								cipers_persoon.KSRGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_persoon.KSRGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 222, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 223) {
								cipers_persoon.KSRDATUMDOCUMENT = null;
							} else {
										
			cipers_persoon.KSRDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 223);
		                    }
							if(colQtyInRs_tAS400Input_1 < 224) {
								cipers_persoon.KSRDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.KSRDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 224, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 225) {
								cipers_persoon.KSRBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_persoon.KSRBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 225, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 226) {
								cipers_persoon.VWSGEMEENTEVANINSCHRIJVINGCODE = null;
							} else {
	                         		
        	cipers_persoon.VWSGEMEENTEVANINSCHRIJVINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 226, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 227) {
								cipers_persoon.VWSDATUMINSCHRIJVING = null;
							} else {
										
			cipers_persoon.VWSDATUMINSCHRIJVING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 227);
		                    }
							if(colQtyInRs_tAS400Input_1 < 228) {
								cipers_persoon.VWSDATUMINSCHRIJVINGINDICATOR = null;
							} else {
	                         		
        	cipers_persoon.VWSDATUMINSCHRIJVINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 228, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 229) {
								cipers_persoon.VWSINDICATIEGEHEIM = null;
							} else {
	                         		
        	cipers_persoon.VWSINDICATIEGEHEIM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 229, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_persoon
			//cipers_persoon


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_persoon"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_persoon_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_persoon_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_persoon_naamHashKey.adellijketitelcode = cipers_persoon.PRSADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_persoon_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_persoon_naam.lookup( ldf_titels_predikaten_persoon_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_persoon_naam != null && tHash_Lookup_ldf_titels_predikaten_persoon_naam.getCount(ldf_titels_predikaten_persoon_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_persoon_naam' and it contains more one result from keys :  ldf_titels_predikaten_persoon_naam.adellijketitelcode = '" + ldf_titels_predikaten_persoon_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_persoon_naamStruct fromLookup_ldf_titels_predikaten_persoon_naam = null;
							ldf_titels_predikaten_persoon_naam = ldf_titels_predikaten_persoon_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_persoon_naam !=null && tHash_Lookup_ldf_titels_predikaten_persoon_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_persoon_naam = tHash_Lookup_ldf_titels_predikaten_persoon_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_persoon_naam != null) {
								ldf_titels_predikaten_persoon_naam = fromLookup_ldf_titels_predikaten_persoon_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_ouder1_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_ouder1_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_ouder1_naamHashKey.adellijketitelcode = cipers_persoon.OU1ADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_ouder1_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_ouder1_naam.lookup( ldf_titels_predikaten_ouder1_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_ouder1_naam != null && tHash_Lookup_ldf_titels_predikaten_ouder1_naam.getCount(ldf_titels_predikaten_ouder1_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_ouder1_naam' and it contains more one result from keys :  ldf_titels_predikaten_ouder1_naam.adellijketitelcode = '" + ldf_titels_predikaten_ouder1_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_ouder1_naamStruct fromLookup_ldf_titels_predikaten_ouder1_naam = null;
							ldf_titels_predikaten_ouder1_naam = ldf_titels_predikaten_ouder1_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_ouder1_naam !=null && tHash_Lookup_ldf_titels_predikaten_ouder1_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_ouder1_naam = tHash_Lookup_ldf_titels_predikaten_ouder1_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_ouder1_naam != null) {
								ldf_titels_predikaten_ouder1_naam = fromLookup_ldf_titels_predikaten_ouder1_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_ouder2_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_ouder2_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_ouder2_naamStruct ldf_titels_predikaten_ouder2_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_ouder2_naamHashKey.adellijketitelcode = cipers_persoon.OU2ADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_ouder2_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_ouder2_naam.lookup( ldf_titels_predikaten_ouder2_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_ouder2_naam != null && tHash_Lookup_ldf_titels_predikaten_ouder2_naam.getCount(ldf_titels_predikaten_ouder2_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_ouder2_naam' and it contains more one result from keys :  ldf_titels_predikaten_ouder2_naam.adellijketitelcode = '" + ldf_titels_predikaten_ouder2_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_ouder2_naamStruct ldf_titels_predikaten_ouder2_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_ouder2_naamStruct fromLookup_ldf_titels_predikaten_ouder2_naam = null;
							ldf_titels_predikaten_ouder2_naam = ldf_titels_predikaten_ouder2_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_ouder2_naam !=null && tHash_Lookup_ldf_titels_predikaten_ouder2_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_ouder2_naam = tHash_Lookup_ldf_titels_predikaten_ouder2_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_ouder2_naam != null) {
								ldf_titels_predikaten_ouder2_naam = fromLookup_ldf_titels_predikaten_ouder2_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_persoon_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_persoon_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_persoon_geboorteHashKey.landcode = cipers_persoon.PRSGEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_persoon_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_persoon_geboorte.lookup( ldf_landen_persoon_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_persoon_geboorte != null && tHash_Lookup_ldf_landen_persoon_geboorte.getCount(ldf_landen_persoon_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_persoon_geboorte' and it contains more one result from keys :  ldf_landen_persoon_geboorte.landcode = '" + ldf_landen_persoon_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_persoon_geboorteStruct fromLookup_ldf_landen_persoon_geboorte = null;
							ldf_landen_persoon_geboorte = ldf_landen_persoon_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_persoon_geboorte !=null && tHash_Lookup_ldf_landen_persoon_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_persoon_geboorte = tHash_Lookup_ldf_landen_persoon_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_persoon_geboorte != null) {
								ldf_landen_persoon_geboorte = fromLookup_ldf_landen_persoon_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_ouder1_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_ouder1_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_ouder1_geboorteHashKey.landcode = cipers_persoon.OU1GEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_ouder1_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_ouder1_geboorte.lookup( ldf_landen_ouder1_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_ouder1_geboorte != null && tHash_Lookup_ldf_landen_ouder1_geboorte.getCount(ldf_landen_ouder1_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_ouder1_geboorte' and it contains more one result from keys :  ldf_landen_ouder1_geboorte.landcode = '" + ldf_landen_ouder1_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_ouder1_geboorteStruct fromLookup_ldf_landen_ouder1_geboorte = null;
							ldf_landen_ouder1_geboorte = ldf_landen_ouder1_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_ouder1_geboorte !=null && tHash_Lookup_ldf_landen_ouder1_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_ouder1_geboorte = tHash_Lookup_ldf_landen_ouder1_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_ouder1_geboorte != null) {
								ldf_landen_ouder1_geboorte = fromLookup_ldf_landen_ouder1_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_ouder2_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_ouder2_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_ouder2_geboorteStruct ldf_landen_ouder2_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_ouder2_geboorteHashKey.landcode = cipers_persoon.OU2GEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_ouder2_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_ouder2_geboorte.lookup( ldf_landen_ouder2_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_ouder2_geboorte != null && tHash_Lookup_ldf_landen_ouder2_geboorte.getCount(ldf_landen_ouder2_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_ouder2_geboorte' and it contains more one result from keys :  ldf_landen_ouder2_geboorte.landcode = '" + ldf_landen_ouder2_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_ouder2_geboorteStruct ldf_landen_ouder2_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_ouder2_geboorteStruct fromLookup_ldf_landen_ouder2_geboorte = null;
							ldf_landen_ouder2_geboorte = ldf_landen_ouder2_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_ouder2_geboorte !=null && tHash_Lookup_ldf_landen_ouder2_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_ouder2_geboorte = tHash_Lookup_ldf_landen_ouder2_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_ouder2_geboorte != null) {
								ldf_landen_ouder2_geboorte = fromLookup_ldf_landen_ouder2_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_overlijden" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_overlijden = false;
       		  	    	
       		  	    	
 							ldf_landen_overlijdenStruct ldf_landen_overlijdenObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_overlijdenHashKey.landcode = cipers_persoon.OVLLANDOVERLIJDENCODE ;
                        		    		

								
		                        	ldf_landen_overlijdenHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_overlijden.lookup( ldf_landen_overlijdenHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_overlijden != null && tHash_Lookup_ldf_landen_overlijden.getCount(ldf_landen_overlijdenHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_overlijden' and it contains more one result from keys :  ldf_landen_overlijden.landcode = '" + ldf_landen_overlijdenHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_overlijdenStruct ldf_landen_overlijden = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_overlijdenStruct fromLookup_ldf_landen_overlijden = null;
							ldf_landen_overlijden = ldf_landen_overlijdenDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_overlijden !=null && tHash_Lookup_ldf_landen_overlijden.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_overlijden = tHash_Lookup_ldf_landen_overlijden.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_overlijden != null) {
								ldf_landen_overlijden = fromLookup_ldf_landen_overlijden;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_verblijfplaats_buitenland" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_verblijfplaats_buitenland = false;
       		  	    	
       		  	    	
 							ldf_landen_verblijfplaats_buitenlandStruct ldf_landen_verblijfplaats_buitenlandObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_verblijfplaats_buitenlandHashKey.landcode = cipers_persoon.VBLLANDADRESBUITENLANDCODE ;
                        		    		

								
		                        	ldf_landen_verblijfplaats_buitenlandHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_verblijfplaats_buitenland.lookup( ldf_landen_verblijfplaats_buitenlandHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_verblijfplaats_buitenland != null && tHash_Lookup_ldf_landen_verblijfplaats_buitenland.getCount(ldf_landen_verblijfplaats_buitenlandHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_verblijfplaats_buitenland' and it contains more one result from keys :  ldf_landen_verblijfplaats_buitenland.landcode = '" + ldf_landen_verblijfplaats_buitenlandHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_verblijfplaats_buitenlandStruct ldf_landen_verblijfplaats_buitenland = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_verblijfplaats_buitenlandStruct fromLookup_ldf_landen_verblijfplaats_buitenland = null;
							ldf_landen_verblijfplaats_buitenland = ldf_landen_verblijfplaats_buitenlandDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_verblijfplaats_buitenland !=null && tHash_Lookup_ldf_landen_verblijfplaats_buitenland.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_verblijfplaats_buitenland = tHash_Lookup_ldf_landen_verblijfplaats_buitenland.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_verblijfplaats_buitenland != null) {
								ldf_landen_verblijfplaats_buitenland = fromLookup_ldf_landen_verblijfplaats_buitenland;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_verblijfplaats_immigratie" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_verblijfplaats_immigratie = false;
       		  	    	
       		  	    	
 							ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratieObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_verblijfplaats_immigratieHashKey.landcode = cipers_persoon.VBLLANDVANWAARINGESCHREVENCODE ;
                        		    		

								
		                        	ldf_landen_verblijfplaats_immigratieHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_verblijfplaats_immigratie.lookup( ldf_landen_verblijfplaats_immigratieHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_verblijfplaats_immigratie != null && tHash_Lookup_ldf_landen_verblijfplaats_immigratie.getCount(ldf_landen_verblijfplaats_immigratieHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_verblijfplaats_immigratie' and it contains more one result from keys :  ldf_landen_verblijfplaats_immigratie.landcode = '" + ldf_landen_verblijfplaats_immigratieHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratie = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_verblijfplaats_immigratieStruct fromLookup_ldf_landen_verblijfplaats_immigratie = null;
							ldf_landen_verblijfplaats_immigratie = ldf_landen_verblijfplaats_immigratieDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_verblijfplaats_immigratie !=null && tHash_Lookup_ldf_landen_verblijfplaats_immigratie.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_verblijfplaats_immigratie = tHash_Lookup_ldf_landen_verblijfplaats_immigratie.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_verblijfplaats_immigratie != null) {
								ldf_landen_verblijfplaats_immigratie = fromLookup_ldf_landen_verblijfplaats_immigratie;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_geslachtsaanduidingen_persoon_geslacht" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_geslachtsaanduidingen_persoon_geslacht = false;
       		  	    	
       		  	    	
 							ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslachtObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_geslachtsaanduidingen_persoon_geslachtHashKey.geslachtsaanduidingcode = cipers_persoon.PRSGESLACHTSAANDUIDINGCODE ;
                        		    		

								
		                        	ldf_geslachtsaanduidingen_persoon_geslachtHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.lookup( ldf_geslachtsaanduidingen_persoon_geslachtHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht != null && tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.getCount(ldf_geslachtsaanduidingen_persoon_geslachtHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_geslachtsaanduidingen_persoon_geslacht' and it contains more one result from keys :  ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode = '" + ldf_geslachtsaanduidingen_persoon_geslachtHashKey.geslachtsaanduidingcode + "'");
								} // G 071
							

							ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslacht = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_geslachtsaanduidingen_persoon_geslachtStruct fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht = null;
							ldf_geslachtsaanduidingen_persoon_geslacht = ldf_geslachtsaanduidingen_persoon_geslachtDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht !=null && tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht = tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht != null) {
								ldf_geslachtsaanduidingen_persoon_geslacht = fromLookup_ldf_geslachtsaanduidingen_persoon_geslacht;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_geslachtsaanduidingen_ouder1_geslacht" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_geslachtsaanduidingen_ouder1_geslacht = false;
       		  	    	
       		  	    	
 							ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslachtObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_geslachtsaanduidingen_ouder1_geslachtHashKey.geslachtsaanduidingcode = cipers_persoon.OU1GESLACHTSAANDUIDINGCODE ;
                        		    		

								
		                        	ldf_geslachtsaanduidingen_ouder1_geslachtHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.lookup( ldf_geslachtsaanduidingen_ouder1_geslachtHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht != null && tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.getCount(ldf_geslachtsaanduidingen_ouder1_geslachtHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_geslachtsaanduidingen_ouder1_geslacht' and it contains more one result from keys :  ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode = '" + ldf_geslachtsaanduidingen_ouder1_geslachtHashKey.geslachtsaanduidingcode + "'");
								} // G 071
							

							ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslacht = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_geslachtsaanduidingen_ouder1_geslachtStruct fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht = null;
							ldf_geslachtsaanduidingen_ouder1_geslacht = ldf_geslachtsaanduidingen_ouder1_geslachtDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht !=null && tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht = tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht != null) {
								ldf_geslachtsaanduidingen_ouder1_geslacht = fromLookup_ldf_geslachtsaanduidingen_ouder1_geslacht;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_geslachtsaanduidingen_ouder2_geslacht" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_geslachtsaanduidingen_ouder2_geslacht = false;
       		  	    	
       		  	    	
 							ldf_geslachtsaanduidingen_ouder2_geslachtStruct ldf_geslachtsaanduidingen_ouder2_geslachtObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_geslachtsaanduidingen_ouder2_geslachtHashKey.geslachtsaanduidingcode = cipers_persoon.OU2GESLACHTSAANDUIDINGCODE ;
                        		    		

								
		                        	ldf_geslachtsaanduidingen_ouder2_geslachtHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.lookup( ldf_geslachtsaanduidingen_ouder2_geslachtHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht != null && tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.getCount(ldf_geslachtsaanduidingen_ouder2_geslachtHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_geslachtsaanduidingen_ouder2_geslacht' and it contains more one result from keys :  ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingcode = '" + ldf_geslachtsaanduidingen_ouder2_geslachtHashKey.geslachtsaanduidingcode + "'");
								} // G 071
							

							ldf_geslachtsaanduidingen_ouder2_geslachtStruct ldf_geslachtsaanduidingen_ouder2_geslacht = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_geslachtsaanduidingen_ouder2_geslachtStruct fromLookup_ldf_geslachtsaanduidingen_ouder2_geslacht = null;
							ldf_geslachtsaanduidingen_ouder2_geslacht = ldf_geslachtsaanduidingen_ouder2_geslachtDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht !=null && tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_geslachtsaanduidingen_ouder2_geslacht = tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_geslachtsaanduidingen_ouder2_geslacht != null) {
								ldf_geslachtsaanduidingen_ouder2_geslacht = fromLookup_ldf_geslachtsaanduidingen_ouder2_geslacht;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_persoon_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_persoon_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_persoon_akteHashKey.gemeentecode = cipers_persoon.PRSREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_persoon_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_persoon_akte.lookup( ldf_gemeenten_persoon_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_persoon_akte != null && tHash_Lookup_ldf_gemeenten_persoon_akte.getCount(ldf_gemeenten_persoon_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_persoon_akte' and it contains more one result from keys :  ldf_gemeenten_persoon_akte.gemeentecode = '" + ldf_gemeenten_persoon_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_persoon_akteStruct fromLookup_ldf_gemeenten_persoon_akte = null;
							ldf_gemeenten_persoon_akte = ldf_gemeenten_persoon_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_persoon_akte !=null && tHash_Lookup_ldf_gemeenten_persoon_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_persoon_akte = tHash_Lookup_ldf_gemeenten_persoon_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_persoon_akte != null) {
								ldf_gemeenten_persoon_akte = fromLookup_ldf_gemeenten_persoon_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_persoon_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_persoon_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_persoon_documentHashKey.gemeentecode = cipers_persoon.PRSGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_persoon_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_persoon_document.lookup( ldf_gemeenten_persoon_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_persoon_document != null && tHash_Lookup_ldf_gemeenten_persoon_document.getCount(ldf_gemeenten_persoon_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_persoon_document' and it contains more one result from keys :  ldf_gemeenten_persoon_document.gemeentecode = '" + ldf_gemeenten_persoon_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_persoon_documentStruct fromLookup_ldf_gemeenten_persoon_document = null;
							ldf_gemeenten_persoon_document = ldf_gemeenten_persoon_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_persoon_document !=null && tHash_Lookup_ldf_gemeenten_persoon_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_persoon_document = tHash_Lookup_ldf_gemeenten_persoon_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_persoon_document != null) {
								ldf_gemeenten_persoon_document = fromLookup_ldf_gemeenten_persoon_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_ouder1_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_ouder1_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_ouder1_akteHashKey.gemeentecode = cipers_persoon.OU1REGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_ouder1_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_ouder1_akte.lookup( ldf_gemeenten_ouder1_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_ouder1_akte != null && tHash_Lookup_ldf_gemeenten_ouder1_akte.getCount(ldf_gemeenten_ouder1_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_ouder1_akte' and it contains more one result from keys :  ldf_gemeenten_ouder1_akte.gemeentecode = '" + ldf_gemeenten_ouder1_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_ouder1_akteStruct fromLookup_ldf_gemeenten_ouder1_akte = null;
							ldf_gemeenten_ouder1_akte = ldf_gemeenten_ouder1_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_ouder1_akte !=null && tHash_Lookup_ldf_gemeenten_ouder1_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_ouder1_akte = tHash_Lookup_ldf_gemeenten_ouder1_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_ouder1_akte != null) {
								ldf_gemeenten_ouder1_akte = fromLookup_ldf_gemeenten_ouder1_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_ouder1_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_ouder1_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_ouder1_documentHashKey.gemeentecode = cipers_persoon.OU1GEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_ouder1_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_ouder1_document.lookup( ldf_gemeenten_ouder1_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_ouder1_document != null && tHash_Lookup_ldf_gemeenten_ouder1_document.getCount(ldf_gemeenten_ouder1_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_ouder1_document' and it contains more one result from keys :  ldf_gemeenten_ouder1_document.gemeentecode = '" + ldf_gemeenten_ouder1_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_ouder1_documentStruct fromLookup_ldf_gemeenten_ouder1_document = null;
							ldf_gemeenten_ouder1_document = ldf_gemeenten_ouder1_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_ouder1_document !=null && tHash_Lookup_ldf_gemeenten_ouder1_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_ouder1_document = tHash_Lookup_ldf_gemeenten_ouder1_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_ouder1_document != null) {
								ldf_gemeenten_ouder1_document = fromLookup_ldf_gemeenten_ouder1_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_ouder2_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_ouder2_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_ouder2_akteStruct ldf_gemeenten_ouder2_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_ouder2_akteHashKey.gemeentecode = cipers_persoon.OU2REGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_ouder2_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_ouder2_akte.lookup( ldf_gemeenten_ouder2_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_ouder2_akte != null && tHash_Lookup_ldf_gemeenten_ouder2_akte.getCount(ldf_gemeenten_ouder2_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_ouder2_akte' and it contains more one result from keys :  ldf_gemeenten_ouder2_akte.gemeentecode = '" + ldf_gemeenten_ouder2_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_ouder2_akteStruct ldf_gemeenten_ouder2_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_ouder2_akteStruct fromLookup_ldf_gemeenten_ouder2_akte = null;
							ldf_gemeenten_ouder2_akte = ldf_gemeenten_ouder2_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_ouder2_akte !=null && tHash_Lookup_ldf_gemeenten_ouder2_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_ouder2_akte = tHash_Lookup_ldf_gemeenten_ouder2_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_ouder2_akte != null) {
								ldf_gemeenten_ouder2_akte = fromLookup_ldf_gemeenten_ouder2_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_ouder2_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_ouder2_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_ouder2_documentStruct ldf_gemeenten_ouder2_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_ouder2_documentHashKey.gemeentecode = cipers_persoon.OU2GEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_ouder2_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_ouder2_document.lookup( ldf_gemeenten_ouder2_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_ouder2_document != null && tHash_Lookup_ldf_gemeenten_ouder2_document.getCount(ldf_gemeenten_ouder2_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_ouder2_document' and it contains more one result from keys :  ldf_gemeenten_ouder2_document.gemeentecode = '" + ldf_gemeenten_ouder2_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_ouder2_documentStruct ldf_gemeenten_ouder2_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_ouder2_documentStruct fromLookup_ldf_gemeenten_ouder2_document = null;
							ldf_gemeenten_ouder2_document = ldf_gemeenten_ouder2_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_ouder2_document !=null && tHash_Lookup_ldf_gemeenten_ouder2_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_ouder2_document = tHash_Lookup_ldf_gemeenten_ouder2_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_ouder2_document != null) {
								ldf_gemeenten_ouder2_document = fromLookup_ldf_gemeenten_ouder2_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_inschrijving_PK" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_inschrijving_PK = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_inschrijving_PKStruct ldf_gemeenten_inschrijving_PKObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_inschrijving_PKHashKey.gemeentecode = cipers_persoon.INSGEMEENTEWAARPKZICHBEVINDTCODE ;
                        		    		

								
		                        	ldf_gemeenten_inschrijving_PKHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_inschrijving_PK.lookup( ldf_gemeenten_inschrijving_PKHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_inschrijving_PK != null && tHash_Lookup_ldf_gemeenten_inschrijving_PK.getCount(ldf_gemeenten_inschrijving_PKHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_inschrijving_PK' and it contains more one result from keys :  ldf_gemeenten_inschrijving_PK.gemeentecode = '" + ldf_gemeenten_inschrijving_PKHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_inschrijving_PKStruct ldf_gemeenten_inschrijving_PK = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_inschrijving_PKStruct fromLookup_ldf_gemeenten_inschrijving_PK = null;
							ldf_gemeenten_inschrijving_PK = ldf_gemeenten_inschrijving_PKDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_inschrijving_PK !=null && tHash_Lookup_ldf_gemeenten_inschrijving_PK.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_inschrijving_PK = tHash_Lookup_ldf_gemeenten_inschrijving_PK.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_inschrijving_PK != null) {
								ldf_gemeenten_inschrijving_PK = fromLookup_ldf_gemeenten_inschrijving_PK;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_verblijfplaats_gemeente" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_verblijfplaats_gemeente = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeenteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_verblijfplaats_gemeenteHashKey.gemeentecode = cipers_persoon.VBLGEMEENTEVANINSCHRIJVINGCODE ;
                        		    		

								
		                        	ldf_gemeenten_verblijfplaats_gemeenteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.lookup( ldf_gemeenten_verblijfplaats_gemeenteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente != null && tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.getCount(ldf_gemeenten_verblijfplaats_gemeenteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_verblijfplaats_gemeente' and it contains more one result from keys :  ldf_gemeenten_verblijfplaats_gemeente.gemeentecode = '" + ldf_gemeenten_verblijfplaats_gemeenteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeente = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_verblijfplaats_gemeenteStruct fromLookup_ldf_gemeenten_verblijfplaats_gemeente = null;
							ldf_gemeenten_verblijfplaats_gemeente = ldf_gemeenten_verblijfplaats_gemeenteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente !=null && tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_verblijfplaats_gemeente = tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_verblijfplaats_gemeente != null) {
								ldf_gemeenten_verblijfplaats_gemeente = fromLookup_ldf_gemeenten_verblijfplaats_gemeente;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_gezagsverhouding_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_gezagsverhouding_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_gezagsverhouding_documentStruct ldf_gemeenten_gezagsverhouding_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_gezagsverhouding_documentHashKey.gemeentecode = cipers_persoon.GZVGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_gezagsverhouding_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.lookup( ldf_gemeenten_gezagsverhouding_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_gezagsverhouding_document != null && tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.getCount(ldf_gemeenten_gezagsverhouding_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_gezagsverhouding_document' and it contains more one result from keys :  ldf_gemeenten_gezagsverhouding_document.gemeentecode = '" + ldf_gemeenten_gezagsverhouding_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_gezagsverhouding_documentStruct ldf_gemeenten_gezagsverhouding_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_gezagsverhouding_documentStruct fromLookup_ldf_gemeenten_gezagsverhouding_document = null;
							ldf_gemeenten_gezagsverhouding_document = ldf_gemeenten_gezagsverhouding_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_gezagsverhouding_document !=null && tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_gezagsverhouding_document = tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_gezagsverhouding_document != null) {
								ldf_gemeenten_gezagsverhouding_document = fromLookup_ldf_gemeenten_gezagsverhouding_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_kiesrecht_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_kiesrecht_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_kiesrecht_documentStruct ldf_gemeenten_kiesrecht_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_kiesrecht_documentHashKey.gemeentecode = cipers_persoon.KSRGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_kiesrecht_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_kiesrecht_document.lookup( ldf_gemeenten_kiesrecht_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_kiesrecht_document != null && tHash_Lookup_ldf_gemeenten_kiesrecht_document.getCount(ldf_gemeenten_kiesrecht_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_kiesrecht_document' and it contains more one result from keys :  ldf_gemeenten_kiesrecht_document.gemeentecode = '" + ldf_gemeenten_kiesrecht_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_kiesrecht_documentStruct ldf_gemeenten_kiesrecht_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_kiesrecht_documentStruct fromLookup_ldf_gemeenten_kiesrecht_document = null;
							ldf_gemeenten_kiesrecht_document = ldf_gemeenten_kiesrecht_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_kiesrecht_document !=null && tHash_Lookup_ldf_gemeenten_kiesrecht_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_kiesrecht_document = tHash_Lookup_ldf_gemeenten_kiesrecht_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_kiesrecht_document != null) {
								ldf_gemeenten_kiesrecht_document = fromLookup_ldf_gemeenten_kiesrecht_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_verwijzing_gemeente" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_verwijzing_gemeente = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_verwijzing_gemeenteStruct ldf_gemeenten_verwijzing_gemeenteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_verwijzing_gemeenteHashKey.gemeentecode = cipers_persoon.VWSGEMEENTEVANINSCHRIJVINGCODE ;
                        		    		

								
		                        	ldf_gemeenten_verwijzing_gemeenteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.lookup( ldf_gemeenten_verwijzing_gemeenteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_verwijzing_gemeente != null && tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.getCount(ldf_gemeenten_verwijzing_gemeenteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_verwijzing_gemeente' and it contains more one result from keys :  ldf_gemeenten_verwijzing_gemeente.gemeentecode = '" + ldf_gemeenten_verwijzing_gemeenteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_verwijzing_gemeenteStruct ldf_gemeenten_verwijzing_gemeente = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_verwijzing_gemeenteStruct fromLookup_ldf_gemeenten_verwijzing_gemeente = null;
							ldf_gemeenten_verwijzing_gemeente = ldf_gemeenten_verwijzing_gemeenteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_verwijzing_gemeente !=null && tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_verwijzing_gemeente = tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_verwijzing_gemeente != null) {
								ldf_gemeenten_verwijzing_gemeente = fromLookup_ldf_gemeenten_verwijzing_gemeente;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_verblijftitels_verblijftitel" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_verblijftitels_verblijftitel = false;
       		  	    	
       		  	    	
 							ldf_verblijftitels_verblijftitelStruct ldf_verblijftitels_verblijftitelObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_verblijftitels_verblijftitelHashKey.verblijfstitelcode = cipers_persoon.VBTAANDUIDINGVERBLIJFSTITELCODE ;
                        		    		

								
		                        	ldf_verblijftitels_verblijftitelHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_verblijftitels_verblijftitel.lookup( ldf_verblijftitels_verblijftitelHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_verblijftitels_verblijftitel != null && tHash_Lookup_ldf_verblijftitels_verblijftitel.getCount(ldf_verblijftitels_verblijftitelHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_verblijftitels_verblijftitel' and it contains more one result from keys :  ldf_verblijftitels_verblijftitel.verblijfstitelcode = '" + ldf_verblijftitels_verblijftitelHashKey.verblijfstitelcode + "'");
								} // G 071
							

							ldf_verblijftitels_verblijftitelStruct ldf_verblijftitels_verblijftitel = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_verblijftitels_verblijftitelStruct fromLookup_ldf_verblijftitels_verblijftitel = null;
							ldf_verblijftitels_verblijftitel = ldf_verblijftitels_verblijftitelDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_verblijftitels_verblijftitel !=null && tHash_Lookup_ldf_verblijftitels_verblijftitel.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_verblijftitels_verblijftitel = tHash_Lookup_ldf_verblijftitels_verblijftitel.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_verblijftitels_verblijftitel != null) {
								ldf_verblijftitels_verblijftitel = fromLookup_ldf_verblijftitels_verblijftitel;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_overlijden_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_overlijden_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_overlijden_akteHashKey.gemeentecode = cipers_persoon.OVLREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_overlijden_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_overlijden_akte.lookup( ldf_gemeenten_overlijden_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_overlijden_akte != null && tHash_Lookup_ldf_gemeenten_overlijden_akte.getCount(ldf_gemeenten_overlijden_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_overlijden_akte' and it contains more one result from keys :  ldf_gemeenten_overlijden_akte.gemeentecode = '" + ldf_gemeenten_overlijden_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_overlijden_akteStruct fromLookup_ldf_gemeenten_overlijden_akte = null;
							ldf_gemeenten_overlijden_akte = ldf_gemeenten_overlijden_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_overlijden_akte !=null && tHash_Lookup_ldf_gemeenten_overlijden_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_overlijden_akte = tHash_Lookup_ldf_gemeenten_overlijden_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_overlijden_akte != null) {
								ldf_gemeenten_overlijden_akte = fromLookup_ldf_gemeenten_overlijden_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_overlijden_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_overlijden_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_overlijden_documentHashKey.gemeentecode = cipers_persoon.OVLGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_overlijden_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_overlijden_document.lookup( ldf_gemeenten_overlijden_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_overlijden_document != null && tHash_Lookup_ldf_gemeenten_overlijden_document.getCount(ldf_gemeenten_overlijden_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_overlijden_document' and it contains more one result from keys :  ldf_gemeenten_overlijden_document.gemeentecode = '" + ldf_gemeenten_overlijden_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_overlijden_documentStruct fromLookup_ldf_gemeenten_overlijden_document = null;
							ldf_gemeenten_overlijden_document = ldf_gemeenten_overlijden_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_overlijden_document !=null && tHash_Lookup_ldf_gemeenten_overlijden_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_overlijden_document = tHash_Lookup_ldf_gemeenten_overlijden_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_overlijden_document != null) {
								ldf_gemeenten_overlijden_document = fromLookup_ldf_gemeenten_overlijden_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_persoon = null;


// # Output table : 'ldf_persoon'
ldf_persoon_tmp.prsanummer = cipers_persoon.PRSANUMMER;
ldf_persoon_tmp.prsburgerservicenummer = cipers_persoon.PRSBURGERSERVICENUMMER;
ldf_persoon_tmp.prsvoornamen = cipers_persoon.PRSVOORNAMEN;
ldf_persoon_tmp.prseerstevoornaam = cipers_persoon.PRSEERSTEVOORNAAM;
ldf_persoon_tmp.prsvoorletters = cipers_persoon.PRSVOORLETTERS;
ldf_persoon_tmp.prsadellijketitelcode = cipers_persoon.PRSADELLIJKETITELCODE;
ldf_persoon_tmp.prsadellijketitelomschrijving = ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving ;
ldf_persoon_tmp.prsvoorvoegselgeslachtsnaam = cipers_persoon.PRSVOORVOEGSELGESLACHTSNAAM;
ldf_persoon_tmp.prsgeslachtsnaam = cipers_persoon.PRSGESLACHTSNAAM;
ldf_persoon_tmp.prsnaamopgemaakt = cipers_persoon.PRSNAAMOPGEMAAKT;
ldf_persoon_tmp.prsgeboortedatum = cipers_persoon.PRSGEBOORTEDATUM;
ldf_persoon_tmp.prsgeboortedatumindicator = cipers_persoon.PRSGEBOORTEDATUMINDICATOR;
ldf_persoon_tmp.prsgeboorteplaatscode = cipers_persoon.PRSGEBOORTEPLAATSCODE;
ldf_persoon_tmp.prsgeboorteplaatsomschrijving = cipers_persoon.PRSGEBOORTEPLAATSOMSCHRIJVING;
ldf_persoon_tmp.prsgeboortelandcode = cipers_persoon.PRSGEBOORTELANDCODE;
ldf_persoon_tmp.prsgeboortelandomschrijving = ldf_landen_persoon_geboorte.landomschrijving ;
ldf_persoon_tmp.prsgeslachtsaanduidingcode = cipers_persoon.PRSGESLACHTSAANDUIDINGCODE;
ldf_persoon_tmp.prsgeslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving ;
ldf_persoon_tmp.prsvoriganummer = cipers_persoon.PRSVORIGANUMMER;
ldf_persoon_tmp.prsvolgendanummer = cipers_persoon.PRSVOLGENDANUMMER;
ldf_persoon_tmp.prsaanduidingnaamgebruik = cipers_persoon.PRSAANDUIDINGNAAMGEBRUIK;
ldf_persoon_tmp.prsregistergemeenteaktecode = cipers_persoon.PRSREGISTERGEMEENTEAKTECODE;
ldf_persoon_tmp.prsregistergemeenteakteomschrijving = ldf_gemeenten_persoon_akte.gemeenteomschrijving ;
ldf_persoon_tmp.prsaktenummer = cipers_persoon.PRSAKTENUMMER;
ldf_persoon_tmp.prsgemeentedocumentcode = cipers_persoon.PRSGEMEENTEDOCUMENTCODE;
ldf_persoon_tmp.prsgemeentedocumentomschrijving = ldf_gemeenten_persoon_document.gemeenteomschrijving ;
ldf_persoon_tmp.prsdatumdocument = cipers_persoon.PRSDATUMDOCUMENT;
ldf_persoon_tmp.prsdatumdocumentindicator = cipers_persoon.PRSDATUMDOCUMENTINDICATOR;
ldf_persoon_tmp.prsbeschrijvingdocument = cipers_persoon.PRSBESCHRIJVINGDOCUMENT;
ldf_persoon_tmp.prsaanduidinggegevensonderzoek = cipers_persoon.PRSAANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.prsdatumingangonderzoek = cipers_persoon.PRSDATUMINGANGONDERZOEK;
ldf_persoon_tmp.prsdatumingangonderzoekindicator = cipers_persoon.PRSDATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.prsdatumeindeonderzoek = cipers_persoon.PRSDATUMEINDEONDERZOEK;
ldf_persoon_tmp.prsdatumeindeonderzoekindicator = cipers_persoon.PRSDATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.prsingangsdatumgeldigheid = cipers_persoon.PRSINGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.prsingangsdatumgeldigheidindicator = cipers_persoon.PRSINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.prsdatumvanopneming = cipers_persoon.PRSDATUMVANOPNEMING;
ldf_persoon_tmp.prsdatumvanopnemingindicator = cipers_persoon.PRSDATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.prsstatuspersoon = cipers_persoon.PRSSTATUSPERSOON;
ldf_persoon_tmp.prsrijkskodenationaliteit = cipers_persoon.PRSRIJKSKODENATIONALITEIT;
ldf_persoon_tmp.prsgezinsverhouding = cipers_persoon.PRSGEZINSVERHOUDING;
ldf_persoon_tmp.prsgezinssterkte = cipers_persoon.PRSGEZINSSTERKTE;
ldf_persoon_tmp.prsanummergezinshoofd = cipers_persoon.PRSANUMMERGEZINSHOOFD;
ldf_persoon_tmp.prsburgerlijkestaat = cipers_persoon.PRSBURGERLIJKESTAAT;
ldf_persoon_tmp.prsnaamswijzigingindicatie = cipers_persoon.PRSNAAMSWIJZIGINGINDICATIE;
ldf_persoon_tmp.prsdatumadreshoudingaaneengesloten = cipers_persoon.PRSDATUMADRESHOUDINGAANEENGESLOTEN;
ldf_persoon_tmp.prsdatumadreshoudingaaneengeslotenindicator = cipers_persoon.PRSDATUMADRESHOUDINGAANEENGESLOTENINDICATOR;
ldf_persoon_tmp.ou1anummer = cipers_persoon.OU1ANUMMER;
ldf_persoon_tmp.ou1burgerservicenummer = cipers_persoon.OU1BURGERSERVICENUMMER;
ldf_persoon_tmp.ou1voornamen = cipers_persoon.OU1VOORNAMEN;
ldf_persoon_tmp.ou1voorletters = cipers_persoon.OU1VOORLETTERS;
ldf_persoon_tmp.ou1adellijketitelcode = cipers_persoon.OU1ADELLIJKETITELCODE;
ldf_persoon_tmp.ou1adellijketitelomschrijving = ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving ;
ldf_persoon_tmp.ou1voorvoegselgeslachtsnaam = cipers_persoon.OU1VOORVOEGSELGESLACHTSNAAM;
ldf_persoon_tmp.ou1geslachtsnaam = cipers_persoon.OU1GESLACHTSNAAM;
ldf_persoon_tmp.ou1naamopgemaakt = cipers_persoon.OU1NAAMOPGEMAAKT;
ldf_persoon_tmp.ou1geboortedatum = cipers_persoon.OU1GEBOORTEDATUM;
ldf_persoon_tmp.ou1geboortedatumindicator = cipers_persoon.OU1GEBOORTEDATUMINDICATOR;
ldf_persoon_tmp.ou1geboorteplaatscode = cipers_persoon.OU1GEBOORTEPLAATSCODE;
ldf_persoon_tmp.ou1geboorteplaatsomschrijving = cipers_persoon.OU1GEBOORTEPLAATSOMSCHRIJVING;
ldf_persoon_tmp.ou1geboortelandcode = cipers_persoon.OU1GEBOORTELANDCODE;
ldf_persoon_tmp.ou1geboortelandomschrijving = ldf_landen_ouder1_geboorte.landomschrijving ;
ldf_persoon_tmp.ou1geslachtsaanduidingcode = cipers_persoon.OU1GESLACHTSAANDUIDINGCODE;
ldf_persoon_tmp.ou1geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving ;
ldf_persoon_tmp.ou1datumingangfamilierechtelijkebetrekking = cipers_persoon.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKING;
ldf_persoon_tmp.ou1datumingangfamilierechtelijkebetrekkingindicator = cipers_persoon.OU1DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
ldf_persoon_tmp.ou1registergemeenteaktecode = cipers_persoon.OU1REGISTERGEMEENTEAKTECODE;
ldf_persoon_tmp.ou1registergemeenteakteomschrijving = ldf_gemeenten_ouder1_akte.gemeenteomschrijving ;
ldf_persoon_tmp.ou1aktenummer = cipers_persoon.OU1AKTENUMMER;
ldf_persoon_tmp.ou1gemeentedocumentcode = cipers_persoon.OU1GEMEENTEDOCUMENTCODE;
ldf_persoon_tmp.ou1gemeentedocumentomschrijving = ldf_gemeenten_ouder1_document.gemeenteomschrijving ;
ldf_persoon_tmp.ou1datumdocument = cipers_persoon.OU1DATUMDOCUMENT;
ldf_persoon_tmp.ou1datumdocumentindicator = cipers_persoon.OU1DATUMDOCUMENTINDICATOR;
ldf_persoon_tmp.ou1beschrijvingdocument = cipers_persoon.OU1BESCHRIJVINGDOCUMENT;
ldf_persoon_tmp.ou1aanduidinggegevensonderzoek = cipers_persoon.OU1AANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.ou1datumingangonderzoek = cipers_persoon.OU1DATUMINGANGONDERZOEK;
ldf_persoon_tmp.ou1datumingangonderzoekindicator = cipers_persoon.OU1DATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.ou1datumeindeonderzoek = cipers_persoon.OU1DATUMEINDEONDERZOEK;
ldf_persoon_tmp.ou1datumeindeonderzoekindicator = cipers_persoon.OU1DATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.ou1ingangsdatumgeldigheid = cipers_persoon.OU1INGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.ou1ingangsdatumgeldigheidindicator = cipers_persoon.OU1INGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.ou1datumvanopneming = cipers_persoon.OU1DATUMVANOPNEMING;
ldf_persoon_tmp.ou1datumvanopnemingindicator = cipers_persoon.OU1DATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.ou2anummer = cipers_persoon.OU2ANUMMER;
ldf_persoon_tmp.ou2burgerservicenummer = cipers_persoon.OU2BURGERSERVICENUMMER;
ldf_persoon_tmp.ou2voornamen = cipers_persoon.OU2VOORNAMEN;
ldf_persoon_tmp.ou2voorletters = cipers_persoon.OU2VOORLETTERS;
ldf_persoon_tmp.ou2adellijketitelcode = cipers_persoon.OU2ADELLIJKETITELCODE;
ldf_persoon_tmp.ou2adellijketitelomschrijving = ldf_titels_predikaten_ouder2_naam.adellijketitelomschrijving ;
ldf_persoon_tmp.ou2voorvoegselgeslachtsnaam = cipers_persoon.OU2VOORVOEGSELGESLACHTSNAAM;
ldf_persoon_tmp.ou2geslachtsnaam = cipers_persoon.OU2GESLACHTSNAAM;
ldf_persoon_tmp.ou2naamopgemaakt = cipers_persoon.OU2NAAMOPGEMAAKT;
ldf_persoon_tmp.ou2geboortedatum = cipers_persoon.OU2GEBOORTEDATUM;
ldf_persoon_tmp.ou2geboortedatumindicator = cipers_persoon.OU2GEBOORTEDATUMINDICATOR;
ldf_persoon_tmp.ou2geboorteplaatscode = cipers_persoon.OU2GEBOORTEPLAATSCODE;
ldf_persoon_tmp.ou2geboorteplaatsomschrijving = cipers_persoon.OU2GEBOORTEPLAATSOMSCHRIJVING;
ldf_persoon_tmp.ou2geboortelandcode = cipers_persoon.OU2GEBOORTELANDCODE;
ldf_persoon_tmp.ou2geboortelandomschrijving = ldf_landen_ouder2_geboorte.landomschrijving ;
ldf_persoon_tmp.ou2geslachtsaanduidingcode = cipers_persoon.OU2GESLACHTSAANDUIDINGCODE;
ldf_persoon_tmp.ou2geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingomschrijving ;
ldf_persoon_tmp.ou2datumingangfamilierechtelijkebetrekking = cipers_persoon.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKING;
ldf_persoon_tmp.ou2datumingangfamilierechtelijkebetrekkingindicator = cipers_persoon.OU2DATUMINGANGFAMILIERECHTELIJKEBETREKKINGINDICATOR;
ldf_persoon_tmp.ou2registergemeenteaktecode = cipers_persoon.OU2REGISTERGEMEENTEAKTECODE;
ldf_persoon_tmp.ou2registergemeenteakteomschrijving = ldf_gemeenten_ouder2_akte.gemeenteomschrijving ;
ldf_persoon_tmp.ou2aktenummer = cipers_persoon.OU2AKTENUMMER;
ldf_persoon_tmp.ou2gemeentedocumentcode = cipers_persoon.OU2GEMEENTEDOCUMENTCODE;
ldf_persoon_tmp.ou2gemeentedocumentomschrijving = ldf_gemeenten_ouder2_document.gemeenteomschrijving ;
ldf_persoon_tmp.ou2datumdocument = cipers_persoon.OU2DATUMDOCUMENT;
ldf_persoon_tmp.ou2datumdocumentindicator = cipers_persoon.OU2DATUMDOCUMENTINDICATOR;
ldf_persoon_tmp.ou2beschrijvingdocument = cipers_persoon.OU2BESCHRIJVINGDOCUMENT;
ldf_persoon_tmp.ou2aanduidinggegevensonderzoek = cipers_persoon.OU2AANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.ou2datumingangonderzoek = cipers_persoon.OU2DATUMINGANGONDERZOEK;
ldf_persoon_tmp.ou2datumingangonderzoekindicator = cipers_persoon.OU2DATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.ou2datumeindeonderzoek = cipers_persoon.OU2DATUMEINDEONDERZOEK;
ldf_persoon_tmp.ou2datumeindeonderzoekindicator = cipers_persoon.OU2DATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.ou2ingangsdatumgeldigheid = cipers_persoon.OU2INGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.ou2ingangsdatumgeldigheidindicator = cipers_persoon.OU2INGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.ou2datumvanopneming = cipers_persoon.OU2DATUMVANOPNEMING;
ldf_persoon_tmp.ou2datumvanopnemingindicator = cipers_persoon.OU2DATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.ovldatumoverlijden = cipers_persoon.OVLDATUMOVERLIJDEN;
ldf_persoon_tmp.ovldatumoverlijdenindicator = cipers_persoon.OVLDATUMOVERLIJDENINDICATOR;
ldf_persoon_tmp.ovlplaatsoverlijdencode = cipers_persoon.OVLPLAATSOVERLIJDENCODE;
ldf_persoon_tmp.ovlplaatsoverlijdenomschrijving = cipers_persoon.OVLPLAATSOVERLIJDENOMSCHRIJVING;
ldf_persoon_tmp.ovllandoverlijdencode = cipers_persoon.OVLLANDOVERLIJDENCODE;
ldf_persoon_tmp.ovllandoverlijdenomschrijving = ldf_landen_overlijden.landomschrijving ;
ldf_persoon_tmp.ovlregistergemeenteaktecode = cipers_persoon.OVLREGISTERGEMEENTEAKTECODE;
ldf_persoon_tmp.ovlregistergemeenteakteomschrijving = ldf_gemeenten_overlijden_akte.gemeenteomschrijving ;
ldf_persoon_tmp.ovlaktenummer = cipers_persoon.OVLAKTENUMMER;
ldf_persoon_tmp.ovlgemeentedocumentcode = cipers_persoon.OVLGEMEENTEDOCUMENTCODE;
ldf_persoon_tmp.ovlgemeentedocumentomschrijving = ldf_gemeenten_overlijden_document.gemeenteomschrijving ;
ldf_persoon_tmp.ovldatumdocument = cipers_persoon.OVLDATUMDOCUMENT;
ldf_persoon_tmp.ovldatumdocumentindicator = cipers_persoon.OVLDATUMDOCUMENTINDICATOR;
ldf_persoon_tmp.ovlbeschrijvingdocument = cipers_persoon.OVLBESCHRIJVINGDOCUMENT;
ldf_persoon_tmp.ovlaanduidinggegevensonderzoek = cipers_persoon.OVLAANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.ovldatumingangonderzoek = cipers_persoon.OVLDATUMINGANGONDERZOEK;
ldf_persoon_tmp.ovldatumingangonderzoekindicator = cipers_persoon.OVLDATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.ovldatumeindeonderzoek = cipers_persoon.OVLDATUMEINDEONDERZOEK;
ldf_persoon_tmp.ovldatumeindeonderzoekindicator = cipers_persoon.OVLDATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.ovlingangsdatumgeldigheid = cipers_persoon.OVLINGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.ovlingangsdatumgeldigheidindicator = cipers_persoon.OVLINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.ovldatumvanopneming = cipers_persoon.OVLDATUMVANOPNEMING;
ldf_persoon_tmp.ovldatumvanopnemingindicator = cipers_persoon.OVLDATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.insdatumingangblokkeringpl = cipers_persoon.INSDATUMINGANGBLOKKERINGPL;
ldf_persoon_tmp.insdatumingangblokkeringplindicator = cipers_persoon.INSDATUMINGANGBLOKKERINGPLINDICATOR;
ldf_persoon_tmp.insdatumopschortingbijhouding = cipers_persoon.INSDATUMOPSCHORTINGBIJHOUDING;
ldf_persoon_tmp.insdatumopschortingbijhoudingindicator = cipers_persoon.INSDATUMOPSCHORTINGBIJHOUDINGINDICATOR;
ldf_persoon_tmp.insomschrijvingredenopschortingbijhouding = cipers_persoon.INSOMSCHRIJVINGREDENOPSCHORTINGBIJHOUDING;
ldf_persoon_tmp.insdatumeersteinschrijvinggba = cipers_persoon.INSDATUMEERSTEINSCHRIJVINGGBA;
ldf_persoon_tmp.insdatumeersteinschrijvingindicator = cipers_persoon.INSDATUMEERSTEINSCHRIJVINGINDICATOR;
ldf_persoon_tmp.insgemeentewaarpkzichbevindtcode = cipers_persoon.INSGEMEENTEWAARPKZICHBEVINDTCODE;
ldf_persoon_tmp.insgemeentewaarpkzichbevindtomschrijving = ldf_gemeenten_inschrijving_PK.gemeenteomschrijving ;
ldf_persoon_tmp.insindicatiegeheim = cipers_persoon.INSINDICATIEGEHEIM;
ldf_persoon_tmp.insversienummer = cipers_persoon.INSVERSIENUMMER;
ldf_persoon_tmp.insdatumtijdstempel = cipers_persoon.INSDATUMTIJDSTEMPEL;
ldf_persoon_tmp.inspkgegevensvolledigmeegeconverteerd = cipers_persoon.INSPKGEGEVENSVOLLEDIGMEEGECONVERTEERD;
ldf_persoon_tmp.vblgemeentevaninschrijvingcode = cipers_persoon.VBLGEMEENTEVANINSCHRIJVINGCODE;
ldf_persoon_tmp.vblgemeentevaninschrijvingomschrijving = ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving ;
ldf_persoon_tmp.vbldatuminschrijving = cipers_persoon.VBLDATUMINSCHRIJVING;
ldf_persoon_tmp.vbldatuminschrijvingindicator = cipers_persoon.VBLDATUMINSCHRIJVINGINDICATOR;
ldf_persoon_tmp.vblfunctieadres = cipers_persoon.VBLFUNCTIEADRES;
ldf_persoon_tmp.vblgemeentedeel = cipers_persoon.VBLGEMEENTEDEEL;
ldf_persoon_tmp.vbldatumaanvangadreshouding = cipers_persoon.VBLDATUMAANVANGADRESHOUDING;
ldf_persoon_tmp.vbldatumaanvangadreshoudingindicator = cipers_persoon.VBLDATUMAANVANGADRESHOUDINGINDICATOR;
ldf_persoon_tmp.vblstraatnaam = cipers_persoon.VBLSTRAATNAAM;
ldf_persoon_tmp.vblnaamopenbareruimte = cipers_persoon.VBLNAAMOPENBARERUIMTE;
ldf_persoon_tmp.vbladresopgemaakt = cipers_persoon.VBLADRESOPGEMAAKT;
ldf_persoon_tmp.vblwoonplaatsopgemaakt = cipers_persoon.VBLWOONPLAATSOPGEMAAKT;
ldf_persoon_tmp.vblhuisnummer = cipers_persoon.VBLHUISNUMMER;
ldf_persoon_tmp.vblhuisletter = cipers_persoon.VBLHUISLETTER;
ldf_persoon_tmp.vblhuisnummertoevoeging = cipers_persoon.VBLHUISNUMMERTOEVOEGING;
ldf_persoon_tmp.vblaanduidingbijhuisnummer = cipers_persoon.VBLAANDUIDINGBIJHUISNUMMER;
ldf_persoon_tmp.vblpostcode = cipers_persoon.VBLPOSTCODE;
ldf_persoon_tmp.vblwoonplaatsnaam = cipers_persoon.VBLWOONPLAATSNAAM;
ldf_persoon_tmp.vblidentificatiecodeverblijfplaats = cipers_persoon.VBLIDENTIFICATIECODEVERBLIJFPLAATS;
ldf_persoon_tmp.vblidentificatiecodenummeraanduiding = cipers_persoon.VBLIDENTIFICATIECODENUMMERAANDUIDING;
ldf_persoon_tmp.vbllocatiebeschrijving = cipers_persoon.VBLLOCATIEBESCHRIJVING;
ldf_persoon_tmp.vbllandadresbuitenlandcode = cipers_persoon.VBLLANDADRESBUITENLANDCODE;
ldf_persoon_tmp.vbllandadresbuitenlandomschrijving = ldf_landen_verblijfplaats_buitenland.landomschrijving ;
ldf_persoon_tmp.vbldatumaanvangadresbuitenland = cipers_persoon.VBLDATUMAANVANGADRESBUITENLAND;
ldf_persoon_tmp.vbldatumaanvangadresbuitenlandindicator = cipers_persoon.VBLDATUMAANVANGADRESBUITENLANDINDICATOR;
ldf_persoon_tmp.vblregel1adresbuitenland = cipers_persoon.VBLREGEL1ADRESBUITENLAND;
ldf_persoon_tmp.vblregel2adresbuitenland = cipers_persoon.VBLREGEL2ADRESBUITENLAND;
ldf_persoon_tmp.vblregel3adresbuitenland = cipers_persoon.VBLREGEL3ADRESBUITENLAND;
ldf_persoon_tmp.vbllandvanwaaringeschrevencode = cipers_persoon.VBLLANDVANWAARINGESCHREVENCODE;
ldf_persoon_tmp.vbllandvanwaaringeschrevenomschrijving = ldf_landen_verblijfplaats_immigratie.landomschrijving ;
ldf_persoon_tmp.vbldatumvestiginginnederland = cipers_persoon.VBLDATUMVESTIGINGINNEDERLAND;
ldf_persoon_tmp.vbldatumvestiginginnederlandindicator = cipers_persoon.VBLDATUMVESTIGINGINNEDERLANDINDICATOR;
ldf_persoon_tmp.vblomschrijvingvanaangifteadreshouding = cipers_persoon.VBLOMSCHRIJVINGVANAANGIFTEADRESHOUDING;
ldf_persoon_tmp.vblindicatiedocument = cipers_persoon.VBLINDICATIEDOCUMENT;
ldf_persoon_tmp.vblaanduidinggegevensonderzoek = cipers_persoon.VBLAANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.vbldatumingangonderzoek = cipers_persoon.VBLDATUMINGANGONDERZOEK;
ldf_persoon_tmp.vbldatumingangonderzoekindicator = cipers_persoon.VBLDATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.vbldatumeindeonderzoek = cipers_persoon.VBLDATUMEINDEONDERZOEK;
ldf_persoon_tmp.vbldatumeindeonderzoekindicator = cipers_persoon.VBLDATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.vblingangsdatumgeldigheid = cipers_persoon.VBLINGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.vblingangsdatumgeldigheidindicator = cipers_persoon.VBLINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.vbldatumvanopneming = cipers_persoon.VBLDATUMVANOPNEMING;
ldf_persoon_tmp.vbldatumvanopnemingindicator = cipers_persoon.VBLDATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.vblsoortpandcode = cipers_persoon.VBLSOORTPANDCODE;
ldf_persoon_tmp.vblsoortpandomschrijving = cipers_persoon.VBLSOORTPANDOMSCHRIJVING;
ldf_persoon_tmp.vblwijkcode = cipers_persoon.VBLWIJKCODE;
ldf_persoon_tmp.vblwijkomschrijving = cipers_persoon.VBLWIJKOMSCHRIJVING;
ldf_persoon_tmp.vblplanalogischewijkcode = cipers_persoon.VBLPLANALOGISCHEWIJKCODE;
ldf_persoon_tmp.vblplanalogischewijkomschrijving = cipers_persoon.VBLPLANALOGISCHEWIJKOMSCHRIJVING;
ldf_persoon_tmp.vblanummerhoofdbewoner = cipers_persoon.VBLANUMMERHOOFDBEWONER;
ldf_persoon_tmp.vbtaanduidingverblijfstitelcode = cipers_persoon.VBTAANDUIDINGVERBLIJFSTITELCODE;
ldf_persoon_tmp.vbtverblijfstitelvervallen = cipers_persoon.VBTVERBLIJFSTITELVERVALLEN;
ldf_persoon_tmp.vbtaanduidingverblijfstitelomschrijving = ldf_verblijftitels_verblijftitel.verblijfstitelomschrijving ;
ldf_persoon_tmp.vbtdatumeindeverblijfstitel = cipers_persoon.VBTDATUMEINDEVERBLIJFSTITEL;
ldf_persoon_tmp.vbtdatumeindeverblijfstitelindicator = cipers_persoon.VBTDATUMEINDEVERBLIJFSTITELINDICATOR;
ldf_persoon_tmp.vbtingangsdatumverblijfstitel = cipers_persoon.VBTINGANGSDATUMVERBLIJFSTITEL;
ldf_persoon_tmp.vbtingangsdatumverblijfstitelindicator = cipers_persoon.VBTINGANGSDATUMVERBLIJFSTITELINDICATOR;
ldf_persoon_tmp.vbtaanduidinggegevensonderzoek = cipers_persoon.VBTAANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.vbtdatumingangonderzoek = cipers_persoon.VBTDATUMINGANGONDERZOEK;
ldf_persoon_tmp.vbtdatumingangonderzoekindicator = cipers_persoon.VBTDATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.vbtdatumeindeonderzoek = cipers_persoon.VBTDATUMEINDEONDERZOEK;
ldf_persoon_tmp.vbtdatumeindeonderzoekindicator = cipers_persoon.VBTDATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.vbtingangsdatumgeldigheid = cipers_persoon.VBTINGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.vbtingangsdatumgeldigheidindicator = cipers_persoon.VBTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.vbtdatumvanopneming = cipers_persoon.VBTDATUMVANOPNEMING;
ldf_persoon_tmp.vbtdatumvanopnemingindicator = cipers_persoon.VBTDATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.gzvindicatiegezagminderjarige = cipers_persoon.GZVINDICATIEGEZAGMINDERJARIGE;
ldf_persoon_tmp.gzvindicatiecurateleregister = cipers_persoon.GZVINDICATIECURATELEREGISTER;
ldf_persoon_tmp.gzvgemeentedocumentcode = cipers_persoon.GZVGEMEENTEDOCUMENTCODE;
ldf_persoon_tmp.gzvgemeentedocumentomschrijving = ldf_gemeenten_gezagsverhouding_document.gemeenteomschrijving ;
ldf_persoon_tmp.gzvdatumdocument = cipers_persoon.GZVDATUMDOCUMENT;
ldf_persoon_tmp.gzvdatumdocumentindicator = cipers_persoon.GZVDATUMDOCUMENTINDICATOR;
ldf_persoon_tmp.gzvbeschrijvingdocument = cipers_persoon.GZVBESCHRIJVINGDOCUMENT;
ldf_persoon_tmp.gzvaanduidinggegevensonderzoek = cipers_persoon.GZVAANDUIDINGGEGEVENSONDERZOEK;
ldf_persoon_tmp.gzvdatumingangonderzoek = cipers_persoon.GZVDATUMINGANGONDERZOEK;
ldf_persoon_tmp.gzvdatumingangonderzoekindicator = cipers_persoon.GZVDATUMINGANGONDERZOEKINDICATOR;
ldf_persoon_tmp.gzvdatumeindeonderzoek = cipers_persoon.GZVDATUMEINDEONDERZOEK;
ldf_persoon_tmp.gzvdatumeindeonderzoekindicator = cipers_persoon.GZVDATUMEINDEONDERZOEKINDICATOR;
ldf_persoon_tmp.gzvingangsdatumgeldigheid = cipers_persoon.GZVINGANGSDATUMGELDIGHEID;
ldf_persoon_tmp.gzvingangsdatumgeldigheidindicator = cipers_persoon.GZVINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_persoon_tmp.gzvdatumvanopneming = cipers_persoon.GZVDATUMVANOPNEMING;
ldf_persoon_tmp.gzvdatumvanopnemingindicator = cipers_persoon.GZVDATUMVANOPNEMINGINDICATOR;
ldf_persoon_tmp.ksraanduidingeuropeeskiesrecht = cipers_persoon.KSRAANDUIDINGEUROPEESKIESRECHT;
ldf_persoon_tmp.ksrdatumverzoekofmededelingeuropeeskiesrecht = cipers_persoon.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHT;
ldf_persoon_tmp.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator = cipers_persoon.KSRDATUMVERZOEKOFMEDEDELINGEUROPEESKIESRECHTINDICATOR;
ldf_persoon_tmp.ksreinddatumuitsluitingeuropeeskiesrecht = cipers_persoon.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHT;
ldf_persoon_tmp.ksreinddatumuitsluitingeuropeeskiesrechtindicator = cipers_persoon.KSREINDDATUMUITSLUITINGEUROPEESKIESRECHTINDICATOR;
ldf_persoon_tmp.ksraanduidinguitgeslotenkiesrecht = cipers_persoon.KSRAANDUIDINGUITGESLOTENKIESRECHT;
ldf_persoon_tmp.ksreinddatumuitsluitingkiesrecht = cipers_persoon.KSREINDDATUMUITSLUITINGKIESRECHT;
ldf_persoon_tmp.ksreinddatumuitsluitingkiesrechtindicator = cipers_persoon.KSREINDDATUMUITSLUITINGKIESRECHTINDICATOR;
ldf_persoon_tmp.ksrgemeentedocumentcode = cipers_persoon.KSRGEMEENTEDOCUMENTCODE;
ldf_persoon_tmp.ksrgemeentedocumentomschrijving = ldf_gemeenten_kiesrecht_document.gemeenteomschrijving ;
ldf_persoon_tmp.ksrdatumdocument = cipers_persoon.KSRDATUMDOCUMENT;
ldf_persoon_tmp.ksrdatumdocumentindicator = cipers_persoon.KSRDATUMDOCUMENTINDICATOR;
ldf_persoon_tmp.ksrbeschrijvingdocument = cipers_persoon.KSRBESCHRIJVINGDOCUMENT;
ldf_persoon_tmp.vwsgemeentevaninschrijvingcode = cipers_persoon.VWSGEMEENTEVANINSCHRIJVINGCODE;
ldf_persoon_tmp.vwsgemeentevaninschrijvingomschrijving = ldf_gemeenten_verwijzing_gemeente.gemeenteomschrijving ;
ldf_persoon_tmp.vwsdatuminschrijving = cipers_persoon.VWSDATUMINSCHRIJVING;
ldf_persoon_tmp.vwsdatuminschrijvingindicator = cipers_persoon.VWSDATUMINSCHRIJVINGINDICATOR;
ldf_persoon_tmp.vwsindicatiegeheim = cipers_persoon.VWSINDICATIEGEHEIM;
ldf_persoon = ldf_persoon_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_persoon"
if(ldf_persoon != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_persoon
			//ldf_persoon


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_persoon"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_persoon.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_persoon.prsburgerservicenummer);

                    if(ldf_persoon.prsvoornamen == null) {
pstmt_tPostgresqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(3, ldf_persoon.prsvoornamen);
}

                    if(ldf_persoon.prseerstevoornaam == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(4, ldf_persoon.prseerstevoornaam);
}

                    if(ldf_persoon.prsvoorletters == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(5, ldf_persoon.prsvoorletters);
}

                    if(ldf_persoon.prsadellijketitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(6, ldf_persoon.prsadellijketitelcode);
}

                    if(ldf_persoon.prsadellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, ldf_persoon.prsadellijketitelomschrijving);
}

                    if(ldf_persoon.prsvoorvoegselgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(8, ldf_persoon.prsvoorvoegselgeslachtsnaam);
}

                    if(ldf_persoon.prsgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(9, ldf_persoon.prsgeslachtsnaam);
}

                    if(ldf_persoon.prsnaamopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(10, ldf_persoon.prsnaamopgemaakt);
}

                    if(ldf_persoon.prsgeboortedatum != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(11, new java.sql.Timestamp(ldf_persoon.prsgeboortedatum.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsgeboortedatumindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(12, ldf_persoon.prsgeboortedatumindicator);
}

                    if(ldf_persoon.prsgeboorteplaatscode == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(13, ldf_persoon.prsgeboorteplaatscode);
}

                    if(ldf_persoon.prsgeboorteplaatsomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(14, ldf_persoon.prsgeboorteplaatsomschrijving);
}

                    if(ldf_persoon.prsgeboortelandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(15, ldf_persoon.prsgeboortelandcode);
}

                    if(ldf_persoon.prsgeboortelandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(16, ldf_persoon.prsgeboortelandomschrijving);
}

                    if(ldf_persoon.prsgeslachtsaanduidingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, ldf_persoon.prsgeslachtsaanduidingcode);
}

                    if(ldf_persoon.prsgeslachtsaanduidingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(18, ldf_persoon.prsgeslachtsaanduidingomschrijving);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(19, ldf_persoon.prsvoriganummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(20, ldf_persoon.prsvolgendanummer);

                    if(ldf_persoon.prsaanduidingnaamgebruik == null) {
pstmt_tPostgresqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(21, ldf_persoon.prsaanduidingnaamgebruik);
}

                    if(ldf_persoon.prsregistergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(22, ldf_persoon.prsregistergemeenteaktecode);
}

                    if(ldf_persoon.prsregistergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(23, ldf_persoon.prsregistergemeenteakteomschrijving);
}

                    if(ldf_persoon.prsaktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(24, ldf_persoon.prsaktenummer);
}

                    if(ldf_persoon.prsgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(25, ldf_persoon.prsgemeentedocumentcode);
}

                    if(ldf_persoon.prsgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(26, ldf_persoon.prsgemeentedocumentomschrijving);
}

                    if(ldf_persoon.prsdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(27, new java.sql.Timestamp(ldf_persoon.prsdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(28, ldf_persoon.prsdatumdocumentindicator);
}

                    if(ldf_persoon.prsbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(29, ldf_persoon.prsbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(30, ldf_persoon.prsaanduidinggegevensonderzoek);

                    if(ldf_persoon.prsdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(31, new java.sql.Timestamp(ldf_persoon.prsdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(31, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(32, ldf_persoon.prsdatumingangonderzoekindicator);
}

                    if(ldf_persoon.prsdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(33, new java.sql.Timestamp(ldf_persoon.prsdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(33, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(34, ldf_persoon.prsdatumeindeonderzoekindicator);
}

                    if(ldf_persoon.prsingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(35, new java.sql.Timestamp(ldf_persoon.prsingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(35, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(36, ldf_persoon.prsingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.prsdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(37, new java.sql.Timestamp(ldf_persoon.prsdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(37, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(38, ldf_persoon.prsdatumvanopnemingindicator);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(39, ldf_persoon.prsstatuspersoon);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(40, ldf_persoon.prsrijkskodenationaliteit);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(41, ldf_persoon.prsgezinsverhouding);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(42, ldf_persoon.prsgezinssterkte);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(43, ldf_persoon.prsanummergezinshoofd);

                    if(ldf_persoon.prsburgerlijkestaat == null) {
pstmt_tPostgresqlOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(44, ldf_persoon.prsburgerlijkestaat);
}

                    if(ldf_persoon.prsnaamswijzigingindicatie == null) {
pstmt_tPostgresqlOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(45, ldf_persoon.prsnaamswijzigingindicatie);
}

                    if(ldf_persoon.prsdatumadreshoudingaaneengesloten != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(46, new java.sql.Timestamp(ldf_persoon.prsdatumadreshoudingaaneengesloten.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(46, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.prsdatumadreshoudingaaneengeslotenindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(47, ldf_persoon.prsdatumadreshoudingaaneengeslotenindicator);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(48, ldf_persoon.ou1anummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(49, ldf_persoon.ou1burgerservicenummer);

                    if(ldf_persoon.ou1voornamen == null) {
pstmt_tPostgresqlOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(50, ldf_persoon.ou1voornamen);
}

                    if(ldf_persoon.ou1voorletters == null) {
pstmt_tPostgresqlOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(51, ldf_persoon.ou1voorletters);
}

                    if(ldf_persoon.ou1adellijketitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(52, ldf_persoon.ou1adellijketitelcode);
}

                    if(ldf_persoon.ou1adellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(53, ldf_persoon.ou1adellijketitelomschrijving);
}

                    if(ldf_persoon.ou1voorvoegselgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(54, ldf_persoon.ou1voorvoegselgeslachtsnaam);
}

                    if(ldf_persoon.ou1geslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(55, ldf_persoon.ou1geslachtsnaam);
}

                    if(ldf_persoon.ou1naamopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(56, ldf_persoon.ou1naamopgemaakt);
}

                    if(ldf_persoon.ou1geboortedatum != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(57, new java.sql.Timestamp(ldf_persoon.ou1geboortedatum.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(57, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1geboortedatumindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(58, ldf_persoon.ou1geboortedatumindicator);
}

                    if(ldf_persoon.ou1geboorteplaatscode == null) {
pstmt_tPostgresqlOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(59, ldf_persoon.ou1geboorteplaatscode);
}

                    if(ldf_persoon.ou1geboorteplaatsomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(60, ldf_persoon.ou1geboorteplaatsomschrijving);
}

                    if(ldf_persoon.ou1geboortelandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(61, ldf_persoon.ou1geboortelandcode);
}

                    if(ldf_persoon.ou1geboortelandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(62, ldf_persoon.ou1geboortelandomschrijving);
}

                    if(ldf_persoon.ou1geslachtsaanduidingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(63, ldf_persoon.ou1geslachtsaanduidingcode);
}

                    if(ldf_persoon.ou1geslachtsaanduidingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(64, ldf_persoon.ou1geslachtsaanduidingomschrijving);
}

                    if(ldf_persoon.ou1datumingangfamilierechtelijkebetrekking != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(65, new java.sql.Timestamp(ldf_persoon.ou1datumingangfamilierechtelijkebetrekking.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(65, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1datumingangfamilierechtelijkebetrekkingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(66, ldf_persoon.ou1datumingangfamilierechtelijkebetrekkingindicator);
}

                    if(ldf_persoon.ou1registergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(67, ldf_persoon.ou1registergemeenteaktecode);
}

                    if(ldf_persoon.ou1registergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(68, ldf_persoon.ou1registergemeenteakteomschrijving);
}

                    if(ldf_persoon.ou1aktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(69, ldf_persoon.ou1aktenummer);
}

                    if(ldf_persoon.ou1gemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(70, ldf_persoon.ou1gemeentedocumentcode);
}

                    if(ldf_persoon.ou1gemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(71, ldf_persoon.ou1gemeentedocumentomschrijving);
}

                    if(ldf_persoon.ou1datumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(72, new java.sql.Timestamp(ldf_persoon.ou1datumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(72, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1datumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(73, ldf_persoon.ou1datumdocumentindicator);
}

                    if(ldf_persoon.ou1beschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(74, ldf_persoon.ou1beschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(75, ldf_persoon.ou1aanduidinggegevensonderzoek);

                    if(ldf_persoon.ou1datumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(76, new java.sql.Timestamp(ldf_persoon.ou1datumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(76, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1datumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(77, ldf_persoon.ou1datumingangonderzoekindicator);
}

                    if(ldf_persoon.ou1datumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(78, new java.sql.Timestamp(ldf_persoon.ou1datumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(78, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1datumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(79, ldf_persoon.ou1datumeindeonderzoekindicator);
}

                    if(ldf_persoon.ou1ingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(80, new java.sql.Timestamp(ldf_persoon.ou1ingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(80, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1ingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(81, ldf_persoon.ou1ingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.ou1datumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(82, new java.sql.Timestamp(ldf_persoon.ou1datumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(82, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou1datumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(83, ldf_persoon.ou1datumvanopnemingindicator);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(84, ldf_persoon.ou2anummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(85, ldf_persoon.ou2burgerservicenummer);

                    if(ldf_persoon.ou2voornamen == null) {
pstmt_tPostgresqlOutput_1.setNull(86, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(86, ldf_persoon.ou2voornamen);
}

                    if(ldf_persoon.ou2voorletters == null) {
pstmt_tPostgresqlOutput_1.setNull(87, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(87, ldf_persoon.ou2voorletters);
}

                    if(ldf_persoon.ou2adellijketitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(88, ldf_persoon.ou2adellijketitelcode);
}

                    if(ldf_persoon.ou2adellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(89, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(89, ldf_persoon.ou2adellijketitelomschrijving);
}

                    if(ldf_persoon.ou2voorvoegselgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(90, ldf_persoon.ou2voorvoegselgeslachtsnaam);
}

                    if(ldf_persoon.ou2geslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(91, ldf_persoon.ou2geslachtsnaam);
}

                    if(ldf_persoon.ou2naamopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(92, ldf_persoon.ou2naamopgemaakt);
}

                    if(ldf_persoon.ou2geboortedatum != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(93, new java.sql.Timestamp(ldf_persoon.ou2geboortedatum.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(93, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2geboortedatumindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(94, ldf_persoon.ou2geboortedatumindicator);
}

                    if(ldf_persoon.ou2geboorteplaatscode == null) {
pstmt_tPostgresqlOutput_1.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(95, ldf_persoon.ou2geboorteplaatscode);
}

                    if(ldf_persoon.ou2geboorteplaatsomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(96, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(96, ldf_persoon.ou2geboorteplaatsomschrijving);
}

                    if(ldf_persoon.ou2geboortelandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(97, ldf_persoon.ou2geboortelandcode);
}

                    if(ldf_persoon.ou2geboortelandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(98, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(98, ldf_persoon.ou2geboortelandomschrijving);
}

                    if(ldf_persoon.ou2geslachtsaanduidingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(99, ldf_persoon.ou2geslachtsaanduidingcode);
}

                    if(ldf_persoon.ou2geslachtsaanduidingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(100, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(100, ldf_persoon.ou2geslachtsaanduidingomschrijving);
}

                    if(ldf_persoon.ou2datumingangfamilierechtelijkebetrekking != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(101, new java.sql.Timestamp(ldf_persoon.ou2datumingangfamilierechtelijkebetrekking.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(101, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2datumingangfamilierechtelijkebetrekkingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(102, ldf_persoon.ou2datumingangfamilierechtelijkebetrekkingindicator);
}

                    if(ldf_persoon.ou2registergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(103, ldf_persoon.ou2registergemeenteaktecode);
}

                    if(ldf_persoon.ou2registergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(104, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(104, ldf_persoon.ou2registergemeenteakteomschrijving);
}

                    if(ldf_persoon.ou2aktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(105, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(105, ldf_persoon.ou2aktenummer);
}

                    if(ldf_persoon.ou2gemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(106, ldf_persoon.ou2gemeentedocumentcode);
}

                    if(ldf_persoon.ou2gemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(107, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(107, ldf_persoon.ou2gemeentedocumentomschrijving);
}

                    if(ldf_persoon.ou2datumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(108, new java.sql.Timestamp(ldf_persoon.ou2datumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(108, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2datumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(109, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(109, ldf_persoon.ou2datumdocumentindicator);
}

                    if(ldf_persoon.ou2beschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(110, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(110, ldf_persoon.ou2beschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(111, ldf_persoon.ou2aanduidinggegevensonderzoek);

                    if(ldf_persoon.ou2datumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(112, new java.sql.Timestamp(ldf_persoon.ou2datumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(112, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2datumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(113, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(113, ldf_persoon.ou2datumingangonderzoekindicator);
}

                    if(ldf_persoon.ou2datumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(114, new java.sql.Timestamp(ldf_persoon.ou2datumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(114, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2datumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(115, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(115, ldf_persoon.ou2datumeindeonderzoekindicator);
}

                    if(ldf_persoon.ou2ingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(116, new java.sql.Timestamp(ldf_persoon.ou2ingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(116, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2ingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(117, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(117, ldf_persoon.ou2ingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.ou2datumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(118, new java.sql.Timestamp(ldf_persoon.ou2datumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(118, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ou2datumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(119, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(119, ldf_persoon.ou2datumvanopnemingindicator);
}

                    if(ldf_persoon.ovldatumoverlijden != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(120, new java.sql.Timestamp(ldf_persoon.ovldatumoverlijden.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(120, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ovldatumoverlijdenindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(121, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(121, ldf_persoon.ovldatumoverlijdenindicator);
}

                    if(ldf_persoon.ovlplaatsoverlijdencode == null) {
pstmt_tPostgresqlOutput_1.setNull(122, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(122, ldf_persoon.ovlplaatsoverlijdencode);
}

                    if(ldf_persoon.ovlplaatsoverlijdenomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(123, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(123, ldf_persoon.ovlplaatsoverlijdenomschrijving);
}

                    if(ldf_persoon.ovllandoverlijdencode == null) {
pstmt_tPostgresqlOutput_1.setNull(124, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(124, ldf_persoon.ovllandoverlijdencode);
}

                    if(ldf_persoon.ovllandoverlijdenomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(125, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(125, ldf_persoon.ovllandoverlijdenomschrijving);
}

                    if(ldf_persoon.ovlregistergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(126, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(126, ldf_persoon.ovlregistergemeenteaktecode);
}

                    if(ldf_persoon.ovlregistergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(127, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(127, ldf_persoon.ovlregistergemeenteakteomschrijving);
}

                    if(ldf_persoon.ovlaktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(128, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(128, ldf_persoon.ovlaktenummer);
}

                    if(ldf_persoon.ovlgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(129, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(129, ldf_persoon.ovlgemeentedocumentcode);
}

                    if(ldf_persoon.ovlgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(130, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(130, ldf_persoon.ovlgemeentedocumentomschrijving);
}

                    if(ldf_persoon.ovldatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(131, new java.sql.Timestamp(ldf_persoon.ovldatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(131, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ovldatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(132, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(132, ldf_persoon.ovldatumdocumentindicator);
}

                    if(ldf_persoon.ovlbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(133, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(133, ldf_persoon.ovlbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(134, ldf_persoon.ovlaanduidinggegevensonderzoek);

                    if(ldf_persoon.ovldatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(135, new java.sql.Timestamp(ldf_persoon.ovldatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(135, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ovldatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(136, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(136, ldf_persoon.ovldatumingangonderzoekindicator);
}

                    if(ldf_persoon.ovldatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(137, new java.sql.Timestamp(ldf_persoon.ovldatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(137, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ovldatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(138, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(138, ldf_persoon.ovldatumeindeonderzoekindicator);
}

                    if(ldf_persoon.ovlingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(139, new java.sql.Timestamp(ldf_persoon.ovlingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(139, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ovlingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(140, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(140, ldf_persoon.ovlingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.ovldatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(141, new java.sql.Timestamp(ldf_persoon.ovldatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(141, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ovldatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(142, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(142, ldf_persoon.ovldatumvanopnemingindicator);
}

                    if(ldf_persoon.insdatumingangblokkeringpl != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(143, new java.sql.Timestamp(ldf_persoon.insdatumingangblokkeringpl.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(143, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.insdatumingangblokkeringplindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(144, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(144, ldf_persoon.insdatumingangblokkeringplindicator);
}

                    if(ldf_persoon.insdatumopschortingbijhouding != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(145, new java.sql.Timestamp(ldf_persoon.insdatumopschortingbijhouding.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(145, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.insdatumopschortingbijhoudingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(146, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(146, ldf_persoon.insdatumopschortingbijhoudingindicator);
}

                    if(ldf_persoon.insomschrijvingredenopschortingbijhouding == null) {
pstmt_tPostgresqlOutput_1.setNull(147, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(147, ldf_persoon.insomschrijvingredenopschortingbijhouding);
}

                    if(ldf_persoon.insdatumeersteinschrijvinggba != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(148, new java.sql.Timestamp(ldf_persoon.insdatumeersteinschrijvinggba.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(148, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.insdatumeersteinschrijvingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(149, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(149, ldf_persoon.insdatumeersteinschrijvingindicator);
}

                    if(ldf_persoon.insgemeentewaarpkzichbevindtcode == null) {
pstmt_tPostgresqlOutput_1.setNull(150, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(150, ldf_persoon.insgemeentewaarpkzichbevindtcode);
}

                    if(ldf_persoon.insgemeentewaarpkzichbevindtomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(151, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(151, ldf_persoon.insgemeentewaarpkzichbevindtomschrijving);
}

                    if(ldf_persoon.insindicatiegeheim == null) {
pstmt_tPostgresqlOutput_1.setNull(152, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(152, ldf_persoon.insindicatiegeheim);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(153, ldf_persoon.insversienummer);

                    if(ldf_persoon.insdatumtijdstempel == null) {
pstmt_tPostgresqlOutput_1.setNull(154, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(154, ldf_persoon.insdatumtijdstempel);
}

                    if(ldf_persoon.inspkgegevensvolledigmeegeconverteerd == null) {
pstmt_tPostgresqlOutput_1.setNull(155, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(155, ldf_persoon.inspkgegevensvolledigmeegeconverteerd);
}

                    if(ldf_persoon.vblgemeentevaninschrijvingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(156, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(156, ldf_persoon.vblgemeentevaninschrijvingcode);
}

                    if(ldf_persoon.vblgemeentevaninschrijvingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(157, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(157, ldf_persoon.vblgemeentevaninschrijvingomschrijving);
}

                    if(ldf_persoon.vbldatuminschrijving != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(158, new java.sql.Timestamp(ldf_persoon.vbldatuminschrijving.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(158, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatuminschrijvingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(159, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(159, ldf_persoon.vbldatuminschrijvingindicator);
}

                    if(ldf_persoon.vblfunctieadres == null) {
pstmt_tPostgresqlOutput_1.setNull(160, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(160, ldf_persoon.vblfunctieadres);
}

                    if(ldf_persoon.vblgemeentedeel == null) {
pstmt_tPostgresqlOutput_1.setNull(161, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(161, ldf_persoon.vblgemeentedeel);
}

                    if(ldf_persoon.vbldatumaanvangadreshouding != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(162, new java.sql.Timestamp(ldf_persoon.vbldatumaanvangadreshouding.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(162, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatumaanvangadreshoudingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(163, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(163, ldf_persoon.vbldatumaanvangadreshoudingindicator);
}

                    if(ldf_persoon.vblstraatnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(164, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(164, ldf_persoon.vblstraatnaam);
}

                    if(ldf_persoon.vblnaamopenbareruimte == null) {
pstmt_tPostgresqlOutput_1.setNull(165, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(165, ldf_persoon.vblnaamopenbareruimte);
}

                    if(ldf_persoon.vbladresopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(166, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(166, ldf_persoon.vbladresopgemaakt);
}

                    if(ldf_persoon.vblwoonplaatsopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(167, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(167, ldf_persoon.vblwoonplaatsopgemaakt);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(168, ldf_persoon.vblhuisnummer);

                    if(ldf_persoon.vblhuisletter == null) {
pstmt_tPostgresqlOutput_1.setNull(169, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(169, ldf_persoon.vblhuisletter);
}

                    if(ldf_persoon.vblhuisnummertoevoeging == null) {
pstmt_tPostgresqlOutput_1.setNull(170, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(170, ldf_persoon.vblhuisnummertoevoeging);
}

                    if(ldf_persoon.vblaanduidingbijhuisnummer == null) {
pstmt_tPostgresqlOutput_1.setNull(171, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(171, ldf_persoon.vblaanduidingbijhuisnummer);
}

                    if(ldf_persoon.vblpostcode == null) {
pstmt_tPostgresqlOutput_1.setNull(172, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(172, ldf_persoon.vblpostcode);
}

                    if(ldf_persoon.vblwoonplaatsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(173, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(173, ldf_persoon.vblwoonplaatsnaam);
}

                    if(ldf_persoon.vblidentificatiecodeverblijfplaats == null) {
pstmt_tPostgresqlOutput_1.setNull(174, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(174, ldf_persoon.vblidentificatiecodeverblijfplaats);
}

                    if(ldf_persoon.vblidentificatiecodenummeraanduiding == null) {
pstmt_tPostgresqlOutput_1.setNull(175, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(175, ldf_persoon.vblidentificatiecodenummeraanduiding);
}

                    if(ldf_persoon.vbllocatiebeschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(176, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(176, ldf_persoon.vbllocatiebeschrijving);
}

                    if(ldf_persoon.vbllandadresbuitenlandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(177, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(177, ldf_persoon.vbllandadresbuitenlandcode);
}

                    if(ldf_persoon.vbllandadresbuitenlandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(178, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(178, ldf_persoon.vbllandadresbuitenlandomschrijving);
}

                    if(ldf_persoon.vbldatumaanvangadresbuitenland != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(179, new java.sql.Timestamp(ldf_persoon.vbldatumaanvangadresbuitenland.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(179, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatumaanvangadresbuitenlandindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(180, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(180, ldf_persoon.vbldatumaanvangadresbuitenlandindicator);
}

                    if(ldf_persoon.vblregel1adresbuitenland == null) {
pstmt_tPostgresqlOutput_1.setNull(181, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(181, ldf_persoon.vblregel1adresbuitenland);
}

                    if(ldf_persoon.vblregel2adresbuitenland == null) {
pstmt_tPostgresqlOutput_1.setNull(182, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(182, ldf_persoon.vblregel2adresbuitenland);
}

                    if(ldf_persoon.vblregel3adresbuitenland == null) {
pstmt_tPostgresqlOutput_1.setNull(183, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(183, ldf_persoon.vblregel3adresbuitenland);
}

                    if(ldf_persoon.vbllandvanwaaringeschrevencode == null) {
pstmt_tPostgresqlOutput_1.setNull(184, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(184, ldf_persoon.vbllandvanwaaringeschrevencode);
}

                    if(ldf_persoon.vbllandvanwaaringeschrevenomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(185, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(185, ldf_persoon.vbllandvanwaaringeschrevenomschrijving);
}

                    if(ldf_persoon.vbldatumvestiginginnederland != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(186, new java.sql.Timestamp(ldf_persoon.vbldatumvestiginginnederland.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(186, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatumvestiginginnederlandindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(187, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(187, ldf_persoon.vbldatumvestiginginnederlandindicator);
}

                    if(ldf_persoon.vblomschrijvingvanaangifteadreshouding == null) {
pstmt_tPostgresqlOutput_1.setNull(188, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(188, ldf_persoon.vblomschrijvingvanaangifteadreshouding);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(189, ldf_persoon.vblindicatiedocument);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(190, ldf_persoon.vblaanduidinggegevensonderzoek);

                    if(ldf_persoon.vbldatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(191, new java.sql.Timestamp(ldf_persoon.vbldatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(191, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(192, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(192, ldf_persoon.vbldatumingangonderzoekindicator);
}

                    if(ldf_persoon.vbldatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(193, new java.sql.Timestamp(ldf_persoon.vbldatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(193, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(194, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(194, ldf_persoon.vbldatumeindeonderzoekindicator);
}

                    if(ldf_persoon.vblingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(195, new java.sql.Timestamp(ldf_persoon.vblingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(195, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vblingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(196, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(196, ldf_persoon.vblingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.vbldatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(197, new java.sql.Timestamp(ldf_persoon.vbldatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(197, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbldatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(198, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(198, ldf_persoon.vbldatumvanopnemingindicator);
}

                    if(ldf_persoon.vblsoortpandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(199, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(199, ldf_persoon.vblsoortpandcode);
}

                    if(ldf_persoon.vblsoortpandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(200, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(200, ldf_persoon.vblsoortpandomschrijving);
}

                    if(ldf_persoon.vblwijkcode == null) {
pstmt_tPostgresqlOutput_1.setNull(201, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(201, ldf_persoon.vblwijkcode);
}

                    if(ldf_persoon.vblwijkomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(202, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(202, ldf_persoon.vblwijkomschrijving);
}

                    if(ldf_persoon.vblplanalogischewijkcode == null) {
pstmt_tPostgresqlOutput_1.setNull(203, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(203, ldf_persoon.vblplanalogischewijkcode);
}

                    if(ldf_persoon.vblplanalogischewijkomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(204, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(204, ldf_persoon.vblplanalogischewijkomschrijving);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(205, ldf_persoon.vblanummerhoofdbewoner);

                    if(ldf_persoon.vbtaanduidingverblijfstitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(206, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(206, ldf_persoon.vbtaanduidingverblijfstitelcode);
}

                    if(ldf_persoon.vbtverblijfstitelvervallen == null) {
pstmt_tPostgresqlOutput_1.setNull(207, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(207, ldf_persoon.vbtverblijfstitelvervallen);
}

                    if(ldf_persoon.vbtaanduidingverblijfstitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(208, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(208, ldf_persoon.vbtaanduidingverblijfstitelomschrijving);
}

                    if(ldf_persoon.vbtdatumeindeverblijfstitel != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(209, new java.sql.Timestamp(ldf_persoon.vbtdatumeindeverblijfstitel.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(209, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbtdatumeindeverblijfstitelindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(210, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(210, ldf_persoon.vbtdatumeindeverblijfstitelindicator);
}

                    if(ldf_persoon.vbtingangsdatumverblijfstitel != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(211, new java.sql.Timestamp(ldf_persoon.vbtingangsdatumverblijfstitel.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(211, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbtingangsdatumverblijfstitelindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(212, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(212, ldf_persoon.vbtingangsdatumverblijfstitelindicator);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(213, ldf_persoon.vbtaanduidinggegevensonderzoek);

                    if(ldf_persoon.vbtdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(214, new java.sql.Timestamp(ldf_persoon.vbtdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(214, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbtdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(215, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(215, ldf_persoon.vbtdatumingangonderzoekindicator);
}

                    if(ldf_persoon.vbtdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(216, new java.sql.Timestamp(ldf_persoon.vbtdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(216, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbtdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(217, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(217, ldf_persoon.vbtdatumeindeonderzoekindicator);
}

                    if(ldf_persoon.vbtingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(218, new java.sql.Timestamp(ldf_persoon.vbtingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(218, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbtingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(219, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(219, ldf_persoon.vbtingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.vbtdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(220, new java.sql.Timestamp(ldf_persoon.vbtdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(220, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vbtdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(221, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(221, ldf_persoon.vbtdatumvanopnemingindicator);
}

                    if(ldf_persoon.gzvindicatiegezagminderjarige == null) {
pstmt_tPostgresqlOutput_1.setNull(222, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(222, ldf_persoon.gzvindicatiegezagminderjarige);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(223, ldf_persoon.gzvindicatiecurateleregister);

                    if(ldf_persoon.gzvgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(224, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(224, ldf_persoon.gzvgemeentedocumentcode);
}

                    if(ldf_persoon.gzvgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(225, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(225, ldf_persoon.gzvgemeentedocumentomschrijving);
}

                    if(ldf_persoon.gzvdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(226, new java.sql.Timestamp(ldf_persoon.gzvdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(226, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.gzvdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(227, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(227, ldf_persoon.gzvdatumdocumentindicator);
}

                    if(ldf_persoon.gzvbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(228, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(228, ldf_persoon.gzvbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(229, ldf_persoon.gzvaanduidinggegevensonderzoek);

                    if(ldf_persoon.gzvdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(230, new java.sql.Timestamp(ldf_persoon.gzvdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(230, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.gzvdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(231, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(231, ldf_persoon.gzvdatumingangonderzoekindicator);
}

                    if(ldf_persoon.gzvdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(232, new java.sql.Timestamp(ldf_persoon.gzvdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(232, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.gzvdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(233, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(233, ldf_persoon.gzvdatumeindeonderzoekindicator);
}

                    if(ldf_persoon.gzvingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(234, new java.sql.Timestamp(ldf_persoon.gzvingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(234, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.gzvingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(235, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(235, ldf_persoon.gzvingangsdatumgeldigheidindicator);
}

                    if(ldf_persoon.gzvdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(236, new java.sql.Timestamp(ldf_persoon.gzvdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(236, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.gzvdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(237, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(237, ldf_persoon.gzvdatumvanopnemingindicator);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(238, ldf_persoon.ksraanduidingeuropeeskiesrecht);

                    if(ldf_persoon.ksrdatumverzoekofmededelingeuropeeskiesrecht != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(239, new java.sql.Timestamp(ldf_persoon.ksrdatumverzoekofmededelingeuropeeskiesrecht.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(239, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(240, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(240, ldf_persoon.ksrdatumverzoekofmededelingeuropeeskiesrechtindicator);
}

                    if(ldf_persoon.ksreinddatumuitsluitingeuropeeskiesrecht != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(241, new java.sql.Timestamp(ldf_persoon.ksreinddatumuitsluitingeuropeeskiesrecht.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(241, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ksreinddatumuitsluitingeuropeeskiesrechtindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(242, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(242, ldf_persoon.ksreinddatumuitsluitingeuropeeskiesrechtindicator);
}

                    if(ldf_persoon.ksraanduidinguitgeslotenkiesrecht == null) {
pstmt_tPostgresqlOutput_1.setNull(243, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(243, ldf_persoon.ksraanduidinguitgeslotenkiesrecht);
}

                    if(ldf_persoon.ksreinddatumuitsluitingkiesrecht != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(244, new java.sql.Timestamp(ldf_persoon.ksreinddatumuitsluitingkiesrecht.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(244, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ksreinddatumuitsluitingkiesrechtindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(245, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(245, ldf_persoon.ksreinddatumuitsluitingkiesrechtindicator);
}

                    if(ldf_persoon.ksrgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(246, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(246, ldf_persoon.ksrgemeentedocumentcode);
}

                    if(ldf_persoon.ksrgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(247, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(247, ldf_persoon.ksrgemeentedocumentomschrijving);
}

                    if(ldf_persoon.ksrdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(248, new java.sql.Timestamp(ldf_persoon.ksrdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(248, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.ksrdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(249, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(249, ldf_persoon.ksrdatumdocumentindicator);
}

                    if(ldf_persoon.ksrbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(250, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(250, ldf_persoon.ksrbeschrijvingdocument);
}

                    if(ldf_persoon.vwsgemeentevaninschrijvingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(251, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(251, ldf_persoon.vwsgemeentevaninschrijvingcode);
}

                    if(ldf_persoon.vwsgemeentevaninschrijvingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(252, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(252, ldf_persoon.vwsgemeentevaninschrijvingomschrijving);
}

                    if(ldf_persoon.vwsdatuminschrijving != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(253, new java.sql.Timestamp(ldf_persoon.vwsdatuminschrijving.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(253, java.sql.Types.TIMESTAMP);
}

                    if(ldf_persoon.vwsdatuminschrijvingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(254, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(254, ldf_persoon.vwsdatuminschrijvingindicator);
}

                    if(ldf_persoon.vwsindicatiegeheim == null) {
pstmt_tPostgresqlOutput_1.setNull(255, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(255, ldf_persoon.vwsindicatiegeheim);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_persoon"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_titels_predikaten_persoon_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_persoon_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_persoon_naam" );

					
					
				
					if(tHash_Lookup_ldf_titels_predikaten_ouder1_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_ouder1_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_ouder1_naam" );

					
					
				
					if(tHash_Lookup_ldf_titels_predikaten_ouder2_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_ouder2_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_ouder2_naam" );

					
					
				
					if(tHash_Lookup_ldf_landen_persoon_geboorte != null) {
						tHash_Lookup_ldf_landen_persoon_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_persoon_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_landen_ouder1_geboorte != null) {
						tHash_Lookup_ldf_landen_ouder1_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_ouder1_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_landen_ouder2_geboorte != null) {
						tHash_Lookup_ldf_landen_ouder2_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_ouder2_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_landen_overlijden != null) {
						tHash_Lookup_ldf_landen_overlijden.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_overlijden" );

					
					
				
					if(tHash_Lookup_ldf_landen_verblijfplaats_buitenland != null) {
						tHash_Lookup_ldf_landen_verblijfplaats_buitenland.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_verblijfplaats_buitenland" );

					
					
				
					if(tHash_Lookup_ldf_landen_verblijfplaats_immigratie != null) {
						tHash_Lookup_ldf_landen_verblijfplaats_immigratie.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_verblijfplaats_immigratie" );

					
					
				
					if(tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht != null) {
						tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht" );

					
					
				
					if(tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht != null) {
						tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht" );

					
					
				
					if(tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht != null) {
						tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_persoon_akte != null) {
						tHash_Lookup_ldf_gemeenten_persoon_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_persoon_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_persoon_document != null) {
						tHash_Lookup_ldf_gemeenten_persoon_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_persoon_document" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_ouder1_akte != null) {
						tHash_Lookup_ldf_gemeenten_ouder1_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_ouder1_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_ouder1_document != null) {
						tHash_Lookup_ldf_gemeenten_ouder1_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_ouder1_document" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_ouder2_akte != null) {
						tHash_Lookup_ldf_gemeenten_ouder2_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_ouder2_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_ouder2_document != null) {
						tHash_Lookup_ldf_gemeenten_ouder2_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_ouder2_document" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_inschrijving_PK != null) {
						tHash_Lookup_ldf_gemeenten_inschrijving_PK.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_inschrijving_PK" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente != null) {
						tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_gezagsverhouding_document != null) {
						tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_gezagsverhouding_document" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_kiesrecht_document != null) {
						tHash_Lookup_ldf_gemeenten_kiesrecht_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_kiesrecht_document" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_verwijzing_gemeente != null) {
						tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_verwijzing_gemeente" );

					
					
				
					if(tHash_Lookup_ldf_verblijftitels_verblijftitel != null) {
						tHash_Lookup_ldf_verblijftitels_verblijftitel.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_verblijftitels_verblijftitel" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_overlijden_akte != null) {
						tHash_Lookup_ldf_gemeenten_overlijden_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_overlijden_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_overlijden_document != null) {
						tHash_Lookup_ldf_gemeenten_overlijden_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_overlijden_document" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_persoon"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_persoon"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_persoon_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_ouder1_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_ouder2_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_persoon_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_ouder1_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_ouder2_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_overlijden"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_verblijfplaats_buitenland"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_verblijfplaats_immigratie"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_persoon_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_persoon_document"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_ouder1_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_ouder1_document"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_ouder2_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_ouder2_document"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_inschrijving_PK"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_gezagsverhouding_document"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_kiesrecht_document"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_verwijzing_gemeente"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_verblijftitels_verblijftitel"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_overlijden_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_overlijden_document"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_persoon_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_persoon_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_persoon_naamStruct other = (ldf_titels_predikaten_persoon_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_persoon_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_persoon_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_persoon_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naam = new ldf_titels_predikaten_persoon_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_persoon_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_persoon_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_persoon_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_persoon_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_persoon_naam
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_persoon_naam) | target node:tAdvancedHash_ldf_titels_predikaten_persoon_naam - inputs:(ldf_titels_predikaten_persoon_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_persoon_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_persoon_naamStruct> tHash_Lookup_ldf_titels_predikaten_persoon_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_persoon_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_persoon_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_persoon_naam", tHash_Lookup_ldf_titels_predikaten_persoon_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_titels_predikaten_persoon_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_persoon_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	

			//ldf_titels_predikaten_persoon_naam
			//ldf_titels_predikaten_persoon_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_persoon_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_persoon_naamStruct ldf_titels_predikaten_persoon_naam_HashRow = new ldf_titels_predikaten_persoon_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_persoon_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_persoon_naam.adellijketitelcode;
				
				ldf_titels_predikaten_persoon_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_persoon_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_persoon_naam.put(ldf_titels_predikaten_persoon_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_persoon_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	

tHash_Lookup_ldf_titels_predikaten_persoon_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_persoon_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_persoon_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_persoon_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_persoon_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_ouder1_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_ouder1_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_ouder1_naamStruct other = (ldf_titels_predikaten_ouder1_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_ouder1_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_ouder1_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_ouder1_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naam = new ldf_titels_predikaten_ouder1_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_ouder1_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_ouder1_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_ouder1_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_ouder1_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_ouder1_naam
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder1_naam) | target node:tAdvancedHash_ldf_titels_predikaten_ouder1_naam - inputs:(ldf_titels_predikaten_ouder1_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_ouder1_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder1_naamStruct> tHash_Lookup_ldf_titels_predikaten_ouder1_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_ouder1_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_ouder1_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_ouder1_naam", tHash_Lookup_ldf_titels_predikaten_ouder1_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_titels_predikaten_ouder1_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_ouder1_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	

			//ldf_titels_predikaten_ouder1_naam
			//ldf_titels_predikaten_ouder1_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_ouder1_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_ouder1_naamStruct ldf_titels_predikaten_ouder1_naam_HashRow = new ldf_titels_predikaten_ouder1_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_ouder1_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_ouder1_naam.adellijketitelcode;
				
				ldf_titels_predikaten_ouder1_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_ouder1_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_ouder1_naam.put(ldf_titels_predikaten_ouder1_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_ouder1_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	

tHash_Lookup_ldf_titels_predikaten_ouder1_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_ouder1_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder1_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder1_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder1_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_ouder2_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_ouder2_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_ouder2_naamStruct other = (ldf_titels_predikaten_ouder2_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_ouder2_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_ouder2_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_ouder2_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_ouder2_naamStruct ldf_titels_predikaten_ouder2_naam = new ldf_titels_predikaten_ouder2_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder2_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder2_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder2_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_ouder2_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_ouder2_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_ouder2_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_ouder2_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_ouder2_naam
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_ouder2_naam,ldf_titels_predikaten_ouder2_naam) | target node:tAdvancedHash_ldf_titels_predikaten_ouder2_naam - inputs:(ldf_titels_predikaten_ouder2_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_ouder2_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_ouder2_naamStruct> tHash_Lookup_ldf_titels_predikaten_ouder2_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_ouder2_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_ouder2_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_ouder2_naam", tHash_Lookup_ldf_titels_predikaten_ouder2_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_titels_predikaten_ouder2_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_ouder2_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_titels_predikaten_ouder2_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_ouder2_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder2_naam";

	

			//ldf_titels_predikaten_ouder2_naam
			//ldf_titels_predikaten_ouder2_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_ouder2_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_ouder2_naamStruct ldf_titels_predikaten_ouder2_naam_HashRow = new ldf_titels_predikaten_ouder2_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_ouder2_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_ouder2_naam.adellijketitelcode;
				
				ldf_titels_predikaten_ouder2_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_ouder2_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_ouder2_naam.put(ldf_titels_predikaten_ouder2_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_ouder2_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder2_naam";

	

tHash_Lookup_ldf_titels_predikaten_ouder2_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_ouder2_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder2_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_ouder2_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_ouder2_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_ouder2_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_persoon_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_persoon_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_persoon_geboorteStruct other = (ldf_landen_persoon_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_persoon_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_persoon_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_persoon_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorte = new ldf_landen_persoon_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_persoon_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_persoon_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_persoon_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_persoon_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_persoon_geboorte
			   		// source node:tPostgresqlInput_4 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_persoon_geboorte,ldf_landen_persoon_geboorte) | target node:tAdvancedHash_ldf_landen_persoon_geboorte - inputs:(ldf_landen_persoon_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_persoon_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_persoon_geboorteStruct> tHash_Lookup_ldf_landen_persoon_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_persoon_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_persoon_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_persoon_geboorte", tHash_Lookup_ldf_landen_persoon_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_4);
			   	String dbUser_tPostgresqlInput_4 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;
		        
				
			String url_tPostgresqlInput_4 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_4,dbUser_tPostgresqlInput_4,dbPwd_tPostgresqlInput_4);
		        
				conn_tPostgresqlInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);

		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;
		try{
		    rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								ldf_landen_persoon_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_persoon_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								ldf_landen_persoon_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_persoon_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	

			//ldf_landen_persoon_geboorte
			//ldf_landen_persoon_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_persoon_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_persoon_geboorteStruct ldf_landen_persoon_geboorte_HashRow = new ldf_landen_persoon_geboorteStruct();
		   	   	   
				
				ldf_landen_persoon_geboorte_HashRow.landcode = ldf_landen_persoon_geboorte.landcode;
				
				ldf_landen_persoon_geboorte_HashRow.landomschrijving = ldf_landen_persoon_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_persoon_geboorte.put(ldf_landen_persoon_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_persoon_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	stmt_tPostgresqlInput_4.close();

	if(conn_tPostgresqlInput_4 != null && !conn_tPostgresqlInput_4.isClosed()) {
		
			conn_tPostgresqlInput_4.commit();
			
		
			conn_tPostgresqlInput_4.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	

tHash_Lookup_ldf_landen_persoon_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_persoon_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_persoon_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_persoon_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_persoon_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_persoon_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_ouder1_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_ouder1_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_ouder1_geboorteStruct other = (ldf_landen_ouder1_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_ouder1_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_ouder1_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_ouder1_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorte = new ldf_landen_ouder1_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_ouder1_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_ouder1_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_ouder1_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_ouder1_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_ouder1_geboorte
			   		// source node:tPostgresqlInput_5 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_ouder1_geboorte,ldf_landen_ouder1_geboorte) | target node:tAdvancedHash_ldf_landen_ouder1_geboorte - inputs:(ldf_landen_ouder1_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_ouder1_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder1_geboorteStruct> tHash_Lookup_ldf_landen_ouder1_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_ouder1_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_ouder1_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_ouder1_geboorte", tHash_Lookup_ldf_landen_ouder1_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_5);
			   	String dbUser_tPostgresqlInput_5 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;
		        
				
			String url_tPostgresqlInput_5 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_5,dbUser_tPostgresqlInput_5,dbPwd_tPostgresqlInput_5);
		        
				conn_tPostgresqlInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);

		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;
		try{
		    rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								ldf_landen_ouder1_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_ouder1_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								ldf_landen_ouder1_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_ouder1_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	

			//ldf_landen_ouder1_geboorte
			//ldf_landen_ouder1_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_ouder1_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_ouder1_geboorteStruct ldf_landen_ouder1_geboorte_HashRow = new ldf_landen_ouder1_geboorteStruct();
		   	   	   
				
				ldf_landen_ouder1_geboorte_HashRow.landcode = ldf_landen_ouder1_geboorte.landcode;
				
				ldf_landen_ouder1_geboorte_HashRow.landomschrijving = ldf_landen_ouder1_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_ouder1_geboorte.put(ldf_landen_ouder1_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_ouder1_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	stmt_tPostgresqlInput_5.close();

	if(conn_tPostgresqlInput_5 != null && !conn_tPostgresqlInput_5.isClosed()) {
		
			conn_tPostgresqlInput_5.commit();
			
		
			conn_tPostgresqlInput_5.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	

tHash_Lookup_ldf_landen_ouder1_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_ouder1_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_ouder1_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder1_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder1_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_ouder1_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_ouder2_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_ouder2_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_ouder2_geboorteStruct other = (ldf_landen_ouder2_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_ouder2_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_ouder2_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_ouder2_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_ouder2_geboorteStruct ldf_landen_ouder2_geboorte = new ldf_landen_ouder2_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_ouder2_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_ouder2_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_ouder2_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_ouder2_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_ouder2_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_ouder2_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_ouder2_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_ouder2_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_ouder2_geboorte
			   		// source node:tPostgresqlInput_6 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_ouder2_geboorte,ldf_landen_ouder2_geboorte) | target node:tAdvancedHash_ldf_landen_ouder2_geboorte - inputs:(ldf_landen_ouder2_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_ouder2_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_ouder2_geboorteStruct> tHash_Lookup_ldf_landen_ouder2_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_ouder2_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_ouder2_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_ouder2_geboorte", tHash_Lookup_ldf_landen_ouder2_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_ouder2_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_6", false);
		start_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_6";

	
		int tos_count_tPostgresqlInput_6 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_6().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_6 = 0;
		    java.sql.Connection conn_tPostgresqlInput_6 = null;
				String driverClass_tPostgresqlInput_6 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_6);
			   	String dbUser_tPostgresqlInput_6 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_6 = decryptedPassword_tPostgresqlInput_6;
		        
				
			String url_tPostgresqlInput_6 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_6 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_6,dbUser_tPostgresqlInput_6,dbPwd_tPostgresqlInput_6);
		        
				conn_tPostgresqlInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6.createStatement();

		    String dbquery_tPostgresqlInput_6 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_6_QUERY",dbquery_tPostgresqlInput_6);

		    java.sql.ResultSet rs_tPostgresqlInput_6 = null;
		try{
		    rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6.executeQuery(dbquery_tPostgresqlInput_6);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6.getMetaData();
		    int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6.getColumnCount();

		    String tmpContent_tPostgresqlInput_6 = null;
		    
		    
		    while (rs_tPostgresqlInput_6.next()) {
		        nb_line_tPostgresqlInput_6++;
		        
							if(colQtyInRs_tPostgresqlInput_6 < 1) {
								ldf_landen_ouder2_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_ouder2_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 2) {
								ldf_landen_ouder2_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_ouder2_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 


	tos_count_tPostgresqlInput_6++;

/**
 * [tPostgresqlInput_6 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder2_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder2_geboorte";

	

			//ldf_landen_ouder2_geboorte
			//ldf_landen_ouder2_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_ouder2_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_ouder2_geboorteStruct ldf_landen_ouder2_geboorte_HashRow = new ldf_landen_ouder2_geboorteStruct();
		   	   	   
				
				ldf_landen_ouder2_geboorte_HashRow.landcode = ldf_landen_ouder2_geboorte.landcode;
				
				ldf_landen_ouder2_geboorte_HashRow.landomschrijving = ldf_landen_ouder2_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_ouder2_geboorte.put(ldf_landen_ouder2_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_ouder2_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_ouder2_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

	}
}finally{
	stmt_tPostgresqlInput_6.close();

	if(conn_tPostgresqlInput_6 != null && !conn_tPostgresqlInput_6.isClosed()) {
		
			conn_tPostgresqlInput_6.commit();
			
		
			conn_tPostgresqlInput_6.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_6_NB_LINE",nb_line_tPostgresqlInput_6);
 

ok_Hash.put("tPostgresqlInput_6", true);
end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());




/**
 * [tPostgresqlInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder2_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder2_geboorte";

	

tHash_Lookup_ldf_landen_ouder2_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_ouder2_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_ouder2_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_ouder2_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_ouder2_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_ouder2_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_ouder2_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_ouder2_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_overlijdenStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_overlijdenStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_overlijdenStruct other = (ldf_landen_overlijdenStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_overlijdenStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_overlijdenStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_overlijdenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_overlijdenStruct ldf_landen_overlijden = new ldf_landen_overlijdenStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_overlijden", false);
		start_Hash.put("tAdvancedHash_ldf_landen_overlijden", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_overlijden" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_overlijden = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_overlijden{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_overlijden().limitLog4jByte();

			   		// connection name:ldf_landen_overlijden
			   		// source node:tPostgresqlInput_8 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_overlijden,ldf_landen_overlijden) | target node:tAdvancedHash_ldf_landen_overlijden - inputs:(ldf_landen_overlijden) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_overlijden = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_overlijdenStruct> tHash_Lookup_ldf_landen_overlijden =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_overlijdenStruct>getLookup(matchingModeEnum_ldf_landen_overlijden);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_overlijden", tHash_Lookup_ldf_landen_overlijden);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_overlijden begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_8", false);
		start_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_8";

	
		int tos_count_tPostgresqlInput_8 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_8().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_8 = 0;
		    java.sql.Connection conn_tPostgresqlInput_8 = null;
				String driverClass_tPostgresqlInput_8 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_8);
			   	String dbUser_tPostgresqlInput_8 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_8 = decryptedPassword_tPostgresqlInput_8;
		        
				
			String url_tPostgresqlInput_8 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_8 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_8,dbUser_tPostgresqlInput_8,dbPwd_tPostgresqlInput_8);
		        
				conn_tPostgresqlInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8.createStatement();

		    String dbquery_tPostgresqlInput_8 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_8_QUERY",dbquery_tPostgresqlInput_8);

		    java.sql.ResultSet rs_tPostgresqlInput_8 = null;
		try{
		    rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8.executeQuery(dbquery_tPostgresqlInput_8);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8.getMetaData();
		    int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8.getColumnCount();

		    String tmpContent_tPostgresqlInput_8 = null;
		    
		    
		    while (rs_tPostgresqlInput_8.next()) {
		        nb_line_tPostgresqlInput_8++;
		        
							if(colQtyInRs_tPostgresqlInput_8 < 1) {
								ldf_landen_overlijden.landcode = null;
							} else {
	                         		
        	ldf_landen_overlijden.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_8, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_8 < 2) {
								ldf_landen_overlijden.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_overlijden.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_8, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_8 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_8 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 


	tos_count_tPostgresqlInput_8++;

/**
 * [tPostgresqlInput_8 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden";

	

			//ldf_landen_overlijden
			//ldf_landen_overlijden


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_overlijden"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_overlijdenStruct ldf_landen_overlijden_HashRow = new ldf_landen_overlijdenStruct();
		   	   	   
				
				ldf_landen_overlijden_HashRow.landcode = ldf_landen_overlijden.landcode;
				
				ldf_landen_overlijden_HashRow.landomschrijving = ldf_landen_overlijden.landomschrijving;
				
			tHash_Lookup_ldf_landen_overlijden.put(ldf_landen_overlijden_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_overlijden++;

/**
 * [tAdvancedHash_ldf_landen_overlijden main ] stop
 */



	
	/**
	 * [tPostgresqlInput_8 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

	}
}finally{
	stmt_tPostgresqlInput_8.close();

	if(conn_tPostgresqlInput_8 != null && !conn_tPostgresqlInput_8.isClosed()) {
		
			conn_tPostgresqlInput_8.commit();
			
		
			conn_tPostgresqlInput_8.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_8_NB_LINE",nb_line_tPostgresqlInput_8);
 

ok_Hash.put("tPostgresqlInput_8", true);
end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());




/**
 * [tPostgresqlInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden";

	

tHash_Lookup_ldf_landen_overlijden.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_overlijden"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_overlijden", true);
end_Hash.put("tAdvancedHash_ldf_landen_overlijden", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_overlijden end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_8 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_8";

	

 



/**
 * [tPostgresqlInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_overlijden finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_overlijden";

	

 



/**
 * [tAdvancedHash_ldf_landen_overlijden finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_verblijfplaats_buitenlandStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_verblijfplaats_buitenlandStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_verblijfplaats_buitenlandStruct other = (ldf_landen_verblijfplaats_buitenlandStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_verblijfplaats_buitenlandStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_verblijfplaats_buitenlandStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_verblijfplaats_buitenlandStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_verblijfplaats_buitenlandStruct ldf_landen_verblijfplaats_buitenland = new ldf_landen_verblijfplaats_buitenlandStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_buitenland", false);
		start_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_buitenland", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_buitenland";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_verblijfplaats_buitenland" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_verblijfplaats_buitenland = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_buitenland{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_buitenland().limitLog4jByte();

			   		// connection name:ldf_landen_verblijfplaats_buitenland
			   		// source node:tPostgresqlInput_9 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_buitenland) | target node:tAdvancedHash_ldf_landen_verblijfplaats_buitenland - inputs:(ldf_landen_verblijfplaats_buitenland) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_verblijfplaats_buitenland = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_buitenlandStruct> tHash_Lookup_ldf_landen_verblijfplaats_buitenland =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_verblijfplaats_buitenlandStruct>getLookup(matchingModeEnum_ldf_landen_verblijfplaats_buitenland);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_verblijfplaats_buitenland", tHash_Lookup_ldf_landen_verblijfplaats_buitenland);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_9", false);
		start_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_9";

	
		int tos_count_tPostgresqlInput_9 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_9().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_9 = 0;
		    java.sql.Connection conn_tPostgresqlInput_9 = null;
				String driverClass_tPostgresqlInput_9 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_9);
			   	String dbUser_tPostgresqlInput_9 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_9 = decryptedPassword_tPostgresqlInput_9;
		        
				
			String url_tPostgresqlInput_9 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_9 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_9,dbUser_tPostgresqlInput_9,dbPwd_tPostgresqlInput_9);
		        
				conn_tPostgresqlInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9.createStatement();

		    String dbquery_tPostgresqlInput_9 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_9_QUERY",dbquery_tPostgresqlInput_9);

		    java.sql.ResultSet rs_tPostgresqlInput_9 = null;
		try{
		    rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9.executeQuery(dbquery_tPostgresqlInput_9);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9.getMetaData();
		    int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9.getColumnCount();

		    String tmpContent_tPostgresqlInput_9 = null;
		    
		    
		    while (rs_tPostgresqlInput_9.next()) {
		        nb_line_tPostgresqlInput_9++;
		        
							if(colQtyInRs_tPostgresqlInput_9 < 1) {
								ldf_landen_verblijfplaats_buitenland.landcode = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_buitenland.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_9, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_9 < 2) {
								ldf_landen_verblijfplaats_buitenland.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_buitenland.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_9, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_9 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_9 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 


	tos_count_tPostgresqlInput_9++;

/**
 * [tPostgresqlInput_9 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_buitenland";

	

			//ldf_landen_verblijfplaats_buitenland
			//ldf_landen_verblijfplaats_buitenland


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_verblijfplaats_buitenland"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_verblijfplaats_buitenlandStruct ldf_landen_verblijfplaats_buitenland_HashRow = new ldf_landen_verblijfplaats_buitenlandStruct();
		   	   	   
				
				ldf_landen_verblijfplaats_buitenland_HashRow.landcode = ldf_landen_verblijfplaats_buitenland.landcode;
				
				ldf_landen_verblijfplaats_buitenland_HashRow.landomschrijving = ldf_landen_verblijfplaats_buitenland.landomschrijving;
				
			tHash_Lookup_ldf_landen_verblijfplaats_buitenland.put(ldf_landen_verblijfplaats_buitenland_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_verblijfplaats_buitenland++;

/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland main ] stop
 */



	
	/**
	 * [tPostgresqlInput_9 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

	}
}finally{
	stmt_tPostgresqlInput_9.close();

	if(conn_tPostgresqlInput_9 != null && !conn_tPostgresqlInput_9.isClosed()) {
		
			conn_tPostgresqlInput_9.commit();
			
		
			conn_tPostgresqlInput_9.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_9_NB_LINE",nb_line_tPostgresqlInput_9);
 

ok_Hash.put("tPostgresqlInput_9", true);
end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());




/**
 * [tPostgresqlInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_buitenland";

	

tHash_Lookup_ldf_landen_verblijfplaats_buitenland.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_verblijfplaats_buitenland"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_buitenland", true);
end_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_buitenland", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_9 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_9";

	

 



/**
 * [tPostgresqlInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_buitenland";

	

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_buitenland finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_verblijfplaats_immigratieStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_verblijfplaats_immigratieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_verblijfplaats_immigratieStruct other = (ldf_landen_verblijfplaats_immigratieStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_verblijfplaats_immigratieStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_verblijfplaats_immigratieStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_verblijfplaats_immigratieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratie = new ldf_landen_verblijfplaats_immigratieStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", false);
		start_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_verblijfplaats_immigratie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_verblijfplaats_immigratie = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_immigratie{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_immigratie().limitLog4jByte();

			   		// connection name:ldf_landen_verblijfplaats_immigratie
			   		// source node:tPostgresqlInput_10 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_verblijfplaats_immigratie,ldf_landen_verblijfplaats_immigratie) | target node:tAdvancedHash_ldf_landen_verblijfplaats_immigratie - inputs:(ldf_landen_verblijfplaats_immigratie) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_verblijfplaats_immigratie = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct> tHash_Lookup_ldf_landen_verblijfplaats_immigratie =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_verblijfplaats_immigratieStruct>getLookup(matchingModeEnum_ldf_landen_verblijfplaats_immigratie);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_verblijfplaats_immigratie", tHash_Lookup_ldf_landen_verblijfplaats_immigratie);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_10", false);
		start_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_10";

	
		int tos_count_tPostgresqlInput_10 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_10().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_10 = 0;
		    java.sql.Connection conn_tPostgresqlInput_10 = null;
				String driverClass_tPostgresqlInput_10 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_10);
			   	String dbUser_tPostgresqlInput_10 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_10 = decryptedPassword_tPostgresqlInput_10;
		        
				
			String url_tPostgresqlInput_10 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_10 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_10,dbUser_tPostgresqlInput_10,dbPwd_tPostgresqlInput_10);
		        
				conn_tPostgresqlInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_10 = conn_tPostgresqlInput_10.createStatement();

		    String dbquery_tPostgresqlInput_10 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_10_QUERY",dbquery_tPostgresqlInput_10);

		    java.sql.ResultSet rs_tPostgresqlInput_10 = null;
		try{
		    rs_tPostgresqlInput_10 = stmt_tPostgresqlInput_10.executeQuery(dbquery_tPostgresqlInput_10);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_10 = rs_tPostgresqlInput_10.getMetaData();
		    int colQtyInRs_tPostgresqlInput_10 = rsmd_tPostgresqlInput_10.getColumnCount();

		    String tmpContent_tPostgresqlInput_10 = null;
		    
		    
		    while (rs_tPostgresqlInput_10.next()) {
		        nb_line_tPostgresqlInput_10++;
		        
							if(colQtyInRs_tPostgresqlInput_10 < 1) {
								ldf_landen_verblijfplaats_immigratie.landcode = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_immigratie.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_10, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_10 < 2) {
								ldf_landen_verblijfplaats_immigratie.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_immigratie.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_10, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_10 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_10 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 


	tos_count_tPostgresqlInput_10++;

/**
 * [tPostgresqlInput_10 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	

			//ldf_landen_verblijfplaats_immigratie
			//ldf_landen_verblijfplaats_immigratie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_verblijfplaats_immigratie"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratie_HashRow = new ldf_landen_verblijfplaats_immigratieStruct();
		   	   	   
				
				ldf_landen_verblijfplaats_immigratie_HashRow.landcode = ldf_landen_verblijfplaats_immigratie.landcode;
				
				ldf_landen_verblijfplaats_immigratie_HashRow.landomschrijving = ldf_landen_verblijfplaats_immigratie.landomschrijving;
				
			tHash_Lookup_ldf_landen_verblijfplaats_immigratie.put(ldf_landen_verblijfplaats_immigratie_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_verblijfplaats_immigratie++;

/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie main ] stop
 */



	
	/**
	 * [tPostgresqlInput_10 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

	}
}finally{
	stmt_tPostgresqlInput_10.close();

	if(conn_tPostgresqlInput_10 != null && !conn_tPostgresqlInput_10.isClosed()) {
		
			conn_tPostgresqlInput_10.commit();
			
		
			conn_tPostgresqlInput_10.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_10_NB_LINE",nb_line_tPostgresqlInput_10);
 

ok_Hash.put("tPostgresqlInput_10", true);
end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());




/**
 * [tPostgresqlInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	

tHash_Lookup_ldf_landen_verblijfplaats_immigratie.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_verblijfplaats_immigratie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", true);
end_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_10 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_10";

	

 



/**
 * [tPostgresqlInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_geslachtsaanduidingen_persoon_geslachtStruct implements routines.system.IPersistableComparableLookupRow<ldf_geslachtsaanduidingen_persoon_geslachtStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String geslachtsaanduidingcode;

				public String getGeslachtsaanduidingcode () {
					return this.geslachtsaanduidingcode;
				}
				
			    public String geslachtsaanduidingomschrijving;

				public String getGeslachtsaanduidingomschrijving () {
					return this.geslachtsaanduidingomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.geslachtsaanduidingcode == null) ? 0 : this.geslachtsaanduidingcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_geslachtsaanduidingen_persoon_geslachtStruct other = (ldf_geslachtsaanduidingen_persoon_geslachtStruct) obj;
		
						if (this.geslachtsaanduidingcode == null) {
							if (other.geslachtsaanduidingcode != null)
								return false;
						
						} else if (!this.geslachtsaanduidingcode.equals(other.geslachtsaanduidingcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_geslachtsaanduidingen_persoon_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            other.geslachtsaanduidingomschrijving = this.geslachtsaanduidingomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_geslachtsaanduidingen_persoon_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.geslachtsaanduidingcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.geslachtsaanduidingcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.geslachtsaanduidingomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.geslachtsaanduidingomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("geslachtsaanduidingcode="+geslachtsaanduidingcode);
		sb.append(",geslachtsaanduidingomschrijving="+geslachtsaanduidingomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_geslachtsaanduidingen_persoon_geslachtStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.geslachtsaanduidingcode, other.geslachtsaanduidingcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslacht = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();




	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", false);
		start_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_persoon_geslacht" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht().limitLog4jByte();

			   		// connection name:ldf_geslachtsaanduidingen_persoon_geslacht
			   		// source node:tPostgresqlInput_7 - inputs:(after_tAS400Input_1) outputs:(ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_persoon_geslacht) | target node:tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht - inputs:(ldf_geslachtsaanduidingen_persoon_geslacht) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_geslachtsaanduidingen_persoon_geslacht = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_persoon_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_geslachtsaanduidingen_persoon_geslachtStruct>getLookup(matchingModeEnum_ldf_geslachtsaanduidingen_persoon_geslacht);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht", tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_7", false);
		start_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_7";

	
		int tos_count_tPostgresqlInput_7 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_7().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_7 = 0;
		    java.sql.Connection conn_tPostgresqlInput_7 = null;
				String driverClass_tPostgresqlInput_7 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_7);
			   	String dbUser_tPostgresqlInput_7 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_7 = decryptedPassword_tPostgresqlInput_7;
		        
				
			String url_tPostgresqlInput_7 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_7 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_7,dbUser_tPostgresqlInput_7,dbPwd_tPostgresqlInput_7);
		        
				conn_tPostgresqlInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7.createStatement();

		    String dbquery_tPostgresqlInput_7 = "select\ngeslachtsaanduidingcode,\ngeslachtsaanduidingomschrijving\nfrom ibz_cip_geslachtsaanduidingen";
			

                       globalMap.put("tPostgresqlInput_7_QUERY",dbquery_tPostgresqlInput_7);

		    java.sql.ResultSet rs_tPostgresqlInput_7 = null;
		try{
		    rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7.executeQuery(dbquery_tPostgresqlInput_7);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7.getMetaData();
		    int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7.getColumnCount();

		    String tmpContent_tPostgresqlInput_7 = null;
		    
		    
		    while (rs_tPostgresqlInput_7.next()) {
		        nb_line_tPostgresqlInput_7++;
		        
							if(colQtyInRs_tPostgresqlInput_7 < 1) {
								ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_7, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_7 < 2) {
								ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_7, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_7 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 


	tos_count_tPostgresqlInput_7++;

/**
 * [tPostgresqlInput_7 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	

			//ldf_geslachtsaanduidingen_persoon_geslacht
			//ldf_geslachtsaanduidingen_persoon_geslacht


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_persoon_geslacht"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_geslachtsaanduidingen_persoon_geslachtStruct ldf_geslachtsaanduidingen_persoon_geslacht_HashRow = new ldf_geslachtsaanduidingen_persoon_geslachtStruct();
		   	   	   
				
				ldf_geslachtsaanduidingen_persoon_geslacht_HashRow.geslachtsaanduidingcode = ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingcode;
				
				ldf_geslachtsaanduidingen_persoon_geslacht_HashRow.geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_persoon_geslacht.geslachtsaanduidingomschrijving;
				
			tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.put(ldf_geslachtsaanduidingen_persoon_geslacht_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht++;

/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht main ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

	}
}finally{
	stmt_tPostgresqlInput_7.close();

	if(conn_tPostgresqlInput_7 != null && !conn_tPostgresqlInput_7.isClosed()) {
		
			conn_tPostgresqlInput_7.commit();
			
		
			conn_tPostgresqlInput_7.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_7_NB_LINE",nb_line_tPostgresqlInput_7);
 

ok_Hash.put("tPostgresqlInput_7", true);
end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());




/**
 * [tPostgresqlInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	

tHash_Lookup_ldf_geslachtsaanduidingen_persoon_geslacht.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_persoon_geslacht"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", true);
end_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 



/**
 * [tPostgresqlInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht";

	

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_persoon_geslacht finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_geslachtsaanduidingen_ouder1_geslachtStruct implements routines.system.IPersistableComparableLookupRow<ldf_geslachtsaanduidingen_ouder1_geslachtStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String geslachtsaanduidingcode;

				public String getGeslachtsaanduidingcode () {
					return this.geslachtsaanduidingcode;
				}
				
			    public String geslachtsaanduidingomschrijving;

				public String getGeslachtsaanduidingomschrijving () {
					return this.geslachtsaanduidingomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.geslachtsaanduidingcode == null) ? 0 : this.geslachtsaanduidingcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_geslachtsaanduidingen_ouder1_geslachtStruct other = (ldf_geslachtsaanduidingen_ouder1_geslachtStruct) obj;
		
						if (this.geslachtsaanduidingcode == null) {
							if (other.geslachtsaanduidingcode != null)
								return false;
						
						} else if (!this.geslachtsaanduidingcode.equals(other.geslachtsaanduidingcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_geslachtsaanduidingen_ouder1_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            other.geslachtsaanduidingomschrijving = this.geslachtsaanduidingomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_geslachtsaanduidingen_ouder1_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.geslachtsaanduidingcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.geslachtsaanduidingcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.geslachtsaanduidingomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.geslachtsaanduidingomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("geslachtsaanduidingcode="+geslachtsaanduidingcode);
		sb.append(",geslachtsaanduidingomschrijving="+geslachtsaanduidingomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_geslachtsaanduidingen_ouder1_geslachtStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.geslachtsaanduidingcode, other.geslachtsaanduidingcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslacht = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();




	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", false);
		start_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder1_geslacht" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht().limitLog4jByte();

			   		// connection name:ldf_geslachtsaanduidingen_ouder1_geslacht
			   		// source node:tPostgresqlInput_11 - inputs:(after_tAS400Input_1) outputs:(ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht) | target node:tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht - inputs:(ldf_geslachtsaanduidingen_ouder1_geslacht) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_geslachtsaanduidingen_ouder1_geslacht = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder1_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_geslachtsaanduidingen_ouder1_geslachtStruct>getLookup(matchingModeEnum_ldf_geslachtsaanduidingen_ouder1_geslacht);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht", tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_11", false);
		start_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_11";

	
		int tos_count_tPostgresqlInput_11 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_11().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_11 = 0;
		    java.sql.Connection conn_tPostgresqlInput_11 = null;
				String driverClass_tPostgresqlInput_11 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_11);
			   	String dbUser_tPostgresqlInput_11 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_11 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_11 = decryptedPassword_tPostgresqlInput_11;
		        
				
			String url_tPostgresqlInput_11 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_11 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_11,dbUser_tPostgresqlInput_11,dbPwd_tPostgresqlInput_11);
		        
				conn_tPostgresqlInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11.createStatement();

		    String dbquery_tPostgresqlInput_11 = "select\ngeslachtsaanduidingcode,\ngeslachtsaanduidingomschrijving\nfrom ibz_cip_geslachtsaanduidingen";
			

                       globalMap.put("tPostgresqlInput_11_QUERY",dbquery_tPostgresqlInput_11);

		    java.sql.ResultSet rs_tPostgresqlInput_11 = null;
		try{
		    rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11.executeQuery(dbquery_tPostgresqlInput_11);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11.getMetaData();
		    int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11.getColumnCount();

		    String tmpContent_tPostgresqlInput_11 = null;
		    
		    
		    while (rs_tPostgresqlInput_11.next()) {
		        nb_line_tPostgresqlInput_11++;
		        
							if(colQtyInRs_tPostgresqlInput_11 < 1) {
								ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_11, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_11 < 2) {
								ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_11, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_11 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_11 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 


	tos_count_tPostgresqlInput_11++;

/**
 * [tPostgresqlInput_11 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	

			//ldf_geslachtsaanduidingen_ouder1_geslacht
			//ldf_geslachtsaanduidingen_ouder1_geslacht


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder1_geslacht"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_geslachtsaanduidingen_ouder1_geslachtStruct ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow = new ldf_geslachtsaanduidingen_ouder1_geslachtStruct();
		   	   	   
				
				ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow.geslachtsaanduidingcode = ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingcode;
				
				ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow.geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_ouder1_geslacht.geslachtsaanduidingomschrijving;
				
			tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.put(ldf_geslachtsaanduidingen_ouder1_geslacht_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht++;

/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht main ] stop
 */



	
	/**
	 * [tPostgresqlInput_11 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

	}
}finally{
	stmt_tPostgresqlInput_11.close();

	if(conn_tPostgresqlInput_11 != null && !conn_tPostgresqlInput_11.isClosed()) {
		
			conn_tPostgresqlInput_11.commit();
			
		
			conn_tPostgresqlInput_11.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_11_NB_LINE",nb_line_tPostgresqlInput_11);
 

ok_Hash.put("tPostgresqlInput_11", true);
end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());




/**
 * [tPostgresqlInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	

tHash_Lookup_ldf_geslachtsaanduidingen_ouder1_geslacht.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder1_geslacht"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", true);
end_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_11 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_11";

	

 



/**
 * [tPostgresqlInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht";

	

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder1_geslacht finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_geslachtsaanduidingen_ouder2_geslachtStruct implements routines.system.IPersistableComparableLookupRow<ldf_geslachtsaanduidingen_ouder2_geslachtStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String geslachtsaanduidingcode;

				public String getGeslachtsaanduidingcode () {
					return this.geslachtsaanduidingcode;
				}
				
			    public String geslachtsaanduidingomschrijving;

				public String getGeslachtsaanduidingomschrijving () {
					return this.geslachtsaanduidingomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.geslachtsaanduidingcode == null) ? 0 : this.geslachtsaanduidingcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_geslachtsaanduidingen_ouder2_geslachtStruct other = (ldf_geslachtsaanduidingen_ouder2_geslachtStruct) obj;
		
						if (this.geslachtsaanduidingcode == null) {
							if (other.geslachtsaanduidingcode != null)
								return false;
						
						} else if (!this.geslachtsaanduidingcode.equals(other.geslachtsaanduidingcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_geslachtsaanduidingen_ouder2_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            other.geslachtsaanduidingomschrijving = this.geslachtsaanduidingomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_geslachtsaanduidingen_ouder2_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.geslachtsaanduidingcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.geslachtsaanduidingcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.geslachtsaanduidingomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.geslachtsaanduidingomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("geslachtsaanduidingcode="+geslachtsaanduidingcode);
		sb.append(",geslachtsaanduidingomschrijving="+geslachtsaanduidingomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_geslachtsaanduidingen_ouder2_geslachtStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.geslachtsaanduidingcode, other.geslachtsaanduidingcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_geslachtsaanduidingen_ouder2_geslachtStruct ldf_geslachtsaanduidingen_ouder2_geslacht = new ldf_geslachtsaanduidingen_ouder2_geslachtStruct();




	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht", false);
		start_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder2_geslacht" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht().limitLog4jByte();

			   		// connection name:ldf_geslachtsaanduidingen_ouder2_geslacht
			   		// source node:tPostgresqlInput_12 - inputs:(after_tAS400Input_1) outputs:(ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht) | target node:tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht - inputs:(ldf_geslachtsaanduidingen_ouder2_geslacht) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_geslachtsaanduidingen_ouder2_geslacht = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_ouder2_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_geslachtsaanduidingen_ouder2_geslachtStruct>getLookup(matchingModeEnum_ldf_geslachtsaanduidingen_ouder2_geslacht);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht", tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_12", false);
		start_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_12";

	
		int tos_count_tPostgresqlInput_12 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_12().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_12 = 0;
		    java.sql.Connection conn_tPostgresqlInput_12 = null;
				String driverClass_tPostgresqlInput_12 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_12);
			   	String dbUser_tPostgresqlInput_12 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_12 = decryptedPassword_tPostgresqlInput_12;
		        
				
			String url_tPostgresqlInput_12 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_12 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_12,dbUser_tPostgresqlInput_12,dbPwd_tPostgresqlInput_12);
		        
				conn_tPostgresqlInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12.createStatement();

		    String dbquery_tPostgresqlInput_12 = "select\ngeslachtsaanduidingcode,\ngeslachtsaanduidingomschrijving\nfrom ibz_cip_geslachtsaanduidingen";
			

                       globalMap.put("tPostgresqlInput_12_QUERY",dbquery_tPostgresqlInput_12);

		    java.sql.ResultSet rs_tPostgresqlInput_12 = null;
		try{
		    rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12.executeQuery(dbquery_tPostgresqlInput_12);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12.getMetaData();
		    int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12.getColumnCount();

		    String tmpContent_tPostgresqlInput_12 = null;
		    
		    
		    while (rs_tPostgresqlInput_12.next()) {
		        nb_line_tPostgresqlInput_12++;
		        
							if(colQtyInRs_tPostgresqlInput_12 < 1) {
								ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingcode = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_12, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_12 < 2) {
								ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingomschrijving = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_12, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_12 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_12 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 


	tos_count_tPostgresqlInput_12++;

/**
 * [tPostgresqlInput_12 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht";

	

			//ldf_geslachtsaanduidingen_ouder2_geslacht
			//ldf_geslachtsaanduidingen_ouder2_geslacht


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder2_geslacht"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_geslachtsaanduidingen_ouder2_geslachtStruct ldf_geslachtsaanduidingen_ouder2_geslacht_HashRow = new ldf_geslachtsaanduidingen_ouder2_geslachtStruct();
		   	   	   
				
				ldf_geslachtsaanduidingen_ouder2_geslacht_HashRow.geslachtsaanduidingcode = ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingcode;
				
				ldf_geslachtsaanduidingen_ouder2_geslacht_HashRow.geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_ouder2_geslacht.geslachtsaanduidingomschrijving;
				
			tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.put(ldf_geslachtsaanduidingen_ouder2_geslacht_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht++;

/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht main ] stop
 */



	
	/**
	 * [tPostgresqlInput_12 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

	}
}finally{
	stmt_tPostgresqlInput_12.close();

	if(conn_tPostgresqlInput_12 != null && !conn_tPostgresqlInput_12.isClosed()) {
		
			conn_tPostgresqlInput_12.commit();
			
		
			conn_tPostgresqlInput_12.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_12_NB_LINE",nb_line_tPostgresqlInput_12);
 

ok_Hash.put("tPostgresqlInput_12", true);
end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());




/**
 * [tPostgresqlInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht";

	

tHash_Lookup_ldf_geslachtsaanduidingen_ouder2_geslacht.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_ouder2_geslacht"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht", true);
end_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_12 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_12";

	

 



/**
 * [tPostgresqlInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht";

	

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_ouder2_geslacht finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_persoon_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_persoon_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_persoon_akteStruct other = (ldf_gemeenten_persoon_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_persoon_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_persoon_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_persoon_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akte = new ldf_gemeenten_persoon_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_persoon_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_persoon_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_persoon_akte
			   		// source node:tPostgresqlInput_13 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_akte) | target node:tAdvancedHash_ldf_gemeenten_persoon_akte - inputs:(ldf_gemeenten_persoon_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_persoon_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_akteStruct> tHash_Lookup_ldf_gemeenten_persoon_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_persoon_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_persoon_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_persoon_akte", tHash_Lookup_ldf_gemeenten_persoon_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_13", false);
		start_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_13";

	
		int tos_count_tPostgresqlInput_13 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_13().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_13 = 0;
		    java.sql.Connection conn_tPostgresqlInput_13 = null;
				String driverClass_tPostgresqlInput_13 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_13);
			   	String dbUser_tPostgresqlInput_13 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_13 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_13 = decryptedPassword_tPostgresqlInput_13;
		        
				
			String url_tPostgresqlInput_13 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_13 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_13,dbUser_tPostgresqlInput_13,dbPwd_tPostgresqlInput_13);
		        
				conn_tPostgresqlInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_13 = conn_tPostgresqlInput_13.createStatement();

		    String dbquery_tPostgresqlInput_13 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_13_QUERY",dbquery_tPostgresqlInput_13);

		    java.sql.ResultSet rs_tPostgresqlInput_13 = null;
		try{
		    rs_tPostgresqlInput_13 = stmt_tPostgresqlInput_13.executeQuery(dbquery_tPostgresqlInput_13);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_13 = rs_tPostgresqlInput_13.getMetaData();
		    int colQtyInRs_tPostgresqlInput_13 = rsmd_tPostgresqlInput_13.getColumnCount();

		    String tmpContent_tPostgresqlInput_13 = null;
		    
		    
		    while (rs_tPostgresqlInput_13.next()) {
		        nb_line_tPostgresqlInput_13++;
		        
							if(colQtyInRs_tPostgresqlInput_13 < 1) {
								ldf_gemeenten_persoon_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_13, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_13 < 2) {
								ldf_gemeenten_persoon_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_13, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_13 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_13 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 


	tos_count_tPostgresqlInput_13++;

/**
 * [tPostgresqlInput_13 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	

			//ldf_gemeenten_persoon_akte
			//ldf_gemeenten_persoon_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_persoon_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_persoon_akteStruct ldf_gemeenten_persoon_akte_HashRow = new ldf_gemeenten_persoon_akteStruct();
		   	   	   
				
				ldf_gemeenten_persoon_akte_HashRow.gemeentecode = ldf_gemeenten_persoon_akte.gemeentecode;
				
				ldf_gemeenten_persoon_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_persoon_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_persoon_akte.put(ldf_gemeenten_persoon_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_persoon_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_13 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

	}
}finally{
	stmt_tPostgresqlInput_13.close();

	if(conn_tPostgresqlInput_13 != null && !conn_tPostgresqlInput_13.isClosed()) {
		
			conn_tPostgresqlInput_13.commit();
			
		
			conn_tPostgresqlInput_13.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_13_NB_LINE",nb_line_tPostgresqlInput_13);
 

ok_Hash.put("tPostgresqlInput_13", true);
end_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());




/**
 * [tPostgresqlInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	

tHash_Lookup_ldf_gemeenten_persoon_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_persoon_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_13 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_13";

	

 



/**
 * [tPostgresqlInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_persoon_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_persoon_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_persoon_documentStruct other = (ldf_gemeenten_persoon_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_persoon_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_persoon_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_persoon_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_document = new ldf_gemeenten_persoon_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_persoon_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_persoon_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_persoon_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_persoon_document
			   		// source node:tPostgresqlInput_14 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_persoon_document,ldf_gemeenten_persoon_document) | target node:tAdvancedHash_ldf_gemeenten_persoon_document - inputs:(ldf_gemeenten_persoon_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_persoon_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_persoon_documentStruct> tHash_Lookup_ldf_gemeenten_persoon_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_persoon_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_persoon_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_persoon_document", tHash_Lookup_ldf_gemeenten_persoon_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_14", false);
		start_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_14";

	
		int tos_count_tPostgresqlInput_14 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_14().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_14 = 0;
		    java.sql.Connection conn_tPostgresqlInput_14 = null;
				String driverClass_tPostgresqlInput_14 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_14);
			   	String dbUser_tPostgresqlInput_14 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_14 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_14 = decryptedPassword_tPostgresqlInput_14;
		        
				
			String url_tPostgresqlInput_14 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_14 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_14,dbUser_tPostgresqlInput_14,dbPwd_tPostgresqlInput_14);
		        
				conn_tPostgresqlInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_14 = conn_tPostgresqlInput_14.createStatement();

		    String dbquery_tPostgresqlInput_14 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_14_QUERY",dbquery_tPostgresqlInput_14);

		    java.sql.ResultSet rs_tPostgresqlInput_14 = null;
		try{
		    rs_tPostgresqlInput_14 = stmt_tPostgresqlInput_14.executeQuery(dbquery_tPostgresqlInput_14);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_14 = rs_tPostgresqlInput_14.getMetaData();
		    int colQtyInRs_tPostgresqlInput_14 = rsmd_tPostgresqlInput_14.getColumnCount();

		    String tmpContent_tPostgresqlInput_14 = null;
		    
		    
		    while (rs_tPostgresqlInput_14.next()) {
		        nb_line_tPostgresqlInput_14++;
		        
							if(colQtyInRs_tPostgresqlInput_14 < 1) {
								ldf_gemeenten_persoon_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_14, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_14 < 2) {
								ldf_gemeenten_persoon_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_persoon_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_14, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_14 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_14 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 


	tos_count_tPostgresqlInput_14++;

/**
 * [tPostgresqlInput_14 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	

			//ldf_gemeenten_persoon_document
			//ldf_gemeenten_persoon_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_persoon_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_persoon_documentStruct ldf_gemeenten_persoon_document_HashRow = new ldf_gemeenten_persoon_documentStruct();
		   	   	   
				
				ldf_gemeenten_persoon_document_HashRow.gemeentecode = ldf_gemeenten_persoon_document.gemeentecode;
				
				ldf_gemeenten_persoon_document_HashRow.gemeenteomschrijving = ldf_gemeenten_persoon_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_persoon_document.put(ldf_gemeenten_persoon_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_persoon_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_14 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

	}
}finally{
	stmt_tPostgresqlInput_14.close();

	if(conn_tPostgresqlInput_14 != null && !conn_tPostgresqlInput_14.isClosed()) {
		
			conn_tPostgresqlInput_14.commit();
			
		
			conn_tPostgresqlInput_14.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_14_NB_LINE",nb_line_tPostgresqlInput_14);
 

ok_Hash.put("tPostgresqlInput_14", true);
end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());




/**
 * [tPostgresqlInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	

tHash_Lookup_ldf_gemeenten_persoon_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_persoon_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_persoon_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_14 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_14";

	

 



/**
 * [tPostgresqlInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_persoon_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_persoon_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_persoon_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_ouder1_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_ouder1_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_ouder1_akteStruct other = (ldf_gemeenten_ouder1_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_ouder1_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_ouder1_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_ouder1_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akte = new ldf_gemeenten_ouder1_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_ouder1_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_ouder1_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_ouder1_akte
			   		// source node:tPostgresqlInput_15 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_akte) | target node:tAdvancedHash_ldf_gemeenten_ouder1_akte - inputs:(ldf_gemeenten_ouder1_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_ouder1_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_akteStruct> tHash_Lookup_ldf_gemeenten_ouder1_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_ouder1_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_ouder1_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_ouder1_akte", tHash_Lookup_ldf_gemeenten_ouder1_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_15", false);
		start_Hash.put("tPostgresqlInput_15", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_15";

	
		int tos_count_tPostgresqlInput_15 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_15().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_15 = 0;
		    java.sql.Connection conn_tPostgresqlInput_15 = null;
				String driverClass_tPostgresqlInput_15 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_15);
			   	String dbUser_tPostgresqlInput_15 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_15 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_15 = decryptedPassword_tPostgresqlInput_15;
		        
				
			String url_tPostgresqlInput_15 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_15 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_15,dbUser_tPostgresqlInput_15,dbPwd_tPostgresqlInput_15);
		        
				conn_tPostgresqlInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_15 = conn_tPostgresqlInput_15.createStatement();

		    String dbquery_tPostgresqlInput_15 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_15_QUERY",dbquery_tPostgresqlInput_15);

		    java.sql.ResultSet rs_tPostgresqlInput_15 = null;
		try{
		    rs_tPostgresqlInput_15 = stmt_tPostgresqlInput_15.executeQuery(dbquery_tPostgresqlInput_15);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_15 = rs_tPostgresqlInput_15.getMetaData();
		    int colQtyInRs_tPostgresqlInput_15 = rsmd_tPostgresqlInput_15.getColumnCount();

		    String tmpContent_tPostgresqlInput_15 = null;
		    
		    
		    while (rs_tPostgresqlInput_15.next()) {
		        nb_line_tPostgresqlInput_15++;
		        
							if(colQtyInRs_tPostgresqlInput_15 < 1) {
								ldf_gemeenten_ouder1_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_15, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_15 < 2) {
								ldf_gemeenten_ouder1_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_15, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_15 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_15 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_15";

	

 


	tos_count_tPostgresqlInput_15++;

/**
 * [tPostgresqlInput_15 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	

			//ldf_gemeenten_ouder1_akte
			//ldf_gemeenten_ouder1_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_ouder1_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_ouder1_akteStruct ldf_gemeenten_ouder1_akte_HashRow = new ldf_gemeenten_ouder1_akteStruct();
		   	   	   
				
				ldf_gemeenten_ouder1_akte_HashRow.gemeentecode = ldf_gemeenten_ouder1_akte.gemeentecode;
				
				ldf_gemeenten_ouder1_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_ouder1_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_ouder1_akte.put(ldf_gemeenten_ouder1_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_ouder1_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_15 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_15";

	

	}
}finally{
	stmt_tPostgresqlInput_15.close();

	if(conn_tPostgresqlInput_15 != null && !conn_tPostgresqlInput_15.isClosed()) {
		
			conn_tPostgresqlInput_15.commit();
			
		
			conn_tPostgresqlInput_15.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_15_NB_LINE",nb_line_tPostgresqlInput_15);
 

ok_Hash.put("tPostgresqlInput_15", true);
end_Hash.put("tPostgresqlInput_15", System.currentTimeMillis());




/**
 * [tPostgresqlInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	

tHash_Lookup_ldf_gemeenten_ouder1_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_ouder1_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_15 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_15";

	

 



/**
 * [tPostgresqlInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_ouder1_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_ouder1_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_ouder1_documentStruct other = (ldf_gemeenten_ouder1_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_ouder1_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_ouder1_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_ouder1_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_document = new ldf_gemeenten_ouder1_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_ouder1_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_ouder1_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder1_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_ouder1_document
			   		// source node:tPostgresqlInput_16 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder1_document) | target node:tAdvancedHash_ldf_gemeenten_ouder1_document - inputs:(ldf_gemeenten_ouder1_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_ouder1_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder1_documentStruct> tHash_Lookup_ldf_gemeenten_ouder1_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_ouder1_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_ouder1_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_ouder1_document", tHash_Lookup_ldf_gemeenten_ouder1_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_16", false);
		start_Hash.put("tPostgresqlInput_16", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_16";

	
		int tos_count_tPostgresqlInput_16 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_16().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_16 = 0;
		    java.sql.Connection conn_tPostgresqlInput_16 = null;
				String driverClass_tPostgresqlInput_16 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_16);
			   	String dbUser_tPostgresqlInput_16 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_16 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_16 = decryptedPassword_tPostgresqlInput_16;
		        
				
			String url_tPostgresqlInput_16 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_16 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_16,dbUser_tPostgresqlInput_16,dbPwd_tPostgresqlInput_16);
		        
				conn_tPostgresqlInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_16 = conn_tPostgresqlInput_16.createStatement();

		    String dbquery_tPostgresqlInput_16 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_16_QUERY",dbquery_tPostgresqlInput_16);

		    java.sql.ResultSet rs_tPostgresqlInput_16 = null;
		try{
		    rs_tPostgresqlInput_16 = stmt_tPostgresqlInput_16.executeQuery(dbquery_tPostgresqlInput_16);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_16 = rs_tPostgresqlInput_16.getMetaData();
		    int colQtyInRs_tPostgresqlInput_16 = rsmd_tPostgresqlInput_16.getColumnCount();

		    String tmpContent_tPostgresqlInput_16 = null;
		    
		    
		    while (rs_tPostgresqlInput_16.next()) {
		        nb_line_tPostgresqlInput_16++;
		        
							if(colQtyInRs_tPostgresqlInput_16 < 1) {
								ldf_gemeenten_ouder1_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_16, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_16 < 2) {
								ldf_gemeenten_ouder1_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_ouder1_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_16, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_16 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_16 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_16";

	

 


	tos_count_tPostgresqlInput_16++;

/**
 * [tPostgresqlInput_16 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	

			//ldf_gemeenten_ouder1_document
			//ldf_gemeenten_ouder1_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_ouder1_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_ouder1_documentStruct ldf_gemeenten_ouder1_document_HashRow = new ldf_gemeenten_ouder1_documentStruct();
		   	   	   
				
				ldf_gemeenten_ouder1_document_HashRow.gemeentecode = ldf_gemeenten_ouder1_document.gemeentecode;
				
				ldf_gemeenten_ouder1_document_HashRow.gemeenteomschrijving = ldf_gemeenten_ouder1_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_ouder1_document.put(ldf_gemeenten_ouder1_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_ouder1_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_16 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_16";

	

	}
}finally{
	stmt_tPostgresqlInput_16.close();

	if(conn_tPostgresqlInput_16 != null && !conn_tPostgresqlInput_16.isClosed()) {
		
			conn_tPostgresqlInput_16.commit();
			
		
			conn_tPostgresqlInput_16.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_16_NB_LINE",nb_line_tPostgresqlInput_16);
 

ok_Hash.put("tPostgresqlInput_16", true);
end_Hash.put("tPostgresqlInput_16", System.currentTimeMillis());




/**
 * [tPostgresqlInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	

tHash_Lookup_ldf_gemeenten_ouder1_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_ouder1_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_ouder1_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_16 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_16";

	

 



/**
 * [tPostgresqlInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder1_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder1_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder1_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_ouder2_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_ouder2_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_ouder2_akteStruct other = (ldf_gemeenten_ouder2_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_ouder2_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_ouder2_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_ouder2_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_ouder2_akteStruct ldf_gemeenten_ouder2_akte = new ldf_gemeenten_ouder2_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_ouder2_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_ouder2_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder2_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder2_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_ouder2_akte
			   		// source node:tPostgresqlInput_17 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_akte) | target node:tAdvancedHash_ldf_gemeenten_ouder2_akte - inputs:(ldf_gemeenten_ouder2_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_ouder2_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_akteStruct> tHash_Lookup_ldf_gemeenten_ouder2_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_ouder2_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_ouder2_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_ouder2_akte", tHash_Lookup_ldf_gemeenten_ouder2_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_17", false);
		start_Hash.put("tPostgresqlInput_17", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_17";

	
		int tos_count_tPostgresqlInput_17 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_17().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_17 = 0;
		    java.sql.Connection conn_tPostgresqlInput_17 = null;
				String driverClass_tPostgresqlInput_17 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_17);
			   	String dbUser_tPostgresqlInput_17 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_17 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_17 = decryptedPassword_tPostgresqlInput_17;
		        
				
			String url_tPostgresqlInput_17 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_17 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_17,dbUser_tPostgresqlInput_17,dbPwd_tPostgresqlInput_17);
		        
				conn_tPostgresqlInput_17.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_17 = conn_tPostgresqlInput_17.createStatement();

		    String dbquery_tPostgresqlInput_17 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_17_QUERY",dbquery_tPostgresqlInput_17);

		    java.sql.ResultSet rs_tPostgresqlInput_17 = null;
		try{
		    rs_tPostgresqlInput_17 = stmt_tPostgresqlInput_17.executeQuery(dbquery_tPostgresqlInput_17);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_17 = rs_tPostgresqlInput_17.getMetaData();
		    int colQtyInRs_tPostgresqlInput_17 = rsmd_tPostgresqlInput_17.getColumnCount();

		    String tmpContent_tPostgresqlInput_17 = null;
		    
		    
		    while (rs_tPostgresqlInput_17.next()) {
		        nb_line_tPostgresqlInput_17++;
		        
							if(colQtyInRs_tPostgresqlInput_17 < 1) {
								ldf_gemeenten_ouder2_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_ouder2_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_17, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_17 < 2) {
								ldf_gemeenten_ouder2_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_ouder2_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_17, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_17 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_17 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_17";

	

 


	tos_count_tPostgresqlInput_17++;

/**
 * [tPostgresqlInput_17 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_akte";

	

			//ldf_gemeenten_ouder2_akte
			//ldf_gemeenten_ouder2_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_ouder2_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_ouder2_akteStruct ldf_gemeenten_ouder2_akte_HashRow = new ldf_gemeenten_ouder2_akteStruct();
		   	   	   
				
				ldf_gemeenten_ouder2_akte_HashRow.gemeentecode = ldf_gemeenten_ouder2_akte.gemeentecode;
				
				ldf_gemeenten_ouder2_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_ouder2_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_ouder2_akte.put(ldf_gemeenten_ouder2_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_ouder2_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_17 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_17";

	

	}
}finally{
	stmt_tPostgresqlInput_17.close();

	if(conn_tPostgresqlInput_17 != null && !conn_tPostgresqlInput_17.isClosed()) {
		
			conn_tPostgresqlInput_17.commit();
			
		
			conn_tPostgresqlInput_17.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_17_NB_LINE",nb_line_tPostgresqlInput_17);
 

ok_Hash.put("tPostgresqlInput_17", true);
end_Hash.put("tPostgresqlInput_17", System.currentTimeMillis());




/**
 * [tPostgresqlInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_akte";

	

tHash_Lookup_ldf_gemeenten_ouder2_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_ouder2_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_17 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_17";

	

 



/**
 * [tPostgresqlInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_ouder2_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_ouder2_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_ouder2_documentStruct other = (ldf_gemeenten_ouder2_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_ouder2_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_ouder2_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_ouder2_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_ouder2_documentStruct ldf_gemeenten_ouder2_document = new ldf_gemeenten_ouder2_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_ouder2_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_ouder2_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder2_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_ouder2_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_ouder2_document
			   		// source node:tPostgresqlInput_18 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_ouder2_document,ldf_gemeenten_ouder2_document) | target node:tAdvancedHash_ldf_gemeenten_ouder2_document - inputs:(ldf_gemeenten_ouder2_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_ouder2_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_ouder2_documentStruct> tHash_Lookup_ldf_gemeenten_ouder2_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_ouder2_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_ouder2_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_ouder2_document", tHash_Lookup_ldf_gemeenten_ouder2_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_18", false);
		start_Hash.put("tPostgresqlInput_18", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_18";

	
		int tos_count_tPostgresqlInput_18 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_18{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_18().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_18 = 0;
		    java.sql.Connection conn_tPostgresqlInput_18 = null;
				String driverClass_tPostgresqlInput_18 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_18);
			   	String dbUser_tPostgresqlInput_18 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_18 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_18 = decryptedPassword_tPostgresqlInput_18;
		        
				
			String url_tPostgresqlInput_18 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_18 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_18,dbUser_tPostgresqlInput_18,dbPwd_tPostgresqlInput_18);
		        
				conn_tPostgresqlInput_18.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_18 = conn_tPostgresqlInput_18.createStatement();

		    String dbquery_tPostgresqlInput_18 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_18_QUERY",dbquery_tPostgresqlInput_18);

		    java.sql.ResultSet rs_tPostgresqlInput_18 = null;
		try{
		    rs_tPostgresqlInput_18 = stmt_tPostgresqlInput_18.executeQuery(dbquery_tPostgresqlInput_18);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_18 = rs_tPostgresqlInput_18.getMetaData();
		    int colQtyInRs_tPostgresqlInput_18 = rsmd_tPostgresqlInput_18.getColumnCount();

		    String tmpContent_tPostgresqlInput_18 = null;
		    
		    
		    while (rs_tPostgresqlInput_18.next()) {
		        nb_line_tPostgresqlInput_18++;
		        
							if(colQtyInRs_tPostgresqlInput_18 < 1) {
								ldf_gemeenten_ouder2_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_ouder2_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_18, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_18 < 2) {
								ldf_gemeenten_ouder2_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_ouder2_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_18, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_18 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_18 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_18";

	

 


	tos_count_tPostgresqlInput_18++;

/**
 * [tPostgresqlInput_18 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_document";

	

			//ldf_gemeenten_ouder2_document
			//ldf_gemeenten_ouder2_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_ouder2_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_ouder2_documentStruct ldf_gemeenten_ouder2_document_HashRow = new ldf_gemeenten_ouder2_documentStruct();
		   	   	   
				
				ldf_gemeenten_ouder2_document_HashRow.gemeentecode = ldf_gemeenten_ouder2_document.gemeentecode;
				
				ldf_gemeenten_ouder2_document_HashRow.gemeenteomschrijving = ldf_gemeenten_ouder2_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_ouder2_document.put(ldf_gemeenten_ouder2_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_ouder2_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_18 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_18";

	

	}
}finally{
	stmt_tPostgresqlInput_18.close();

	if(conn_tPostgresqlInput_18 != null && !conn_tPostgresqlInput_18.isClosed()) {
		
			conn_tPostgresqlInput_18.commit();
			
		
			conn_tPostgresqlInput_18.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_18_NB_LINE",nb_line_tPostgresqlInput_18);
 

ok_Hash.put("tPostgresqlInput_18", true);
end_Hash.put("tPostgresqlInput_18", System.currentTimeMillis());




/**
 * [tPostgresqlInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_document";

	

tHash_Lookup_ldf_gemeenten_ouder2_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_ouder2_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_ouder2_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_18 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_18";

	

 



/**
 * [tPostgresqlInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_ouder2_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_ouder2_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_ouder2_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_inschrijving_PKStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_inschrijving_PKStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_inschrijving_PKStruct other = (ldf_gemeenten_inschrijving_PKStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_inschrijving_PKStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_inschrijving_PKStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_inschrijving_PKStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_inschrijving_PKStruct ldf_gemeenten_inschrijving_PK = new ldf_gemeenten_inschrijving_PKStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_inschrijving_PK", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_inschrijving_PK", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_inschrijving_PK";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_inschrijving_PK" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_inschrijving_PK = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_inschrijving_PK{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_inschrijving_PK().limitLog4jByte();

			   		// connection name:ldf_gemeenten_inschrijving_PK
			   		// source node:tPostgresqlInput_19 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_inschrijving_PK,ldf_gemeenten_inschrijving_PK) | target node:tAdvancedHash_ldf_gemeenten_inschrijving_PK - inputs:(ldf_gemeenten_inschrijving_PK) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_inschrijving_PK = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_inschrijving_PKStruct> tHash_Lookup_ldf_gemeenten_inschrijving_PK =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_inschrijving_PKStruct>getLookup(matchingModeEnum_ldf_gemeenten_inschrijving_PK);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_inschrijving_PK", tHash_Lookup_ldf_gemeenten_inschrijving_PK);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_19", false);
		start_Hash.put("tPostgresqlInput_19", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_19";

	
		int tos_count_tPostgresqlInput_19 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_19{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_19().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_19 = 0;
		    java.sql.Connection conn_tPostgresqlInput_19 = null;
				String driverClass_tPostgresqlInput_19 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_19);
			   	String dbUser_tPostgresqlInput_19 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_19 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_19 = decryptedPassword_tPostgresqlInput_19;
		        
				
			String url_tPostgresqlInput_19 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_19 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_19,dbUser_tPostgresqlInput_19,dbPwd_tPostgresqlInput_19);
		        
				conn_tPostgresqlInput_19.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_19 = conn_tPostgresqlInput_19.createStatement();

		    String dbquery_tPostgresqlInput_19 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_19_QUERY",dbquery_tPostgresqlInput_19);

		    java.sql.ResultSet rs_tPostgresqlInput_19 = null;
		try{
		    rs_tPostgresqlInput_19 = stmt_tPostgresqlInput_19.executeQuery(dbquery_tPostgresqlInput_19);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_19 = rs_tPostgresqlInput_19.getMetaData();
		    int colQtyInRs_tPostgresqlInput_19 = rsmd_tPostgresqlInput_19.getColumnCount();

		    String tmpContent_tPostgresqlInput_19 = null;
		    
		    
		    while (rs_tPostgresqlInput_19.next()) {
		        nb_line_tPostgresqlInput_19++;
		        
							if(colQtyInRs_tPostgresqlInput_19 < 1) {
								ldf_gemeenten_inschrijving_PK.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_inschrijving_PK.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_19, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_19 < 2) {
								ldf_gemeenten_inschrijving_PK.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_inschrijving_PK.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_19, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_19 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_19 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_19";

	

 


	tos_count_tPostgresqlInput_19++;

/**
 * [tPostgresqlInput_19 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_inschrijving_PK";

	

			//ldf_gemeenten_inschrijving_PK
			//ldf_gemeenten_inschrijving_PK


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_inschrijving_PK"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_inschrijving_PKStruct ldf_gemeenten_inschrijving_PK_HashRow = new ldf_gemeenten_inschrijving_PKStruct();
		   	   	   
				
				ldf_gemeenten_inschrijving_PK_HashRow.gemeentecode = ldf_gemeenten_inschrijving_PK.gemeentecode;
				
				ldf_gemeenten_inschrijving_PK_HashRow.gemeenteomschrijving = ldf_gemeenten_inschrijving_PK.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_inschrijving_PK.put(ldf_gemeenten_inschrijving_PK_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_inschrijving_PK++;

/**
 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK main ] stop
 */



	
	/**
	 * [tPostgresqlInput_19 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_19";

	

	}
}finally{
	stmt_tPostgresqlInput_19.close();

	if(conn_tPostgresqlInput_19 != null && !conn_tPostgresqlInput_19.isClosed()) {
		
			conn_tPostgresqlInput_19.commit();
			
		
			conn_tPostgresqlInput_19.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_19_NB_LINE",nb_line_tPostgresqlInput_19);
 

ok_Hash.put("tPostgresqlInput_19", true);
end_Hash.put("tPostgresqlInput_19", System.currentTimeMillis());




/**
 * [tPostgresqlInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_inschrijving_PK";

	

tHash_Lookup_ldf_gemeenten_inschrijving_PK.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_inschrijving_PK"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_inschrijving_PK", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_inschrijving_PK", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_19 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_19";

	

 



/**
 * [tPostgresqlInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_inschrijving_PK";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_inschrijving_PK finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_verblijfplaats_gemeenteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_verblijfplaats_gemeenteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_verblijfplaats_gemeenteStruct other = (ldf_gemeenten_verblijfplaats_gemeenteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_verblijfplaats_gemeenteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_verblijfplaats_gemeenteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_verblijfplaats_gemeenteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeente = new ldf_gemeenten_verblijfplaats_gemeenteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_verblijfplaats_gemeente" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente().limitLog4jByte();

			   		// connection name:ldf_gemeenten_verblijfplaats_gemeente
			   		// source node:tPostgresqlInput_20 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_verblijfplaats_gemeente) | target node:tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente - inputs:(ldf_gemeenten_verblijfplaats_gemeente) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_verblijfplaats_gemeente = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct> tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_verblijfplaats_gemeenteStruct>getLookup(matchingModeEnum_ldf_gemeenten_verblijfplaats_gemeente);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente", tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_20", false);
		start_Hash.put("tPostgresqlInput_20", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_20";

	
		int tos_count_tPostgresqlInput_20 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_20{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_20().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_20 = 0;
		    java.sql.Connection conn_tPostgresqlInput_20 = null;
				String driverClass_tPostgresqlInput_20 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_20);
			   	String dbUser_tPostgresqlInput_20 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_20 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_20 = decryptedPassword_tPostgresqlInput_20;
		        
				
			String url_tPostgresqlInput_20 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_20 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_20,dbUser_tPostgresqlInput_20,dbPwd_tPostgresqlInput_20);
		        
				conn_tPostgresqlInput_20.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_20 = conn_tPostgresqlInput_20.createStatement();

		    String dbquery_tPostgresqlInput_20 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_20_QUERY",dbquery_tPostgresqlInput_20);

		    java.sql.ResultSet rs_tPostgresqlInput_20 = null;
		try{
		    rs_tPostgresqlInput_20 = stmt_tPostgresqlInput_20.executeQuery(dbquery_tPostgresqlInput_20);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_20 = rs_tPostgresqlInput_20.getMetaData();
		    int colQtyInRs_tPostgresqlInput_20 = rsmd_tPostgresqlInput_20.getColumnCount();

		    String tmpContent_tPostgresqlInput_20 = null;
		    
		    
		    while (rs_tPostgresqlInput_20.next()) {
		        nb_line_tPostgresqlInput_20++;
		        
							if(colQtyInRs_tPostgresqlInput_20 < 1) {
								ldf_gemeenten_verblijfplaats_gemeente.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_verblijfplaats_gemeente.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_20, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_20 < 2) {
								ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_20, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_20 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_20 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_20";

	

 


	tos_count_tPostgresqlInput_20++;

/**
 * [tPostgresqlInput_20 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	

			//ldf_gemeenten_verblijfplaats_gemeente
			//ldf_gemeenten_verblijfplaats_gemeente


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_verblijfplaats_gemeente"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeente_HashRow = new ldf_gemeenten_verblijfplaats_gemeenteStruct();
		   	   	   
				
				ldf_gemeenten_verblijfplaats_gemeente_HashRow.gemeentecode = ldf_gemeenten_verblijfplaats_gemeente.gemeentecode;
				
				ldf_gemeenten_verblijfplaats_gemeente_HashRow.gemeenteomschrijving = ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.put(ldf_gemeenten_verblijfplaats_gemeente_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente++;

/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente main ] stop
 */



	
	/**
	 * [tPostgresqlInput_20 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_20";

	

	}
}finally{
	stmt_tPostgresqlInput_20.close();

	if(conn_tPostgresqlInput_20 != null && !conn_tPostgresqlInput_20.isClosed()) {
		
			conn_tPostgresqlInput_20.commit();
			
		
			conn_tPostgresqlInput_20.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_20_NB_LINE",nb_line_tPostgresqlInput_20);
 

ok_Hash.put("tPostgresqlInput_20", true);
end_Hash.put("tPostgresqlInput_20", System.currentTimeMillis());




/**
 * [tPostgresqlInput_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	

tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_verblijfplaats_gemeente"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_20 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_20";

	

 



/**
 * [tPostgresqlInput_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_gezagsverhouding_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_gezagsverhouding_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_gezagsverhouding_documentStruct other = (ldf_gemeenten_gezagsverhouding_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_gezagsverhouding_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_gezagsverhouding_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_gezagsverhouding_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_gezagsverhouding_documentStruct ldf_gemeenten_gezagsverhouding_document = new ldf_gemeenten_gezagsverhouding_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_gezagsverhouding_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_gezagsverhouding_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_gezagsverhouding_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_gezagsverhouding_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_gezagsverhouding_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_gezagsverhouding_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_gezagsverhouding_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_gezagsverhouding_document
			   		// source node:tPostgresqlInput_21 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_gezagsverhouding_document) | target node:tAdvancedHash_ldf_gemeenten_gezagsverhouding_document - inputs:(ldf_gemeenten_gezagsverhouding_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_gezagsverhouding_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_gezagsverhouding_documentStruct> tHash_Lookup_ldf_gemeenten_gezagsverhouding_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_gezagsverhouding_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_gezagsverhouding_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_gezagsverhouding_document", tHash_Lookup_ldf_gemeenten_gezagsverhouding_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_21", false);
		start_Hash.put("tPostgresqlInput_21", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_21";

	
		int tos_count_tPostgresqlInput_21 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_21{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_21().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_21 = 0;
		    java.sql.Connection conn_tPostgresqlInput_21 = null;
				String driverClass_tPostgresqlInput_21 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_21);
			   	String dbUser_tPostgresqlInput_21 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_21 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_21 = decryptedPassword_tPostgresqlInput_21;
		        
				
			String url_tPostgresqlInput_21 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_21 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_21,dbUser_tPostgresqlInput_21,dbPwd_tPostgresqlInput_21);
		        
				conn_tPostgresqlInput_21.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_21 = conn_tPostgresqlInput_21.createStatement();

		    String dbquery_tPostgresqlInput_21 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_21_QUERY",dbquery_tPostgresqlInput_21);

		    java.sql.ResultSet rs_tPostgresqlInput_21 = null;
		try{
		    rs_tPostgresqlInput_21 = stmt_tPostgresqlInput_21.executeQuery(dbquery_tPostgresqlInput_21);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_21 = rs_tPostgresqlInput_21.getMetaData();
		    int colQtyInRs_tPostgresqlInput_21 = rsmd_tPostgresqlInput_21.getColumnCount();

		    String tmpContent_tPostgresqlInput_21 = null;
		    
		    
		    while (rs_tPostgresqlInput_21.next()) {
		        nb_line_tPostgresqlInput_21++;
		        
							if(colQtyInRs_tPostgresqlInput_21 < 1) {
								ldf_gemeenten_gezagsverhouding_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_gezagsverhouding_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_21, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_21 < 2) {
								ldf_gemeenten_gezagsverhouding_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_gezagsverhouding_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_21, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_21 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_21 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_21";

	

 


	tos_count_tPostgresqlInput_21++;

/**
 * [tPostgresqlInput_21 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_gezagsverhouding_document";

	

			//ldf_gemeenten_gezagsverhouding_document
			//ldf_gemeenten_gezagsverhouding_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_gezagsverhouding_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_gezagsverhouding_documentStruct ldf_gemeenten_gezagsverhouding_document_HashRow = new ldf_gemeenten_gezagsverhouding_documentStruct();
		   	   	   
				
				ldf_gemeenten_gezagsverhouding_document_HashRow.gemeentecode = ldf_gemeenten_gezagsverhouding_document.gemeentecode;
				
				ldf_gemeenten_gezagsverhouding_document_HashRow.gemeenteomschrijving = ldf_gemeenten_gezagsverhouding_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.put(ldf_gemeenten_gezagsverhouding_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_gezagsverhouding_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_21 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_21";

	

	}
}finally{
	stmt_tPostgresqlInput_21.close();

	if(conn_tPostgresqlInput_21 != null && !conn_tPostgresqlInput_21.isClosed()) {
		
			conn_tPostgresqlInput_21.commit();
			
		
			conn_tPostgresqlInput_21.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_21_NB_LINE",nb_line_tPostgresqlInput_21);
 

ok_Hash.put("tPostgresqlInput_21", true);
end_Hash.put("tPostgresqlInput_21", System.currentTimeMillis());




/**
 * [tPostgresqlInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_gezagsverhouding_document";

	

tHash_Lookup_ldf_gemeenten_gezagsverhouding_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_gezagsverhouding_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_gezagsverhouding_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_gezagsverhouding_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_21 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_21";

	

 



/**
 * [tPostgresqlInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_gezagsverhouding_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_gezagsverhouding_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_kiesrecht_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_kiesrecht_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_kiesrecht_documentStruct other = (ldf_gemeenten_kiesrecht_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_kiesrecht_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_kiesrecht_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_kiesrecht_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_kiesrecht_documentStruct ldf_gemeenten_kiesrecht_document = new ldf_gemeenten_kiesrecht_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_kiesrecht_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_kiesrecht_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kiesrecht_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_kiesrecht_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_kiesrecht_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_kiesrecht_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_kiesrecht_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_kiesrecht_document
			   		// source node:tPostgresqlInput_22 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_kiesrecht_document,ldf_gemeenten_kiesrecht_document) | target node:tAdvancedHash_ldf_gemeenten_kiesrecht_document - inputs:(ldf_gemeenten_kiesrecht_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_kiesrecht_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_kiesrecht_documentStruct> tHash_Lookup_ldf_gemeenten_kiesrecht_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_kiesrecht_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_kiesrecht_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_kiesrecht_document", tHash_Lookup_ldf_gemeenten_kiesrecht_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_22", false);
		start_Hash.put("tPostgresqlInput_22", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_22";

	
		int tos_count_tPostgresqlInput_22 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_22{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_22().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_22 = 0;
		    java.sql.Connection conn_tPostgresqlInput_22 = null;
				String driverClass_tPostgresqlInput_22 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_22);
			   	String dbUser_tPostgresqlInput_22 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_22 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_22 = decryptedPassword_tPostgresqlInput_22;
		        
				
			String url_tPostgresqlInput_22 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_22 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_22,dbUser_tPostgresqlInput_22,dbPwd_tPostgresqlInput_22);
		        
				conn_tPostgresqlInput_22.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_22 = conn_tPostgresqlInput_22.createStatement();

		    String dbquery_tPostgresqlInput_22 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_22_QUERY",dbquery_tPostgresqlInput_22);

		    java.sql.ResultSet rs_tPostgresqlInput_22 = null;
		try{
		    rs_tPostgresqlInput_22 = stmt_tPostgresqlInput_22.executeQuery(dbquery_tPostgresqlInput_22);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_22 = rs_tPostgresqlInput_22.getMetaData();
		    int colQtyInRs_tPostgresqlInput_22 = rsmd_tPostgresqlInput_22.getColumnCount();

		    String tmpContent_tPostgresqlInput_22 = null;
		    
		    
		    while (rs_tPostgresqlInput_22.next()) {
		        nb_line_tPostgresqlInput_22++;
		        
							if(colQtyInRs_tPostgresqlInput_22 < 1) {
								ldf_gemeenten_kiesrecht_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_kiesrecht_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_22, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_22 < 2) {
								ldf_gemeenten_kiesrecht_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_kiesrecht_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_22, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_22 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_22 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_22";

	

 


	tos_count_tPostgresqlInput_22++;

/**
 * [tPostgresqlInput_22 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kiesrecht_document";

	

			//ldf_gemeenten_kiesrecht_document
			//ldf_gemeenten_kiesrecht_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_kiesrecht_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_kiesrecht_documentStruct ldf_gemeenten_kiesrecht_document_HashRow = new ldf_gemeenten_kiesrecht_documentStruct();
		   	   	   
				
				ldf_gemeenten_kiesrecht_document_HashRow.gemeentecode = ldf_gemeenten_kiesrecht_document.gemeentecode;
				
				ldf_gemeenten_kiesrecht_document_HashRow.gemeenteomschrijving = ldf_gemeenten_kiesrecht_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_kiesrecht_document.put(ldf_gemeenten_kiesrecht_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_kiesrecht_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_22 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_22";

	

	}
}finally{
	stmt_tPostgresqlInput_22.close();

	if(conn_tPostgresqlInput_22 != null && !conn_tPostgresqlInput_22.isClosed()) {
		
			conn_tPostgresqlInput_22.commit();
			
		
			conn_tPostgresqlInput_22.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_22_NB_LINE",nb_line_tPostgresqlInput_22);
 

ok_Hash.put("tPostgresqlInput_22", true);
end_Hash.put("tPostgresqlInput_22", System.currentTimeMillis());




/**
 * [tPostgresqlInput_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kiesrecht_document";

	

tHash_Lookup_ldf_gemeenten_kiesrecht_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_kiesrecht_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_kiesrecht_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_kiesrecht_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_22 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_22";

	

 



/**
 * [tPostgresqlInput_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_kiesrecht_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_kiesrecht_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_verwijzing_gemeenteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_verwijzing_gemeenteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_verwijzing_gemeenteStruct other = (ldf_gemeenten_verwijzing_gemeenteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_verwijzing_gemeenteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_verwijzing_gemeenteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_verwijzing_gemeenteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_verwijzing_gemeenteStruct ldf_gemeenten_verwijzing_gemeente = new ldf_gemeenten_verwijzing_gemeenteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_verwijzing_gemeente", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_verwijzing_gemeente", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verwijzing_gemeente";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_verwijzing_gemeente" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_verwijzing_gemeente = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_verwijzing_gemeente{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_verwijzing_gemeente().limitLog4jByte();

			   		// connection name:ldf_gemeenten_verwijzing_gemeente
			   		// source node:tPostgresqlInput_23 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_verwijzing_gemeente,ldf_gemeenten_verwijzing_gemeente) | target node:tAdvancedHash_ldf_gemeenten_verwijzing_gemeente - inputs:(ldf_gemeenten_verwijzing_gemeente) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_verwijzing_gemeente = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verwijzing_gemeenteStruct> tHash_Lookup_ldf_gemeenten_verwijzing_gemeente =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_verwijzing_gemeenteStruct>getLookup(matchingModeEnum_ldf_gemeenten_verwijzing_gemeente);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_verwijzing_gemeente", tHash_Lookup_ldf_gemeenten_verwijzing_gemeente);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_23", false);
		start_Hash.put("tPostgresqlInput_23", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_23";

	
		int tos_count_tPostgresqlInput_23 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_23{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_23().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_23 = 0;
		    java.sql.Connection conn_tPostgresqlInput_23 = null;
				String driverClass_tPostgresqlInput_23 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_23);
			   	String dbUser_tPostgresqlInput_23 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_23 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_23 = decryptedPassword_tPostgresqlInput_23;
		        
				
			String url_tPostgresqlInput_23 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_23 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_23,dbUser_tPostgresqlInput_23,dbPwd_tPostgresqlInput_23);
		        
				conn_tPostgresqlInput_23.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_23 = conn_tPostgresqlInput_23.createStatement();

		    String dbquery_tPostgresqlInput_23 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_23_QUERY",dbquery_tPostgresqlInput_23);

		    java.sql.ResultSet rs_tPostgresqlInput_23 = null;
		try{
		    rs_tPostgresqlInput_23 = stmt_tPostgresqlInput_23.executeQuery(dbquery_tPostgresqlInput_23);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_23 = rs_tPostgresqlInput_23.getMetaData();
		    int colQtyInRs_tPostgresqlInput_23 = rsmd_tPostgresqlInput_23.getColumnCount();

		    String tmpContent_tPostgresqlInput_23 = null;
		    
		    
		    while (rs_tPostgresqlInput_23.next()) {
		        nb_line_tPostgresqlInput_23++;
		        
							if(colQtyInRs_tPostgresqlInput_23 < 1) {
								ldf_gemeenten_verwijzing_gemeente.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_verwijzing_gemeente.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_23, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_23 < 2) {
								ldf_gemeenten_verwijzing_gemeente.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_verwijzing_gemeente.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_23, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_23 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_23 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_23";

	

 


	tos_count_tPostgresqlInput_23++;

/**
 * [tPostgresqlInput_23 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verwijzing_gemeente";

	

			//ldf_gemeenten_verwijzing_gemeente
			//ldf_gemeenten_verwijzing_gemeente


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_verwijzing_gemeente"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_verwijzing_gemeenteStruct ldf_gemeenten_verwijzing_gemeente_HashRow = new ldf_gemeenten_verwijzing_gemeenteStruct();
		   	   	   
				
				ldf_gemeenten_verwijzing_gemeente_HashRow.gemeentecode = ldf_gemeenten_verwijzing_gemeente.gemeentecode;
				
				ldf_gemeenten_verwijzing_gemeente_HashRow.gemeenteomschrijving = ldf_gemeenten_verwijzing_gemeente.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.put(ldf_gemeenten_verwijzing_gemeente_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_verwijzing_gemeente++;

/**
 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente main ] stop
 */



	
	/**
	 * [tPostgresqlInput_23 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_23";

	

	}
}finally{
	stmt_tPostgresqlInput_23.close();

	if(conn_tPostgresqlInput_23 != null && !conn_tPostgresqlInput_23.isClosed()) {
		
			conn_tPostgresqlInput_23.commit();
			
		
			conn_tPostgresqlInput_23.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_23_NB_LINE",nb_line_tPostgresqlInput_23);
 

ok_Hash.put("tPostgresqlInput_23", true);
end_Hash.put("tPostgresqlInput_23", System.currentTimeMillis());




/**
 * [tPostgresqlInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verwijzing_gemeente";

	

tHash_Lookup_ldf_gemeenten_verwijzing_gemeente.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_verwijzing_gemeente"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_verwijzing_gemeente", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_verwijzing_gemeente", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_23 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_23";

	

 



/**
 * [tPostgresqlInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verwijzing_gemeente";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_verwijzing_gemeente finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_verblijftitels_verblijftitelStruct implements routines.system.IPersistableComparableLookupRow<ldf_verblijftitels_verblijftitelStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String verblijfstitelcode;

				public String getVerblijfstitelcode () {
					return this.verblijfstitelcode;
				}
				
			    public String verblijfstitelomschrijving;

				public String getVerblijfstitelomschrijving () {
					return this.verblijfstitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.verblijfstitelcode == null) ? 0 : this.verblijfstitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_verblijftitels_verblijftitelStruct other = (ldf_verblijftitels_verblijftitelStruct) obj;
		
						if (this.verblijfstitelcode == null) {
							if (other.verblijfstitelcode != null)
								return false;
						
						} else if (!this.verblijfstitelcode.equals(other.verblijfstitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_verblijftitels_verblijftitelStruct other) {

		other.verblijfstitelcode = this.verblijfstitelcode;
	            other.verblijfstitelomschrijving = this.verblijfstitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_verblijftitels_verblijftitelStruct other) {

		other.verblijfstitelcode = this.verblijfstitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.verblijfstitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.verblijfstitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.verblijfstitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.verblijfstitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("verblijfstitelcode="+verblijfstitelcode);
		sb.append(",verblijfstitelomschrijving="+verblijfstitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_verblijftitels_verblijftitelStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.verblijfstitelcode, other.verblijfstitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_verblijftitels_verblijftitelStruct ldf_verblijftitels_verblijftitel = new ldf_verblijftitels_verblijftitelStruct();




	
	/**
	 * [tAdvancedHash_ldf_verblijftitels_verblijftitel begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_verblijftitels_verblijftitel", false);
		start_Hash.put("tAdvancedHash_ldf_verblijftitels_verblijftitel", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_verblijftitels_verblijftitel";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_verblijftitels_verblijftitel" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_verblijftitels_verblijftitel = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_verblijftitels_verblijftitel{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_verblijftitels_verblijftitel().limitLog4jByte();

			   		// connection name:ldf_verblijftitels_verblijftitel
			   		// source node:tPostgresqlInput_24 - inputs:(after_tAS400Input_1) outputs:(ldf_verblijftitels_verblijftitel,ldf_verblijftitels_verblijftitel) | target node:tAdvancedHash_ldf_verblijftitels_verblijftitel - inputs:(ldf_verblijftitels_verblijftitel) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_verblijftitels_verblijftitel = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_verblijftitels_verblijftitelStruct> tHash_Lookup_ldf_verblijftitels_verblijftitel =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_verblijftitels_verblijftitelStruct>getLookup(matchingModeEnum_ldf_verblijftitels_verblijftitel);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_verblijftitels_verblijftitel", tHash_Lookup_ldf_verblijftitels_verblijftitel);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_verblijftitels_verblijftitel begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_24", false);
		start_Hash.put("tPostgresqlInput_24", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_24";

	
		int tos_count_tPostgresqlInput_24 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_24{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_24().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_24 = 0;
		    java.sql.Connection conn_tPostgresqlInput_24 = null;
				String driverClass_tPostgresqlInput_24 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_24);
			   	String dbUser_tPostgresqlInput_24 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_24 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_24 = decryptedPassword_tPostgresqlInput_24;
		        
				
			String url_tPostgresqlInput_24 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_24 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_24,dbUser_tPostgresqlInput_24,dbPwd_tPostgresqlInput_24);
		        
				conn_tPostgresqlInput_24.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_24 = conn_tPostgresqlInput_24.createStatement();

		    String dbquery_tPostgresqlInput_24 = "select\nverblijfstitelcode,\nverblijfstitelomschrijving\nfrom ibz_cip_verblijfstitels";
			

                       globalMap.put("tPostgresqlInput_24_QUERY",dbquery_tPostgresqlInput_24);

		    java.sql.ResultSet rs_tPostgresqlInput_24 = null;
		try{
		    rs_tPostgresqlInput_24 = stmt_tPostgresqlInput_24.executeQuery(dbquery_tPostgresqlInput_24);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_24 = rs_tPostgresqlInput_24.getMetaData();
		    int colQtyInRs_tPostgresqlInput_24 = rsmd_tPostgresqlInput_24.getColumnCount();

		    String tmpContent_tPostgresqlInput_24 = null;
		    
		    
		    while (rs_tPostgresqlInput_24.next()) {
		        nb_line_tPostgresqlInput_24++;
		        
							if(colQtyInRs_tPostgresqlInput_24 < 1) {
								ldf_verblijftitels_verblijftitel.verblijfstitelcode = null;
							} else {
	                         		
        	ldf_verblijftitels_verblijftitel.verblijfstitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_24, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_24 < 2) {
								ldf_verblijftitels_verblijftitel.verblijfstitelomschrijving = null;
							} else {
	                         		
        	ldf_verblijftitels_verblijftitel.verblijfstitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_24, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_24 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_24 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_24";

	

 


	tos_count_tPostgresqlInput_24++;

/**
 * [tPostgresqlInput_24 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_verblijftitels_verblijftitel main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_verblijftitels_verblijftitel";

	

			//ldf_verblijftitels_verblijftitel
			//ldf_verblijftitels_verblijftitel


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_verblijftitels_verblijftitel"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_verblijftitels_verblijftitelStruct ldf_verblijftitels_verblijftitel_HashRow = new ldf_verblijftitels_verblijftitelStruct();
		   	   	   
				
				ldf_verblijftitels_verblijftitel_HashRow.verblijfstitelcode = ldf_verblijftitels_verblijftitel.verblijfstitelcode;
				
				ldf_verblijftitels_verblijftitel_HashRow.verblijfstitelomschrijving = ldf_verblijftitels_verblijftitel.verblijfstitelomschrijving;
				
			tHash_Lookup_ldf_verblijftitels_verblijftitel.put(ldf_verblijftitels_verblijftitel_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_verblijftitels_verblijftitel++;

/**
 * [tAdvancedHash_ldf_verblijftitels_verblijftitel main ] stop
 */



	
	/**
	 * [tPostgresqlInput_24 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_24";

	

	}
}finally{
	stmt_tPostgresqlInput_24.close();

	if(conn_tPostgresqlInput_24 != null && !conn_tPostgresqlInput_24.isClosed()) {
		
			conn_tPostgresqlInput_24.commit();
			
		
			conn_tPostgresqlInput_24.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_24_NB_LINE",nb_line_tPostgresqlInput_24);
 

ok_Hash.put("tPostgresqlInput_24", true);
end_Hash.put("tPostgresqlInput_24", System.currentTimeMillis());




/**
 * [tPostgresqlInput_24 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_verblijftitels_verblijftitel end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_verblijftitels_verblijftitel";

	

tHash_Lookup_ldf_verblijftitels_verblijftitel.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_verblijftitels_verblijftitel"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_verblijftitels_verblijftitel", true);
end_Hash.put("tAdvancedHash_ldf_verblijftitels_verblijftitel", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_verblijftitels_verblijftitel end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_24 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_24";

	

 



/**
 * [tPostgresqlInput_24 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_verblijftitels_verblijftitel finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_verblijftitels_verblijftitel";

	

 



/**
 * [tAdvancedHash_ldf_verblijftitels_verblijftitel finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_overlijden_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_overlijden_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_overlijden_akteStruct other = (ldf_gemeenten_overlijden_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_overlijden_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_overlijden_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_overlijden_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akte = new ldf_gemeenten_overlijden_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_overlijden_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_overlijden_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_overlijden_akte
			   		// source node:tPostgresqlInput_25 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_akte) | target node:tAdvancedHash_ldf_gemeenten_overlijden_akte - inputs:(ldf_gemeenten_overlijden_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_overlijden_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_akteStruct> tHash_Lookup_ldf_gemeenten_overlijden_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_overlijden_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_overlijden_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_overlijden_akte", tHash_Lookup_ldf_gemeenten_overlijden_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_25", false);
		start_Hash.put("tPostgresqlInput_25", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_25";

	
		int tos_count_tPostgresqlInput_25 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_25{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_25().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_25 = 0;
		    java.sql.Connection conn_tPostgresqlInput_25 = null;
				String driverClass_tPostgresqlInput_25 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_25);
			   	String dbUser_tPostgresqlInput_25 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_25 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_25 = decryptedPassword_tPostgresqlInput_25;
		        
				
			String url_tPostgresqlInput_25 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_25 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_25,dbUser_tPostgresqlInput_25,dbPwd_tPostgresqlInput_25);
		        
				conn_tPostgresqlInput_25.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_25 = conn_tPostgresqlInput_25.createStatement();

		    String dbquery_tPostgresqlInput_25 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_25_QUERY",dbquery_tPostgresqlInput_25);

		    java.sql.ResultSet rs_tPostgresqlInput_25 = null;
		try{
		    rs_tPostgresqlInput_25 = stmt_tPostgresqlInput_25.executeQuery(dbquery_tPostgresqlInput_25);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_25 = rs_tPostgresqlInput_25.getMetaData();
		    int colQtyInRs_tPostgresqlInput_25 = rsmd_tPostgresqlInput_25.getColumnCount();

		    String tmpContent_tPostgresqlInput_25 = null;
		    
		    
		    while (rs_tPostgresqlInput_25.next()) {
		        nb_line_tPostgresqlInput_25++;
		        
							if(colQtyInRs_tPostgresqlInput_25 < 1) {
								ldf_gemeenten_overlijden_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_25, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_25 < 2) {
								ldf_gemeenten_overlijden_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_25, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_25 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_25 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_25";

	

 


	tos_count_tPostgresqlInput_25++;

/**
 * [tPostgresqlInput_25 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	

			//ldf_gemeenten_overlijden_akte
			//ldf_gemeenten_overlijden_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_overlijden_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_overlijden_akteStruct ldf_gemeenten_overlijden_akte_HashRow = new ldf_gemeenten_overlijden_akteStruct();
		   	   	   
				
				ldf_gemeenten_overlijden_akte_HashRow.gemeentecode = ldf_gemeenten_overlijden_akte.gemeentecode;
				
				ldf_gemeenten_overlijden_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_overlijden_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_overlijden_akte.put(ldf_gemeenten_overlijden_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_overlijden_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_25 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_25";

	

	}
}finally{
	stmt_tPostgresqlInput_25.close();

	if(conn_tPostgresqlInput_25 != null && !conn_tPostgresqlInput_25.isClosed()) {
		
			conn_tPostgresqlInput_25.commit();
			
		
			conn_tPostgresqlInput_25.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_25_NB_LINE",nb_line_tPostgresqlInput_25);
 

ok_Hash.put("tPostgresqlInput_25", true);
end_Hash.put("tPostgresqlInput_25", System.currentTimeMillis());




/**
 * [tPostgresqlInput_25 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	

tHash_Lookup_ldf_gemeenten_overlijden_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_overlijden_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_25 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_25";

	

 



/**
 * [tPostgresqlInput_25 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_overlijden_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_overlijden_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_overlijden_documentStruct other = (ldf_gemeenten_overlijden_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_overlijden_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_overlijden_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_persoon) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_overlijden_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_document = new ldf_gemeenten_overlijden_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_overlijden_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_overlijden_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_overlijden_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_overlijden_document
			   		// source node:tPostgresqlInput_26 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_overlijden_document,ldf_gemeenten_overlijden_document) | target node:tAdvancedHash_ldf_gemeenten_overlijden_document - inputs:(ldf_gemeenten_overlijden_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_persoon,ldf_titels_predikaten_persoon_naam,ldf_titels_predikaten_ouder1_naam,ldf_titels_predikaten_ouder2_naam,ldf_landen_persoon_geboorte,ldf_landen_ouder1_geboorte,ldf_landen_ouder2_geboorte,ldf_landen_overlijden,ldf_landen_verblijfplaats_buitenland,ldf_landen_verblijfplaats_immigratie,ldf_geslachtsaanduidingen_persoon_geslacht,ldf_geslachtsaanduidingen_ouder1_geslacht,ldf_geslachtsaanduidingen_ouder2_geslacht,ldf_gemeenten_persoon_akte,ldf_gemeenten_persoon_document,ldf_gemeenten_ouder1_akte,ldf_gemeenten_ouder1_document,ldf_gemeenten_ouder2_akte,ldf_gemeenten_ouder2_document,ldf_gemeenten_inschrijving_PK,ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_gezagsverhouding_document,ldf_gemeenten_kiesrecht_document,ldf_gemeenten_verwijzing_gemeente,ldf_verblijftitels_verblijftitel,ldf_gemeenten_overlijden_akte,ldf_gemeenten_overlijden_document) outputs:(ldf_persoon)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_overlijden_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_overlijden_documentStruct> tHash_Lookup_ldf_gemeenten_overlijden_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_overlijden_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_overlijden_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_overlijden_document", tHash_Lookup_ldf_gemeenten_overlijden_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_26", false);
		start_Hash.put("tPostgresqlInput_26", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_26";

	
		int tos_count_tPostgresqlInput_26 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_26{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_26().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_26 = 0;
		    java.sql.Connection conn_tPostgresqlInput_26 = null;
				String driverClass_tPostgresqlInput_26 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_26);
			   	String dbUser_tPostgresqlInput_26 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_26 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_26 = decryptedPassword_tPostgresqlInput_26;
		        
				
			String url_tPostgresqlInput_26 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_26 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_26,dbUser_tPostgresqlInput_26,dbPwd_tPostgresqlInput_26);
		        
				conn_tPostgresqlInput_26.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_26 = conn_tPostgresqlInput_26.createStatement();

		    String dbquery_tPostgresqlInput_26 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_26_QUERY",dbquery_tPostgresqlInput_26);

		    java.sql.ResultSet rs_tPostgresqlInput_26 = null;
		try{
		    rs_tPostgresqlInput_26 = stmt_tPostgresqlInput_26.executeQuery(dbquery_tPostgresqlInput_26);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_26 = rs_tPostgresqlInput_26.getMetaData();
		    int colQtyInRs_tPostgresqlInput_26 = rsmd_tPostgresqlInput_26.getColumnCount();

		    String tmpContent_tPostgresqlInput_26 = null;
		    
		    
		    while (rs_tPostgresqlInput_26.next()) {
		        nb_line_tPostgresqlInput_26++;
		        
							if(colQtyInRs_tPostgresqlInput_26 < 1) {
								ldf_gemeenten_overlijden_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_26, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_26 < 2) {
								ldf_gemeenten_overlijden_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_overlijden_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_26, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_26 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_26 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_26";

	

 


	tos_count_tPostgresqlInput_26++;

/**
 * [tPostgresqlInput_26 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	

			//ldf_gemeenten_overlijden_document
			//ldf_gemeenten_overlijden_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_overlijden_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_overlijden_documentStruct ldf_gemeenten_overlijden_document_HashRow = new ldf_gemeenten_overlijden_documentStruct();
		   	   	   
				
				ldf_gemeenten_overlijden_document_HashRow.gemeentecode = ldf_gemeenten_overlijden_document.gemeentecode;
				
				ldf_gemeenten_overlijden_document_HashRow.gemeenteomschrijving = ldf_gemeenten_overlijden_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_overlijden_document.put(ldf_gemeenten_overlijden_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_overlijden_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_26 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_26";

	

	}
}finally{
	stmt_tPostgresqlInput_26.close();

	if(conn_tPostgresqlInput_26 != null && !conn_tPostgresqlInput_26.isClosed()) {
		
			conn_tPostgresqlInput_26.commit();
			
		
			conn_tPostgresqlInput_26.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_26_NB_LINE",nb_line_tPostgresqlInput_26);
 

ok_Hash.put("tPostgresqlInput_26", true);
end_Hash.put("tPostgresqlInput_26", System.currentTimeMillis());




/**
 * [tPostgresqlInput_26 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	

tHash_Lookup_ldf_gemeenten_overlijden_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_overlijden_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_overlijden_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_26 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_26";

	

 



/**
 * [tPostgresqlInput_26 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_overlijden_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_overlijden_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_overlijden_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_26_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_persoon ibz_cipers_fill_ldf_persoonClass = new ibz_cipers_fill_ldf_persoon();

        int exitCode = ibz_cipers_fill_ldf_persoonClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_persoon.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_persoon_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_persoon");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1131983 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:50 CET
 ************************************************************************************************/