// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_huwelijk_historie_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_huwelijk_historie Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_huwelijk_historie implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_huwelijk_historie";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_huwelijk_historie.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_huwelijk_historie.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_titels_predikaten_huwelijk_naam_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_huwelijk_geboorte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_huwelijk_sluiting_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_huwelijk_ontbinding_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_huwelijk_akte_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_huwelijk_document_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_huwelijk_historieStruct implements routines.system.IPersistableRow<ldf_huwelijk_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal huwhstsleuteldatum;

				public BigDecimal getHuwhstsleuteldatum () {
					return this.huwhstsleuteldatum;
				}
				
			    public BigDecimal huwhstsleutelvolgnummer;

				public BigDecimal getHuwhstsleutelvolgnummer () {
					return this.huwhstsleutelvolgnummer;
				}
				
			    public BigDecimal huwhstsleutelgeldigdatum;

				public BigDecimal getHuwhstsleutelgeldigdatum () {
					return this.huwhstsleutelgeldigdatum;
				}
				
			    public BigDecimal huwhstsleutelgeldigvolgnummer;

				public BigDecimal getHuwhstsleutelgeldigvolgnummer () {
					return this.huwhstsleutelgeldigvolgnummer;
				}
				
			    public BigDecimal huwhstanummer;

				public BigDecimal getHuwhstanummer () {
					return this.huwhstanummer;
				}
				
			    public BigDecimal huwhstburgerservicenummer;

				public BigDecimal getHuwhstburgerservicenummer () {
					return this.huwhstburgerservicenummer;
				}
				
			    public String huwhstvoornamen;

				public String getHuwhstvoornamen () {
					return this.huwhstvoornamen;
				}
				
			    public String huwhstvoorletters;

				public String getHuwhstvoorletters () {
					return this.huwhstvoorletters;
				}
				
			    public String huwhstadellijketitelcode;

				public String getHuwhstadellijketitelcode () {
					return this.huwhstadellijketitelcode;
				}
				
			    public String huwhstadellijketitelomschrijving;

				public String getHuwhstadellijketitelomschrijving () {
					return this.huwhstadellijketitelomschrijving;
				}
				
			    public String huwhstvoorvoegselgeslachtsnaam;

				public String getHuwhstvoorvoegselgeslachtsnaam () {
					return this.huwhstvoorvoegselgeslachtsnaam;
				}
				
			    public String huwhstgeslachtsnaam;

				public String getHuwhstgeslachtsnaam () {
					return this.huwhstgeslachtsnaam;
				}
				
			    public java.util.Date huwhstgeboortedatum;

				public java.util.Date getHuwhstgeboortedatum () {
					return this.huwhstgeboortedatum;
				}
				
			    public String huwhstgeboortedatumindicator;

				public String getHuwhstgeboortedatumindicator () {
					return this.huwhstgeboortedatumindicator;
				}
				
			    public String huwhstgeboorteplaatscode;

				public String getHuwhstgeboorteplaatscode () {
					return this.huwhstgeboorteplaatscode;
				}
				
			    public String huwhstgeboorteplaatsomschrijving;

				public String getHuwhstgeboorteplaatsomschrijving () {
					return this.huwhstgeboorteplaatsomschrijving;
				}
				
			    public String huwhstgeboortelandcode;

				public String getHuwhstgeboortelandcode () {
					return this.huwhstgeboortelandcode;
				}
				
			    public String huwhstgeboortelandomschrijving;

				public String getHuwhstgeboortelandomschrijving () {
					return this.huwhstgeboortelandomschrijving;
				}
				
			    public String huwhstgeslachtsaanduidingcode;

				public String getHuwhstgeslachtsaanduidingcode () {
					return this.huwhstgeslachtsaanduidingcode;
				}
				
			    public String huwhstgeslachtsaanduidingomschrijving;

				public String getHuwhstgeslachtsaanduidingomschrijving () {
					return this.huwhstgeslachtsaanduidingomschrijving;
				}
				
			    public java.util.Date huwhstdatumsluitinghuwelijkpartnerschap;

				public java.util.Date getHuwhstdatumsluitinghuwelijkpartnerschap () {
					return this.huwhstdatumsluitinghuwelijkpartnerschap;
				}
				
			    public String huwhstdatumsluitinghuwelijkpartnerschapindicator;

				public String getHuwhstdatumsluitinghuwelijkpartnerschapindicator () {
					return this.huwhstdatumsluitinghuwelijkpartnerschapindicator;
				}
				
			    public String huwhstplaatssluitinghuwelijkpartnerschapcode;

				public String getHuwhstplaatssluitinghuwelijkpartnerschapcode () {
					return this.huwhstplaatssluitinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstplaatssluitinghuwelijkpartnerschapomschrijving;

				public String getHuwhstplaatssluitinghuwelijkpartnerschapomschrijving () {
					return this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwhstlandsluitinghuwelijkpartnerschapcode;

				public String getHuwhstlandsluitinghuwelijkpartnerschapcode () {
					return this.huwhstlandsluitinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstlandsluitinghuwelijkpartnerschapomschrijving;

				public String getHuwhstlandsluitinghuwelijkpartnerschapomschrijving () {
					return this.huwhstlandsluitinghuwelijkpartnerschapomschrijving;
				}
				
			    public java.util.Date huwhstdatumontbindinghuwelijkpartnerschap;

				public java.util.Date getHuwhstdatumontbindinghuwelijkpartnerschap () {
					return this.huwhstdatumontbindinghuwelijkpartnerschap;
				}
				
			    public String huwhstdatumontbindinghuwelijkpartnerschapindicator;

				public String getHuwhstdatumontbindinghuwelijkpartnerschapindicator () {
					return this.huwhstdatumontbindinghuwelijkpartnerschapindicator;
				}
				
			    public String huwhstplaatsontbindinghuwelijkpartnerschapcode;

				public String getHuwhstplaatsontbindinghuwelijkpartnerschapcode () {
					return this.huwhstplaatsontbindinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstplaatsontbindinghuwelijkpartnerschapomschrijving;

				public String getHuwhstplaatsontbindinghuwelijkpartnerschapomschrijving () {
					return this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwhstlandontbindinghuwelijkpartnerschapcode;

				public String getHuwhstlandontbindinghuwelijkpartnerschapcode () {
					return this.huwhstlandontbindinghuwelijkpartnerschapcode;
				}
				
			    public String huwhstlandontbindinghuwelijkpartnerschapomschrijving;

				public String getHuwhstlandontbindinghuwelijkpartnerschapomschrijving () {
					return this.huwhstlandontbindinghuwelijkpartnerschapomschrijving;
				}
				
			    public String huwhstredenontbindinghuwelijkpartnerschap;

				public String getHuwhstredenontbindinghuwelijkpartnerschap () {
					return this.huwhstredenontbindinghuwelijkpartnerschap;
				}
				
			    public String huwhstsoortverbintenis;

				public String getHuwhstsoortverbintenis () {
					return this.huwhstsoortverbintenis;
				}
				
			    public String huwhstregistergemeenteaktecode;

				public String getHuwhstregistergemeenteaktecode () {
					return this.huwhstregistergemeenteaktecode;
				}
				
			    public String huwhstregistergemeenteakteomschrijving;

				public String getHuwhstregistergemeenteakteomschrijving () {
					return this.huwhstregistergemeenteakteomschrijving;
				}
				
			    public String huwhstaktenummer;

				public String getHuwhstaktenummer () {
					return this.huwhstaktenummer;
				}
				
			    public String huwhstgemeentedocumentcode;

				public String getHuwhstgemeentedocumentcode () {
					return this.huwhstgemeentedocumentcode;
				}
				
			    public String huwhstgemeentedocumentomschrijving;

				public String getHuwhstgemeentedocumentomschrijving () {
					return this.huwhstgemeentedocumentomschrijving;
				}
				
			    public java.util.Date huwhstdatumdocument;

				public java.util.Date getHuwhstdatumdocument () {
					return this.huwhstdatumdocument;
				}
				
			    public String huwhstdatumdocumentindicator;

				public String getHuwhstdatumdocumentindicator () {
					return this.huwhstdatumdocumentindicator;
				}
				
			    public String huwhstbeschrijvingdocument;

				public String getHuwhstbeschrijvingdocument () {
					return this.huwhstbeschrijvingdocument;
				}
				
			    public BigDecimal huwhstaanduidinggegevensonderzoek;

				public BigDecimal getHuwhstaanduidinggegevensonderzoek () {
					return this.huwhstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date huwhstdatumingangonderzoek;

				public java.util.Date getHuwhstdatumingangonderzoek () {
					return this.huwhstdatumingangonderzoek;
				}
				
			    public String huwhstdatumingangonderzoekindicator;

				public String getHuwhstdatumingangonderzoekindicator () {
					return this.huwhstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date huwhstdatumeindeonderzoek;

				public java.util.Date getHuwhstdatumeindeonderzoek () {
					return this.huwhstdatumeindeonderzoek;
				}
				
			    public String huwhstdatumeindeonderzoekindicator;

				public String getHuwhstdatumeindeonderzoekindicator () {
					return this.huwhstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date huwhstingangsdatumgeldigheid;

				public java.util.Date getHuwhstingangsdatumgeldigheid () {
					return this.huwhstingangsdatumgeldigheid;
				}
				
			    public String huwhstingangsdatumgeldigheidindicator;

				public String getHuwhstingangsdatumgeldigheidindicator () {
					return this.huwhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date huwhstdatumvanopneming;

				public java.util.Date getHuwhstdatumvanopneming () {
					return this.huwhstdatumvanopneming;
				}
				
			    public String huwhstdatumvanopnemingindicator;

				public String getHuwhstdatumvanopnemingindicator () {
					return this.huwhstdatumvanopnemingindicator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.huwhstsleuteldatum == null) ? 0 : this.huwhstsleuteldatum.hashCode());
					
						result = prime * result + ((this.huwhstsleutelvolgnummer == null) ? 0 : this.huwhstsleutelvolgnummer.hashCode());
					
						result = prime * result + ((this.huwhstsleutelgeldigdatum == null) ? 0 : this.huwhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.huwhstsleutelgeldigvolgnummer == null) ? 0 : this.huwhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_huwelijk_historieStruct other = (ldf_huwelijk_historieStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.huwhstsleuteldatum == null) {
							if (other.huwhstsleuteldatum != null)
								return false;
						
						} else if (!this.huwhstsleuteldatum.equals(other.huwhstsleuteldatum))
						
							return false;
					
						if (this.huwhstsleutelvolgnummer == null) {
							if (other.huwhstsleutelvolgnummer != null)
								return false;
						
						} else if (!this.huwhstsleutelvolgnummer.equals(other.huwhstsleutelvolgnummer))
						
							return false;
					
						if (this.huwhstsleutelgeldigdatum == null) {
							if (other.huwhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.huwhstsleutelgeldigdatum.equals(other.huwhstsleutelgeldigdatum))
						
							return false;
					
						if (this.huwhstsleutelgeldigvolgnummer == null) {
							if (other.huwhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.huwhstsleutelgeldigvolgnummer.equals(other.huwhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_huwelijk_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            other.huwhstsleuteldatum = this.huwhstsleuteldatum;
	            other.huwhstsleutelvolgnummer = this.huwhstsleutelvolgnummer;
	            other.huwhstsleutelgeldigdatum = this.huwhstsleutelgeldigdatum;
	            other.huwhstsleutelgeldigvolgnummer = this.huwhstsleutelgeldigvolgnummer;
	            other.huwhstanummer = this.huwhstanummer;
	            other.huwhstburgerservicenummer = this.huwhstburgerservicenummer;
	            other.huwhstvoornamen = this.huwhstvoornamen;
	            other.huwhstvoorletters = this.huwhstvoorletters;
	            other.huwhstadellijketitelcode = this.huwhstadellijketitelcode;
	            other.huwhstadellijketitelomschrijving = this.huwhstadellijketitelomschrijving;
	            other.huwhstvoorvoegselgeslachtsnaam = this.huwhstvoorvoegselgeslachtsnaam;
	            other.huwhstgeslachtsnaam = this.huwhstgeslachtsnaam;
	            other.huwhstgeboortedatum = this.huwhstgeboortedatum;
	            other.huwhstgeboortedatumindicator = this.huwhstgeboortedatumindicator;
	            other.huwhstgeboorteplaatscode = this.huwhstgeboorteplaatscode;
	            other.huwhstgeboorteplaatsomschrijving = this.huwhstgeboorteplaatsomschrijving;
	            other.huwhstgeboortelandcode = this.huwhstgeboortelandcode;
	            other.huwhstgeboortelandomschrijving = this.huwhstgeboortelandomschrijving;
	            other.huwhstgeslachtsaanduidingcode = this.huwhstgeslachtsaanduidingcode;
	            other.huwhstgeslachtsaanduidingomschrijving = this.huwhstgeslachtsaanduidingomschrijving;
	            other.huwhstdatumsluitinghuwelijkpartnerschap = this.huwhstdatumsluitinghuwelijkpartnerschap;
	            other.huwhstdatumsluitinghuwelijkpartnerschapindicator = this.huwhstdatumsluitinghuwelijkpartnerschapindicator;
	            other.huwhstplaatssluitinghuwelijkpartnerschapcode = this.huwhstplaatssluitinghuwelijkpartnerschapcode;
	            other.huwhstplaatssluitinghuwelijkpartnerschapomschrijving = this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving;
	            other.huwhstlandsluitinghuwelijkpartnerschapcode = this.huwhstlandsluitinghuwelijkpartnerschapcode;
	            other.huwhstlandsluitinghuwelijkpartnerschapomschrijving = this.huwhstlandsluitinghuwelijkpartnerschapomschrijving;
	            other.huwhstdatumontbindinghuwelijkpartnerschap = this.huwhstdatumontbindinghuwelijkpartnerschap;
	            other.huwhstdatumontbindinghuwelijkpartnerschapindicator = this.huwhstdatumontbindinghuwelijkpartnerschapindicator;
	            other.huwhstplaatsontbindinghuwelijkpartnerschapcode = this.huwhstplaatsontbindinghuwelijkpartnerschapcode;
	            other.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving = this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving;
	            other.huwhstlandontbindinghuwelijkpartnerschapcode = this.huwhstlandontbindinghuwelijkpartnerschapcode;
	            other.huwhstlandontbindinghuwelijkpartnerschapomschrijving = this.huwhstlandontbindinghuwelijkpartnerschapomschrijving;
	            other.huwhstredenontbindinghuwelijkpartnerschap = this.huwhstredenontbindinghuwelijkpartnerschap;
	            other.huwhstsoortverbintenis = this.huwhstsoortverbintenis;
	            other.huwhstregistergemeenteaktecode = this.huwhstregistergemeenteaktecode;
	            other.huwhstregistergemeenteakteomschrijving = this.huwhstregistergemeenteakteomschrijving;
	            other.huwhstaktenummer = this.huwhstaktenummer;
	            other.huwhstgemeentedocumentcode = this.huwhstgemeentedocumentcode;
	            other.huwhstgemeentedocumentomschrijving = this.huwhstgemeentedocumentomschrijving;
	            other.huwhstdatumdocument = this.huwhstdatumdocument;
	            other.huwhstdatumdocumentindicator = this.huwhstdatumdocumentindicator;
	            other.huwhstbeschrijvingdocument = this.huwhstbeschrijvingdocument;
	            other.huwhstaanduidinggegevensonderzoek = this.huwhstaanduidinggegevensonderzoek;
	            other.huwhstdatumingangonderzoek = this.huwhstdatumingangonderzoek;
	            other.huwhstdatumingangonderzoekindicator = this.huwhstdatumingangonderzoekindicator;
	            other.huwhstdatumeindeonderzoek = this.huwhstdatumeindeonderzoek;
	            other.huwhstdatumeindeonderzoekindicator = this.huwhstdatumeindeonderzoekindicator;
	            other.huwhstingangsdatumgeldigheid = this.huwhstingangsdatumgeldigheid;
	            other.huwhstingangsdatumgeldigheidindicator = this.huwhstingangsdatumgeldigheidindicator;
	            other.huwhstdatumvanopneming = this.huwhstdatumvanopneming;
	            other.huwhstdatumvanopnemingindicator = this.huwhstdatumvanopnemingindicator;
	            
	}

	public void copyKeysDataTo(ldf_huwelijk_historieStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.huwhstsleuteldatum = this.huwhstsleuteldatum;
	            	other.huwhstsleutelvolgnummer = this.huwhstsleutelvolgnummer;
	            	other.huwhstsleutelgeldigdatum = this.huwhstsleutelgeldigdatum;
	            	other.huwhstsleutelgeldigvolgnummer = this.huwhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.huwhstsleuteldatum = (BigDecimal) dis.readObject();
					
						this.huwhstsleutelvolgnummer = (BigDecimal) dis.readObject();
					
						this.huwhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.huwhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
						this.huwhstanummer = (BigDecimal) dis.readObject();
					
						this.huwhstburgerservicenummer = (BigDecimal) dis.readObject();
					
					this.huwhstvoornamen = readString(dis);
					
					this.huwhstvoorletters = readString(dis);
					
					this.huwhstadellijketitelcode = readString(dis);
					
					this.huwhstadellijketitelomschrijving = readString(dis);
					
					this.huwhstvoorvoegselgeslachtsnaam = readString(dis);
					
					this.huwhstgeslachtsnaam = readString(dis);
					
					this.huwhstgeboortedatum = readDate(dis);
					
					this.huwhstgeboortedatumindicator = readString(dis);
					
					this.huwhstgeboorteplaatscode = readString(dis);
					
					this.huwhstgeboorteplaatsomschrijving = readString(dis);
					
					this.huwhstgeboortelandcode = readString(dis);
					
					this.huwhstgeboortelandomschrijving = readString(dis);
					
					this.huwhstgeslachtsaanduidingcode = readString(dis);
					
					this.huwhstgeslachtsaanduidingomschrijving = readString(dis);
					
					this.huwhstdatumsluitinghuwelijkpartnerschap = readDate(dis);
					
					this.huwhstdatumsluitinghuwelijkpartnerschapindicator = readString(dis);
					
					this.huwhstplaatssluitinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstlandsluitinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstlandsluitinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstdatumontbindinghuwelijkpartnerschap = readDate(dis);
					
					this.huwhstdatumontbindinghuwelijkpartnerschapindicator = readString(dis);
					
					this.huwhstplaatsontbindinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstlandontbindinghuwelijkpartnerschapcode = readString(dis);
					
					this.huwhstlandontbindinghuwelijkpartnerschapomschrijving = readString(dis);
					
					this.huwhstredenontbindinghuwelijkpartnerschap = readString(dis);
					
					this.huwhstsoortverbintenis = readString(dis);
					
					this.huwhstregistergemeenteaktecode = readString(dis);
					
					this.huwhstregistergemeenteakteomschrijving = readString(dis);
					
					this.huwhstaktenummer = readString(dis);
					
					this.huwhstgemeentedocumentcode = readString(dis);
					
					this.huwhstgemeentedocumentomschrijving = readString(dis);
					
					this.huwhstdatumdocument = readDate(dis);
					
					this.huwhstdatumdocumentindicator = readString(dis);
					
					this.huwhstbeschrijvingdocument = readString(dis);
					
						this.huwhstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.huwhstdatumingangonderzoek = readDate(dis);
					
					this.huwhstdatumingangonderzoekindicator = readString(dis);
					
					this.huwhstdatumeindeonderzoek = readDate(dis);
					
					this.huwhstdatumeindeonderzoekindicator = readString(dis);
					
					this.huwhstingangsdatumgeldigheid = readDate(dis);
					
					this.huwhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.huwhstdatumvanopneming = readDate(dis);
					
					this.huwhstdatumvanopnemingindicator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleuteldatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleutelvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstsleutelgeldigvolgnummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstburgerservicenummer);
					
					// String
				
						writeString(this.huwhstvoornamen,dos);
					
					// String
				
						writeString(this.huwhstvoorletters,dos);
					
					// String
				
						writeString(this.huwhstadellijketitelcode,dos);
					
					// String
				
						writeString(this.huwhstadellijketitelomschrijving,dos);
					
					// String
				
						writeString(this.huwhstvoorvoegselgeslachtsnaam,dos);
					
					// String
				
						writeString(this.huwhstgeslachtsnaam,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstgeboortedatum,dos);
					
					// String
				
						writeString(this.huwhstgeboortedatumindicator,dos);
					
					// String
				
						writeString(this.huwhstgeboorteplaatscode,dos);
					
					// String
				
						writeString(this.huwhstgeboorteplaatsomschrijving,dos);
					
					// String
				
						writeString(this.huwhstgeboortelandcode,dos);
					
					// String
				
						writeString(this.huwhstgeboortelandomschrijving,dos);
					
					// String
				
						writeString(this.huwhstgeslachtsaanduidingcode,dos);
					
					// String
				
						writeString(this.huwhstgeslachtsaanduidingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumsluitinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwhstdatumsluitinghuwelijkpartnerschapindicator,dos);
					
					// String
				
						writeString(this.huwhstplaatssluitinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstplaatssluitinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwhstlandsluitinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstlandsluitinghuwelijkpartnerschapomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumontbindinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwhstdatumontbindinghuwelijkpartnerschapindicator,dos);
					
					// String
				
						writeString(this.huwhstplaatsontbindinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwhstlandontbindinghuwelijkpartnerschapcode,dos);
					
					// String
				
						writeString(this.huwhstlandontbindinghuwelijkpartnerschapomschrijving,dos);
					
					// String
				
						writeString(this.huwhstredenontbindinghuwelijkpartnerschap,dos);
					
					// String
				
						writeString(this.huwhstsoortverbintenis,dos);
					
					// String
				
						writeString(this.huwhstregistergemeenteaktecode,dos);
					
					// String
				
						writeString(this.huwhstregistergemeenteakteomschrijving,dos);
					
					// String
				
						writeString(this.huwhstaktenummer,dos);
					
					// String
				
						writeString(this.huwhstgemeentedocumentcode,dos);
					
					// String
				
						writeString(this.huwhstgemeentedocumentomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumdocument,dos);
					
					// String
				
						writeString(this.huwhstdatumdocumentindicator,dos);
					
					// String
				
						writeString(this.huwhstbeschrijvingdocument,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.huwhstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.huwhstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.huwhstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.huwhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.huwhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.huwhstdatumvanopnemingindicator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",huwhstsleuteldatum="+String.valueOf(huwhstsleuteldatum));
		sb.append(",huwhstsleutelvolgnummer="+String.valueOf(huwhstsleutelvolgnummer));
		sb.append(",huwhstsleutelgeldigdatum="+String.valueOf(huwhstsleutelgeldigdatum));
		sb.append(",huwhstsleutelgeldigvolgnummer="+String.valueOf(huwhstsleutelgeldigvolgnummer));
		sb.append(",huwhstanummer="+String.valueOf(huwhstanummer));
		sb.append(",huwhstburgerservicenummer="+String.valueOf(huwhstburgerservicenummer));
		sb.append(",huwhstvoornamen="+huwhstvoornamen);
		sb.append(",huwhstvoorletters="+huwhstvoorletters);
		sb.append(",huwhstadellijketitelcode="+huwhstadellijketitelcode);
		sb.append(",huwhstadellijketitelomschrijving="+huwhstadellijketitelomschrijving);
		sb.append(",huwhstvoorvoegselgeslachtsnaam="+huwhstvoorvoegselgeslachtsnaam);
		sb.append(",huwhstgeslachtsnaam="+huwhstgeslachtsnaam);
		sb.append(",huwhstgeboortedatum="+String.valueOf(huwhstgeboortedatum));
		sb.append(",huwhstgeboortedatumindicator="+huwhstgeboortedatumindicator);
		sb.append(",huwhstgeboorteplaatscode="+huwhstgeboorteplaatscode);
		sb.append(",huwhstgeboorteplaatsomschrijving="+huwhstgeboorteplaatsomschrijving);
		sb.append(",huwhstgeboortelandcode="+huwhstgeboortelandcode);
		sb.append(",huwhstgeboortelandomschrijving="+huwhstgeboortelandomschrijving);
		sb.append(",huwhstgeslachtsaanduidingcode="+huwhstgeslachtsaanduidingcode);
		sb.append(",huwhstgeslachtsaanduidingomschrijving="+huwhstgeslachtsaanduidingomschrijving);
		sb.append(",huwhstdatumsluitinghuwelijkpartnerschap="+String.valueOf(huwhstdatumsluitinghuwelijkpartnerschap));
		sb.append(",huwhstdatumsluitinghuwelijkpartnerschapindicator="+huwhstdatumsluitinghuwelijkpartnerschapindicator);
		sb.append(",huwhstplaatssluitinghuwelijkpartnerschapcode="+huwhstplaatssluitinghuwelijkpartnerschapcode);
		sb.append(",huwhstplaatssluitinghuwelijkpartnerschapomschrijving="+huwhstplaatssluitinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstlandsluitinghuwelijkpartnerschapcode="+huwhstlandsluitinghuwelijkpartnerschapcode);
		sb.append(",huwhstlandsluitinghuwelijkpartnerschapomschrijving="+huwhstlandsluitinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstdatumontbindinghuwelijkpartnerschap="+String.valueOf(huwhstdatumontbindinghuwelijkpartnerschap));
		sb.append(",huwhstdatumontbindinghuwelijkpartnerschapindicator="+huwhstdatumontbindinghuwelijkpartnerschapindicator);
		sb.append(",huwhstplaatsontbindinghuwelijkpartnerschapcode="+huwhstplaatsontbindinghuwelijkpartnerschapcode);
		sb.append(",huwhstplaatsontbindinghuwelijkpartnerschapomschrijving="+huwhstplaatsontbindinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstlandontbindinghuwelijkpartnerschapcode="+huwhstlandontbindinghuwelijkpartnerschapcode);
		sb.append(",huwhstlandontbindinghuwelijkpartnerschapomschrijving="+huwhstlandontbindinghuwelijkpartnerschapomschrijving);
		sb.append(",huwhstredenontbindinghuwelijkpartnerschap="+huwhstredenontbindinghuwelijkpartnerschap);
		sb.append(",huwhstsoortverbintenis="+huwhstsoortverbintenis);
		sb.append(",huwhstregistergemeenteaktecode="+huwhstregistergemeenteaktecode);
		sb.append(",huwhstregistergemeenteakteomschrijving="+huwhstregistergemeenteakteomschrijving);
		sb.append(",huwhstaktenummer="+huwhstaktenummer);
		sb.append(",huwhstgemeentedocumentcode="+huwhstgemeentedocumentcode);
		sb.append(",huwhstgemeentedocumentomschrijving="+huwhstgemeentedocumentomschrijving);
		sb.append(",huwhstdatumdocument="+String.valueOf(huwhstdatumdocument));
		sb.append(",huwhstdatumdocumentindicator="+huwhstdatumdocumentindicator);
		sb.append(",huwhstbeschrijvingdocument="+huwhstbeschrijvingdocument);
		sb.append(",huwhstaanduidinggegevensonderzoek="+String.valueOf(huwhstaanduidinggegevensonderzoek));
		sb.append(",huwhstdatumingangonderzoek="+String.valueOf(huwhstdatumingangonderzoek));
		sb.append(",huwhstdatumingangonderzoekindicator="+huwhstdatumingangonderzoekindicator);
		sb.append(",huwhstdatumeindeonderzoek="+String.valueOf(huwhstdatumeindeonderzoek));
		sb.append(",huwhstdatumeindeonderzoekindicator="+huwhstdatumeindeonderzoekindicator);
		sb.append(",huwhstingangsdatumgeldigheid="+String.valueOf(huwhstingangsdatumgeldigheid));
		sb.append(",huwhstingangsdatumgeldigheidindicator="+huwhstingangsdatumgeldigheidindicator);
		sb.append(",huwhstdatumvanopneming="+String.valueOf(huwhstdatumvanopneming));
		sb.append(",huwhstdatumvanopnemingindicator="+huwhstdatumvanopnemingindicator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_huwelijk_historieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleuteldatum, other.huwhstsleuteldatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleutelvolgnummer, other.huwhstsleutelvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleutelgeldigdatum, other.huwhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.huwhstsleutelgeldigvolgnummer, other.huwhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_huwelijk_historieStruct implements routines.system.IPersistableRow<cipers_huwelijk_historieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal HUWHSTSLEUTELDATUM;

				public BigDecimal getHUWHSTSLEUTELDATUM () {
					return this.HUWHSTSLEUTELDATUM;
				}
				
			    public BigDecimal HUWHSTSLEUTELVOLGNUMMER;

				public BigDecimal getHUWHSTSLEUTELVOLGNUMMER () {
					return this.HUWHSTSLEUTELVOLGNUMMER;
				}
				
			    public BigDecimal HUWHSTSLEUTELGELDIGDATUM;

				public BigDecimal getHUWHSTSLEUTELGELDIGDATUM () {
					return this.HUWHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal HUWHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getHUWHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.HUWHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal HUWHSTANUMMER;

				public BigDecimal getHUWHSTANUMMER () {
					return this.HUWHSTANUMMER;
				}
				
			    public BigDecimal HUWHSTBURGERSERVICENUMMER;

				public BigDecimal getHUWHSTBURGERSERVICENUMMER () {
					return this.HUWHSTBURGERSERVICENUMMER;
				}
				
			    public String HUWHSTVOORNAMEN;

				public String getHUWHSTVOORNAMEN () {
					return this.HUWHSTVOORNAMEN;
				}
				
			    public String HUWHSTVOORLETTERS;

				public String getHUWHSTVOORLETTERS () {
					return this.HUWHSTVOORLETTERS;
				}
				
			    public String HUWHSTADELLIJKETITELCODE;

				public String getHUWHSTADELLIJKETITELCODE () {
					return this.HUWHSTADELLIJKETITELCODE;
				}
				
			    public String HUWHSTVOORVOEGSELGESLACHTSNAAM;

				public String getHUWHSTVOORVOEGSELGESLACHTSNAAM () {
					return this.HUWHSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String HUWHSTGESLACHTSNAAM;

				public String getHUWHSTGESLACHTSNAAM () {
					return this.HUWHSTGESLACHTSNAAM;
				}
				
			    public java.util.Date HUWHSTGEBOORTEDATUM;

				public java.util.Date getHUWHSTGEBOORTEDATUM () {
					return this.HUWHSTGEBOORTEDATUM;
				}
				
			    public String HUWHSTGEBOORTEDATUMINDICATOR;

				public String getHUWHSTGEBOORTEDATUMINDICATOR () {
					return this.HUWHSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String HUWHSTGEBOORTEPLAATSCODE;

				public String getHUWHSTGEBOORTEPLAATSCODE () {
					return this.HUWHSTGEBOORTEPLAATSCODE;
				}
				
			    public String HUWHSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getHUWHSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.HUWHSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String HUWHSTGEBOORTELANDCODE;

				public String getHUWHSTGEBOORTELANDCODE () {
					return this.HUWHSTGEBOORTELANDCODE;
				}
				
			    public String HUWHSTGESLACHTSAANDUIDINGCODE;

				public String getHUWHSTGESLACHTSAANDUIDINGCODE () {
					return this.HUWHSTGESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP;

				public java.util.Date getHUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP () {
					return this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP;
				}
				
			    public String HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR;

				public String getHUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR () {
					return this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR;
				}
				
			    public String HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public String HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;

				public String getHUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING () {
					return this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;
				}
				
			    public String HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public java.util.Date HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP;

				public java.util.Date getHUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP () {
					return this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP;
				}
				
			    public String HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR;

				public String getHUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR () {
					return this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR;
				}
				
			    public String HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public String HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;

				public String getHUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING () {
					return this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;
				}
				
			    public String HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public String HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP;

				public String getHUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP () {
					return this.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP;
				}
				
			    public String HUWHSTSOORTVERBINTENIS;

				public String getHUWHSTSOORTVERBINTENIS () {
					return this.HUWHSTSOORTVERBINTENIS;
				}
				
			    public String HUWHSTREGISTERGEMEENTEAKTECODE;

				public String getHUWHSTREGISTERGEMEENTEAKTECODE () {
					return this.HUWHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String HUWHSTAKTENUMMER;

				public String getHUWHSTAKTENUMMER () {
					return this.HUWHSTAKTENUMMER;
				}
				
			    public String HUWHSTGEMEENTEDOCUMENTCODE;

				public String getHUWHSTGEMEENTEDOCUMENTCODE () {
					return this.HUWHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date HUWHSTDATUMDOCUMENT;

				public java.util.Date getHUWHSTDATUMDOCUMENT () {
					return this.HUWHSTDATUMDOCUMENT;
				}
				
			    public String HUWHSTDATUMDOCUMENTINDICATOR;

				public String getHUWHSTDATUMDOCUMENTINDICATOR () {
					return this.HUWHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String HUWHSTBESCHRIJVINGDOCUMENT;

				public String getHUWHSTBESCHRIJVINGDOCUMENT () {
					return this.HUWHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal HUWHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getHUWHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.HUWHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date HUWHSTDATUMINGANGONDERZOEK;

				public java.util.Date getHUWHSTDATUMINGANGONDERZOEK () {
					return this.HUWHSTDATUMINGANGONDERZOEK;
				}
				
			    public String HUWHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getHUWHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.HUWHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date HUWHSTDATUMEINDEONDERZOEK;

				public java.util.Date getHUWHSTDATUMEINDEONDERZOEK () {
					return this.HUWHSTDATUMEINDEONDERZOEK;
				}
				
			    public String HUWHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getHUWHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.HUWHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date HUWHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getHUWHSTINGANGSDATUMGELDIGHEID () {
					return this.HUWHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getHUWHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date HUWHSTDATUMVANOPNEMING;

				public java.util.Date getHUWHSTDATUMVANOPNEMING () {
					return this.HUWHSTDATUMVANOPNEMING;
				}
				
			    public String HUWHSTDATUMVANOPNEMINGINDICATOR;

				public String getHUWHSTDATUMVANOPNEMINGINDICATOR () {
					return this.HUWHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELDATUM = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTANUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.HUWHSTVOORNAMEN = readString(dis);
					
					this.HUWHSTVOORLETTERS = readString(dis);
					
					this.HUWHSTADELLIJKETITELCODE = readString(dis);
					
					this.HUWHSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.HUWHSTGESLACHTSNAAM = readString(dis);
					
					this.HUWHSTGEBOORTEDATUM = readDate(dis);
					
					this.HUWHSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.HUWHSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.HUWHSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.HUWHSTGEBOORTELANDCODE = readString(dis);
					
					this.HUWHSTGESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP = readDate(dis);
					
					this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR = readString(dis);
					
					this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = readString(dis);
					
					this.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP = readDate(dis);
					
					this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR = readString(dis);
					
					this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = readString(dis);
					
					this.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP = readString(dis);
					
					this.HUWHSTSOORTVERBINTENIS = readString(dis);
					
					this.HUWHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.HUWHSTAKTENUMMER = readString(dis);
					
					this.HUWHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.HUWHSTDATUMDOCUMENT = readDate(dis);
					
					this.HUWHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.HUWHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.HUWHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.HUWHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.HUWHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.HUWHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.HUWHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.HUWHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.HUWHSTDATUMVANOPNEMING = readDate(dis);
					
					this.HUWHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.HUWHSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.HUWHSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.HUWHSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.HUWHSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.HUWHSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.HUWHSTGESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// String
				
						writeString(this.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP,dos);
					
					// String
				
						writeString(this.HUWHSTSOORTVERBINTENIS,dos);
					
					// String
				
						writeString(this.HUWHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.HUWHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.HUWHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",HUWHSTSLEUTELDATUM="+String.valueOf(HUWHSTSLEUTELDATUM));
		sb.append(",HUWHSTSLEUTELVOLGNUMMER="+String.valueOf(HUWHSTSLEUTELVOLGNUMMER));
		sb.append(",HUWHSTSLEUTELGELDIGDATUM="+String.valueOf(HUWHSTSLEUTELGELDIGDATUM));
		sb.append(",HUWHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(HUWHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",HUWHSTANUMMER="+String.valueOf(HUWHSTANUMMER));
		sb.append(",HUWHSTBURGERSERVICENUMMER="+String.valueOf(HUWHSTBURGERSERVICENUMMER));
		sb.append(",HUWHSTVOORNAMEN="+HUWHSTVOORNAMEN);
		sb.append(",HUWHSTVOORLETTERS="+HUWHSTVOORLETTERS);
		sb.append(",HUWHSTADELLIJKETITELCODE="+HUWHSTADELLIJKETITELCODE);
		sb.append(",HUWHSTVOORVOEGSELGESLACHTSNAAM="+HUWHSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",HUWHSTGESLACHTSNAAM="+HUWHSTGESLACHTSNAAM);
		sb.append(",HUWHSTGEBOORTEDATUM="+String.valueOf(HUWHSTGEBOORTEDATUM));
		sb.append(",HUWHSTGEBOORTEDATUMINDICATOR="+HUWHSTGEBOORTEDATUMINDICATOR);
		sb.append(",HUWHSTGEBOORTEPLAATSCODE="+HUWHSTGEBOORTEPLAATSCODE);
		sb.append(",HUWHSTGEBOORTEPLAATSOMSCHRIJVING="+HUWHSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",HUWHSTGEBOORTELANDCODE="+HUWHSTGEBOORTELANDCODE);
		sb.append(",HUWHSTGESLACHTSAANDUIDINGCODE="+HUWHSTGESLACHTSAANDUIDINGCODE);
		sb.append(",HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP="+String.valueOf(HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP));
		sb.append(",HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR="+HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR);
		sb.append(",HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING="+HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING);
		sb.append(",HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP="+String.valueOf(HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP));
		sb.append(",HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR="+HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR);
		sb.append(",HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING="+HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING);
		sb.append(",HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP="+HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP);
		sb.append(",HUWHSTSOORTVERBINTENIS="+HUWHSTSOORTVERBINTENIS);
		sb.append(",HUWHSTREGISTERGEMEENTEAKTECODE="+HUWHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",HUWHSTAKTENUMMER="+HUWHSTAKTENUMMER);
		sb.append(",HUWHSTGEMEENTEDOCUMENTCODE="+HUWHSTGEMEENTEDOCUMENTCODE);
		sb.append(",HUWHSTDATUMDOCUMENT="+String.valueOf(HUWHSTDATUMDOCUMENT));
		sb.append(",HUWHSTDATUMDOCUMENTINDICATOR="+HUWHSTDATUMDOCUMENTINDICATOR);
		sb.append(",HUWHSTBESCHRIJVINGDOCUMENT="+HUWHSTBESCHRIJVINGDOCUMENT);
		sb.append(",HUWHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(HUWHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",HUWHSTDATUMINGANGONDERZOEK="+String.valueOf(HUWHSTDATUMINGANGONDERZOEK));
		sb.append(",HUWHSTDATUMINGANGONDERZOEKINDICATOR="+HUWHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",HUWHSTDATUMEINDEONDERZOEK="+String.valueOf(HUWHSTDATUMEINDEONDERZOEK));
		sb.append(",HUWHSTDATUMEINDEONDERZOEKINDICATOR="+HUWHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",HUWHSTINGANGSDATUMGELDIGHEID="+String.valueOf(HUWHSTINGANGSDATUMGELDIGHEID));
		sb.append(",HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR="+HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",HUWHSTDATUMVANOPNEMING="+String.valueOf(HUWHSTDATUMVANOPNEMING));
		sb.append(",HUWHSTDATUMVANOPNEMINGINDICATOR="+HUWHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_huwelijk_historieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal HUWHSTSLEUTELDATUM;

				public BigDecimal getHUWHSTSLEUTELDATUM () {
					return this.HUWHSTSLEUTELDATUM;
				}
				
			    public BigDecimal HUWHSTSLEUTELVOLGNUMMER;

				public BigDecimal getHUWHSTSLEUTELVOLGNUMMER () {
					return this.HUWHSTSLEUTELVOLGNUMMER;
				}
				
			    public BigDecimal HUWHSTSLEUTELGELDIGDATUM;

				public BigDecimal getHUWHSTSLEUTELGELDIGDATUM () {
					return this.HUWHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal HUWHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getHUWHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.HUWHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public BigDecimal HUWHSTANUMMER;

				public BigDecimal getHUWHSTANUMMER () {
					return this.HUWHSTANUMMER;
				}
				
			    public BigDecimal HUWHSTBURGERSERVICENUMMER;

				public BigDecimal getHUWHSTBURGERSERVICENUMMER () {
					return this.HUWHSTBURGERSERVICENUMMER;
				}
				
			    public String HUWHSTVOORNAMEN;

				public String getHUWHSTVOORNAMEN () {
					return this.HUWHSTVOORNAMEN;
				}
				
			    public String HUWHSTVOORLETTERS;

				public String getHUWHSTVOORLETTERS () {
					return this.HUWHSTVOORLETTERS;
				}
				
			    public String HUWHSTADELLIJKETITELCODE;

				public String getHUWHSTADELLIJKETITELCODE () {
					return this.HUWHSTADELLIJKETITELCODE;
				}
				
			    public String HUWHSTVOORVOEGSELGESLACHTSNAAM;

				public String getHUWHSTVOORVOEGSELGESLACHTSNAAM () {
					return this.HUWHSTVOORVOEGSELGESLACHTSNAAM;
				}
				
			    public String HUWHSTGESLACHTSNAAM;

				public String getHUWHSTGESLACHTSNAAM () {
					return this.HUWHSTGESLACHTSNAAM;
				}
				
			    public java.util.Date HUWHSTGEBOORTEDATUM;

				public java.util.Date getHUWHSTGEBOORTEDATUM () {
					return this.HUWHSTGEBOORTEDATUM;
				}
				
			    public String HUWHSTGEBOORTEDATUMINDICATOR;

				public String getHUWHSTGEBOORTEDATUMINDICATOR () {
					return this.HUWHSTGEBOORTEDATUMINDICATOR;
				}
				
			    public String HUWHSTGEBOORTEPLAATSCODE;

				public String getHUWHSTGEBOORTEPLAATSCODE () {
					return this.HUWHSTGEBOORTEPLAATSCODE;
				}
				
			    public String HUWHSTGEBOORTEPLAATSOMSCHRIJVING;

				public String getHUWHSTGEBOORTEPLAATSOMSCHRIJVING () {
					return this.HUWHSTGEBOORTEPLAATSOMSCHRIJVING;
				}
				
			    public String HUWHSTGEBOORTELANDCODE;

				public String getHUWHSTGEBOORTELANDCODE () {
					return this.HUWHSTGEBOORTELANDCODE;
				}
				
			    public String HUWHSTGESLACHTSAANDUIDINGCODE;

				public String getHUWHSTGESLACHTSAANDUIDINGCODE () {
					return this.HUWHSTGESLACHTSAANDUIDINGCODE;
				}
				
			    public java.util.Date HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP;

				public java.util.Date getHUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP () {
					return this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP;
				}
				
			    public String HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR;

				public String getHUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR () {
					return this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR;
				}
				
			    public String HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public String HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;

				public String getHUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING () {
					return this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;
				}
				
			    public String HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public java.util.Date HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP;

				public java.util.Date getHUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP () {
					return this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP;
				}
				
			    public String HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR;

				public String getHUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR () {
					return this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR;
				}
				
			    public String HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public String HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;

				public String getHUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING () {
					return this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;
				}
				
			    public String HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE;

				public String getHUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE () {
					return this.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE;
				}
				
			    public String HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP;

				public String getHUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP () {
					return this.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP;
				}
				
			    public String HUWHSTSOORTVERBINTENIS;

				public String getHUWHSTSOORTVERBINTENIS () {
					return this.HUWHSTSOORTVERBINTENIS;
				}
				
			    public String HUWHSTREGISTERGEMEENTEAKTECODE;

				public String getHUWHSTREGISTERGEMEENTEAKTECODE () {
					return this.HUWHSTREGISTERGEMEENTEAKTECODE;
				}
				
			    public String HUWHSTAKTENUMMER;

				public String getHUWHSTAKTENUMMER () {
					return this.HUWHSTAKTENUMMER;
				}
				
			    public String HUWHSTGEMEENTEDOCUMENTCODE;

				public String getHUWHSTGEMEENTEDOCUMENTCODE () {
					return this.HUWHSTGEMEENTEDOCUMENTCODE;
				}
				
			    public java.util.Date HUWHSTDATUMDOCUMENT;

				public java.util.Date getHUWHSTDATUMDOCUMENT () {
					return this.HUWHSTDATUMDOCUMENT;
				}
				
			    public String HUWHSTDATUMDOCUMENTINDICATOR;

				public String getHUWHSTDATUMDOCUMENTINDICATOR () {
					return this.HUWHSTDATUMDOCUMENTINDICATOR;
				}
				
			    public String HUWHSTBESCHRIJVINGDOCUMENT;

				public String getHUWHSTBESCHRIJVINGDOCUMENT () {
					return this.HUWHSTBESCHRIJVINGDOCUMENT;
				}
				
			    public BigDecimal HUWHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getHUWHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.HUWHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date HUWHSTDATUMINGANGONDERZOEK;

				public java.util.Date getHUWHSTDATUMINGANGONDERZOEK () {
					return this.HUWHSTDATUMINGANGONDERZOEK;
				}
				
			    public String HUWHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getHUWHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.HUWHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date HUWHSTDATUMEINDEONDERZOEK;

				public java.util.Date getHUWHSTDATUMEINDEONDERZOEK () {
					return this.HUWHSTDATUMEINDEONDERZOEK;
				}
				
			    public String HUWHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getHUWHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.HUWHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date HUWHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getHUWHSTINGANGSDATUMGELDIGHEID () {
					return this.HUWHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getHUWHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date HUWHSTDATUMVANOPNEMING;

				public java.util.Date getHUWHSTDATUMVANOPNEMING () {
					return this.HUWHSTDATUMVANOPNEMING;
				}
				
			    public String HUWHSTDATUMVANOPNEMINGINDICATOR;

				public String getHUWHSTDATUMVANOPNEMINGINDICATOR () {
					return this.HUWHSTDATUMVANOPNEMINGINDICATOR;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELDATUM = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.HUWHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTANUMMER = (BigDecimal) dis.readObject();
					
						this.HUWHSTBURGERSERVICENUMMER = (BigDecimal) dis.readObject();
					
					this.HUWHSTVOORNAMEN = readString(dis);
					
					this.HUWHSTVOORLETTERS = readString(dis);
					
					this.HUWHSTADELLIJKETITELCODE = readString(dis);
					
					this.HUWHSTVOORVOEGSELGESLACHTSNAAM = readString(dis);
					
					this.HUWHSTGESLACHTSNAAM = readString(dis);
					
					this.HUWHSTGEBOORTEDATUM = readDate(dis);
					
					this.HUWHSTGEBOORTEDATUMINDICATOR = readString(dis);
					
					this.HUWHSTGEBOORTEPLAATSCODE = readString(dis);
					
					this.HUWHSTGEBOORTEPLAATSOMSCHRIJVING = readString(dis);
					
					this.HUWHSTGEBOORTELANDCODE = readString(dis);
					
					this.HUWHSTGESLACHTSAANDUIDINGCODE = readString(dis);
					
					this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP = readDate(dis);
					
					this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR = readString(dis);
					
					this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = readString(dis);
					
					this.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP = readDate(dis);
					
					this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR = readString(dis);
					
					this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = readString(dis);
					
					this.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE = readString(dis);
					
					this.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP = readString(dis);
					
					this.HUWHSTSOORTVERBINTENIS = readString(dis);
					
					this.HUWHSTREGISTERGEMEENTEAKTECODE = readString(dis);
					
					this.HUWHSTAKTENUMMER = readString(dis);
					
					this.HUWHSTGEMEENTEDOCUMENTCODE = readString(dis);
					
					this.HUWHSTDATUMDOCUMENT = readDate(dis);
					
					this.HUWHSTDATUMDOCUMENTINDICATOR = readString(dis);
					
					this.HUWHSTBESCHRIJVINGDOCUMENT = readString(dis);
					
						this.HUWHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.HUWHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.HUWHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.HUWHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.HUWHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.HUWHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.HUWHSTDATUMVANOPNEMING = readDate(dis);
					
					this.HUWHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTSLEUTELGELDIGVOLGNUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTBURGERSERVICENUMMER);
					
					// String
				
						writeString(this.HUWHSTVOORNAMEN,dos);
					
					// String
				
						writeString(this.HUWHSTVOORLETTERS,dos);
					
					// String
				
						writeString(this.HUWHSTADELLIJKETITELCODE,dos);
					
					// String
				
						writeString(this.HUWHSTVOORVOEGSELGESLACHTSNAAM,dos);
					
					// String
				
						writeString(this.HUWHSTGESLACHTSNAAM,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTGEBOORTEDATUM,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTEDATUMINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTEPLAATSCODE,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTEPLAATSOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.HUWHSTGEBOORTELANDCODE,dos);
					
					// String
				
						writeString(this.HUWHSTGESLACHTSAANDUIDINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// String
				
						writeString(this.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE,dos);
					
					// String
				
						writeString(this.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP,dos);
					
					// String
				
						writeString(this.HUWHSTSOORTVERBINTENIS,dos);
					
					// String
				
						writeString(this.HUWHSTREGISTERGEMEENTEAKTECODE,dos);
					
					// String
				
						writeString(this.HUWHSTAKTENUMMER,dos);
					
					// String
				
						writeString(this.HUWHSTGEMEENTEDOCUMENTCODE,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMDOCUMENT,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMDOCUMENTINDICATOR,dos);
					
					// String
				
						writeString(this.HUWHSTBESCHRIJVINGDOCUMENT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HUWHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.HUWHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.HUWHSTDATUMVANOPNEMINGINDICATOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",HUWHSTSLEUTELDATUM="+String.valueOf(HUWHSTSLEUTELDATUM));
		sb.append(",HUWHSTSLEUTELVOLGNUMMER="+String.valueOf(HUWHSTSLEUTELVOLGNUMMER));
		sb.append(",HUWHSTSLEUTELGELDIGDATUM="+String.valueOf(HUWHSTSLEUTELGELDIGDATUM));
		sb.append(",HUWHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(HUWHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",HUWHSTANUMMER="+String.valueOf(HUWHSTANUMMER));
		sb.append(",HUWHSTBURGERSERVICENUMMER="+String.valueOf(HUWHSTBURGERSERVICENUMMER));
		sb.append(",HUWHSTVOORNAMEN="+HUWHSTVOORNAMEN);
		sb.append(",HUWHSTVOORLETTERS="+HUWHSTVOORLETTERS);
		sb.append(",HUWHSTADELLIJKETITELCODE="+HUWHSTADELLIJKETITELCODE);
		sb.append(",HUWHSTVOORVOEGSELGESLACHTSNAAM="+HUWHSTVOORVOEGSELGESLACHTSNAAM);
		sb.append(",HUWHSTGESLACHTSNAAM="+HUWHSTGESLACHTSNAAM);
		sb.append(",HUWHSTGEBOORTEDATUM="+String.valueOf(HUWHSTGEBOORTEDATUM));
		sb.append(",HUWHSTGEBOORTEDATUMINDICATOR="+HUWHSTGEBOORTEDATUMINDICATOR);
		sb.append(",HUWHSTGEBOORTEPLAATSCODE="+HUWHSTGEBOORTEPLAATSCODE);
		sb.append(",HUWHSTGEBOORTEPLAATSOMSCHRIJVING="+HUWHSTGEBOORTEPLAATSOMSCHRIJVING);
		sb.append(",HUWHSTGEBOORTELANDCODE="+HUWHSTGEBOORTELANDCODE);
		sb.append(",HUWHSTGESLACHTSAANDUIDINGCODE="+HUWHSTGESLACHTSAANDUIDINGCODE);
		sb.append(",HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP="+String.valueOf(HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP));
		sb.append(",HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR="+HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR);
		sb.append(",HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING="+HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING);
		sb.append(",HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP="+String.valueOf(HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP));
		sb.append(",HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR="+HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR);
		sb.append(",HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING="+HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING);
		sb.append(",HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE="+HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE);
		sb.append(",HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP="+HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP);
		sb.append(",HUWHSTSOORTVERBINTENIS="+HUWHSTSOORTVERBINTENIS);
		sb.append(",HUWHSTREGISTERGEMEENTEAKTECODE="+HUWHSTREGISTERGEMEENTEAKTECODE);
		sb.append(",HUWHSTAKTENUMMER="+HUWHSTAKTENUMMER);
		sb.append(",HUWHSTGEMEENTEDOCUMENTCODE="+HUWHSTGEMEENTEDOCUMENTCODE);
		sb.append(",HUWHSTDATUMDOCUMENT="+String.valueOf(HUWHSTDATUMDOCUMENT));
		sb.append(",HUWHSTDATUMDOCUMENTINDICATOR="+HUWHSTDATUMDOCUMENTINDICATOR);
		sb.append(",HUWHSTBESCHRIJVINGDOCUMENT="+HUWHSTBESCHRIJVINGDOCUMENT);
		sb.append(",HUWHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(HUWHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",HUWHSTDATUMINGANGONDERZOEK="+String.valueOf(HUWHSTDATUMINGANGONDERZOEK));
		sb.append(",HUWHSTDATUMINGANGONDERZOEKINDICATOR="+HUWHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",HUWHSTDATUMEINDEONDERZOEK="+String.valueOf(HUWHSTDATUMEINDEONDERZOEK));
		sb.append(",HUWHSTDATUMEINDEONDERZOEKINDICATOR="+HUWHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",HUWHSTINGANGSDATUMGELDIGHEID="+String.valueOf(HUWHSTINGANGSDATUMGELDIGHEID));
		sb.append(",HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR="+HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",HUWHSTDATUMVANOPNEMING="+String.valueOf(HUWHSTDATUMVANOPNEMING));
		sb.append(",HUWHSTDATUMVANOPNEMINGINDICATOR="+HUWHSTDATUMVANOPNEMINGINDICATOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_3Process(globalMap);
		tPostgresqlInput_4Process(globalMap);
		tPostgresqlInput_5Process(globalMap);
		tPostgresqlInput_6Process(globalMap);
		tPostgresqlInput_7Process(globalMap);

		cipers_huwelijk_historieStruct cipers_huwelijk_historie = new cipers_huwelijk_historieStruct();
ldf_huwelijk_historieStruct ldf_huwelijk_historie = new ldf_huwelijk_historieStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_huwelijk_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_huwelijk_historie";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_huwelijk_historie";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"huwhstsleuteldatum\",\"huwhstsleutelvolgnummer\",\"huwhstsleutelgeldigdatum\",\"huwhstsleutelgeldigvolgnummer\",\"huwhstanummer\",\"huwhstburgerservicenummer\",\"huwhstvoornamen\",\"huwhstvoorletters\",\"huwhstadellijketitelcode\",\"huwhstadellijketitelomschrijving\",\"huwhstvoorvoegselgeslachtsnaam\",\"huwhstgeslachtsnaam\",\"huwhstgeboortedatum\",\"huwhstgeboortedatumindicator\",\"huwhstgeboorteplaatscode\",\"huwhstgeboorteplaatsomschrijving\",\"huwhstgeboortelandcode\",\"huwhstgeboortelandomschrijving\",\"huwhstgeslachtsaanduidingcode\",\"huwhstgeslachtsaanduidingomschrijving\",\"huwhstdatumsluitinghuwelijkpartnerschap\",\"huwhstdatumsluitinghuwelijkpartnerschapindicator\",\"huwhstplaatssluitinghuwelijkpartnerschapcode\",\"huwhstplaatssluitinghuwelijkpartnerschapomschrijving\",\"huwhstlandsluitinghuwelijkpartnerschapcode\",\"huwhstlandsluitinghuwelijkpartnerschapomschrijving\",\"huwhstdatumontbindinghuwelijkpartnerschap\",\"huwhstdatumontbindinghuwelijkpartnerschapindicator\",\"huwhstplaatsontbindinghuwelijkpartnerschapcode\",\"huwhstplaatsontbindinghuwelijkpartnerschapomschrijving\",\"huwhstlandontbindinghuwelijkpartnerschapcode\",\"huwhstlandontbindinghuwelijkpartnerschapomschrijving\",\"huwhstredenontbindinghuwelijkpartnerschap\",\"huwhstsoortverbintenis\",\"huwhstregistergemeenteaktecode\",\"huwhstregistergemeenteakteomschrijving\",\"huwhstaktenummer\",\"huwhstgemeentedocumentcode\",\"huwhstgemeentedocumentomschrijving\",\"huwhstdatumdocument\",\"huwhstdatumdocumentindicator\",\"huwhstbeschrijvingdocument\",\"huwhstaanduidinggegevensonderzoek\",\"huwhstdatumingangonderzoek\",\"huwhstdatumingangonderzoekindicator\",\"huwhstdatumeindeonderzoek\",\"huwhstdatumeindeonderzoekindicator\",\"huwhstingangsdatumgeldigheid\",\"huwhstingangsdatumgeldigheidindicator\",\"huwhstdatumvanopneming\",\"huwhstdatumvanopnemingindicator\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_huwelijk_historie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_huwelijk_naamStruct> tHash_Lookup_ldf_titels_predikaten_huwelijk_naam = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_huwelijk_naamStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_huwelijk_naamStruct>) 
					globalMap.get( "tHash_Lookup_ldf_titels_predikaten_huwelijk_naam" ))
					;					
					
	

ldf_titels_predikaten_huwelijk_naamStruct ldf_titels_predikaten_huwelijk_naamHashKey = new ldf_titels_predikaten_huwelijk_naamStruct();
ldf_titels_predikaten_huwelijk_naamStruct ldf_titels_predikaten_huwelijk_naamDefault = new ldf_titels_predikaten_huwelijk_naamStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_geboorteStruct> tHash_Lookup_ldf_landen_huwelijk_geboorte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_geboorteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_geboorteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_huwelijk_geboorte" ))
					;					
					
	

ldf_landen_huwelijk_geboorteStruct ldf_landen_huwelijk_geboorteHashKey = new ldf_landen_huwelijk_geboorteStruct();
ldf_landen_huwelijk_geboorteStruct ldf_landen_huwelijk_geboorteDefault = new ldf_landen_huwelijk_geboorteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_sluitingStruct> tHash_Lookup_ldf_landen_huwelijk_sluiting = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_sluitingStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_sluitingStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_huwelijk_sluiting" ))
					;					
					
	

ldf_landen_huwelijk_sluitingStruct ldf_landen_huwelijk_sluitingHashKey = new ldf_landen_huwelijk_sluitingStruct();
ldf_landen_huwelijk_sluitingStruct ldf_landen_huwelijk_sluitingDefault = new ldf_landen_huwelijk_sluitingStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_ontbindingStruct> tHash_Lookup_ldf_landen_huwelijk_ontbinding = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_ontbindingStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_ontbindingStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_huwelijk_ontbinding" ))
					;					
					
	

ldf_landen_huwelijk_ontbindingStruct ldf_landen_huwelijk_ontbindingHashKey = new ldf_landen_huwelijk_ontbindingStruct();
ldf_landen_huwelijk_ontbindingStruct ldf_landen_huwelijk_ontbindingDefault = new ldf_landen_huwelijk_ontbindingStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_huwelijk_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_huwelijk_geslachtStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_huwelijk_geslachtStruct>) 
					globalMap.get( "tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht" ))
					;					
					
	

ldf_geslachtsaanduidingen_huwelijk_geslachtStruct ldf_geslachtsaanduidingen_huwelijk_geslachtHashKey = new ldf_geslachtsaanduidingen_huwelijk_geslachtStruct();
ldf_geslachtsaanduidingen_huwelijk_geslachtStruct ldf_geslachtsaanduidingen_huwelijk_geslachtDefault = new ldf_geslachtsaanduidingen_huwelijk_geslachtStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_akteStruct> tHash_Lookup_ldf_gemeenten_huwelijk_akte = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_akteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_akteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_huwelijk_akte" ))
					;					
					
	

ldf_gemeenten_huwelijk_akteStruct ldf_gemeenten_huwelijk_akteHashKey = new ldf_gemeenten_huwelijk_akteStruct();
ldf_gemeenten_huwelijk_akteStruct ldf_gemeenten_huwelijk_akteDefault = new ldf_gemeenten_huwelijk_akteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_documentStruct> tHash_Lookup_ldf_gemeenten_huwelijk_document = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_documentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_documentStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_huwelijk_document" ))
					;					
					
	

ldf_gemeenten_huwelijk_documentStruct ldf_gemeenten_huwelijk_documentHashKey = new ldf_gemeenten_huwelijk_documentStruct();
ldf_gemeenten_huwelijk_documentStruct ldf_gemeenten_huwelijk_documentDefault = new ldf_gemeenten_huwelijk_documentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_huwelijk_historieStruct ldf_huwelijk_historie_tmp = new ldf_huwelijk_historieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\nprsAnummer,\nhuwhstSleutelDatum,\nhuwhstSleutelVolgnummer,\nhuwhstSleutelGeldigDatum,\nhuwhstSleutelGeldigVolgnummer,\nhuwhstAnummer,\nhuwhstBurgerservicenummer,\nrtrim(huwhstVoornamen) as huwhstVoornamen,\nrtrim(huwhstVoorletters) as huwhstVoorletters,\nrtrim(huwhstAdellijketitelCode) as huwhstAdellijketitelCode,\nrtrim(huwhstVoorvoegselGeslachtsnaam) as huwhstVoorvoegselGeslachtsnaam,\nrtrim(huwhstGeslachtsnaam) as huwhstGeslachtsnaam,\nhuwhstGeboortedatum,\nhuwhstGeboortedatumIndicator,\nrtrim(huwhstGeboorteplaatsCode) as huwhstGeboorteplaatsCode,\nrtrim(huwhstGeboorteplaatsOmschrijving) as huwhstGeboorteplaatsOmschrijving,\nrtrim(huwhstGeboortelandCode) as huwhstGeboortelandCode,\nrtrim(huwhstGeslachtsaanduidingCode) as huwhstGeslachtsaanduidingCode,\nhuwhstDatumSluitingHuwelijkPartnerschap,\nhuwhstDatumSluitingHuwelijkPartnerschapIndicator,\nrtrim(huwhstPlaatsSluitingHuwelijkPartnerschapCode) as \n huwhstPlaatsSluitingHuwelijkPartnerschapCode,\nrtrim(huwhstPlaatsSluitingHuwelijkPartnerschapOmschrijving) as \n huwhstPlaatsSluitingHuwelijkPartnerschapOmschrijving,\nrtrim(huwhstLandSluitingHuwelijkPartnerschapCode) as huwhstLandSluitingHuwelijkPartnerschapCode,\nhuwhstDatumOntbindingHuwelijkPartnerschap,\nhuwhstDatumOntbindingHuwelijkPartnerschapIndicator,\nrtrim(huwhstPlaatsOntbindingHuwelijkPartnerschapCode) as \n huwhstPlaatsOntbindingHuwelijkPartnerschapCode,\nrtrim(huwhstPlaatsOntbindingHuwelijkPartnerschapOmschrijving) as \n huwhstPlaatsOntbindingHuwelijkPartnerschapOmschrijving,\nrtrim(huwhstLandOntbindingHuwelijkPartnerschapCode) as \n huwhstLandOntbindingHuwelijkPartnerschapCode,\nrtrim(huwhstRedenOntbindingHuwelijkPartnerschap) as huwhstRedenOntbindingHuwelijkPartnerschap,\nrtrim(huwhstSoortVerbintenis) as huwhstSoortVerbintenis,\nrtrim(huwhstRegistergemeenteAkteCode) as huwhstRegistergemeenteAkteCode,\nrtrim(huwhstAktenummer) as huwhstAktenummer,\nrtrim(huwhstGemeenteDocumentCode) as huwhstGemeenteDocumentCode,\nhuwhstDatumDocument,\nhuwhstDatumDocumentIndicator,\nrtrim(huwhstBeschrijvingDocument) as huwhstBeschrijvingDocument,\nhuwhstAanduidingGegevensOnderzoek,\nhuwhstDatumIngangOnderzoek,\nhuwhstDatumIngangOnderzoekIndicator,\nhuwhstDatumEindeOnderzoek,\nhuwhstDatumEindeOnderzoekIndicator,\nhuwhstIngangsdatumGeldigheid,\nhuwhstIngangsdatumGeldigheidIndicator,\nhuwhstDatumVanOpneming,\nhuwhstDatumVanOpnemingIndicator\n  from bzsc55q00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_huwelijk_historie.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_huwelijk_historie.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_huwelijk_historie.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_huwelijk_historie.HUWHSTSLEUTELDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_huwelijk_historie.HUWHSTSLEUTELDATUM = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_huwelijk_historie.HUWHSTSLEUTELDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_huwelijk_historie.HUWHSTSLEUTELVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(3) != null) {
                cipers_huwelijk_historie.HUWHSTSLEUTELVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(3);
            } else {
                    cipers_huwelijk_historie.HUWHSTSLEUTELVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(4) != null) {
                cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGDATUM = rs_tAS400Input_1.getBigDecimal(4);
            } else {
                    cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(5) != null) {
                cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(5);
            } else {
                    cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_huwelijk_historie.HUWHSTANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(6) != null) {
                cipers_huwelijk_historie.HUWHSTANUMMER = rs_tAS400Input_1.getBigDecimal(6);
            } else {
                    cipers_huwelijk_historie.HUWHSTANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_huwelijk_historie.HUWHSTBURGERSERVICENUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(7) != null) {
                cipers_huwelijk_historie.HUWHSTBURGERSERVICENUMMER = rs_tAS400Input_1.getBigDecimal(7);
            } else {
                    cipers_huwelijk_historie.HUWHSTBURGERSERVICENUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_huwelijk_historie.HUWHSTVOORNAMEN = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTVOORNAMEN = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_huwelijk_historie.HUWHSTVOORLETTERS = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTVOORLETTERS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 9, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_huwelijk_historie.HUWHSTADELLIJKETITELCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTADELLIJKETITELCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 10, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_huwelijk_historie.HUWHSTVOORVOEGSELGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTVOORVOEGSELGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 11, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_huwelijk_historie.HUWHSTGESLACHTSNAAM = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGESLACHTSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 12, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_huwelijk_historie.HUWHSTGEBOORTEDATUM = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTGEBOORTEDATUM = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 13);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_huwelijk_historie.HUWHSTGEBOORTEDATUMINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGEBOORTEDATUMINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_huwelijk_historie.HUWHSTGEBOORTEPLAATSCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGEBOORTEPLAATSCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 15, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_huwelijk_historie.HUWHSTGEBOORTEPLAATSOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGEBOORTEPLAATSOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 16, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_huwelijk_historie.HUWHSTGEBOORTELANDCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGEBOORTELANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 17, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_huwelijk_historie.HUWHSTGESLACHTSAANDUIDINGCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGESLACHTSAANDUIDINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 18, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_huwelijk_historie.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 19);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_huwelijk_historie.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 20, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_huwelijk_historie.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 21, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_huwelijk_historie.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 22, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_huwelijk_historie.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 23, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 24) {
								cipers_huwelijk_historie.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 24);
		                    }
							if(colQtyInRs_tAS400Input_1 < 25) {
								cipers_huwelijk_historie.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 25, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 26) {
								cipers_huwelijk_historie.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 26, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 27) {
								cipers_huwelijk_historie.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 27, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 28) {
								cipers_huwelijk_historie.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 28, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 29) {
								cipers_huwelijk_historie.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 29, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 30) {
								cipers_huwelijk_historie.HUWHSTSOORTVERBINTENIS = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTSOORTVERBINTENIS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 30, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 31) {
								cipers_huwelijk_historie.HUWHSTREGISTERGEMEENTEAKTECODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTREGISTERGEMEENTEAKTECODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 31, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 32) {
								cipers_huwelijk_historie.HUWHSTAKTENUMMER = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTAKTENUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 32, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 33) {
								cipers_huwelijk_historie.HUWHSTGEMEENTEDOCUMENTCODE = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTGEMEENTEDOCUMENTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 33, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 34) {
								cipers_huwelijk_historie.HUWHSTDATUMDOCUMENT = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTDATUMDOCUMENT = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 34);
		                    }
							if(colQtyInRs_tAS400Input_1 < 35) {
								cipers_huwelijk_historie.HUWHSTDATUMDOCUMENTINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTDATUMDOCUMENTINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 35, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 36) {
								cipers_huwelijk_historie.HUWHSTBESCHRIJVINGDOCUMENT = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTBESCHRIJVINGDOCUMENT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 36, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 37) {
								cipers_huwelijk_historie.HUWHSTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(37) != null) {
                cipers_huwelijk_historie.HUWHSTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(37);
            } else {
                    cipers_huwelijk_historie.HUWHSTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 38) {
								cipers_huwelijk_historie.HUWHSTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 38);
		                    }
							if(colQtyInRs_tAS400Input_1 < 39) {
								cipers_huwelijk_historie.HUWHSTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 39, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 40) {
								cipers_huwelijk_historie.HUWHSTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 40);
		                    }
							if(colQtyInRs_tAS400Input_1 < 41) {
								cipers_huwelijk_historie.HUWHSTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 41, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 42) {
								cipers_huwelijk_historie.HUWHSTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 42);
		                    }
							if(colQtyInRs_tAS400Input_1 < 43) {
								cipers_huwelijk_historie.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 43, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 44) {
								cipers_huwelijk_historie.HUWHSTDATUMVANOPNEMING = null;
							} else {
										
			cipers_huwelijk_historie.HUWHSTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 44);
		                    }
							if(colQtyInRs_tAS400Input_1 < 45) {
								cipers_huwelijk_historie.HUWHSTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_huwelijk_historie.HUWHSTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 45, false);
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_huwelijk_historie
			//cipers_huwelijk_historie


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_huwelijk_historie"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_titels_predikaten_huwelijk_naam" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_titels_predikaten_huwelijk_naam = false;
       		  	    	
       		  	    	
 							ldf_titels_predikaten_huwelijk_naamStruct ldf_titels_predikaten_huwelijk_naamObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_titels_predikaten_huwelijk_naamHashKey.adellijketitelcode = cipers_huwelijk_historie.HUWHSTADELLIJKETITELCODE ;
                        		    		

								
		                        	ldf_titels_predikaten_huwelijk_naamHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.lookup( ldf_titels_predikaten_huwelijk_naamHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_titels_predikaten_huwelijk_naam != null && tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.getCount(ldf_titels_predikaten_huwelijk_naamHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_titels_predikaten_huwelijk_naam' and it contains more one result from keys :  ldf_titels_predikaten_huwelijk_naam.adellijketitelcode = '" + ldf_titels_predikaten_huwelijk_naamHashKey.adellijketitelcode + "'");
								} // G 071
							

							ldf_titels_predikaten_huwelijk_naamStruct ldf_titels_predikaten_huwelijk_naam = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_titels_predikaten_huwelijk_naamStruct fromLookup_ldf_titels_predikaten_huwelijk_naam = null;
							ldf_titels_predikaten_huwelijk_naam = ldf_titels_predikaten_huwelijk_naamDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_titels_predikaten_huwelijk_naam !=null && tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_titels_predikaten_huwelijk_naam = tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_titels_predikaten_huwelijk_naam != null) {
								ldf_titels_predikaten_huwelijk_naam = fromLookup_ldf_titels_predikaten_huwelijk_naam;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_huwelijk_geboorte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_huwelijk_geboorte = false;
       		  	    	
       		  	    	
 							ldf_landen_huwelijk_geboorteStruct ldf_landen_huwelijk_geboorteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_huwelijk_geboorteHashKey.landcode = cipers_huwelijk_historie.HUWHSTGEBOORTELANDCODE ;
                        		    		

								
		                        	ldf_landen_huwelijk_geboorteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_huwelijk_geboorte.lookup( ldf_landen_huwelijk_geboorteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_huwelijk_geboorte != null && tHash_Lookup_ldf_landen_huwelijk_geboorte.getCount(ldf_landen_huwelijk_geboorteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_huwelijk_geboorte' and it contains more one result from keys :  ldf_landen_huwelijk_geboorte.landcode = '" + ldf_landen_huwelijk_geboorteHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_huwelijk_geboorteStruct ldf_landen_huwelijk_geboorte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_huwelijk_geboorteStruct fromLookup_ldf_landen_huwelijk_geboorte = null;
							ldf_landen_huwelijk_geboorte = ldf_landen_huwelijk_geboorteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_huwelijk_geboorte !=null && tHash_Lookup_ldf_landen_huwelijk_geboorte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_huwelijk_geboorte = tHash_Lookup_ldf_landen_huwelijk_geboorte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_huwelijk_geboorte != null) {
								ldf_landen_huwelijk_geboorte = fromLookup_ldf_landen_huwelijk_geboorte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_huwelijk_sluiting" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_huwelijk_sluiting = false;
       		  	    	
       		  	    	
 							ldf_landen_huwelijk_sluitingStruct ldf_landen_huwelijk_sluitingObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_huwelijk_sluitingHashKey.landcode = cipers_huwelijk_historie.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE ;
                        		    		

								
		                        	ldf_landen_huwelijk_sluitingHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_huwelijk_sluiting.lookup( ldf_landen_huwelijk_sluitingHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_huwelijk_sluiting != null && tHash_Lookup_ldf_landen_huwelijk_sluiting.getCount(ldf_landen_huwelijk_sluitingHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_huwelijk_sluiting' and it contains more one result from keys :  ldf_landen_huwelijk_sluiting.landcode = '" + ldf_landen_huwelijk_sluitingHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_huwelijk_sluitingStruct ldf_landen_huwelijk_sluiting = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_huwelijk_sluitingStruct fromLookup_ldf_landen_huwelijk_sluiting = null;
							ldf_landen_huwelijk_sluiting = ldf_landen_huwelijk_sluitingDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_huwelijk_sluiting !=null && tHash_Lookup_ldf_landen_huwelijk_sluiting.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_huwelijk_sluiting = tHash_Lookup_ldf_landen_huwelijk_sluiting.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_huwelijk_sluiting != null) {
								ldf_landen_huwelijk_sluiting = fromLookup_ldf_landen_huwelijk_sluiting;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_huwelijk_ontbinding" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_huwelijk_ontbinding = false;
       		  	    	
       		  	    	
 							ldf_landen_huwelijk_ontbindingStruct ldf_landen_huwelijk_ontbindingObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_huwelijk_ontbindingHashKey.landcode = cipers_huwelijk_historie.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE ;
                        		    		

								
		                        	ldf_landen_huwelijk_ontbindingHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_huwelijk_ontbinding.lookup( ldf_landen_huwelijk_ontbindingHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_huwelijk_ontbinding != null && tHash_Lookup_ldf_landen_huwelijk_ontbinding.getCount(ldf_landen_huwelijk_ontbindingHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_huwelijk_ontbinding' and it contains more one result from keys :  ldf_landen_huwelijk_ontbinding.landcode = '" + ldf_landen_huwelijk_ontbindingHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_huwelijk_ontbindingStruct ldf_landen_huwelijk_ontbinding = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_huwelijk_ontbindingStruct fromLookup_ldf_landen_huwelijk_ontbinding = null;
							ldf_landen_huwelijk_ontbinding = ldf_landen_huwelijk_ontbindingDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_huwelijk_ontbinding !=null && tHash_Lookup_ldf_landen_huwelijk_ontbinding.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_huwelijk_ontbinding = tHash_Lookup_ldf_landen_huwelijk_ontbinding.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_huwelijk_ontbinding != null) {
								ldf_landen_huwelijk_ontbinding = fromLookup_ldf_landen_huwelijk_ontbinding;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_geslachtsaanduidingen_huwelijk_geslacht" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_geslachtsaanduidingen_huwelijk_geslacht = false;
       		  	    	
       		  	    	
 							ldf_geslachtsaanduidingen_huwelijk_geslachtStruct ldf_geslachtsaanduidingen_huwelijk_geslachtObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_geslachtsaanduidingen_huwelijk_geslachtHashKey.geslachtsaanduidingcode = cipers_huwelijk_historie.HUWHSTGESLACHTSAANDUIDINGCODE ;
                        		    		

								
		                        	ldf_geslachtsaanduidingen_huwelijk_geslachtHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.lookup( ldf_geslachtsaanduidingen_huwelijk_geslachtHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht != null && tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.getCount(ldf_geslachtsaanduidingen_huwelijk_geslachtHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_geslachtsaanduidingen_huwelijk_geslacht' and it contains more one result from keys :  ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingcode = '" + ldf_geslachtsaanduidingen_huwelijk_geslachtHashKey.geslachtsaanduidingcode + "'");
								} // G 071
							

							ldf_geslachtsaanduidingen_huwelijk_geslachtStruct ldf_geslachtsaanduidingen_huwelijk_geslacht = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_geslachtsaanduidingen_huwelijk_geslachtStruct fromLookup_ldf_geslachtsaanduidingen_huwelijk_geslacht = null;
							ldf_geslachtsaanduidingen_huwelijk_geslacht = ldf_geslachtsaanduidingen_huwelijk_geslachtDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht !=null && tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_geslachtsaanduidingen_huwelijk_geslacht = tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_geslachtsaanduidingen_huwelijk_geslacht != null) {
								ldf_geslachtsaanduidingen_huwelijk_geslacht = fromLookup_ldf_geslachtsaanduidingen_huwelijk_geslacht;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_huwelijk_akte" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_huwelijk_akte = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_huwelijk_akteStruct ldf_gemeenten_huwelijk_akteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_huwelijk_akteHashKey.gemeentecode = cipers_huwelijk_historie.HUWHSTREGISTERGEMEENTEAKTECODE ;
                        		    		

								
		                        	ldf_gemeenten_huwelijk_akteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_huwelijk_akte.lookup( ldf_gemeenten_huwelijk_akteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_huwelijk_akte != null && tHash_Lookup_ldf_gemeenten_huwelijk_akte.getCount(ldf_gemeenten_huwelijk_akteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_huwelijk_akte' and it contains more one result from keys :  ldf_gemeenten_huwelijk_akte.gemeentecode = '" + ldf_gemeenten_huwelijk_akteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_huwelijk_akteStruct ldf_gemeenten_huwelijk_akte = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_huwelijk_akteStruct fromLookup_ldf_gemeenten_huwelijk_akte = null;
							ldf_gemeenten_huwelijk_akte = ldf_gemeenten_huwelijk_akteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_huwelijk_akte !=null && tHash_Lookup_ldf_gemeenten_huwelijk_akte.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_huwelijk_akte = tHash_Lookup_ldf_gemeenten_huwelijk_akte.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_huwelijk_akte != null) {
								ldf_gemeenten_huwelijk_akte = fromLookup_ldf_gemeenten_huwelijk_akte;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_huwelijk_document" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_huwelijk_document = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_huwelijk_documentStruct ldf_gemeenten_huwelijk_documentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_huwelijk_documentHashKey.gemeentecode = cipers_huwelijk_historie.HUWHSTGEMEENTEDOCUMENTCODE ;
                        		    		

								
		                        	ldf_gemeenten_huwelijk_documentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_huwelijk_document.lookup( ldf_gemeenten_huwelijk_documentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_huwelijk_document != null && tHash_Lookup_ldf_gemeenten_huwelijk_document.getCount(ldf_gemeenten_huwelijk_documentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_huwelijk_document' and it contains more one result from keys :  ldf_gemeenten_huwelijk_document.gemeentecode = '" + ldf_gemeenten_huwelijk_documentHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_huwelijk_documentStruct ldf_gemeenten_huwelijk_document = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_huwelijk_documentStruct fromLookup_ldf_gemeenten_huwelijk_document = null;
							ldf_gemeenten_huwelijk_document = ldf_gemeenten_huwelijk_documentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_huwelijk_document !=null && tHash_Lookup_ldf_gemeenten_huwelijk_document.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_huwelijk_document = tHash_Lookup_ldf_gemeenten_huwelijk_document.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_huwelijk_document != null) {
								ldf_gemeenten_huwelijk_document = fromLookup_ldf_gemeenten_huwelijk_document;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_huwelijk_historie = null;


// # Output table : 'ldf_huwelijk_historie'
ldf_huwelijk_historie_tmp.prsanummer = cipers_huwelijk_historie.PRSANUMMER;
ldf_huwelijk_historie_tmp.huwhstsleuteldatum = cipers_huwelijk_historie.HUWHSTSLEUTELDATUM;
ldf_huwelijk_historie_tmp.huwhstsleutelvolgnummer = cipers_huwelijk_historie.HUWHSTSLEUTELVOLGNUMMER;
ldf_huwelijk_historie_tmp.huwhstsleutelgeldigdatum = cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGDATUM;
ldf_huwelijk_historie_tmp.huwhstsleutelgeldigvolgnummer = cipers_huwelijk_historie.HUWHSTSLEUTELGELDIGVOLGNUMMER;
ldf_huwelijk_historie_tmp.huwhstanummer = cipers_huwelijk_historie.HUWHSTANUMMER;
ldf_huwelijk_historie_tmp.huwhstburgerservicenummer = cipers_huwelijk_historie.HUWHSTBURGERSERVICENUMMER;
ldf_huwelijk_historie_tmp.huwhstvoornamen = cipers_huwelijk_historie.HUWHSTVOORNAMEN;
ldf_huwelijk_historie_tmp.huwhstvoorletters = cipers_huwelijk_historie.HUWHSTVOORLETTERS;
ldf_huwelijk_historie_tmp.huwhstadellijketitelcode = cipers_huwelijk_historie.HUWHSTADELLIJKETITELCODE;
ldf_huwelijk_historie_tmp.huwhstadellijketitelomschrijving = ldf_titels_predikaten_huwelijk_naam.adellijketitelomschrijving ;
ldf_huwelijk_historie_tmp.huwhstvoorvoegselgeslachtsnaam = cipers_huwelijk_historie.HUWHSTVOORVOEGSELGESLACHTSNAAM;
ldf_huwelijk_historie_tmp.huwhstgeslachtsnaam = cipers_huwelijk_historie.HUWHSTGESLACHTSNAAM;
ldf_huwelijk_historie_tmp.huwhstgeboortedatum = cipers_huwelijk_historie.HUWHSTGEBOORTEDATUM;
ldf_huwelijk_historie_tmp.huwhstgeboortedatumindicator = cipers_huwelijk_historie.HUWHSTGEBOORTEDATUMINDICATOR;
ldf_huwelijk_historie_tmp.huwhstgeboorteplaatscode = cipers_huwelijk_historie.HUWHSTGEBOORTEPLAATSCODE;
ldf_huwelijk_historie_tmp.huwhstgeboorteplaatsomschrijving = cipers_huwelijk_historie.HUWHSTGEBOORTEPLAATSOMSCHRIJVING;
ldf_huwelijk_historie_tmp.huwhstgeboortelandcode = cipers_huwelijk_historie.HUWHSTGEBOORTELANDCODE;
ldf_huwelijk_historie_tmp.huwhstgeboortelandomschrijving = ldf_landen_huwelijk_geboorte.landomschrijving ;
ldf_huwelijk_historie_tmp.huwhstgeslachtsaanduidingcode = cipers_huwelijk_historie.HUWHSTGESLACHTSAANDUIDINGCODE;
ldf_huwelijk_historie_tmp.huwhstgeslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingomschrijving ;
ldf_huwelijk_historie_tmp.huwhstdatumsluitinghuwelijkpartnerschap = cipers_huwelijk_historie.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAP;
ldf_huwelijk_historie_tmp.huwhstdatumsluitinghuwelijkpartnerschapindicator = cipers_huwelijk_historie.HUWHSTDATUMSLUITINGHUWELIJKPARTNERSCHAPINDICATOR;
ldf_huwelijk_historie_tmp.huwhstplaatssluitinghuwelijkpartnerschapcode = cipers_huwelijk_historie.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPCODE;
ldf_huwelijk_historie_tmp.huwhstplaatssluitinghuwelijkpartnerschapomschrijving = cipers_huwelijk_historie.HUWHSTPLAATSSLUITINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;
ldf_huwelijk_historie_tmp.huwhstlandsluitinghuwelijkpartnerschapcode = cipers_huwelijk_historie.HUWHSTLANDSLUITINGHUWELIJKPARTNERSCHAPCODE;
ldf_huwelijk_historie_tmp.huwhstlandsluitinghuwelijkpartnerschapomschrijving = ldf_landen_huwelijk_sluiting.landomschrijving ;
ldf_huwelijk_historie_tmp.huwhstdatumontbindinghuwelijkpartnerschap = cipers_huwelijk_historie.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAP;
ldf_huwelijk_historie_tmp.huwhstdatumontbindinghuwelijkpartnerschapindicator = cipers_huwelijk_historie.HUWHSTDATUMONTBINDINGHUWELIJKPARTNERSCHAPINDICATOR;
ldf_huwelijk_historie_tmp.huwhstplaatsontbindinghuwelijkpartnerschapcode = cipers_huwelijk_historie.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPCODE;
ldf_huwelijk_historie_tmp.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving = cipers_huwelijk_historie.HUWHSTPLAATSONTBINDINGHUWELIJKPARTNERSCHAPOMSCHRIJVING;
ldf_huwelijk_historie_tmp.huwhstlandontbindinghuwelijkpartnerschapcode = cipers_huwelijk_historie.HUWHSTLANDONTBINDINGHUWELIJKPARTNERSCHAPCODE;
ldf_huwelijk_historie_tmp.huwhstlandontbindinghuwelijkpartnerschapomschrijving = ldf_landen_huwelijk_ontbinding.landomschrijving ;
ldf_huwelijk_historie_tmp.huwhstredenontbindinghuwelijkpartnerschap = cipers_huwelijk_historie.HUWHSTREDENONTBINDINGHUWELIJKPARTNERSCHAP;
ldf_huwelijk_historie_tmp.huwhstsoortverbintenis = cipers_huwelijk_historie.HUWHSTSOORTVERBINTENIS;
ldf_huwelijk_historie_tmp.huwhstregistergemeenteaktecode = cipers_huwelijk_historie.HUWHSTREGISTERGEMEENTEAKTECODE;
ldf_huwelijk_historie_tmp.huwhstregistergemeenteakteomschrijving = ldf_gemeenten_huwelijk_akte.gemeenteomschrijving ;
ldf_huwelijk_historie_tmp.huwhstaktenummer = cipers_huwelijk_historie.HUWHSTAKTENUMMER;
ldf_huwelijk_historie_tmp.huwhstgemeentedocumentcode = cipers_huwelijk_historie.HUWHSTGEMEENTEDOCUMENTCODE;
ldf_huwelijk_historie_tmp.huwhstgemeentedocumentomschrijving = ldf_gemeenten_huwelijk_document.gemeenteomschrijving ;
ldf_huwelijk_historie_tmp.huwhstdatumdocument = cipers_huwelijk_historie.HUWHSTDATUMDOCUMENT;
ldf_huwelijk_historie_tmp.huwhstdatumdocumentindicator = cipers_huwelijk_historie.HUWHSTDATUMDOCUMENTINDICATOR;
ldf_huwelijk_historie_tmp.huwhstbeschrijvingdocument = cipers_huwelijk_historie.HUWHSTBESCHRIJVINGDOCUMENT;
ldf_huwelijk_historie_tmp.huwhstaanduidinggegevensonderzoek = cipers_huwelijk_historie.HUWHSTAANDUIDINGGEGEVENSONDERZOEK;
ldf_huwelijk_historie_tmp.huwhstdatumingangonderzoek = cipers_huwelijk_historie.HUWHSTDATUMINGANGONDERZOEK;
ldf_huwelijk_historie_tmp.huwhstdatumingangonderzoekindicator = cipers_huwelijk_historie.HUWHSTDATUMINGANGONDERZOEKINDICATOR;
ldf_huwelijk_historie_tmp.huwhstdatumeindeonderzoek = cipers_huwelijk_historie.HUWHSTDATUMEINDEONDERZOEK;
ldf_huwelijk_historie_tmp.huwhstdatumeindeonderzoekindicator = cipers_huwelijk_historie.HUWHSTDATUMEINDEONDERZOEKINDICATOR;
ldf_huwelijk_historie_tmp.huwhstingangsdatumgeldigheid = cipers_huwelijk_historie.HUWHSTINGANGSDATUMGELDIGHEID;
ldf_huwelijk_historie_tmp.huwhstingangsdatumgeldigheidindicator = cipers_huwelijk_historie.HUWHSTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_huwelijk_historie_tmp.huwhstdatumvanopneming = cipers_huwelijk_historie.HUWHSTDATUMVANOPNEMING;
ldf_huwelijk_historie_tmp.huwhstdatumvanopnemingindicator = cipers_huwelijk_historie.HUWHSTDATUMVANOPNEMINGINDICATOR;
ldf_huwelijk_historie = ldf_huwelijk_historie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_huwelijk_historie"
if(ldf_huwelijk_historie != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_huwelijk_historie
			//ldf_huwelijk_historie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_huwelijk_historie"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_huwelijk_historie.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_huwelijk_historie.huwhstsleuteldatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, ldf_huwelijk_historie.huwhstsleutelvolgnummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(4, ldf_huwelijk_historie.huwhstsleutelgeldigdatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(5, ldf_huwelijk_historie.huwhstsleutelgeldigvolgnummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(6, ldf_huwelijk_historie.huwhstanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(7, ldf_huwelijk_historie.huwhstburgerservicenummer);

                    if(ldf_huwelijk_historie.huwhstvoornamen == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(8, ldf_huwelijk_historie.huwhstvoornamen);
}

                    if(ldf_huwelijk_historie.huwhstvoorletters == null) {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(9, ldf_huwelijk_historie.huwhstvoorletters);
}

                    if(ldf_huwelijk_historie.huwhstadellijketitelcode == null) {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(10, ldf_huwelijk_historie.huwhstadellijketitelcode);
}

                    if(ldf_huwelijk_historie.huwhstadellijketitelomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, ldf_huwelijk_historie.huwhstadellijketitelomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstvoorvoegselgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(12, ldf_huwelijk_historie.huwhstvoorvoegselgeslachtsnaam);
}

                    if(ldf_huwelijk_historie.huwhstgeslachtsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(13, ldf_huwelijk_historie.huwhstgeslachtsnaam);
}

                    if(ldf_huwelijk_historie.huwhstgeboortedatum != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(14, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstgeboortedatum.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstgeboortedatumindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(15, ldf_huwelijk_historie.huwhstgeboortedatumindicator);
}

                    if(ldf_huwelijk_historie.huwhstgeboorteplaatscode == null) {
pstmt_tPostgresqlOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(16, ldf_huwelijk_historie.huwhstgeboorteplaatscode);
}

                    if(ldf_huwelijk_historie.huwhstgeboorteplaatsomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, ldf_huwelijk_historie.huwhstgeboorteplaatsomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstgeboortelandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(18, ldf_huwelijk_historie.huwhstgeboortelandcode);
}

                    if(ldf_huwelijk_historie.huwhstgeboortelandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(19, ldf_huwelijk_historie.huwhstgeboortelandomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstgeslachtsaanduidingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(20, ldf_huwelijk_historie.huwhstgeslachtsaanduidingcode);
}

                    if(ldf_huwelijk_historie.huwhstgeslachtsaanduidingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(21, ldf_huwelijk_historie.huwhstgeslachtsaanduidingomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstdatumsluitinghuwelijkpartnerschap != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(22, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstdatumsluitinghuwelijkpartnerschap.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstdatumsluitinghuwelijkpartnerschapindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(23, ldf_huwelijk_historie.huwhstdatumsluitinghuwelijkpartnerschapindicator);
}

                    if(ldf_huwelijk_historie.huwhstplaatssluitinghuwelijkpartnerschapcode == null) {
pstmt_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(24, ldf_huwelijk_historie.huwhstplaatssluitinghuwelijkpartnerschapcode);
}

                    if(ldf_huwelijk_historie.huwhstplaatssluitinghuwelijkpartnerschapomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(25, ldf_huwelijk_historie.huwhstplaatssluitinghuwelijkpartnerschapomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstlandsluitinghuwelijkpartnerschapcode == null) {
pstmt_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(26, ldf_huwelijk_historie.huwhstlandsluitinghuwelijkpartnerschapcode);
}

                    if(ldf_huwelijk_historie.huwhstlandsluitinghuwelijkpartnerschapomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(27, ldf_huwelijk_historie.huwhstlandsluitinghuwelijkpartnerschapomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstdatumontbindinghuwelijkpartnerschap != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(28, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstdatumontbindinghuwelijkpartnerschap.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(28, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstdatumontbindinghuwelijkpartnerschapindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(29, ldf_huwelijk_historie.huwhstdatumontbindinghuwelijkpartnerschapindicator);
}

                    if(ldf_huwelijk_historie.huwhstplaatsontbindinghuwelijkpartnerschapcode == null) {
pstmt_tPostgresqlOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(30, ldf_huwelijk_historie.huwhstplaatsontbindinghuwelijkpartnerschapcode);
}

                    if(ldf_huwelijk_historie.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(31, ldf_huwelijk_historie.huwhstplaatsontbindinghuwelijkpartnerschapomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstlandontbindinghuwelijkpartnerschapcode == null) {
pstmt_tPostgresqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(32, ldf_huwelijk_historie.huwhstlandontbindinghuwelijkpartnerschapcode);
}

                    if(ldf_huwelijk_historie.huwhstlandontbindinghuwelijkpartnerschapomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(33, ldf_huwelijk_historie.huwhstlandontbindinghuwelijkpartnerschapomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstredenontbindinghuwelijkpartnerschap == null) {
pstmt_tPostgresqlOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(34, ldf_huwelijk_historie.huwhstredenontbindinghuwelijkpartnerschap);
}

                    if(ldf_huwelijk_historie.huwhstsoortverbintenis == null) {
pstmt_tPostgresqlOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(35, ldf_huwelijk_historie.huwhstsoortverbintenis);
}

                    if(ldf_huwelijk_historie.huwhstregistergemeenteaktecode == null) {
pstmt_tPostgresqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(36, ldf_huwelijk_historie.huwhstregistergemeenteaktecode);
}

                    if(ldf_huwelijk_historie.huwhstregistergemeenteakteomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(37, ldf_huwelijk_historie.huwhstregistergemeenteakteomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstaktenummer == null) {
pstmt_tPostgresqlOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(38, ldf_huwelijk_historie.huwhstaktenummer);
}

                    if(ldf_huwelijk_historie.huwhstgemeentedocumentcode == null) {
pstmt_tPostgresqlOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(39, ldf_huwelijk_historie.huwhstgemeentedocumentcode);
}

                    if(ldf_huwelijk_historie.huwhstgemeentedocumentomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(40, ldf_huwelijk_historie.huwhstgemeentedocumentomschrijving);
}

                    if(ldf_huwelijk_historie.huwhstdatumdocument != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(41, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstdatumdocument.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(41, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstdatumdocumentindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(42, ldf_huwelijk_historie.huwhstdatumdocumentindicator);
}

                    if(ldf_huwelijk_historie.huwhstbeschrijvingdocument == null) {
pstmt_tPostgresqlOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(43, ldf_huwelijk_historie.huwhstbeschrijvingdocument);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(44, ldf_huwelijk_historie.huwhstaanduidinggegevensonderzoek);

                    if(ldf_huwelijk_historie.huwhstdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(45, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(45, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(46, ldf_huwelijk_historie.huwhstdatumingangonderzoekindicator);
}

                    if(ldf_huwelijk_historie.huwhstdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(47, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(47, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(48, ldf_huwelijk_historie.huwhstdatumeindeonderzoekindicator);
}

                    if(ldf_huwelijk_historie.huwhstingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(49, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(49, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(50, ldf_huwelijk_historie.huwhstingangsdatumgeldigheidindicator);
}

                    if(ldf_huwelijk_historie.huwhstdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(51, new java.sql.Timestamp(ldf_huwelijk_historie.huwhstdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(51, java.sql.Types.TIMESTAMP);
}

                    if(ldf_huwelijk_historie.huwhstdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(52, ldf_huwelijk_historie.huwhstdatumvanopnemingindicator);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_huwelijk_historie"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_titels_predikaten_huwelijk_naam != null) {
						tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_titels_predikaten_huwelijk_naam" );

					
					
				
					if(tHash_Lookup_ldf_landen_huwelijk_geboorte != null) {
						tHash_Lookup_ldf_landen_huwelijk_geboorte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_huwelijk_geboorte" );

					
					
				
					if(tHash_Lookup_ldf_landen_huwelijk_sluiting != null) {
						tHash_Lookup_ldf_landen_huwelijk_sluiting.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_huwelijk_sluiting" );

					
					
				
					if(tHash_Lookup_ldf_landen_huwelijk_ontbinding != null) {
						tHash_Lookup_ldf_landen_huwelijk_ontbinding.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_huwelijk_ontbinding" );

					
					
				
					if(tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht != null) {
						tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_huwelijk_akte != null) {
						tHash_Lookup_ldf_gemeenten_huwelijk_akte.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_huwelijk_akte" );

					
					
				
					if(tHash_Lookup_ldf_gemeenten_huwelijk_document != null) {
						tHash_Lookup_ldf_gemeenten_huwelijk_document.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_huwelijk_document" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_huwelijk_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_huwelijk_historie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_titels_predikaten_huwelijk_naam"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_huwelijk_geboorte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_huwelijk_sluiting"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_huwelijk_ontbinding"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_huwelijk_akte"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_huwelijk_document"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_titels_predikaten_huwelijk_naamStruct implements routines.system.IPersistableComparableLookupRow<ldf_titels_predikaten_huwelijk_naamStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adellijketitelcode;

				public String getAdellijketitelcode () {
					return this.adellijketitelcode;
				}
				
			    public String adellijketitelomschrijving;

				public String getAdellijketitelomschrijving () {
					return this.adellijketitelomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.adellijketitelcode == null) ? 0 : this.adellijketitelcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_titels_predikaten_huwelijk_naamStruct other = (ldf_titels_predikaten_huwelijk_naamStruct) obj;
		
						if (this.adellijketitelcode == null) {
							if (other.adellijketitelcode != null)
								return false;
						
						} else if (!this.adellijketitelcode.equals(other.adellijketitelcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_titels_predikaten_huwelijk_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            other.adellijketitelomschrijving = this.adellijketitelomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_titels_predikaten_huwelijk_naamStruct other) {

		other.adellijketitelcode = this.adellijketitelcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.adellijketitelcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.adellijketitelcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adellijketitelomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adellijketitelomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adellijketitelcode="+adellijketitelcode);
		sb.append(",adellijketitelomschrijving="+adellijketitelomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_titels_predikaten_huwelijk_naamStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.adellijketitelcode, other.adellijketitelcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_titels_predikaten_huwelijk_naamStruct ldf_titels_predikaten_huwelijk_naam = new ldf_titels_predikaten_huwelijk_naamStruct();




	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_huwelijk_naam", false);
		start_Hash.put("tAdvancedHash_ldf_titels_predikaten_huwelijk_naam", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_huwelijk_naam";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_titels_predikaten_huwelijk_naam" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_titels_predikaten_huwelijk_naam = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_huwelijk_naam{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_titels_predikaten_huwelijk_naam().limitLog4jByte();

			   		// connection name:ldf_titels_predikaten_huwelijk_naam
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_titels_predikaten_huwelijk_naam,ldf_titels_predikaten_huwelijk_naam) | target node:tAdvancedHash_ldf_titels_predikaten_huwelijk_naam - inputs:(ldf_titels_predikaten_huwelijk_naam) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_titels_predikaten_huwelijk_naam = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_titels_predikaten_huwelijk_naamStruct> tHash_Lookup_ldf_titels_predikaten_huwelijk_naam =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_titels_predikaten_huwelijk_naamStruct>getLookup(matchingModeEnum_ldf_titels_predikaten_huwelijk_naam);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_titels_predikaten_huwelijk_naam", tHash_Lookup_ldf_titels_predikaten_huwelijk_naam);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\nadellijketitelcode,\nadellijketitelomschrijving\nfrom ibz_cip_titels_predikaten";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_titels_predikaten_huwelijk_naam.adellijketitelcode = null;
							} else {
	                         		
        	ldf_titels_predikaten_huwelijk_naam.adellijketitelcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_titels_predikaten_huwelijk_naam.adellijketitelomschrijving = null;
							} else {
	                         		
        	ldf_titels_predikaten_huwelijk_naam.adellijketitelomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_huwelijk_naam";

	

			//ldf_titels_predikaten_huwelijk_naam
			//ldf_titels_predikaten_huwelijk_naam


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_titels_predikaten_huwelijk_naam"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_titels_predikaten_huwelijk_naamStruct ldf_titels_predikaten_huwelijk_naam_HashRow = new ldf_titels_predikaten_huwelijk_naamStruct();
		   	   	   
				
				ldf_titels_predikaten_huwelijk_naam_HashRow.adellijketitelcode = ldf_titels_predikaten_huwelijk_naam.adellijketitelcode;
				
				ldf_titels_predikaten_huwelijk_naam_HashRow.adellijketitelomschrijving = ldf_titels_predikaten_huwelijk_naam.adellijketitelomschrijving;
				
			tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.put(ldf_titels_predikaten_huwelijk_naam_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_titels_predikaten_huwelijk_naam++;

/**
 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_huwelijk_naam";

	

tHash_Lookup_ldf_titels_predikaten_huwelijk_naam.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_titels_predikaten_huwelijk_naam"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_titels_predikaten_huwelijk_naam", true);
end_Hash.put("tAdvancedHash_ldf_titels_predikaten_huwelijk_naam", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_titels_predikaten_huwelijk_naam";

	

 



/**
 * [tAdvancedHash_ldf_titels_predikaten_huwelijk_naam finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_huwelijk_geboorteStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_huwelijk_geboorteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_huwelijk_geboorteStruct other = (ldf_landen_huwelijk_geboorteStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_huwelijk_geboorteStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_huwelijk_geboorteStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_huwelijk_geboorteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_huwelijk_geboorteStruct ldf_landen_huwelijk_geboorte = new ldf_landen_huwelijk_geboorteStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_geboorte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_huwelijk_geboorte", false);
		start_Hash.put("tAdvancedHash_ldf_landen_huwelijk_geboorte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_geboorte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_huwelijk_geboorte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_huwelijk_geboorte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_huwelijk_geboorte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_huwelijk_geboorte().limitLog4jByte();

			   		// connection name:ldf_landen_huwelijk_geboorte
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_geboorte) | target node:tAdvancedHash_ldf_landen_huwelijk_geboorte - inputs:(ldf_landen_huwelijk_geboorte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_huwelijk_geboorte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_geboorteStruct> tHash_Lookup_ldf_landen_huwelijk_geboorte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_huwelijk_geboorteStruct>getLookup(matchingModeEnum_ldf_landen_huwelijk_geboorte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_huwelijk_geboorte", tHash_Lookup_ldf_landen_huwelijk_geboorte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_huwelijk_geboorte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_landen_huwelijk_geboorte.landcode = null;
							} else {
	                         		
        	ldf_landen_huwelijk_geboorte.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_landen_huwelijk_geboorte.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_huwelijk_geboorte.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_geboorte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_geboorte";

	

			//ldf_landen_huwelijk_geboorte
			//ldf_landen_huwelijk_geboorte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_huwelijk_geboorte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_huwelijk_geboorteStruct ldf_landen_huwelijk_geboorte_HashRow = new ldf_landen_huwelijk_geboorteStruct();
		   	   	   
				
				ldf_landen_huwelijk_geboorte_HashRow.landcode = ldf_landen_huwelijk_geboorte.landcode;
				
				ldf_landen_huwelijk_geboorte_HashRow.landomschrijving = ldf_landen_huwelijk_geboorte.landomschrijving;
				
			tHash_Lookup_ldf_landen_huwelijk_geboorte.put(ldf_landen_huwelijk_geboorte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_huwelijk_geboorte++;

/**
 * [tAdvancedHash_ldf_landen_huwelijk_geboorte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_geboorte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_geboorte";

	

tHash_Lookup_ldf_landen_huwelijk_geboorte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_huwelijk_geboorte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_huwelijk_geboorte", true);
end_Hash.put("tAdvancedHash_ldf_landen_huwelijk_geboorte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_huwelijk_geboorte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_geboorte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_geboorte";

	

 



/**
 * [tAdvancedHash_ldf_landen_huwelijk_geboorte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_huwelijk_sluitingStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_huwelijk_sluitingStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_huwelijk_sluitingStruct other = (ldf_landen_huwelijk_sluitingStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_huwelijk_sluitingStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_huwelijk_sluitingStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_huwelijk_sluitingStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_huwelijk_sluitingStruct ldf_landen_huwelijk_sluiting = new ldf_landen_huwelijk_sluitingStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_sluiting begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_huwelijk_sluiting", false);
		start_Hash.put("tAdvancedHash_ldf_landen_huwelijk_sluiting", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_sluiting";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_huwelijk_sluiting" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_huwelijk_sluiting = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_huwelijk_sluiting{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_huwelijk_sluiting().limitLog4jByte();

			   		// connection name:ldf_landen_huwelijk_sluiting
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_sluiting) | target node:tAdvancedHash_ldf_landen_huwelijk_sluiting - inputs:(ldf_landen_huwelijk_sluiting) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_huwelijk_sluiting = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_sluitingStruct> tHash_Lookup_ldf_landen_huwelijk_sluiting =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_huwelijk_sluitingStruct>getLookup(matchingModeEnum_ldf_landen_huwelijk_sluiting);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_huwelijk_sluiting", tHash_Lookup_ldf_landen_huwelijk_sluiting);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_huwelijk_sluiting begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_landen_huwelijk_sluiting.landcode = null;
							} else {
	                         		
        	ldf_landen_huwelijk_sluiting.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_landen_huwelijk_sluiting.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_huwelijk_sluiting.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_sluiting main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_sluiting";

	

			//ldf_landen_huwelijk_sluiting
			//ldf_landen_huwelijk_sluiting


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_huwelijk_sluiting"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_huwelijk_sluitingStruct ldf_landen_huwelijk_sluiting_HashRow = new ldf_landen_huwelijk_sluitingStruct();
		   	   	   
				
				ldf_landen_huwelijk_sluiting_HashRow.landcode = ldf_landen_huwelijk_sluiting.landcode;
				
				ldf_landen_huwelijk_sluiting_HashRow.landomschrijving = ldf_landen_huwelijk_sluiting.landomschrijving;
				
			tHash_Lookup_ldf_landen_huwelijk_sluiting.put(ldf_landen_huwelijk_sluiting_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_huwelijk_sluiting++;

/**
 * [tAdvancedHash_ldf_landen_huwelijk_sluiting main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_sluiting end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_sluiting";

	

tHash_Lookup_ldf_landen_huwelijk_sluiting.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_huwelijk_sluiting"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_huwelijk_sluiting", true);
end_Hash.put("tAdvancedHash_ldf_landen_huwelijk_sluiting", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_huwelijk_sluiting end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_sluiting finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_sluiting";

	

 



/**
 * [tAdvancedHash_ldf_landen_huwelijk_sluiting finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_huwelijk_ontbindingStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_huwelijk_ontbindingStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_huwelijk_ontbindingStruct other = (ldf_landen_huwelijk_ontbindingStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_huwelijk_ontbindingStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_huwelijk_ontbindingStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_huwelijk_ontbindingStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_huwelijk_ontbindingStruct ldf_landen_huwelijk_ontbinding = new ldf_landen_huwelijk_ontbindingStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_huwelijk_ontbinding", false);
		start_Hash.put("tAdvancedHash_ldf_landen_huwelijk_ontbinding", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_ontbinding";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_huwelijk_ontbinding" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_huwelijk_ontbinding = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_huwelijk_ontbinding{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_huwelijk_ontbinding().limitLog4jByte();

			   		// connection name:ldf_landen_huwelijk_ontbinding
			   		// source node:tPostgresqlInput_4 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_huwelijk_ontbinding,ldf_landen_huwelijk_ontbinding) | target node:tAdvancedHash_ldf_landen_huwelijk_ontbinding - inputs:(ldf_landen_huwelijk_ontbinding) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_huwelijk_ontbinding = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_huwelijk_ontbindingStruct> tHash_Lookup_ldf_landen_huwelijk_ontbinding =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_huwelijk_ontbindingStruct>getLookup(matchingModeEnum_ldf_landen_huwelijk_ontbinding);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_huwelijk_ontbinding", tHash_Lookup_ldf_landen_huwelijk_ontbinding);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_4", false);
		start_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_4";

	
		int tos_count_tPostgresqlInput_4 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_4 = 0;
		    java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_4);
			   	String dbUser_tPostgresqlInput_4 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;
		        
				
			String url_tPostgresqlInput_4 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_4,dbUser_tPostgresqlInput_4,dbPwd_tPostgresqlInput_4);
		        
				conn_tPostgresqlInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4.createStatement();

		    String dbquery_tPostgresqlInput_4 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_4_QUERY",dbquery_tPostgresqlInput_4);

		    java.sql.ResultSet rs_tPostgresqlInput_4 = null;
		try{
		    rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4.executeQuery(dbquery_tPostgresqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4.getMetaData();
		    int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4.getColumnCount();

		    String tmpContent_tPostgresqlInput_4 = null;
		    
		    
		    while (rs_tPostgresqlInput_4.next()) {
		        nb_line_tPostgresqlInput_4++;
		        
							if(colQtyInRs_tPostgresqlInput_4 < 1) {
								ldf_landen_huwelijk_ontbinding.landcode = null;
							} else {
	                         		
        	ldf_landen_huwelijk_ontbinding.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_4 < 2) {
								ldf_landen_huwelijk_ontbinding.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_huwelijk_ontbinding.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_4, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_4 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 


	tos_count_tPostgresqlInput_4++;

/**
 * [tPostgresqlInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_ontbinding";

	

			//ldf_landen_huwelijk_ontbinding
			//ldf_landen_huwelijk_ontbinding


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_huwelijk_ontbinding"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_huwelijk_ontbindingStruct ldf_landen_huwelijk_ontbinding_HashRow = new ldf_landen_huwelijk_ontbindingStruct();
		   	   	   
				
				ldf_landen_huwelijk_ontbinding_HashRow.landcode = ldf_landen_huwelijk_ontbinding.landcode;
				
				ldf_landen_huwelijk_ontbinding_HashRow.landomschrijving = ldf_landen_huwelijk_ontbinding.landomschrijving;
				
			tHash_Lookup_ldf_landen_huwelijk_ontbinding.put(ldf_landen_huwelijk_ontbinding_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_huwelijk_ontbinding++;

/**
 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding main ] stop
 */



	
	/**
	 * [tPostgresqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

	}
}finally{
	stmt_tPostgresqlInput_4.close();

	if(conn_tPostgresqlInput_4 != null && !conn_tPostgresqlInput_4.isClosed()) {
		
			conn_tPostgresqlInput_4.commit();
			
		
			conn_tPostgresqlInput_4.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_4_NB_LINE",nb_line_tPostgresqlInput_4);
 

ok_Hash.put("tPostgresqlInput_4", true);
end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());




/**
 * [tPostgresqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_ontbinding";

	

tHash_Lookup_ldf_landen_huwelijk_ontbinding.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_huwelijk_ontbinding"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_huwelijk_ontbinding", true);
end_Hash.put("tAdvancedHash_ldf_landen_huwelijk_ontbinding", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_4";

	

 



/**
 * [tPostgresqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_huwelijk_ontbinding";

	

 



/**
 * [tAdvancedHash_ldf_landen_huwelijk_ontbinding finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_geslachtsaanduidingen_huwelijk_geslachtStruct implements routines.system.IPersistableComparableLookupRow<ldf_geslachtsaanduidingen_huwelijk_geslachtStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String geslachtsaanduidingcode;

				public String getGeslachtsaanduidingcode () {
					return this.geslachtsaanduidingcode;
				}
				
			    public String geslachtsaanduidingomschrijving;

				public String getGeslachtsaanduidingomschrijving () {
					return this.geslachtsaanduidingomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.geslachtsaanduidingcode == null) ? 0 : this.geslachtsaanduidingcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_geslachtsaanduidingen_huwelijk_geslachtStruct other = (ldf_geslachtsaanduidingen_huwelijk_geslachtStruct) obj;
		
						if (this.geslachtsaanduidingcode == null) {
							if (other.geslachtsaanduidingcode != null)
								return false;
						
						} else if (!this.geslachtsaanduidingcode.equals(other.geslachtsaanduidingcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_geslachtsaanduidingen_huwelijk_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            other.geslachtsaanduidingomschrijving = this.geslachtsaanduidingomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_geslachtsaanduidingen_huwelijk_geslachtStruct other) {

		other.geslachtsaanduidingcode = this.geslachtsaanduidingcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.geslachtsaanduidingcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.geslachtsaanduidingcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.geslachtsaanduidingomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.geslachtsaanduidingomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("geslachtsaanduidingcode="+geslachtsaanduidingcode);
		sb.append(",geslachtsaanduidingomschrijving="+geslachtsaanduidingomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_geslachtsaanduidingen_huwelijk_geslachtStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.geslachtsaanduidingcode, other.geslachtsaanduidingcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_geslachtsaanduidingen_huwelijk_geslachtStruct ldf_geslachtsaanduidingen_huwelijk_geslacht = new ldf_geslachtsaanduidingen_huwelijk_geslachtStruct();




	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht", false);
		start_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_huwelijk_geslacht" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht().limitLog4jByte();

			   		// connection name:ldf_geslachtsaanduidingen_huwelijk_geslacht
			   		// source node:tPostgresqlInput_5 - inputs:(after_tAS400Input_1) outputs:(ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_geslachtsaanduidingen_huwelijk_geslacht) | target node:tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht - inputs:(ldf_geslachtsaanduidingen_huwelijk_geslacht) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_geslachtsaanduidingen_huwelijk_geslacht = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_geslachtsaanduidingen_huwelijk_geslachtStruct> tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_geslachtsaanduidingen_huwelijk_geslachtStruct>getLookup(matchingModeEnum_ldf_geslachtsaanduidingen_huwelijk_geslacht);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht", tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_5", false);
		start_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_5";

	
		int tos_count_tPostgresqlInput_5 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_5 = 0;
		    java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_5);
			   	String dbUser_tPostgresqlInput_5 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;
		        
				
			String url_tPostgresqlInput_5 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_5,dbUser_tPostgresqlInput_5,dbPwd_tPostgresqlInput_5);
		        
				conn_tPostgresqlInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5.createStatement();

		    String dbquery_tPostgresqlInput_5 = "select\ngeslachtsaanduidingcode,\ngeslachtsaanduidingomschrijving\nfrom ibz_cip_geslachtsaanduidingen";
			

                       globalMap.put("tPostgresqlInput_5_QUERY",dbquery_tPostgresqlInput_5);

		    java.sql.ResultSet rs_tPostgresqlInput_5 = null;
		try{
		    rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5.executeQuery(dbquery_tPostgresqlInput_5);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5.getMetaData();
		    int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5.getColumnCount();

		    String tmpContent_tPostgresqlInput_5 = null;
		    
		    
		    while (rs_tPostgresqlInput_5.next()) {
		        nb_line_tPostgresqlInput_5++;
		        
							if(colQtyInRs_tPostgresqlInput_5 < 1) {
								ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingcode = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_5 < 2) {
								ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingomschrijving = null;
							} else {
	                         		
        	ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_5, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_5 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_5 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 


	tos_count_tPostgresqlInput_5++;

/**
 * [tPostgresqlInput_5 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht";

	

			//ldf_geslachtsaanduidingen_huwelijk_geslacht
			//ldf_geslachtsaanduidingen_huwelijk_geslacht


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_huwelijk_geslacht"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_geslachtsaanduidingen_huwelijk_geslachtStruct ldf_geslachtsaanduidingen_huwelijk_geslacht_HashRow = new ldf_geslachtsaanduidingen_huwelijk_geslachtStruct();
		   	   	   
				
				ldf_geslachtsaanduidingen_huwelijk_geslacht_HashRow.geslachtsaanduidingcode = ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingcode;
				
				ldf_geslachtsaanduidingen_huwelijk_geslacht_HashRow.geslachtsaanduidingomschrijving = ldf_geslachtsaanduidingen_huwelijk_geslacht.geslachtsaanduidingomschrijving;
				
			tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.put(ldf_geslachtsaanduidingen_huwelijk_geslacht_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht++;

/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht main ] stop
 */



	
	/**
	 * [tPostgresqlInput_5 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

	}
}finally{
	stmt_tPostgresqlInput_5.close();

	if(conn_tPostgresqlInput_5 != null && !conn_tPostgresqlInput_5.isClosed()) {
		
			conn_tPostgresqlInput_5.commit();
			
		
			conn_tPostgresqlInput_5.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_5_NB_LINE",nb_line_tPostgresqlInput_5);
 

ok_Hash.put("tPostgresqlInput_5", true);
end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());




/**
 * [tPostgresqlInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht";

	

tHash_Lookup_ldf_geslachtsaanduidingen_huwelijk_geslacht.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_geslachtsaanduidingen_huwelijk_geslacht"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht", true);
end_Hash.put("tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_5 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_5";

	

 



/**
 * [tPostgresqlInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht";

	

 



/**
 * [tAdvancedHash_ldf_geslachtsaanduidingen_huwelijk_geslacht finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_huwelijk_akteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_huwelijk_akteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_huwelijk_akteStruct other = (ldf_gemeenten_huwelijk_akteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_huwelijk_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_huwelijk_akteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_huwelijk_akteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_huwelijk_akteStruct ldf_gemeenten_huwelijk_akte = new ldf_gemeenten_huwelijk_akteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_akte", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_akte", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_akte";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_huwelijk_akte" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_huwelijk_akte = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_huwelijk_akte{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_huwelijk_akte().limitLog4jByte();

			   		// connection name:ldf_gemeenten_huwelijk_akte
			   		// source node:tPostgresqlInput_6 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_akte) | target node:tAdvancedHash_ldf_gemeenten_huwelijk_akte - inputs:(ldf_gemeenten_huwelijk_akte) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_huwelijk_akte = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_akteStruct> tHash_Lookup_ldf_gemeenten_huwelijk_akte =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_huwelijk_akteStruct>getLookup(matchingModeEnum_ldf_gemeenten_huwelijk_akte);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_huwelijk_akte", tHash_Lookup_ldf_gemeenten_huwelijk_akte);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_6", false);
		start_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_6";

	
		int tos_count_tPostgresqlInput_6 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_6().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_6 = 0;
		    java.sql.Connection conn_tPostgresqlInput_6 = null;
				String driverClass_tPostgresqlInput_6 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_6);
			   	String dbUser_tPostgresqlInput_6 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_6 = decryptedPassword_tPostgresqlInput_6;
		        
				
			String url_tPostgresqlInput_6 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_6 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_6,dbUser_tPostgresqlInput_6,dbPwd_tPostgresqlInput_6);
		        
				conn_tPostgresqlInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6.createStatement();

		    String dbquery_tPostgresqlInput_6 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_6_QUERY",dbquery_tPostgresqlInput_6);

		    java.sql.ResultSet rs_tPostgresqlInput_6 = null;
		try{
		    rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6.executeQuery(dbquery_tPostgresqlInput_6);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6.getMetaData();
		    int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6.getColumnCount();

		    String tmpContent_tPostgresqlInput_6 = null;
		    
		    
		    while (rs_tPostgresqlInput_6.next()) {
		        nb_line_tPostgresqlInput_6++;
		        
							if(colQtyInRs_tPostgresqlInput_6 < 1) {
								ldf_gemeenten_huwelijk_akte.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_huwelijk_akte.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_6 < 2) {
								ldf_gemeenten_huwelijk_akte.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_huwelijk_akte.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_6, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_6 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_6 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 


	tos_count_tPostgresqlInput_6++;

/**
 * [tPostgresqlInput_6 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_akte";

	

			//ldf_gemeenten_huwelijk_akte
			//ldf_gemeenten_huwelijk_akte


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_huwelijk_akte"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_huwelijk_akteStruct ldf_gemeenten_huwelijk_akte_HashRow = new ldf_gemeenten_huwelijk_akteStruct();
		   	   	   
				
				ldf_gemeenten_huwelijk_akte_HashRow.gemeentecode = ldf_gemeenten_huwelijk_akte.gemeentecode;
				
				ldf_gemeenten_huwelijk_akte_HashRow.gemeenteomschrijving = ldf_gemeenten_huwelijk_akte.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_huwelijk_akte.put(ldf_gemeenten_huwelijk_akte_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_huwelijk_akte++;

/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte main ] stop
 */



	
	/**
	 * [tPostgresqlInput_6 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

	}
}finally{
	stmt_tPostgresqlInput_6.close();

	if(conn_tPostgresqlInput_6 != null && !conn_tPostgresqlInput_6.isClosed()) {
		
			conn_tPostgresqlInput_6.commit();
			
		
			conn_tPostgresqlInput_6.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_6_NB_LINE",nb_line_tPostgresqlInput_6);
 

ok_Hash.put("tPostgresqlInput_6", true);
end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());




/**
 * [tPostgresqlInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_akte";

	

tHash_Lookup_ldf_gemeenten_huwelijk_akte.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_huwelijk_akte"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_akte", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_akte", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_6 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_6";

	

 



/**
 * [tPostgresqlInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_akte";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_akte finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_huwelijk_documentStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_huwelijk_documentStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_huwelijk_documentStruct other = (ldf_gemeenten_huwelijk_documentStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_huwelijk_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_huwelijk_documentStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_huwelijk_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_huwelijk_documentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_huwelijk_documentStruct ldf_gemeenten_huwelijk_document = new ldf_gemeenten_huwelijk_documentStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_document begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_document", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_document", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_document";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_huwelijk_document" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_huwelijk_document = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_huwelijk_document{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_huwelijk_document().limitLog4jByte();

			   		// connection name:ldf_gemeenten_huwelijk_document
			   		// source node:tPostgresqlInput_7 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_huwelijk_document,ldf_gemeenten_huwelijk_document) | target node:tAdvancedHash_ldf_gemeenten_huwelijk_document - inputs:(ldf_gemeenten_huwelijk_document) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_huwelijk_historie,ldf_titels_predikaten_huwelijk_naam,ldf_landen_huwelijk_geboorte,ldf_landen_huwelijk_sluiting,ldf_landen_huwelijk_ontbinding,ldf_geslachtsaanduidingen_huwelijk_geslacht,ldf_gemeenten_huwelijk_akte,ldf_gemeenten_huwelijk_document) outputs:(ldf_huwelijk_historie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_huwelijk_document = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_huwelijk_documentStruct> tHash_Lookup_ldf_gemeenten_huwelijk_document =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_huwelijk_documentStruct>getLookup(matchingModeEnum_ldf_gemeenten_huwelijk_document);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_huwelijk_document", tHash_Lookup_ldf_gemeenten_huwelijk_document);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_document begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_7", false);
		start_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_7";

	
		int tos_count_tPostgresqlInput_7 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_7().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_7 = 0;
		    java.sql.Connection conn_tPostgresqlInput_7 = null;
				String driverClass_tPostgresqlInput_7 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_7);
			   	String dbUser_tPostgresqlInput_7 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_7 = decryptedPassword_tPostgresqlInput_7;
		        
				
			String url_tPostgresqlInput_7 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_7 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_7,dbUser_tPostgresqlInput_7,dbPwd_tPostgresqlInput_7);
		        
				conn_tPostgresqlInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7.createStatement();

		    String dbquery_tPostgresqlInput_7 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_7_QUERY",dbquery_tPostgresqlInput_7);

		    java.sql.ResultSet rs_tPostgresqlInput_7 = null;
		try{
		    rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7.executeQuery(dbquery_tPostgresqlInput_7);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7.getMetaData();
		    int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7.getColumnCount();

		    String tmpContent_tPostgresqlInput_7 = null;
		    
		    
		    while (rs_tPostgresqlInput_7.next()) {
		        nb_line_tPostgresqlInput_7++;
		        
							if(colQtyInRs_tPostgresqlInput_7 < 1) {
								ldf_gemeenten_huwelijk_document.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_huwelijk_document.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_7, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_7 < 2) {
								ldf_gemeenten_huwelijk_document.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_huwelijk_document.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_7, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_7 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_7 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 


	tos_count_tPostgresqlInput_7++;

/**
 * [tPostgresqlInput_7 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_document main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_document";

	

			//ldf_gemeenten_huwelijk_document
			//ldf_gemeenten_huwelijk_document


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_huwelijk_document"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_huwelijk_documentStruct ldf_gemeenten_huwelijk_document_HashRow = new ldf_gemeenten_huwelijk_documentStruct();
		   	   	   
				
				ldf_gemeenten_huwelijk_document_HashRow.gemeentecode = ldf_gemeenten_huwelijk_document.gemeentecode;
				
				ldf_gemeenten_huwelijk_document_HashRow.gemeenteomschrijving = ldf_gemeenten_huwelijk_document.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_huwelijk_document.put(ldf_gemeenten_huwelijk_document_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_huwelijk_document++;

/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_document main ] stop
 */



	
	/**
	 * [tPostgresqlInput_7 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

	}
}finally{
	stmt_tPostgresqlInput_7.close();

	if(conn_tPostgresqlInput_7 != null && !conn_tPostgresqlInput_7.isClosed()) {
		
			conn_tPostgresqlInput_7.commit();
			
		
			conn_tPostgresqlInput_7.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_7_NB_LINE",nb_line_tPostgresqlInput_7);
 

ok_Hash.put("tPostgresqlInput_7", true);
end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());




/**
 * [tPostgresqlInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_document end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_document";

	

tHash_Lookup_ldf_gemeenten_huwelijk_document.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_huwelijk_document"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_document", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_huwelijk_document", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_document end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_7 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_7";

	

 



/**
 * [tPostgresqlInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_huwelijk_document finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_huwelijk_document";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_huwelijk_document finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_huwelijk_historie ibz_cipers_fill_ldf_huwelijk_historieClass = new ibz_cipers_fill_ldf_huwelijk_historie();

        int exitCode = ibz_cipers_fill_ldf_huwelijk_historieClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_huwelijk_historie.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_huwelijk_historie_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_huwelijk_historie");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     344078 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:52 CET
 ************************************************************************************************/