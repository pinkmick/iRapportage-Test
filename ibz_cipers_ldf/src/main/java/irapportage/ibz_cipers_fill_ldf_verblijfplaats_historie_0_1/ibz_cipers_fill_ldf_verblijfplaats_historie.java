// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package irapportage.ibz_cipers_fill_ldf_verblijfplaats_historie_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.GeoOperation;
import routines.OpenStreetMap;
import routines.GeometryOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ibz_cipers_fill_ldf_verblijfplaats_historie Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class ibz_cipers_fill_ldf_verblijfplaats_historie implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(cip_database != null){
				
					this.setProperty("cip_database", cip_database.toString());
				
			}
			
			if(cip_host != null){
				
					this.setProperty("cip_host", cip_host.toString());
				
			}
			
			if(cip_password != null){
				
					this.setProperty("cip_password", cip_password.toString());
				
			}
			
			if(cip_username != null){
				
					this.setProperty("cip_username", cip_username.toString());
				
			}
			
			if(mks_database != null){
				
					this.setProperty("mks_database", mks_database.toString());
				
			}
			
			if(mks_host != null){
				
					this.setProperty("mks_host", mks_host.toString());
				
			}
			
			if(mks_port != null){
				
					this.setProperty("mks_port", mks_port.toString());
				
			}
			
		}

public String cip_database;
public String getCip_database(){
	return this.cip_database;
}
public String cip_host;
public String getCip_host(){
	return this.cip_host;
}
public String cip_password;
public String getCip_password(){
	return this.cip_password;
}
public String cip_username;
public String getCip_username(){
	return this.cip_username;
}
public String mks_database;
public String getMks_database(){
	return this.mks_database;
}
public String mks_host;
public String getMks_host(){
	return this.mks_host;
}
public String mks_port;
public String getMks_port(){
	return this.mks_port;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ibz_cipers_fill_ldf_verblijfplaats_historie";
	private final String projectName = "IRAPPORTAGE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ibz_cipers_fill_ldf_verblijfplaats_historie.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ibz_cipers_fill_ldf_verblijfplaats_historie.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAS400Input_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tAS400Input_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ldf_landen_verblijfplaats_immigratie_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAS400Input_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class cipersStruct implements routines.system.IPersistableRow<cipersStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipersStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		cipersStruct cipers = new cipersStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "./concipers.txt";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("./concipers.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						cipers = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									cipers = new cipersStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							cipers.key = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							cipers.value = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					cipers = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "cipers"
if(cipers != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//cipers
			//cipers


			
				if(execStat){
					runStat.updateStatOnConnection("cipers"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (cipers.key != null){
                          tmp_key_tContextLoad_1 = cipers.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          cipers.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(cipers.key != null) {
                    key_tContextLoad_1 =
                        cipers.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(cipers.value != null) {
                    value_tContextLoad_1 =
                        cipers.value;
                        }

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "cip_database".equals(key_tContextLoad_1))
        {
           context.cip_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_host".equals(key_tContextLoad_1))
        {
           context.cip_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_password".equals(key_tContextLoad_1))
        {
           context.cip_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "cip_username".equals(key_tContextLoad_1))
        {
           context.cip_username=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_database".equals(key_tContextLoad_1))
        {
           context.mks_database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_host".equals(key_tContextLoad_1))
        {
           context.mks_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "mks_port".equals(key_tContextLoad_1))
        {
           context.mks_port=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "cipers"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("./concipers.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class mksStruct implements routines.system.IPersistableRow<mksStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mksStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		mksStruct mks = new mksStruct();




	
	/**
	 * [tContextLoad_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_2", false);
		start_Hash.put("tContextLoad_2", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mks" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_2 = 0;
		
    	class BytesLimit65535_tContextLoad_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_2().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_2 = 0;

 



/**
 * [tContextLoad_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = "./conmks.txt";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("./conmks.txt", "US-ASCII",";","\n",false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						mks = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									mks = new mksStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							mks.key = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							mks.value = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					mks = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "mks"
if(mks != null) { 



	
	/**
	 * [tContextLoad_2 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

			//mks
			//mks


			
				if(execStat){
					runStat.updateStatOnConnection("mks"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_2 = null;
                    String key_tContextLoad_2 = null;
                      if (mks.key != null){
                          tmp_key_tContextLoad_2 = mks.key.trim();
                        if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2.startsWith("!") )){
                          tmp_key_tContextLoad_2 = null;
                        } else {
                          mks.key = tmp_key_tContextLoad_2;
                        }
                      }
                        if(mks.key != null) {
                    key_tContextLoad_2 =
                        mks.key;
                        }
                    String value_tContextLoad_2 = null;
                        if(mks.value != null) {
                    value_tContextLoad_2 =
                        mks.value;
                        }

  if (tmp_key_tContextLoad_2 != null){
  try{
        if(key_tContextLoad_2!=null && "cip_database".equals(key_tContextLoad_2))
        {
           context.cip_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_host".equals(key_tContextLoad_2))
        {
           context.cip_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_password".equals(key_tContextLoad_2))
        {
           context.cip_password=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "cip_username".equals(key_tContextLoad_2))
        {
           context.cip_username=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_database".equals(key_tContextLoad_2))
        {
           context.mks_database=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_host".equals(key_tContextLoad_2))
        {
           context.mks_host=value_tContextLoad_2;
        }

        if(key_tContextLoad_2!=null && "mks_port".equals(key_tContextLoad_2))
        {
           context.mks_port=value_tContextLoad_2;
        }


        if (context.getProperty(key_tContextLoad_2)!=null)
        {
            assignList_tContextLoad_2.add(key_tContextLoad_2);
        }else  {
            newPropertyList_tContextLoad_2.add(key_tContextLoad_2);
        }
        if(value_tContextLoad_2 == null){
            context.setProperty(key_tContextLoad_2, "");
        }else{
            context.setProperty(key_tContextLoad_2,value_tContextLoad_2);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_2 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_2++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_2++;

/**
 * [tContextLoad_2 main ] stop
 */

} // End of branch "mks"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("./conmks.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tContextLoad_2 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	
	
	java.util.Enumeration<?> enu_tContextLoad_2 = context.propertyNames();
    while(enu_tContextLoad_2.hasMoreElements())
    {           
    	String key_tContextLoad_2 = (String)enu_tContextLoad_2.nextElement();
        if(!assignList_tContextLoad_2.contains(key_tContextLoad_2) && !newPropertyList_tContextLoad_2.contains(key_tContextLoad_2))
        {
            noAssignList_tContextLoad_2.add(key_tContextLoad_2);
        }          
    } 

    String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2.toString();
    String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2.substring(1, newPropertyStr_tContextLoad_2.length() - 1);
    
    String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2.toString();
    String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2.substring(1, noAssignStr_tContextLoad_2.length() - 1);
    
    globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT", newProperty_tContextLoad_2);
    globalMap.put("tContextLoad_2_KEY_NOT_LOADED", noAssign_tContextLoad_2);

    globalMap.put("tContextLoad_2_NB_LINE",nb_line_tContextLoad_2);

	List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_2));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mks"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_2", true);
end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tAS400Input_1Process(globalMap);



/**
 * [tContextLoad_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tContextLoad_2 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_2";

	

 



/**
 * [tContextLoad_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_verblijfplaatsStruct implements routines.system.IPersistableRow<ldf_verblijfplaatsStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal prsanummer;

				public BigDecimal getPrsanummer () {
					return this.prsanummer;
				}
				
			    public BigDecimal vblhstsleutelgeldigdatum;

				public BigDecimal getVblhstsleutelgeldigdatum () {
					return this.vblhstsleutelgeldigdatum;
				}
				
			    public BigDecimal vblhstsleutelgeldigvolgnummer;

				public BigDecimal getVblhstsleutelgeldigvolgnummer () {
					return this.vblhstsleutelgeldigvolgnummer;
				}
				
			    public String vblhstgemeentevaninschrijvingcode;

				public String getVblhstgemeentevaninschrijvingcode () {
					return this.vblhstgemeentevaninschrijvingcode;
				}
				
			    public String vblhstgemeentevaninschrijvingomschrijving;

				public String getVblhstgemeentevaninschrijvingomschrijving () {
					return this.vblhstgemeentevaninschrijvingomschrijving;
				}
				
			    public java.util.Date vblhstdatuminschrijving;

				public java.util.Date getVblhstdatuminschrijving () {
					return this.vblhstdatuminschrijving;
				}
				
			    public String vblhstdatuminschrijvingindicator;

				public String getVblhstdatuminschrijvingindicator () {
					return this.vblhstdatuminschrijvingindicator;
				}
				
			    public String vblhstfunctieadres;

				public String getVblhstfunctieadres () {
					return this.vblhstfunctieadres;
				}
				
			    public String vblhstgemeentedeel;

				public String getVblhstgemeentedeel () {
					return this.vblhstgemeentedeel;
				}
				
			    public java.util.Date vblhstdatumaanvangadreshouding;

				public java.util.Date getVblhstdatumaanvangadreshouding () {
					return this.vblhstdatumaanvangadreshouding;
				}
				
			    public String vblhstdatumaanvangadreshoudingindicator;

				public String getVblhstdatumaanvangadreshoudingindicator () {
					return this.vblhstdatumaanvangadreshoudingindicator;
				}
				
			    public String vblhststraatnaam;

				public String getVblhststraatnaam () {
					return this.vblhststraatnaam;
				}
				
			    public String vblhstnaamopenbareruimte;

				public String getVblhstnaamopenbareruimte () {
					return this.vblhstnaamopenbareruimte;
				}
				
			    public String vblhstadresopgemaakt;

				public String getVblhstadresopgemaakt () {
					return this.vblhstadresopgemaakt;
				}
				
			    public String vblhstwoonplaatsopgemaakt;

				public String getVblhstwoonplaatsopgemaakt () {
					return this.vblhstwoonplaatsopgemaakt;
				}
				
			    public BigDecimal vblhsthuisnummer;

				public BigDecimal getVblhsthuisnummer () {
					return this.vblhsthuisnummer;
				}
				
			    public String vblhsthuisletter;

				public String getVblhsthuisletter () {
					return this.vblhsthuisletter;
				}
				
			    public String vblhsthuisnummertoevoeging;

				public String getVblhsthuisnummertoevoeging () {
					return this.vblhsthuisnummertoevoeging;
				}
				
			    public String vblhstaanduidingbijhuisnummer;

				public String getVblhstaanduidingbijhuisnummer () {
					return this.vblhstaanduidingbijhuisnummer;
				}
				
			    public String vblhstpostcode;

				public String getVblhstpostcode () {
					return this.vblhstpostcode;
				}
				
			    public String vblhstwoonplaatsnaam;

				public String getVblhstwoonplaatsnaam () {
					return this.vblhstwoonplaatsnaam;
				}
				
			    public String vblhstidentificatiecodeverblijfplaats;

				public String getVblhstidentificatiecodeverblijfplaats () {
					return this.vblhstidentificatiecodeverblijfplaats;
				}
				
			    public String vblhstidentificatiecodenummeraanduiding;

				public String getVblhstidentificatiecodenummeraanduiding () {
					return this.vblhstidentificatiecodenummeraanduiding;
				}
				
			    public String vblhstlocatiebeschrijving;

				public String getVblhstlocatiebeschrijving () {
					return this.vblhstlocatiebeschrijving;
				}
				
			    public String vblhstlandadresbuitenlandcode;

				public String getVblhstlandadresbuitenlandcode () {
					return this.vblhstlandadresbuitenlandcode;
				}
				
			    public String vblhstlandadresbuitenlandomschrijving;

				public String getVblhstlandadresbuitenlandomschrijving () {
					return this.vblhstlandadresbuitenlandomschrijving;
				}
				
			    public java.util.Date vblhstdatumaanvangadresbuitenland;

				public java.util.Date getVblhstdatumaanvangadresbuitenland () {
					return this.vblhstdatumaanvangadresbuitenland;
				}
				
			    public String vblhstdatumaanvangadresbuitenlandindicator;

				public String getVblhstdatumaanvangadresbuitenlandindicator () {
					return this.vblhstdatumaanvangadresbuitenlandindicator;
				}
				
			    public String vblhstregel1adresbuitenland;

				public String getVblhstregel1adresbuitenland () {
					return this.vblhstregel1adresbuitenland;
				}
				
			    public String vblhstregel2adresbuitenland;

				public String getVblhstregel2adresbuitenland () {
					return this.vblhstregel2adresbuitenland;
				}
				
			    public String vblhstregel3adresbuitenland;

				public String getVblhstregel3adresbuitenland () {
					return this.vblhstregel3adresbuitenland;
				}
				
			    public String vblhstlandvanwaaringeschrevencode;

				public String getVblhstlandvanwaaringeschrevencode () {
					return this.vblhstlandvanwaaringeschrevencode;
				}
				
			    public String vblhstlandvanwaaringeschrevenomschrijving;

				public String getVblhstlandvanwaaringeschrevenomschrijving () {
					return this.vblhstlandvanwaaringeschrevenomschrijving;
				}
				
			    public java.util.Date vblhstdatumvestiginginnederland;

				public java.util.Date getVblhstdatumvestiginginnederland () {
					return this.vblhstdatumvestiginginnederland;
				}
				
			    public String vblhstdatumvestiginginnederlandindicator;

				public String getVblhstdatumvestiginginnederlandindicator () {
					return this.vblhstdatumvestiginginnederlandindicator;
				}
				
			    public String vblhstomschrijvingvanaangifteadreshouding;

				public String getVblhstomschrijvingvanaangifteadreshouding () {
					return this.vblhstomschrijvingvanaangifteadreshouding;
				}
				
			    public BigDecimal vblhstindicatiedocument;

				public BigDecimal getVblhstindicatiedocument () {
					return this.vblhstindicatiedocument;
				}
				
			    public BigDecimal vblhstaanduidinggegevensonderzoek;

				public BigDecimal getVblhstaanduidinggegevensonderzoek () {
					return this.vblhstaanduidinggegevensonderzoek;
				}
				
			    public java.util.Date vblhstdatumingangonderzoek;

				public java.util.Date getVblhstdatumingangonderzoek () {
					return this.vblhstdatumingangonderzoek;
				}
				
			    public String vblhstdatumingangonderzoekindicator;

				public String getVblhstdatumingangonderzoekindicator () {
					return this.vblhstdatumingangonderzoekindicator;
				}
				
			    public java.util.Date vblhstdatumeindeonderzoek;

				public java.util.Date getVblhstdatumeindeonderzoek () {
					return this.vblhstdatumeindeonderzoek;
				}
				
			    public String vblhstdatumeindeonderzoekindicator;

				public String getVblhstdatumeindeonderzoekindicator () {
					return this.vblhstdatumeindeonderzoekindicator;
				}
				
			    public java.util.Date vblhstingangsdatumgeldigheid;

				public java.util.Date getVblhstingangsdatumgeldigheid () {
					return this.vblhstingangsdatumgeldigheid;
				}
				
			    public String vblhstingangsdatumgeldigheidindicator;

				public String getVblhstingangsdatumgeldigheidindicator () {
					return this.vblhstingangsdatumgeldigheidindicator;
				}
				
			    public java.util.Date vblhstdatumvanopneming;

				public java.util.Date getVblhstdatumvanopneming () {
					return this.vblhstdatumvanopneming;
				}
				
			    public String vblhstdatumvanopnemingindicator;

				public String getVblhstdatumvanopnemingindicator () {
					return this.vblhstdatumvanopnemingindicator;
				}
				
			    public String vblhstwijkcode;

				public String getVblhstwijkcode () {
					return this.vblhstwijkcode;
				}
				
			    public String vblhstwijkomschrijving;

				public String getVblhstwijkomschrijving () {
					return this.vblhstwijkomschrijving;
				}
				
			    public String vblhstplanalogischewijkcode;

				public String getVblhstplanalogischewijkcode () {
					return this.vblhstplanalogischewijkcode;
				}
				
			    public String vblhstplanalogischewijkomschrijving;

				public String getVblhstplanalogischewijkomschrijving () {
					return this.vblhstplanalogischewijkomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prsanummer == null) ? 0 : this.prsanummer.hashCode());
					
						result = prime * result + ((this.vblhstsleutelgeldigdatum == null) ? 0 : this.vblhstsleutelgeldigdatum.hashCode());
					
						result = prime * result + ((this.vblhstsleutelgeldigvolgnummer == null) ? 0 : this.vblhstsleutelgeldigvolgnummer.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_verblijfplaatsStruct other = (ldf_verblijfplaatsStruct) obj;
		
						if (this.prsanummer == null) {
							if (other.prsanummer != null)
								return false;
						
						} else if (!this.prsanummer.equals(other.prsanummer))
						
							return false;
					
						if (this.vblhstsleutelgeldigdatum == null) {
							if (other.vblhstsleutelgeldigdatum != null)
								return false;
						
						} else if (!this.vblhstsleutelgeldigdatum.equals(other.vblhstsleutelgeldigdatum))
						
							return false;
					
						if (this.vblhstsleutelgeldigvolgnummer == null) {
							if (other.vblhstsleutelgeldigvolgnummer != null)
								return false;
						
						} else if (!this.vblhstsleutelgeldigvolgnummer.equals(other.vblhstsleutelgeldigvolgnummer))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_verblijfplaatsStruct other) {

		other.prsanummer = this.prsanummer;
	            other.vblhstsleutelgeldigdatum = this.vblhstsleutelgeldigdatum;
	            other.vblhstsleutelgeldigvolgnummer = this.vblhstsleutelgeldigvolgnummer;
	            other.vblhstgemeentevaninschrijvingcode = this.vblhstgemeentevaninschrijvingcode;
	            other.vblhstgemeentevaninschrijvingomschrijving = this.vblhstgemeentevaninschrijvingomschrijving;
	            other.vblhstdatuminschrijving = this.vblhstdatuminschrijving;
	            other.vblhstdatuminschrijvingindicator = this.vblhstdatuminschrijvingindicator;
	            other.vblhstfunctieadres = this.vblhstfunctieadres;
	            other.vblhstgemeentedeel = this.vblhstgemeentedeel;
	            other.vblhstdatumaanvangadreshouding = this.vblhstdatumaanvangadreshouding;
	            other.vblhstdatumaanvangadreshoudingindicator = this.vblhstdatumaanvangadreshoudingindicator;
	            other.vblhststraatnaam = this.vblhststraatnaam;
	            other.vblhstnaamopenbareruimte = this.vblhstnaamopenbareruimte;
	            other.vblhstadresopgemaakt = this.vblhstadresopgemaakt;
	            other.vblhstwoonplaatsopgemaakt = this.vblhstwoonplaatsopgemaakt;
	            other.vblhsthuisnummer = this.vblhsthuisnummer;
	            other.vblhsthuisletter = this.vblhsthuisletter;
	            other.vblhsthuisnummertoevoeging = this.vblhsthuisnummertoevoeging;
	            other.vblhstaanduidingbijhuisnummer = this.vblhstaanduidingbijhuisnummer;
	            other.vblhstpostcode = this.vblhstpostcode;
	            other.vblhstwoonplaatsnaam = this.vblhstwoonplaatsnaam;
	            other.vblhstidentificatiecodeverblijfplaats = this.vblhstidentificatiecodeverblijfplaats;
	            other.vblhstidentificatiecodenummeraanduiding = this.vblhstidentificatiecodenummeraanduiding;
	            other.vblhstlocatiebeschrijving = this.vblhstlocatiebeschrijving;
	            other.vblhstlandadresbuitenlandcode = this.vblhstlandadresbuitenlandcode;
	            other.vblhstlandadresbuitenlandomschrijving = this.vblhstlandadresbuitenlandomschrijving;
	            other.vblhstdatumaanvangadresbuitenland = this.vblhstdatumaanvangadresbuitenland;
	            other.vblhstdatumaanvangadresbuitenlandindicator = this.vblhstdatumaanvangadresbuitenlandindicator;
	            other.vblhstregel1adresbuitenland = this.vblhstregel1adresbuitenland;
	            other.vblhstregel2adresbuitenland = this.vblhstregel2adresbuitenland;
	            other.vblhstregel3adresbuitenland = this.vblhstregel3adresbuitenland;
	            other.vblhstlandvanwaaringeschrevencode = this.vblhstlandvanwaaringeschrevencode;
	            other.vblhstlandvanwaaringeschrevenomschrijving = this.vblhstlandvanwaaringeschrevenomschrijving;
	            other.vblhstdatumvestiginginnederland = this.vblhstdatumvestiginginnederland;
	            other.vblhstdatumvestiginginnederlandindicator = this.vblhstdatumvestiginginnederlandindicator;
	            other.vblhstomschrijvingvanaangifteadreshouding = this.vblhstomschrijvingvanaangifteadreshouding;
	            other.vblhstindicatiedocument = this.vblhstindicatiedocument;
	            other.vblhstaanduidinggegevensonderzoek = this.vblhstaanduidinggegevensonderzoek;
	            other.vblhstdatumingangonderzoek = this.vblhstdatumingangonderzoek;
	            other.vblhstdatumingangonderzoekindicator = this.vblhstdatumingangonderzoekindicator;
	            other.vblhstdatumeindeonderzoek = this.vblhstdatumeindeonderzoek;
	            other.vblhstdatumeindeonderzoekindicator = this.vblhstdatumeindeonderzoekindicator;
	            other.vblhstingangsdatumgeldigheid = this.vblhstingangsdatumgeldigheid;
	            other.vblhstingangsdatumgeldigheidindicator = this.vblhstingangsdatumgeldigheidindicator;
	            other.vblhstdatumvanopneming = this.vblhstdatumvanopneming;
	            other.vblhstdatumvanopnemingindicator = this.vblhstdatumvanopnemingindicator;
	            other.vblhstwijkcode = this.vblhstwijkcode;
	            other.vblhstwijkomschrijving = this.vblhstwijkomschrijving;
	            other.vblhstplanalogischewijkcode = this.vblhstplanalogischewijkcode;
	            other.vblhstplanalogischewijkomschrijving = this.vblhstplanalogischewijkomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_verblijfplaatsStruct other) {

		other.prsanummer = this.prsanummer;
	            	other.vblhstsleutelgeldigdatum = this.vblhstsleutelgeldigdatum;
	            	other.vblhstsleutelgeldigvolgnummer = this.vblhstsleutelgeldigvolgnummer;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
						this.prsanummer = (BigDecimal) dis.readObject();
					
						this.vblhstsleutelgeldigdatum = (BigDecimal) dis.readObject();
					
						this.vblhstsleutelgeldigvolgnummer = (BigDecimal) dis.readObject();
					
					this.vblhstgemeentevaninschrijvingcode = readString(dis);
					
					this.vblhstgemeentevaninschrijvingomschrijving = readString(dis);
					
					this.vblhstdatuminschrijving = readDate(dis);
					
					this.vblhstdatuminschrijvingindicator = readString(dis);
					
					this.vblhstfunctieadres = readString(dis);
					
					this.vblhstgemeentedeel = readString(dis);
					
					this.vblhstdatumaanvangadreshouding = readDate(dis);
					
					this.vblhstdatumaanvangadreshoudingindicator = readString(dis);
					
					this.vblhststraatnaam = readString(dis);
					
					this.vblhstnaamopenbareruimte = readString(dis);
					
					this.vblhstadresopgemaakt = readString(dis);
					
					this.vblhstwoonplaatsopgemaakt = readString(dis);
					
						this.vblhsthuisnummer = (BigDecimal) dis.readObject();
					
					this.vblhsthuisletter = readString(dis);
					
					this.vblhsthuisnummertoevoeging = readString(dis);
					
					this.vblhstaanduidingbijhuisnummer = readString(dis);
					
					this.vblhstpostcode = readString(dis);
					
					this.vblhstwoonplaatsnaam = readString(dis);
					
					this.vblhstidentificatiecodeverblijfplaats = readString(dis);
					
					this.vblhstidentificatiecodenummeraanduiding = readString(dis);
					
					this.vblhstlocatiebeschrijving = readString(dis);
					
					this.vblhstlandadresbuitenlandcode = readString(dis);
					
					this.vblhstlandadresbuitenlandomschrijving = readString(dis);
					
					this.vblhstdatumaanvangadresbuitenland = readDate(dis);
					
					this.vblhstdatumaanvangadresbuitenlandindicator = readString(dis);
					
					this.vblhstregel1adresbuitenland = readString(dis);
					
					this.vblhstregel2adresbuitenland = readString(dis);
					
					this.vblhstregel3adresbuitenland = readString(dis);
					
					this.vblhstlandvanwaaringeschrevencode = readString(dis);
					
					this.vblhstlandvanwaaringeschrevenomschrijving = readString(dis);
					
					this.vblhstdatumvestiginginnederland = readDate(dis);
					
					this.vblhstdatumvestiginginnederlandindicator = readString(dis);
					
					this.vblhstomschrijvingvanaangifteadreshouding = readString(dis);
					
						this.vblhstindicatiedocument = (BigDecimal) dis.readObject();
					
						this.vblhstaanduidinggegevensonderzoek = (BigDecimal) dis.readObject();
					
					this.vblhstdatumingangonderzoek = readDate(dis);
					
					this.vblhstdatumingangonderzoekindicator = readString(dis);
					
					this.vblhstdatumeindeonderzoek = readDate(dis);
					
					this.vblhstdatumeindeonderzoekindicator = readString(dis);
					
					this.vblhstingangsdatumgeldigheid = readDate(dis);
					
					this.vblhstingangsdatumgeldigheidindicator = readString(dis);
					
					this.vblhstdatumvanopneming = readDate(dis);
					
					this.vblhstdatumvanopnemingindicator = readString(dis);
					
					this.vblhstwijkcode = readString(dis);
					
					this.vblhstwijkomschrijving = readString(dis);
					
					this.vblhstplanalogischewijkcode = readString(dis);
					
					this.vblhstplanalogischewijkomschrijving = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.prsanummer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstsleutelgeldigdatum);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstsleutelgeldigvolgnummer);
					
					// String
				
						writeString(this.vblhstgemeentevaninschrijvingcode,dos);
					
					// String
				
						writeString(this.vblhstgemeentevaninschrijvingomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatuminschrijving,dos);
					
					// String
				
						writeString(this.vblhstdatuminschrijvingindicator,dos);
					
					// String
				
						writeString(this.vblhstfunctieadres,dos);
					
					// String
				
						writeString(this.vblhstgemeentedeel,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumaanvangadreshouding,dos);
					
					// String
				
						writeString(this.vblhstdatumaanvangadreshoudingindicator,dos);
					
					// String
				
						writeString(this.vblhststraatnaam,dos);
					
					// String
				
						writeString(this.vblhstnaamopenbareruimte,dos);
					
					// String
				
						writeString(this.vblhstadresopgemaakt,dos);
					
					// String
				
						writeString(this.vblhstwoonplaatsopgemaakt,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhsthuisnummer);
					
					// String
				
						writeString(this.vblhsthuisletter,dos);
					
					// String
				
						writeString(this.vblhsthuisnummertoevoeging,dos);
					
					// String
				
						writeString(this.vblhstaanduidingbijhuisnummer,dos);
					
					// String
				
						writeString(this.vblhstpostcode,dos);
					
					// String
				
						writeString(this.vblhstwoonplaatsnaam,dos);
					
					// String
				
						writeString(this.vblhstidentificatiecodeverblijfplaats,dos);
					
					// String
				
						writeString(this.vblhstidentificatiecodenummeraanduiding,dos);
					
					// String
				
						writeString(this.vblhstlocatiebeschrijving,dos);
					
					// String
				
						writeString(this.vblhstlandadresbuitenlandcode,dos);
					
					// String
				
						writeString(this.vblhstlandadresbuitenlandomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumaanvangadresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstdatumaanvangadresbuitenlandindicator,dos);
					
					// String
				
						writeString(this.vblhstregel1adresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstregel2adresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstregel3adresbuitenland,dos);
					
					// String
				
						writeString(this.vblhstlandvanwaaringeschrevencode,dos);
					
					// String
				
						writeString(this.vblhstlandvanwaaringeschrevenomschrijving,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumvestiginginnederland,dos);
					
					// String
				
						writeString(this.vblhstdatumvestiginginnederlandindicator,dos);
					
					// String
				
						writeString(this.vblhstomschrijvingvanaangifteadreshouding,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstindicatiedocument);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vblhstaanduidinggegevensonderzoek);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumingangonderzoek,dos);
					
					// String
				
						writeString(this.vblhstdatumingangonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumeindeonderzoek,dos);
					
					// String
				
						writeString(this.vblhstdatumeindeonderzoekindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstingangsdatumgeldigheid,dos);
					
					// String
				
						writeString(this.vblhstingangsdatumgeldigheidindicator,dos);
					
					// java.util.Date
				
						writeDate(this.vblhstdatumvanopneming,dos);
					
					// String
				
						writeString(this.vblhstdatumvanopnemingindicator,dos);
					
					// String
				
						writeString(this.vblhstwijkcode,dos);
					
					// String
				
						writeString(this.vblhstwijkomschrijving,dos);
					
					// String
				
						writeString(this.vblhstplanalogischewijkcode,dos);
					
					// String
				
						writeString(this.vblhstplanalogischewijkomschrijving,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prsanummer="+String.valueOf(prsanummer));
		sb.append(",vblhstsleutelgeldigdatum="+String.valueOf(vblhstsleutelgeldigdatum));
		sb.append(",vblhstsleutelgeldigvolgnummer="+String.valueOf(vblhstsleutelgeldigvolgnummer));
		sb.append(",vblhstgemeentevaninschrijvingcode="+vblhstgemeentevaninschrijvingcode);
		sb.append(",vblhstgemeentevaninschrijvingomschrijving="+vblhstgemeentevaninschrijvingomschrijving);
		sb.append(",vblhstdatuminschrijving="+String.valueOf(vblhstdatuminschrijving));
		sb.append(",vblhstdatuminschrijvingindicator="+vblhstdatuminschrijvingindicator);
		sb.append(",vblhstfunctieadres="+vblhstfunctieadres);
		sb.append(",vblhstgemeentedeel="+vblhstgemeentedeel);
		sb.append(",vblhstdatumaanvangadreshouding="+String.valueOf(vblhstdatumaanvangadreshouding));
		sb.append(",vblhstdatumaanvangadreshoudingindicator="+vblhstdatumaanvangadreshoudingindicator);
		sb.append(",vblhststraatnaam="+vblhststraatnaam);
		sb.append(",vblhstnaamopenbareruimte="+vblhstnaamopenbareruimte);
		sb.append(",vblhstadresopgemaakt="+vblhstadresopgemaakt);
		sb.append(",vblhstwoonplaatsopgemaakt="+vblhstwoonplaatsopgemaakt);
		sb.append(",vblhsthuisnummer="+String.valueOf(vblhsthuisnummer));
		sb.append(",vblhsthuisletter="+vblhsthuisletter);
		sb.append(",vblhsthuisnummertoevoeging="+vblhsthuisnummertoevoeging);
		sb.append(",vblhstaanduidingbijhuisnummer="+vblhstaanduidingbijhuisnummer);
		sb.append(",vblhstpostcode="+vblhstpostcode);
		sb.append(",vblhstwoonplaatsnaam="+vblhstwoonplaatsnaam);
		sb.append(",vblhstidentificatiecodeverblijfplaats="+vblhstidentificatiecodeverblijfplaats);
		sb.append(",vblhstidentificatiecodenummeraanduiding="+vblhstidentificatiecodenummeraanduiding);
		sb.append(",vblhstlocatiebeschrijving="+vblhstlocatiebeschrijving);
		sb.append(",vblhstlandadresbuitenlandcode="+vblhstlandadresbuitenlandcode);
		sb.append(",vblhstlandadresbuitenlandomschrijving="+vblhstlandadresbuitenlandomschrijving);
		sb.append(",vblhstdatumaanvangadresbuitenland="+String.valueOf(vblhstdatumaanvangadresbuitenland));
		sb.append(",vblhstdatumaanvangadresbuitenlandindicator="+vblhstdatumaanvangadresbuitenlandindicator);
		sb.append(",vblhstregel1adresbuitenland="+vblhstregel1adresbuitenland);
		sb.append(",vblhstregel2adresbuitenland="+vblhstregel2adresbuitenland);
		sb.append(",vblhstregel3adresbuitenland="+vblhstregel3adresbuitenland);
		sb.append(",vblhstlandvanwaaringeschrevencode="+vblhstlandvanwaaringeschrevencode);
		sb.append(",vblhstlandvanwaaringeschrevenomschrijving="+vblhstlandvanwaaringeschrevenomschrijving);
		sb.append(",vblhstdatumvestiginginnederland="+String.valueOf(vblhstdatumvestiginginnederland));
		sb.append(",vblhstdatumvestiginginnederlandindicator="+vblhstdatumvestiginginnederlandindicator);
		sb.append(",vblhstomschrijvingvanaangifteadreshouding="+vblhstomschrijvingvanaangifteadreshouding);
		sb.append(",vblhstindicatiedocument="+String.valueOf(vblhstindicatiedocument));
		sb.append(",vblhstaanduidinggegevensonderzoek="+String.valueOf(vblhstaanduidinggegevensonderzoek));
		sb.append(",vblhstdatumingangonderzoek="+String.valueOf(vblhstdatumingangonderzoek));
		sb.append(",vblhstdatumingangonderzoekindicator="+vblhstdatumingangonderzoekindicator);
		sb.append(",vblhstdatumeindeonderzoek="+String.valueOf(vblhstdatumeindeonderzoek));
		sb.append(",vblhstdatumeindeonderzoekindicator="+vblhstdatumeindeonderzoekindicator);
		sb.append(",vblhstingangsdatumgeldigheid="+String.valueOf(vblhstingangsdatumgeldigheid));
		sb.append(",vblhstingangsdatumgeldigheidindicator="+vblhstingangsdatumgeldigheidindicator);
		sb.append(",vblhstdatumvanopneming="+String.valueOf(vblhstdatumvanopneming));
		sb.append(",vblhstdatumvanopnemingindicator="+vblhstdatumvanopnemingindicator);
		sb.append(",vblhstwijkcode="+vblhstwijkcode);
		sb.append(",vblhstwijkomschrijving="+vblhstwijkomschrijving);
		sb.append(",vblhstplanalogischewijkcode="+vblhstplanalogischewijkcode);
		sb.append(",vblhstplanalogischewijkomschrijving="+vblhstplanalogischewijkomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_verblijfplaatsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prsanummer, other.prsanummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.vblhstsleutelgeldigdatum, other.vblhstsleutelgeldigdatum);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.vblhstsleutelgeldigvolgnummer, other.vblhstsleutelgeldigvolgnummer);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cipers_verblijfplaatsStruct implements routines.system.IPersistableRow<cipers_verblijfplaatsStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal VBLHSTSLEUTELGELDIGDATUM;

				public BigDecimal getVBLHSTSLEUTELGELDIGDATUM () {
					return this.VBLHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal VBLHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getVBLHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.VBLHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public String VBLHSTGEMEENTEVANINSCHRIJVINGCODE;

				public String getVBLHSTGEMEENTEVANINSCHRIJVINGCODE () {
					return this.VBLHSTGEMEENTEVANINSCHRIJVINGCODE;
				}
				
			    public java.util.Date VBLHSTDATUMINSCHRIJVING;

				public java.util.Date getVBLHSTDATUMINSCHRIJVING () {
					return this.VBLHSTDATUMINSCHRIJVING;
				}
				
			    public String VBLHSTDATUMINSCHRIJVINGINDICATOR;

				public String getVBLHSTDATUMINSCHRIJVINGINDICATOR () {
					return this.VBLHSTDATUMINSCHRIJVINGINDICATOR;
				}
				
			    public String VBLHSTFUNCTIEADRES;

				public String getVBLHSTFUNCTIEADRES () {
					return this.VBLHSTFUNCTIEADRES;
				}
				
			    public String VBLHSTGEMEENTEDEEL;

				public String getVBLHSTGEMEENTEDEEL () {
					return this.VBLHSTGEMEENTEDEEL;
				}
				
			    public java.util.Date VBLHSTDATUMAANVANGADRESHOUDING;

				public java.util.Date getVBLHSTDATUMAANVANGADRESHOUDING () {
					return this.VBLHSTDATUMAANVANGADRESHOUDING;
				}
				
			    public String VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR;

				public String getVBLHSTDATUMAANVANGADRESHOUDINGINDICATOR () {
					return this.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR;
				}
				
			    public String VBLHSTSTRAATNAAM;

				public String getVBLHSTSTRAATNAAM () {
					return this.VBLHSTSTRAATNAAM;
				}
				
			    public String VBLHSTNAAMOPENBARERUIMTE;

				public String getVBLHSTNAAMOPENBARERUIMTE () {
					return this.VBLHSTNAAMOPENBARERUIMTE;
				}
				
			    public String VBLHSTADRESOPGEMAAKT;

				public String getVBLHSTADRESOPGEMAAKT () {
					return this.VBLHSTADRESOPGEMAAKT;
				}
				
			    public String VBLHSTWOONPLAATSOPGEMAAKT;

				public String getVBLHSTWOONPLAATSOPGEMAAKT () {
					return this.VBLHSTWOONPLAATSOPGEMAAKT;
				}
				
			    public BigDecimal VBLHSTHUISNUMMER;

				public BigDecimal getVBLHSTHUISNUMMER () {
					return this.VBLHSTHUISNUMMER;
				}
				
			    public String VBLHSTHUISLETTER;

				public String getVBLHSTHUISLETTER () {
					return this.VBLHSTHUISLETTER;
				}
				
			    public String VBLHSTHUISNUMMERTOEVOEGING;

				public String getVBLHSTHUISNUMMERTOEVOEGING () {
					return this.VBLHSTHUISNUMMERTOEVOEGING;
				}
				
			    public String VBLHSTAANDUIDINGBIJHUISNUMMER;

				public String getVBLHSTAANDUIDINGBIJHUISNUMMER () {
					return this.VBLHSTAANDUIDINGBIJHUISNUMMER;
				}
				
			    public String VBLHSTPOSTCODE;

				public String getVBLHSTPOSTCODE () {
					return this.VBLHSTPOSTCODE;
				}
				
			    public String VBLHSTWOONPLAATSNAAM;

				public String getVBLHSTWOONPLAATSNAAM () {
					return this.VBLHSTWOONPLAATSNAAM;
				}
				
			    public String VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS;

				public String getVBLHSTIDENTIFICATIECODEVERBLIJFPLAATS () {
					return this.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS;
				}
				
			    public String VBLHSTIDENTIFICATIECODENUMMERAANDUIDING;

				public String getVBLHSTIDENTIFICATIECODENUMMERAANDUIDING () {
					return this.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING;
				}
				
			    public String VBLHSTLOCATIEBESCHRIJVING;

				public String getVBLHSTLOCATIEBESCHRIJVING () {
					return this.VBLHSTLOCATIEBESCHRIJVING;
				}
				
			    public String VBLHSTLANDADRESBUITENLANDCODE;

				public String getVBLHSTLANDADRESBUITENLANDCODE () {
					return this.VBLHSTLANDADRESBUITENLANDCODE;
				}
				
			    public java.util.Date VBLHSTDATUMAANVANGADRESBUITENLAND;

				public java.util.Date getVBLHSTDATUMAANVANGADRESBUITENLAND () {
					return this.VBLHSTDATUMAANVANGADRESBUITENLAND;
				}
				
			    public String VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR;

				public String getVBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR () {
					return this.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR;
				}
				
			    public String VBLHSTREGEL1ADRESBUITENLAND;

				public String getVBLHSTREGEL1ADRESBUITENLAND () {
					return this.VBLHSTREGEL1ADRESBUITENLAND;
				}
				
			    public String VBLHSTREGEL2ADRESBUITENLAND;

				public String getVBLHSTREGEL2ADRESBUITENLAND () {
					return this.VBLHSTREGEL2ADRESBUITENLAND;
				}
				
			    public String VBLHSTREGEL3ADRESBUITENLAND;

				public String getVBLHSTREGEL3ADRESBUITENLAND () {
					return this.VBLHSTREGEL3ADRESBUITENLAND;
				}
				
			    public String VBLHSTLANDVANWAARINGESCHREVENCODE;

				public String getVBLHSTLANDVANWAARINGESCHREVENCODE () {
					return this.VBLHSTLANDVANWAARINGESCHREVENCODE;
				}
				
			    public java.util.Date VBLHSTDATUMVESTIGINGINNEDERLAND;

				public java.util.Date getVBLHSTDATUMVESTIGINGINNEDERLAND () {
					return this.VBLHSTDATUMVESTIGINGINNEDERLAND;
				}
				
			    public String VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR;

				public String getVBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR () {
					return this.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR;
				}
				
			    public String VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING;

				public String getVBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING () {
					return this.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING;
				}
				
			    public BigDecimal VBLHSTINDICATIEDOCUMENT;

				public BigDecimal getVBLHSTINDICATIEDOCUMENT () {
					return this.VBLHSTINDICATIEDOCUMENT;
				}
				
			    public BigDecimal VBLHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getVBLHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.VBLHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date VBLHSTDATUMINGANGONDERZOEK;

				public java.util.Date getVBLHSTDATUMINGANGONDERZOEK () {
					return this.VBLHSTDATUMINGANGONDERZOEK;
				}
				
			    public String VBLHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getVBLHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.VBLHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLHSTDATUMEINDEONDERZOEK;

				public java.util.Date getVBLHSTDATUMEINDEONDERZOEK () {
					return this.VBLHSTDATUMEINDEONDERZOEK;
				}
				
			    public String VBLHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getVBLHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.VBLHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getVBLHSTINGANGSDATUMGELDIGHEID () {
					return this.VBLHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getVBLHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date VBLHSTDATUMVANOPNEMING;

				public java.util.Date getVBLHSTDATUMVANOPNEMING () {
					return this.VBLHSTDATUMVANOPNEMING;
				}
				
			    public String VBLHSTDATUMVANOPNEMINGINDICATOR;

				public String getVBLHSTDATUMVANOPNEMINGINDICATOR () {
					return this.VBLHSTDATUMVANOPNEMINGINDICATOR;
				}
				
			    public String VBLHSTSOORTPANDCODE;

				public String getVBLHSTSOORTPANDCODE () {
					return this.VBLHSTSOORTPANDCODE;
				}
				
			    public String VBLHSTSOORTPANDOMSCHRIJVING;

				public String getVBLHSTSOORTPANDOMSCHRIJVING () {
					return this.VBLHSTSOORTPANDOMSCHRIJVING;
				}
				
			    public String VBLHSTWIJKCODE;

				public String getVBLHSTWIJKCODE () {
					return this.VBLHSTWIJKCODE;
				}
				
			    public String VBLHSTWIJKOMSCHRIJVING;

				public String getVBLHSTWIJKOMSCHRIJVING () {
					return this.VBLHSTWIJKOMSCHRIJVING;
				}
				
			    public String VBLHSTPLANALOGISCHEWIJKCODE;

				public String getVBLHSTPLANALOGISCHEWIJKCODE () {
					return this.VBLHSTPLANALOGISCHEWIJKCODE;
				}
				
			    public String VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING;

				public String getVBLHSTPLANALOGISCHEWIJKOMSCHRIJVING () {
					return this.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING;
				}
				
			    public BigDecimal VBLHSTANUMMERHOOFDBEWONER;

				public BigDecimal getVBLHSTANUMMERHOOFDBEWONER () {
					return this.VBLHSTANUMMERHOOFDBEWONER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.VBLHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.VBLHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
					this.VBLHSTGEMEENTEVANINSCHRIJVINGCODE = readString(dis);
					
					this.VBLHSTDATUMINSCHRIJVING = readDate(dis);
					
					this.VBLHSTDATUMINSCHRIJVINGINDICATOR = readString(dis);
					
					this.VBLHSTFUNCTIEADRES = readString(dis);
					
					this.VBLHSTGEMEENTEDEEL = readString(dis);
					
					this.VBLHSTDATUMAANVANGADRESHOUDING = readDate(dis);
					
					this.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR = readString(dis);
					
					this.VBLHSTSTRAATNAAM = readString(dis);
					
					this.VBLHSTNAAMOPENBARERUIMTE = readString(dis);
					
					this.VBLHSTADRESOPGEMAAKT = readString(dis);
					
					this.VBLHSTWOONPLAATSOPGEMAAKT = readString(dis);
					
						this.VBLHSTHUISNUMMER = (BigDecimal) dis.readObject();
					
					this.VBLHSTHUISLETTER = readString(dis);
					
					this.VBLHSTHUISNUMMERTOEVOEGING = readString(dis);
					
					this.VBLHSTAANDUIDINGBIJHUISNUMMER = readString(dis);
					
					this.VBLHSTPOSTCODE = readString(dis);
					
					this.VBLHSTWOONPLAATSNAAM = readString(dis);
					
					this.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS = readString(dis);
					
					this.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING = readString(dis);
					
					this.VBLHSTLOCATIEBESCHRIJVING = readString(dis);
					
					this.VBLHSTLANDADRESBUITENLANDCODE = readString(dis);
					
					this.VBLHSTDATUMAANVANGADRESBUITENLAND = readDate(dis);
					
					this.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR = readString(dis);
					
					this.VBLHSTREGEL1ADRESBUITENLAND = readString(dis);
					
					this.VBLHSTREGEL2ADRESBUITENLAND = readString(dis);
					
					this.VBLHSTREGEL3ADRESBUITENLAND = readString(dis);
					
					this.VBLHSTLANDVANWAARINGESCHREVENCODE = readString(dis);
					
					this.VBLHSTDATUMVESTIGINGINNEDERLAND = readDate(dis);
					
					this.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR = readString(dis);
					
					this.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING = readString(dis);
					
						this.VBLHSTINDICATIEDOCUMENT = (BigDecimal) dis.readObject();
					
						this.VBLHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.VBLHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.VBLHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.VBLHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.VBLHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.VBLHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.VBLHSTDATUMVANOPNEMING = readDate(dis);
					
					this.VBLHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.VBLHSTSOORTPANDCODE = readString(dis);
					
					this.VBLHSTSOORTPANDOMSCHRIJVING = readString(dis);
					
					this.VBLHSTWIJKCODE = readString(dis);
					
					this.VBLHSTWIJKOMSCHRIJVING = readString(dis);
					
					this.VBLHSTPLANALOGISCHEWIJKCODE = readString(dis);
					
					this.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING = readString(dis);
					
						this.VBLHSTANUMMERHOOFDBEWONER = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTSLEUTELGELDIGVOLGNUMMER);
					
					// String
				
						writeString(this.VBLHSTGEMEENTEVANINSCHRIJVINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMINSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTFUNCTIEADRES,dos);
					
					// String
				
						writeString(this.VBLHSTGEMEENTEDEEL,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMAANVANGADRESHOUDING,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTSTRAATNAAM,dos);
					
					// String
				
						writeString(this.VBLHSTNAAMOPENBARERUIMTE,dos);
					
					// String
				
						writeString(this.VBLHSTADRESOPGEMAAKT,dos);
					
					// String
				
						writeString(this.VBLHSTWOONPLAATSOPGEMAAKT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTHUISNUMMER);
					
					// String
				
						writeString(this.VBLHSTHUISLETTER,dos);
					
					// String
				
						writeString(this.VBLHSTHUISNUMMERTOEVOEGING,dos);
					
					// String
				
						writeString(this.VBLHSTAANDUIDINGBIJHUISNUMMER,dos);
					
					// String
				
						writeString(this.VBLHSTPOSTCODE,dos);
					
					// String
				
						writeString(this.VBLHSTWOONPLAATSNAAM,dos);
					
					// String
				
						writeString(this.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS,dos);
					
					// String
				
						writeString(this.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING,dos);
					
					// String
				
						writeString(this.VBLHSTLOCATIEBESCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTLANDADRESBUITENLANDCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMAANVANGADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTREGEL1ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTREGEL2ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTREGEL3ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTLANDVANWAARINGESCHREVENCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMVESTIGINGINNEDERLAND,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTINDICATIEDOCUMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMVANOPNEMINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTSOORTPANDCODE,dos);
					
					// String
				
						writeString(this.VBLHSTSOORTPANDOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLHSTWIJKOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTPLANALOGISCHEWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTANUMMERHOOFDBEWONER);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",VBLHSTSLEUTELGELDIGDATUM="+String.valueOf(VBLHSTSLEUTELGELDIGDATUM));
		sb.append(",VBLHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(VBLHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",VBLHSTGEMEENTEVANINSCHRIJVINGCODE="+VBLHSTGEMEENTEVANINSCHRIJVINGCODE);
		sb.append(",VBLHSTDATUMINSCHRIJVING="+String.valueOf(VBLHSTDATUMINSCHRIJVING));
		sb.append(",VBLHSTDATUMINSCHRIJVINGINDICATOR="+VBLHSTDATUMINSCHRIJVINGINDICATOR);
		sb.append(",VBLHSTFUNCTIEADRES="+VBLHSTFUNCTIEADRES);
		sb.append(",VBLHSTGEMEENTEDEEL="+VBLHSTGEMEENTEDEEL);
		sb.append(",VBLHSTDATUMAANVANGADRESHOUDING="+String.valueOf(VBLHSTDATUMAANVANGADRESHOUDING));
		sb.append(",VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR="+VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR);
		sb.append(",VBLHSTSTRAATNAAM="+VBLHSTSTRAATNAAM);
		sb.append(",VBLHSTNAAMOPENBARERUIMTE="+VBLHSTNAAMOPENBARERUIMTE);
		sb.append(",VBLHSTADRESOPGEMAAKT="+VBLHSTADRESOPGEMAAKT);
		sb.append(",VBLHSTWOONPLAATSOPGEMAAKT="+VBLHSTWOONPLAATSOPGEMAAKT);
		sb.append(",VBLHSTHUISNUMMER="+String.valueOf(VBLHSTHUISNUMMER));
		sb.append(",VBLHSTHUISLETTER="+VBLHSTHUISLETTER);
		sb.append(",VBLHSTHUISNUMMERTOEVOEGING="+VBLHSTHUISNUMMERTOEVOEGING);
		sb.append(",VBLHSTAANDUIDINGBIJHUISNUMMER="+VBLHSTAANDUIDINGBIJHUISNUMMER);
		sb.append(",VBLHSTPOSTCODE="+VBLHSTPOSTCODE);
		sb.append(",VBLHSTWOONPLAATSNAAM="+VBLHSTWOONPLAATSNAAM);
		sb.append(",VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS="+VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS);
		sb.append(",VBLHSTIDENTIFICATIECODENUMMERAANDUIDING="+VBLHSTIDENTIFICATIECODENUMMERAANDUIDING);
		sb.append(",VBLHSTLOCATIEBESCHRIJVING="+VBLHSTLOCATIEBESCHRIJVING);
		sb.append(",VBLHSTLANDADRESBUITENLANDCODE="+VBLHSTLANDADRESBUITENLANDCODE);
		sb.append(",VBLHSTDATUMAANVANGADRESBUITENLAND="+String.valueOf(VBLHSTDATUMAANVANGADRESBUITENLAND));
		sb.append(",VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR="+VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR);
		sb.append(",VBLHSTREGEL1ADRESBUITENLAND="+VBLHSTREGEL1ADRESBUITENLAND);
		sb.append(",VBLHSTREGEL2ADRESBUITENLAND="+VBLHSTREGEL2ADRESBUITENLAND);
		sb.append(",VBLHSTREGEL3ADRESBUITENLAND="+VBLHSTREGEL3ADRESBUITENLAND);
		sb.append(",VBLHSTLANDVANWAARINGESCHREVENCODE="+VBLHSTLANDVANWAARINGESCHREVENCODE);
		sb.append(",VBLHSTDATUMVESTIGINGINNEDERLAND="+String.valueOf(VBLHSTDATUMVESTIGINGINNEDERLAND));
		sb.append(",VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR="+VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR);
		sb.append(",VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING="+VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING);
		sb.append(",VBLHSTINDICATIEDOCUMENT="+String.valueOf(VBLHSTINDICATIEDOCUMENT));
		sb.append(",VBLHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(VBLHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",VBLHSTDATUMINGANGONDERZOEK="+String.valueOf(VBLHSTDATUMINGANGONDERZOEK));
		sb.append(",VBLHSTDATUMINGANGONDERZOEKINDICATOR="+VBLHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",VBLHSTDATUMEINDEONDERZOEK="+String.valueOf(VBLHSTDATUMEINDEONDERZOEK));
		sb.append(",VBLHSTDATUMEINDEONDERZOEKINDICATOR="+VBLHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",VBLHSTINGANGSDATUMGELDIGHEID="+String.valueOf(VBLHSTINGANGSDATUMGELDIGHEID));
		sb.append(",VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR="+VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",VBLHSTDATUMVANOPNEMING="+String.valueOf(VBLHSTDATUMVANOPNEMING));
		sb.append(",VBLHSTDATUMVANOPNEMINGINDICATOR="+VBLHSTDATUMVANOPNEMINGINDICATOR);
		sb.append(",VBLHSTSOORTPANDCODE="+VBLHSTSOORTPANDCODE);
		sb.append(",VBLHSTSOORTPANDOMSCHRIJVING="+VBLHSTSOORTPANDOMSCHRIJVING);
		sb.append(",VBLHSTWIJKCODE="+VBLHSTWIJKCODE);
		sb.append(",VBLHSTWIJKOMSCHRIJVING="+VBLHSTWIJKOMSCHRIJVING);
		sb.append(",VBLHSTPLANALOGISCHEWIJKCODE="+VBLHSTPLANALOGISCHEWIJKCODE);
		sb.append(",VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING="+VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING);
		sb.append(",VBLHSTANUMMERHOOFDBEWONER="+String.valueOf(VBLHSTANUMMERHOOFDBEWONER));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cipers_verblijfplaatsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tAS400Input_1Struct implements routines.system.IPersistableRow<after_tAS400Input_1Struct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];

	
			    public BigDecimal PRSANUMMER;

				public BigDecimal getPRSANUMMER () {
					return this.PRSANUMMER;
				}
				
			    public BigDecimal VBLHSTSLEUTELGELDIGDATUM;

				public BigDecimal getVBLHSTSLEUTELGELDIGDATUM () {
					return this.VBLHSTSLEUTELGELDIGDATUM;
				}
				
			    public BigDecimal VBLHSTSLEUTELGELDIGVOLGNUMMER;

				public BigDecimal getVBLHSTSLEUTELGELDIGVOLGNUMMER () {
					return this.VBLHSTSLEUTELGELDIGVOLGNUMMER;
				}
				
			    public String VBLHSTGEMEENTEVANINSCHRIJVINGCODE;

				public String getVBLHSTGEMEENTEVANINSCHRIJVINGCODE () {
					return this.VBLHSTGEMEENTEVANINSCHRIJVINGCODE;
				}
				
			    public java.util.Date VBLHSTDATUMINSCHRIJVING;

				public java.util.Date getVBLHSTDATUMINSCHRIJVING () {
					return this.VBLHSTDATUMINSCHRIJVING;
				}
				
			    public String VBLHSTDATUMINSCHRIJVINGINDICATOR;

				public String getVBLHSTDATUMINSCHRIJVINGINDICATOR () {
					return this.VBLHSTDATUMINSCHRIJVINGINDICATOR;
				}
				
			    public String VBLHSTFUNCTIEADRES;

				public String getVBLHSTFUNCTIEADRES () {
					return this.VBLHSTFUNCTIEADRES;
				}
				
			    public String VBLHSTGEMEENTEDEEL;

				public String getVBLHSTGEMEENTEDEEL () {
					return this.VBLHSTGEMEENTEDEEL;
				}
				
			    public java.util.Date VBLHSTDATUMAANVANGADRESHOUDING;

				public java.util.Date getVBLHSTDATUMAANVANGADRESHOUDING () {
					return this.VBLHSTDATUMAANVANGADRESHOUDING;
				}
				
			    public String VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR;

				public String getVBLHSTDATUMAANVANGADRESHOUDINGINDICATOR () {
					return this.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR;
				}
				
			    public String VBLHSTSTRAATNAAM;

				public String getVBLHSTSTRAATNAAM () {
					return this.VBLHSTSTRAATNAAM;
				}
				
			    public String VBLHSTNAAMOPENBARERUIMTE;

				public String getVBLHSTNAAMOPENBARERUIMTE () {
					return this.VBLHSTNAAMOPENBARERUIMTE;
				}
				
			    public String VBLHSTADRESOPGEMAAKT;

				public String getVBLHSTADRESOPGEMAAKT () {
					return this.VBLHSTADRESOPGEMAAKT;
				}
				
			    public String VBLHSTWOONPLAATSOPGEMAAKT;

				public String getVBLHSTWOONPLAATSOPGEMAAKT () {
					return this.VBLHSTWOONPLAATSOPGEMAAKT;
				}
				
			    public BigDecimal VBLHSTHUISNUMMER;

				public BigDecimal getVBLHSTHUISNUMMER () {
					return this.VBLHSTHUISNUMMER;
				}
				
			    public String VBLHSTHUISLETTER;

				public String getVBLHSTHUISLETTER () {
					return this.VBLHSTHUISLETTER;
				}
				
			    public String VBLHSTHUISNUMMERTOEVOEGING;

				public String getVBLHSTHUISNUMMERTOEVOEGING () {
					return this.VBLHSTHUISNUMMERTOEVOEGING;
				}
				
			    public String VBLHSTAANDUIDINGBIJHUISNUMMER;

				public String getVBLHSTAANDUIDINGBIJHUISNUMMER () {
					return this.VBLHSTAANDUIDINGBIJHUISNUMMER;
				}
				
			    public String VBLHSTPOSTCODE;

				public String getVBLHSTPOSTCODE () {
					return this.VBLHSTPOSTCODE;
				}
				
			    public String VBLHSTWOONPLAATSNAAM;

				public String getVBLHSTWOONPLAATSNAAM () {
					return this.VBLHSTWOONPLAATSNAAM;
				}
				
			    public String VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS;

				public String getVBLHSTIDENTIFICATIECODEVERBLIJFPLAATS () {
					return this.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS;
				}
				
			    public String VBLHSTIDENTIFICATIECODENUMMERAANDUIDING;

				public String getVBLHSTIDENTIFICATIECODENUMMERAANDUIDING () {
					return this.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING;
				}
				
			    public String VBLHSTLOCATIEBESCHRIJVING;

				public String getVBLHSTLOCATIEBESCHRIJVING () {
					return this.VBLHSTLOCATIEBESCHRIJVING;
				}
				
			    public String VBLHSTLANDADRESBUITENLANDCODE;

				public String getVBLHSTLANDADRESBUITENLANDCODE () {
					return this.VBLHSTLANDADRESBUITENLANDCODE;
				}
				
			    public java.util.Date VBLHSTDATUMAANVANGADRESBUITENLAND;

				public java.util.Date getVBLHSTDATUMAANVANGADRESBUITENLAND () {
					return this.VBLHSTDATUMAANVANGADRESBUITENLAND;
				}
				
			    public String VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR;

				public String getVBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR () {
					return this.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR;
				}
				
			    public String VBLHSTREGEL1ADRESBUITENLAND;

				public String getVBLHSTREGEL1ADRESBUITENLAND () {
					return this.VBLHSTREGEL1ADRESBUITENLAND;
				}
				
			    public String VBLHSTREGEL2ADRESBUITENLAND;

				public String getVBLHSTREGEL2ADRESBUITENLAND () {
					return this.VBLHSTREGEL2ADRESBUITENLAND;
				}
				
			    public String VBLHSTREGEL3ADRESBUITENLAND;

				public String getVBLHSTREGEL3ADRESBUITENLAND () {
					return this.VBLHSTREGEL3ADRESBUITENLAND;
				}
				
			    public String VBLHSTLANDVANWAARINGESCHREVENCODE;

				public String getVBLHSTLANDVANWAARINGESCHREVENCODE () {
					return this.VBLHSTLANDVANWAARINGESCHREVENCODE;
				}
				
			    public java.util.Date VBLHSTDATUMVESTIGINGINNEDERLAND;

				public java.util.Date getVBLHSTDATUMVESTIGINGINNEDERLAND () {
					return this.VBLHSTDATUMVESTIGINGINNEDERLAND;
				}
				
			    public String VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR;

				public String getVBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR () {
					return this.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR;
				}
				
			    public String VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING;

				public String getVBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING () {
					return this.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING;
				}
				
			    public BigDecimal VBLHSTINDICATIEDOCUMENT;

				public BigDecimal getVBLHSTINDICATIEDOCUMENT () {
					return this.VBLHSTINDICATIEDOCUMENT;
				}
				
			    public BigDecimal VBLHSTAANDUIDINGGEGEVENSONDERZOEK;

				public BigDecimal getVBLHSTAANDUIDINGGEGEVENSONDERZOEK () {
					return this.VBLHSTAANDUIDINGGEGEVENSONDERZOEK;
				}
				
			    public java.util.Date VBLHSTDATUMINGANGONDERZOEK;

				public java.util.Date getVBLHSTDATUMINGANGONDERZOEK () {
					return this.VBLHSTDATUMINGANGONDERZOEK;
				}
				
			    public String VBLHSTDATUMINGANGONDERZOEKINDICATOR;

				public String getVBLHSTDATUMINGANGONDERZOEKINDICATOR () {
					return this.VBLHSTDATUMINGANGONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLHSTDATUMEINDEONDERZOEK;

				public java.util.Date getVBLHSTDATUMEINDEONDERZOEK () {
					return this.VBLHSTDATUMEINDEONDERZOEK;
				}
				
			    public String VBLHSTDATUMEINDEONDERZOEKINDICATOR;

				public String getVBLHSTDATUMEINDEONDERZOEKINDICATOR () {
					return this.VBLHSTDATUMEINDEONDERZOEKINDICATOR;
				}
				
			    public java.util.Date VBLHSTINGANGSDATUMGELDIGHEID;

				public java.util.Date getVBLHSTINGANGSDATUMGELDIGHEID () {
					return this.VBLHSTINGANGSDATUMGELDIGHEID;
				}
				
			    public String VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR;

				public String getVBLHSTINGANGSDATUMGELDIGHEIDINDICATOR () {
					return this.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR;
				}
				
			    public java.util.Date VBLHSTDATUMVANOPNEMING;

				public java.util.Date getVBLHSTDATUMVANOPNEMING () {
					return this.VBLHSTDATUMVANOPNEMING;
				}
				
			    public String VBLHSTDATUMVANOPNEMINGINDICATOR;

				public String getVBLHSTDATUMVANOPNEMINGINDICATOR () {
					return this.VBLHSTDATUMVANOPNEMINGINDICATOR;
				}
				
			    public String VBLHSTSOORTPANDCODE;

				public String getVBLHSTSOORTPANDCODE () {
					return this.VBLHSTSOORTPANDCODE;
				}
				
			    public String VBLHSTSOORTPANDOMSCHRIJVING;

				public String getVBLHSTSOORTPANDOMSCHRIJVING () {
					return this.VBLHSTSOORTPANDOMSCHRIJVING;
				}
				
			    public String VBLHSTWIJKCODE;

				public String getVBLHSTWIJKCODE () {
					return this.VBLHSTWIJKCODE;
				}
				
			    public String VBLHSTWIJKOMSCHRIJVING;

				public String getVBLHSTWIJKOMSCHRIJVING () {
					return this.VBLHSTWIJKOMSCHRIJVING;
				}
				
			    public String VBLHSTPLANALOGISCHEWIJKCODE;

				public String getVBLHSTPLANALOGISCHEWIJKCODE () {
					return this.VBLHSTPLANALOGISCHEWIJKCODE;
				}
				
			    public String VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING;

				public String getVBLHSTPLANALOGISCHEWIJKOMSCHRIJVING () {
					return this.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING;
				}
				
			    public BigDecimal VBLHSTANUMMERHOOFDBEWONER;

				public BigDecimal getVBLHSTANUMMERHOOFDBEWONER () {
					return this.VBLHSTANUMMERHOOFDBEWONER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
						this.PRSANUMMER = (BigDecimal) dis.readObject();
					
						this.VBLHSTSLEUTELGELDIGDATUM = (BigDecimal) dis.readObject();
					
						this.VBLHSTSLEUTELGELDIGVOLGNUMMER = (BigDecimal) dis.readObject();
					
					this.VBLHSTGEMEENTEVANINSCHRIJVINGCODE = readString(dis);
					
					this.VBLHSTDATUMINSCHRIJVING = readDate(dis);
					
					this.VBLHSTDATUMINSCHRIJVINGINDICATOR = readString(dis);
					
					this.VBLHSTFUNCTIEADRES = readString(dis);
					
					this.VBLHSTGEMEENTEDEEL = readString(dis);
					
					this.VBLHSTDATUMAANVANGADRESHOUDING = readDate(dis);
					
					this.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR = readString(dis);
					
					this.VBLHSTSTRAATNAAM = readString(dis);
					
					this.VBLHSTNAAMOPENBARERUIMTE = readString(dis);
					
					this.VBLHSTADRESOPGEMAAKT = readString(dis);
					
					this.VBLHSTWOONPLAATSOPGEMAAKT = readString(dis);
					
						this.VBLHSTHUISNUMMER = (BigDecimal) dis.readObject();
					
					this.VBLHSTHUISLETTER = readString(dis);
					
					this.VBLHSTHUISNUMMERTOEVOEGING = readString(dis);
					
					this.VBLHSTAANDUIDINGBIJHUISNUMMER = readString(dis);
					
					this.VBLHSTPOSTCODE = readString(dis);
					
					this.VBLHSTWOONPLAATSNAAM = readString(dis);
					
					this.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS = readString(dis);
					
					this.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING = readString(dis);
					
					this.VBLHSTLOCATIEBESCHRIJVING = readString(dis);
					
					this.VBLHSTLANDADRESBUITENLANDCODE = readString(dis);
					
					this.VBLHSTDATUMAANVANGADRESBUITENLAND = readDate(dis);
					
					this.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR = readString(dis);
					
					this.VBLHSTREGEL1ADRESBUITENLAND = readString(dis);
					
					this.VBLHSTREGEL2ADRESBUITENLAND = readString(dis);
					
					this.VBLHSTREGEL3ADRESBUITENLAND = readString(dis);
					
					this.VBLHSTLANDVANWAARINGESCHREVENCODE = readString(dis);
					
					this.VBLHSTDATUMVESTIGINGINNEDERLAND = readDate(dis);
					
					this.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR = readString(dis);
					
					this.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING = readString(dis);
					
						this.VBLHSTINDICATIEDOCUMENT = (BigDecimal) dis.readObject();
					
						this.VBLHSTAANDUIDINGGEGEVENSONDERZOEK = (BigDecimal) dis.readObject();
					
					this.VBLHSTDATUMINGANGONDERZOEK = readDate(dis);
					
					this.VBLHSTDATUMINGANGONDERZOEKINDICATOR = readString(dis);
					
					this.VBLHSTDATUMEINDEONDERZOEK = readDate(dis);
					
					this.VBLHSTDATUMEINDEONDERZOEKINDICATOR = readString(dis);
					
					this.VBLHSTINGANGSDATUMGELDIGHEID = readDate(dis);
					
					this.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR = readString(dis);
					
					this.VBLHSTDATUMVANOPNEMING = readDate(dis);
					
					this.VBLHSTDATUMVANOPNEMINGINDICATOR = readString(dis);
					
					this.VBLHSTSOORTPANDCODE = readString(dis);
					
					this.VBLHSTSOORTPANDOMSCHRIJVING = readString(dis);
					
					this.VBLHSTWIJKCODE = readString(dis);
					
					this.VBLHSTWIJKOMSCHRIJVING = readString(dis);
					
					this.VBLHSTPLANALOGISCHEWIJKCODE = readString(dis);
					
					this.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING = readString(dis);
					
						this.VBLHSTANUMMERHOOFDBEWONER = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRSANUMMER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTSLEUTELGELDIGDATUM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTSLEUTELGELDIGVOLGNUMMER);
					
					// String
				
						writeString(this.VBLHSTGEMEENTEVANINSCHRIJVINGCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMINSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMINSCHRIJVINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTFUNCTIEADRES,dos);
					
					// String
				
						writeString(this.VBLHSTGEMEENTEDEEL,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMAANVANGADRESHOUDING,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTSTRAATNAAM,dos);
					
					// String
				
						writeString(this.VBLHSTNAAMOPENBARERUIMTE,dos);
					
					// String
				
						writeString(this.VBLHSTADRESOPGEMAAKT,dos);
					
					// String
				
						writeString(this.VBLHSTWOONPLAATSOPGEMAAKT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTHUISNUMMER);
					
					// String
				
						writeString(this.VBLHSTHUISLETTER,dos);
					
					// String
				
						writeString(this.VBLHSTHUISNUMMERTOEVOEGING,dos);
					
					// String
				
						writeString(this.VBLHSTAANDUIDINGBIJHUISNUMMER,dos);
					
					// String
				
						writeString(this.VBLHSTPOSTCODE,dos);
					
					// String
				
						writeString(this.VBLHSTWOONPLAATSNAAM,dos);
					
					// String
				
						writeString(this.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS,dos);
					
					// String
				
						writeString(this.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING,dos);
					
					// String
				
						writeString(this.VBLHSTLOCATIEBESCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTLANDADRESBUITENLANDCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMAANVANGADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTREGEL1ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTREGEL2ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTREGEL3ADRESBUITENLAND,dos);
					
					// String
				
						writeString(this.VBLHSTLANDVANWAARINGESCHREVENCODE,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMVESTIGINGINNEDERLAND,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTINDICATIEDOCUMENT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTAANDUIDINGGEGEVENSONDERZOEK);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMINGANGONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMINGANGONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMEINDEONDERZOEK,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMEINDEONDERZOEKINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTINGANGSDATUMGELDIGHEID,dos);
					
					// String
				
						writeString(this.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR,dos);
					
					// java.util.Date
				
						writeDate(this.VBLHSTDATUMVANOPNEMING,dos);
					
					// String
				
						writeString(this.VBLHSTDATUMVANOPNEMINGINDICATOR,dos);
					
					// String
				
						writeString(this.VBLHSTSOORTPANDCODE,dos);
					
					// String
				
						writeString(this.VBLHSTSOORTPANDOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLHSTWIJKOMSCHRIJVING,dos);
					
					// String
				
						writeString(this.VBLHSTPLANALOGISCHEWIJKCODE,dos);
					
					// String
				
						writeString(this.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VBLHSTANUMMERHOOFDBEWONER);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRSANUMMER="+String.valueOf(PRSANUMMER));
		sb.append(",VBLHSTSLEUTELGELDIGDATUM="+String.valueOf(VBLHSTSLEUTELGELDIGDATUM));
		sb.append(",VBLHSTSLEUTELGELDIGVOLGNUMMER="+String.valueOf(VBLHSTSLEUTELGELDIGVOLGNUMMER));
		sb.append(",VBLHSTGEMEENTEVANINSCHRIJVINGCODE="+VBLHSTGEMEENTEVANINSCHRIJVINGCODE);
		sb.append(",VBLHSTDATUMINSCHRIJVING="+String.valueOf(VBLHSTDATUMINSCHRIJVING));
		sb.append(",VBLHSTDATUMINSCHRIJVINGINDICATOR="+VBLHSTDATUMINSCHRIJVINGINDICATOR);
		sb.append(",VBLHSTFUNCTIEADRES="+VBLHSTFUNCTIEADRES);
		sb.append(",VBLHSTGEMEENTEDEEL="+VBLHSTGEMEENTEDEEL);
		sb.append(",VBLHSTDATUMAANVANGADRESHOUDING="+String.valueOf(VBLHSTDATUMAANVANGADRESHOUDING));
		sb.append(",VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR="+VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR);
		sb.append(",VBLHSTSTRAATNAAM="+VBLHSTSTRAATNAAM);
		sb.append(",VBLHSTNAAMOPENBARERUIMTE="+VBLHSTNAAMOPENBARERUIMTE);
		sb.append(",VBLHSTADRESOPGEMAAKT="+VBLHSTADRESOPGEMAAKT);
		sb.append(",VBLHSTWOONPLAATSOPGEMAAKT="+VBLHSTWOONPLAATSOPGEMAAKT);
		sb.append(",VBLHSTHUISNUMMER="+String.valueOf(VBLHSTHUISNUMMER));
		sb.append(",VBLHSTHUISLETTER="+VBLHSTHUISLETTER);
		sb.append(",VBLHSTHUISNUMMERTOEVOEGING="+VBLHSTHUISNUMMERTOEVOEGING);
		sb.append(",VBLHSTAANDUIDINGBIJHUISNUMMER="+VBLHSTAANDUIDINGBIJHUISNUMMER);
		sb.append(",VBLHSTPOSTCODE="+VBLHSTPOSTCODE);
		sb.append(",VBLHSTWOONPLAATSNAAM="+VBLHSTWOONPLAATSNAAM);
		sb.append(",VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS="+VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS);
		sb.append(",VBLHSTIDENTIFICATIECODENUMMERAANDUIDING="+VBLHSTIDENTIFICATIECODENUMMERAANDUIDING);
		sb.append(",VBLHSTLOCATIEBESCHRIJVING="+VBLHSTLOCATIEBESCHRIJVING);
		sb.append(",VBLHSTLANDADRESBUITENLANDCODE="+VBLHSTLANDADRESBUITENLANDCODE);
		sb.append(",VBLHSTDATUMAANVANGADRESBUITENLAND="+String.valueOf(VBLHSTDATUMAANVANGADRESBUITENLAND));
		sb.append(",VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR="+VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR);
		sb.append(",VBLHSTREGEL1ADRESBUITENLAND="+VBLHSTREGEL1ADRESBUITENLAND);
		sb.append(",VBLHSTREGEL2ADRESBUITENLAND="+VBLHSTREGEL2ADRESBUITENLAND);
		sb.append(",VBLHSTREGEL3ADRESBUITENLAND="+VBLHSTREGEL3ADRESBUITENLAND);
		sb.append(",VBLHSTLANDVANWAARINGESCHREVENCODE="+VBLHSTLANDVANWAARINGESCHREVENCODE);
		sb.append(",VBLHSTDATUMVESTIGINGINNEDERLAND="+String.valueOf(VBLHSTDATUMVESTIGINGINNEDERLAND));
		sb.append(",VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR="+VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR);
		sb.append(",VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING="+VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING);
		sb.append(",VBLHSTINDICATIEDOCUMENT="+String.valueOf(VBLHSTINDICATIEDOCUMENT));
		sb.append(",VBLHSTAANDUIDINGGEGEVENSONDERZOEK="+String.valueOf(VBLHSTAANDUIDINGGEGEVENSONDERZOEK));
		sb.append(",VBLHSTDATUMINGANGONDERZOEK="+String.valueOf(VBLHSTDATUMINGANGONDERZOEK));
		sb.append(",VBLHSTDATUMINGANGONDERZOEKINDICATOR="+VBLHSTDATUMINGANGONDERZOEKINDICATOR);
		sb.append(",VBLHSTDATUMEINDEONDERZOEK="+String.valueOf(VBLHSTDATUMEINDEONDERZOEK));
		sb.append(",VBLHSTDATUMEINDEONDERZOEKINDICATOR="+VBLHSTDATUMEINDEONDERZOEKINDICATOR);
		sb.append(",VBLHSTINGANGSDATUMGELDIGHEID="+String.valueOf(VBLHSTINGANGSDATUMGELDIGHEID));
		sb.append(",VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR="+VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR);
		sb.append(",VBLHSTDATUMVANOPNEMING="+String.valueOf(VBLHSTDATUMVANOPNEMING));
		sb.append(",VBLHSTDATUMVANOPNEMINGINDICATOR="+VBLHSTDATUMVANOPNEMINGINDICATOR);
		sb.append(",VBLHSTSOORTPANDCODE="+VBLHSTSOORTPANDCODE);
		sb.append(",VBLHSTSOORTPANDOMSCHRIJVING="+VBLHSTSOORTPANDOMSCHRIJVING);
		sb.append(",VBLHSTWIJKCODE="+VBLHSTWIJKCODE);
		sb.append(",VBLHSTWIJKOMSCHRIJVING="+VBLHSTWIJKOMSCHRIJVING);
		sb.append(",VBLHSTPLANALOGISCHEWIJKCODE="+VBLHSTPLANALOGISCHEWIJKCODE);
		sb.append(",VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING="+VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING);
		sb.append(",VBLHSTANUMMERHOOFDBEWONER="+String.valueOf(VBLHSTANUMMERHOOFDBEWONER));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tAS400Input_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tAS400Input_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tPostgresqlInput_1Process(globalMap);
		tPostgresqlInput_2Process(globalMap);
		tPostgresqlInput_3Process(globalMap);

		cipers_verblijfplaatsStruct cipers_verblijfplaats = new cipers_verblijfplaatsStruct();
ldf_verblijfplaatsStruct ldf_verblijfplaats = new ldf_verblijfplaatsStruct();





	
	/**
	 * [tPostgresqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlOutput_1", false);
		start_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_verblijfplaats" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tPostgresqlOutput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlOutput_1().limitLog4jByte();





String dbschema_tPostgresqlOutput_1 = null;
	dbschema_tPostgresqlOutput_1 = "ldf";
	

String tableName_tPostgresqlOutput_1 = null;
if(dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1.trim().length() == 0) {
	tableName_tPostgresqlOutput_1 = "ibz_cip_verblijfplaats_historie";
} else {
	tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1 + "\".\"" + "ibz_cip_verblijfplaats_historie";
}

int nb_line_tPostgresqlOutput_1 = 0;
int nb_line_update_tPostgresqlOutput_1 = 0;
int nb_line_inserted_tPostgresqlOutput_1 = 0;
int nb_line_deleted_tPostgresqlOutput_1 = 0;
int nb_line_rejected_tPostgresqlOutput_1 = 0;

int deletedCount_tPostgresqlOutput_1=0;
int updatedCount_tPostgresqlOutput_1=0;
int insertedCount_tPostgresqlOutput_1=0;
int rejectedCount_tPostgresqlOutput_1=0;

boolean whetherReject_tPostgresqlOutput_1 = false;

java.sql.Connection conn_tPostgresqlOutput_1 = null;
String dbUser_tPostgresqlOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    String url_tPostgresqlOutput_1 = "jdbc:postgresql://"+context.mks_host+":"+context.mks_port+"/"+context.mks_database;
    dbUser_tPostgresqlOutput_1 = "mks_owner";
 
	final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");

    String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

    conn_tPostgresqlOutput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlOutput_1,dbUser_tPostgresqlOutput_1,dbPwd_tPostgresqlOutput_1);
	
	resourceMap.put("conn_tPostgresqlOutput_1", conn_tPostgresqlOutput_1);
        conn_tPostgresqlOutput_1.setAutoCommit(false);
        int commitEvery_tPostgresqlOutput_1 = 10000;
        int commitCounter_tPostgresqlOutput_1 = 0;


   int batchSize_tPostgresqlOutput_1 = 10000;
   int batchSizeCounter_tPostgresqlOutput_1=0;

int count_tPostgresqlOutput_1=0;
	    String insert_tPostgresqlOutput_1 = "INSERT INTO \"" + tableName_tPostgresqlOutput_1 + "\" (\"prsanummer\",\"vblhstsleutelgeldigdatum\",\"vblhstsleutelgeldigvolgnummer\",\"vblhstgemeentevaninschrijvingcode\",\"vblhstgemeentevaninschrijvingomschrijving\",\"vblhstdatuminschrijving\",\"vblhstdatuminschrijvingindicator\",\"vblhstfunctieadres\",\"vblhstgemeentedeel\",\"vblhstdatumaanvangadreshouding\",\"vblhstdatumaanvangadreshoudingindicator\",\"vblhststraatnaam\",\"vblhstnaamopenbareruimte\",\"vblhstadresopgemaakt\",\"vblhstwoonplaatsopgemaakt\",\"vblhsthuisnummer\",\"vblhsthuisletter\",\"vblhsthuisnummertoevoeging\",\"vblhstaanduidingbijhuisnummer\",\"vblhstpostcode\",\"vblhstwoonplaatsnaam\",\"vblhstidentificatiecodeverblijfplaats\",\"vblhstidentificatiecodenummeraanduiding\",\"vblhstlocatiebeschrijving\",\"vblhstlandadresbuitenlandcode\",\"vblhstlandadresbuitenlandomschrijving\",\"vblhstdatumaanvangadresbuitenland\",\"vblhstdatumaanvangadresbuitenlandindicator\",\"vblhstregel1adresbuitenland\",\"vblhstregel2adresbuitenland\",\"vblhstregel3adresbuitenland\",\"vblhstlandvanwaaringeschrevencode\",\"vblhstlandvanwaaringeschrevenomschrijving\",\"vblhstdatumvestiginginnederland\",\"vblhstdatumvestiginginnederlandindicator\",\"vblhstomschrijvingvanaangifteadreshouding\",\"vblhstindicatiedocument\",\"vblhstaanduidinggegevensonderzoek\",\"vblhstdatumingangonderzoek\",\"vblhstdatumingangonderzoekindicator\",\"vblhstdatumeindeonderzoek\",\"vblhstdatumeindeonderzoekindicator\",\"vblhstingangsdatumgeldigheid\",\"vblhstingangsdatumgeldigheidindicator\",\"vblhstdatumvanopneming\",\"vblhstdatumvanopnemingindicator\",\"vblhstwijkcode\",\"vblhstwijkomschrijving\",\"vblhstplanalogischewijkcode\",\"vblhstplanalogischewijkomschrijving\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1.prepareStatement(insert_tPostgresqlOutput_1);
	    

 



/**
 * [tPostgresqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("cipers_verblijfplaats" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct> tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct>) 
					globalMap.get( "tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente" ))
					;					
					
	

ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeenteHashKey = new ldf_gemeenten_verblijfplaats_gemeenteStruct();
ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeenteDefault = new ldf_gemeenten_verblijfplaats_gemeenteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_adres_buitenlandStruct> tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_adres_buitenlandStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_adres_buitenlandStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland" ))
					;					
					
	

ldf_landen_verblijfplaats_adres_buitenlandStruct ldf_landen_verblijfplaats_adres_buitenlandHashKey = new ldf_landen_verblijfplaats_adres_buitenlandStruct();
ldf_landen_verblijfplaats_adres_buitenlandStruct ldf_landen_verblijfplaats_adres_buitenlandDefault = new ldf_landen_verblijfplaats_adres_buitenlandStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct> tHash_Lookup_ldf_landen_verblijfplaats_immigratie = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct>) 
					globalMap.get( "tHash_Lookup_ldf_landen_verblijfplaats_immigratie" ))
					;					
					
	

ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratieHashKey = new ldf_landen_verblijfplaats_immigratieStruct();
ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratieDefault = new ldf_landen_verblijfplaats_immigratieStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ldf_verblijfplaatsStruct ldf_verblijfplaats_tmp = new ldf_verblijfplaatsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAS400Input_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAS400Input_1", false);
		start_Hash.put("tAS400Input_1", System.currentTimeMillis());
		
	
	currentComponent="tAS400Input_1";

	
		int tos_count_tAS400Input_1 = 0;
		
    	class BytesLimit65535_tAS400Input_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAS400Input_1().limitLog4jByte();
	
    
	
		    int nb_line_tAS400Input_1 = 0;
		    java.sql.Connection conn_tAS400Input_1 = null;
				String driverClass_tAS400Input_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class.forName(driverClass_tAS400Input_1);
			   	String dbUser_tAS400Input_1 = context.cip_username;
			   	
        		
        		
        		
	final String decryptedPassword_tAS400Input_1 = context.cip_password; 
			   	
		        String dbPwd_tAS400Input_1 = decryptedPassword_tAS400Input_1;
		        
				  
				String url_tAS400Input_1 = "jdbc:as400://" + context.cip_host + "/" + context.cip_database + ";" + "prompt=false;transaction isolation=none;date format=iso;time format=iso";
				
				conn_tAS400Input_1 = java.sql.DriverManager.getConnection(url_tAS400Input_1,dbUser_tAS400Input_1,dbPwd_tAS400Input_1);
		        
		    
			java.sql.Statement stmt_tAS400Input_1 = conn_tAS400Input_1.createStatement();

		    String dbquery_tAS400Input_1 = "select\n prsAnummer,\n  vblhstSleutelGeldigDatum,\n vblhstSleutelGeldigVolgnummer,\n rtrim(vblhstGemeenteVanInschrijvingCode) as vblhstGemeenteVanInschrijvingCode,\n  vblhstDatumInschrijving,\n vblhstDatumInschrijvingIndicator,\n rtrim(vblhstFunctieAdres) as vblhstFunctieAdres,\n rtrim(vblhstGemeentedeel) as vblhstGemeentedeel,\n vblhstDatumAanVangAdreshouding,\n vblhstDatumAanVangAdreshoudingIndicator,\n rtrim(vblhstStraatnaam) as vblhstStraatnaam,\n rtrim(vblhstNaamOpenbareRuimte) as vblhstNaamOpenbareRuimte,\n rtrim(vblhstAdresOpgemaakt) as vblhstAdresOpgemaakt,\n rtrim(vblhstWoonplaatsOpgemaakt) as vblhstWoonplaatsOpgemaakt,\n vblhstHuisnummer,\n rtrim(vblhstHuisletter) as vblhstHuisletter,\n rtrim(vblhstHuisnummertoevoeging) as vblhstHuisnummertoevoeging,\n rtrim(vblhstAanduidingBijHuisnummer) as vblhstAanduidingBijHuisnummer,\n rtrim(vblhstPostcode) as vblhstPostcode,\n rtrim(vblhstWoonplaatsnaam) as vblhstWoonplaatsnaam,\n rtrim(vblhstIdentificatiecodeVerblijfplaats) as vblhstIdentificatiecodeVerblijfplaats,\n rtrim(vblhstIdentificatiecodeNummeraanduiding) as vblhstIdentificatiecodeNummeraanduiding,\n rtrim(vblhstLocatiebeschrijving) as vblhstLocatiebeschrijving,\n rtrim(vblhstLandAdresBuitenlandCode) as vblhstLandAdresBuitenlandCode,\n vblhstDatumAanVangAdresBuitenland,\n vblhstDatumAanVangAdresBuitenlandIndicator,\n rtrim(vblhstRegel1AdresBuitenland) as vblhstRegel1AdresBuitenland,\n rtrim(vblhstRegel2AdresBuitenland) as vblhstRegel2AdresBuitenland,\n rtrim(vblhstRegel3AdresBuitenland) as vblhstRegel3AdresBuitenland,\n rtrim(vblhstLandVanwaarIngeschrevenCode) as vblhstLandVanwaarIngeschrevenCode,\n vblhstDatumVestigingInNederland,\n vblhstDatumVestigingInNederlandIndicator,\n rtrim(vblhstOmschrijvingVanAangifteAdreshouding) as vblhstOmschrijvingVanAangifteAdreshouding,\n vblhstIndicatieDocument,\n vblhstAanduidingGegevensOnderzoek,\n vblhstDatumIngangOnderzoek,\n vblhstDatumIngangOnderzoekIndicator,\n vblhstDatumEindeOnderzoek,\n vblhstDatumEindeOnderzoekIndicator,\n vblhstIngangsdatumGeldigheid,\n vblhstIngangsdatumGeldigheidIndicator,\n vblhstDatumVanOpneming,\n vblhstDatumVanOpnemingIndicator,\n rtrim(vblhstSoortPandCode) as vblhstSoortPandCode,\n rtrim(vblhstSoortPandOmschrijving) as vblhstSoortPandOmschrijving,\n rtrim(vblhstWijkCode) as vblhstWijkCode,\n rtrim(vblhstWijkOmschrijving) as vblhstWijkOmschrijving,\n rtrim(vblhstPlanalogischeWijkCode) as vblhstPlanalogischeWijkCode,\n rtrim(vblhstPlanalogischeWijkOmschrijving) as vblhstPlanalogischeWijkOmschrijving,\n vblhstAnummerHoofdbewoner\n      from bzsc58q00";
			

                       globalMap.put("tAS400Input_1_QUERY",dbquery_tAS400Input_1);

		    java.sql.ResultSet rs_tAS400Input_1 = null;
		try{
		    rs_tAS400Input_1 = stmt_tAS400Input_1.executeQuery(dbquery_tAS400Input_1);
		    java.sql.ResultSetMetaData rsmd_tAS400Input_1 = rs_tAS400Input_1.getMetaData();
		    int colQtyInRs_tAS400Input_1 = rsmd_tAS400Input_1.getColumnCount();

		    String tmpContent_tAS400Input_1 = null;
		    
		    
		    while (rs_tAS400Input_1.next()) {
		        nb_line_tAS400Input_1++;
		        
							if(colQtyInRs_tAS400Input_1 < 1) {
								cipers_verblijfplaats.PRSANUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(1) != null) {
                cipers_verblijfplaats.PRSANUMMER = rs_tAS400Input_1.getBigDecimal(1);
            } else {
                    cipers_verblijfplaats.PRSANUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 2) {
								cipers_verblijfplaats.VBLHSTSLEUTELGELDIGDATUM = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(2) != null) {
                cipers_verblijfplaats.VBLHSTSLEUTELGELDIGDATUM = rs_tAS400Input_1.getBigDecimal(2);
            } else {
                    cipers_verblijfplaats.VBLHSTSLEUTELGELDIGDATUM = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 3) {
								cipers_verblijfplaats.VBLHSTSLEUTELGELDIGVOLGNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(3) != null) {
                cipers_verblijfplaats.VBLHSTSLEUTELGELDIGVOLGNUMMER = rs_tAS400Input_1.getBigDecimal(3);
            } else {
                    cipers_verblijfplaats.VBLHSTSLEUTELGELDIGVOLGNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 4) {
								cipers_verblijfplaats.VBLHSTGEMEENTEVANINSCHRIJVINGCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTGEMEENTEVANINSCHRIJVINGCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 4, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 5) {
								cipers_verblijfplaats.VBLHSTDATUMINSCHRIJVING = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMINSCHRIJVING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 5);
		                    }
							if(colQtyInRs_tAS400Input_1 < 6) {
								cipers_verblijfplaats.VBLHSTDATUMINSCHRIJVINGINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMINSCHRIJVINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 6, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 7) {
								cipers_verblijfplaats.VBLHSTFUNCTIEADRES = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTFUNCTIEADRES = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 7, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 8) {
								cipers_verblijfplaats.VBLHSTGEMEENTEDEEL = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTGEMEENTEDEEL = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 8, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 9) {
								cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESHOUDING = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESHOUDING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 9);
		                    }
							if(colQtyInRs_tAS400Input_1 < 10) {
								cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 10, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 11) {
								cipers_verblijfplaats.VBLHSTSTRAATNAAM = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTSTRAATNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 11, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 12) {
								cipers_verblijfplaats.VBLHSTNAAMOPENBARERUIMTE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTNAAMOPENBARERUIMTE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 12, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 13) {
								cipers_verblijfplaats.VBLHSTADRESOPGEMAAKT = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTADRESOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 13, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 14) {
								cipers_verblijfplaats.VBLHSTWOONPLAATSOPGEMAAKT = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTWOONPLAATSOPGEMAAKT = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 14, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 15) {
								cipers_verblijfplaats.VBLHSTHUISNUMMER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(15) != null) {
                cipers_verblijfplaats.VBLHSTHUISNUMMER = rs_tAS400Input_1.getBigDecimal(15);
            } else {
                    cipers_verblijfplaats.VBLHSTHUISNUMMER = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 16) {
								cipers_verblijfplaats.VBLHSTHUISLETTER = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTHUISLETTER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 16, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 17) {
								cipers_verblijfplaats.VBLHSTHUISNUMMERTOEVOEGING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTHUISNUMMERTOEVOEGING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 17, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 18) {
								cipers_verblijfplaats.VBLHSTAANDUIDINGBIJHUISNUMMER = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTAANDUIDINGBIJHUISNUMMER = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 18, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 19) {
								cipers_verblijfplaats.VBLHSTPOSTCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTPOSTCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 19, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 20) {
								cipers_verblijfplaats.VBLHSTWOONPLAATSNAAM = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTWOONPLAATSNAAM = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 20, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 21) {
								cipers_verblijfplaats.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 21, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 22) {
								cipers_verblijfplaats.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 22, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 23) {
								cipers_verblijfplaats.VBLHSTLOCATIEBESCHRIJVING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTLOCATIEBESCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 23, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 24) {
								cipers_verblijfplaats.VBLHSTLANDADRESBUITENLANDCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTLANDADRESBUITENLANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 24, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 25) {
								cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESBUITENLAND = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESBUITENLAND = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 25);
		                    }
							if(colQtyInRs_tAS400Input_1 < 26) {
								cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 26, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 27) {
								cipers_verblijfplaats.VBLHSTREGEL1ADRESBUITENLAND = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTREGEL1ADRESBUITENLAND = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 27, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 28) {
								cipers_verblijfplaats.VBLHSTREGEL2ADRESBUITENLAND = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTREGEL2ADRESBUITENLAND = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 28, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 29) {
								cipers_verblijfplaats.VBLHSTREGEL3ADRESBUITENLAND = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTREGEL3ADRESBUITENLAND = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 29, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 30) {
								cipers_verblijfplaats.VBLHSTLANDVANWAARINGESCHREVENCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTLANDVANWAARINGESCHREVENCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 30, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 31) {
								cipers_verblijfplaats.VBLHSTDATUMVESTIGINGINNEDERLAND = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMVESTIGINGINNEDERLAND = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 31);
		                    }
							if(colQtyInRs_tAS400Input_1 < 32) {
								cipers_verblijfplaats.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 32, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 33) {
								cipers_verblijfplaats.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 33, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 34) {
								cipers_verblijfplaats.VBLHSTINDICATIEDOCUMENT = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(34) != null) {
                cipers_verblijfplaats.VBLHSTINDICATIEDOCUMENT = rs_tAS400Input_1.getBigDecimal(34);
            } else {
                    cipers_verblijfplaats.VBLHSTINDICATIEDOCUMENT = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 35) {
								cipers_verblijfplaats.VBLHSTAANDUIDINGGEGEVENSONDERZOEK = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(35) != null) {
                cipers_verblijfplaats.VBLHSTAANDUIDINGGEGEVENSONDERZOEK = rs_tAS400Input_1.getBigDecimal(35);
            } else {
                    cipers_verblijfplaats.VBLHSTAANDUIDINGGEGEVENSONDERZOEK = null;
            }
		                    }
							if(colQtyInRs_tAS400Input_1 < 36) {
								cipers_verblijfplaats.VBLHSTDATUMINGANGONDERZOEK = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMINGANGONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 36);
		                    }
							if(colQtyInRs_tAS400Input_1 < 37) {
								cipers_verblijfplaats.VBLHSTDATUMINGANGONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMINGANGONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 37, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 38) {
								cipers_verblijfplaats.VBLHSTDATUMEINDEONDERZOEK = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMEINDEONDERZOEK = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 38);
		                    }
							if(colQtyInRs_tAS400Input_1 < 39) {
								cipers_verblijfplaats.VBLHSTDATUMEINDEONDERZOEKINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMEINDEONDERZOEKINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 39, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 40) {
								cipers_verblijfplaats.VBLHSTINGANGSDATUMGELDIGHEID = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTINGANGSDATUMGELDIGHEID = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 40);
		                    }
							if(colQtyInRs_tAS400Input_1 < 41) {
								cipers_verblijfplaats.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 41, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 42) {
								cipers_verblijfplaats.VBLHSTDATUMVANOPNEMING = null;
							} else {
										
			cipers_verblijfplaats.VBLHSTDATUMVANOPNEMING = routines.system.JDBCUtil.getDate(rs_tAS400Input_1, 42);
		                    }
							if(colQtyInRs_tAS400Input_1 < 43) {
								cipers_verblijfplaats.VBLHSTDATUMVANOPNEMINGINDICATOR = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTDATUMVANOPNEMINGINDICATOR = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 43, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 44) {
								cipers_verblijfplaats.VBLHSTSOORTPANDCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTSOORTPANDCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 44, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 45) {
								cipers_verblijfplaats.VBLHSTSOORTPANDOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTSOORTPANDOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 45, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 46) {
								cipers_verblijfplaats.VBLHSTWIJKCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTWIJKCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 46, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 47) {
								cipers_verblijfplaats.VBLHSTWIJKOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTWIJKOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 47, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 48) {
								cipers_verblijfplaats.VBLHSTPLANALOGISCHEWIJKCODE = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTPLANALOGISCHEWIJKCODE = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 48, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 49) {
								cipers_verblijfplaats.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING = null;
							} else {
	                         		
        	cipers_verblijfplaats.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING = routines.system.JDBCUtil.getString(rs_tAS400Input_1, 49, false);
		                    }
							if(colQtyInRs_tAS400Input_1 < 50) {
								cipers_verblijfplaats.VBLHSTANUMMERHOOFDBEWONER = null;
							} else {
		                          
            if(rs_tAS400Input_1.getObject(50) != null) {
                cipers_verblijfplaats.VBLHSTANUMMERHOOFDBEWONER = rs_tAS400Input_1.getBigDecimal(50);
            } else {
                    cipers_verblijfplaats.VBLHSTANUMMERHOOFDBEWONER = null;
            }
		                    }
					



 



/**
 * [tAS400Input_1 begin ] stop
 */
	
	/**
	 * [tAS400Input_1 main ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 


	tos_count_tAS400Input_1++;

/**
 * [tAS400Input_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//cipers_verblijfplaats
			//cipers_verblijfplaats


			
				if(execStat){
					runStat.updateStatOnConnection("cipers_verblijfplaats"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_gemeenten_verblijfplaats_gemeente" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_gemeenten_verblijfplaats_gemeente = false;
       		  	    	
       		  	    	
 							ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeenteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_gemeenten_verblijfplaats_gemeenteHashKey.gemeentecode = cipers_verblijfplaats.VBLHSTGEMEENTEVANINSCHRIJVINGCODE ;
                        		    		

								
		                        	ldf_gemeenten_verblijfplaats_gemeenteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.lookup( ldf_gemeenten_verblijfplaats_gemeenteHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente != null && tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.getCount(ldf_gemeenten_verblijfplaats_gemeenteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_gemeenten_verblijfplaats_gemeente' and it contains more one result from keys :  ldf_gemeenten_verblijfplaats_gemeente.gemeentecode = '" + ldf_gemeenten_verblijfplaats_gemeenteHashKey.gemeentecode + "'");
								} // G 071
							

							ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeente = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_gemeenten_verblijfplaats_gemeenteStruct fromLookup_ldf_gemeenten_verblijfplaats_gemeente = null;
							ldf_gemeenten_verblijfplaats_gemeente = ldf_gemeenten_verblijfplaats_gemeenteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente !=null && tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_gemeenten_verblijfplaats_gemeente = tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_gemeenten_verblijfplaats_gemeente != null) {
								ldf_gemeenten_verblijfplaats_gemeente = fromLookup_ldf_gemeenten_verblijfplaats_gemeente;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_verblijfplaats_adres_buitenland" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_verblijfplaats_adres_buitenland = false;
       		  	    	
       		  	    	
 							ldf_landen_verblijfplaats_adres_buitenlandStruct ldf_landen_verblijfplaats_adres_buitenlandObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_verblijfplaats_adres_buitenlandHashKey.landcode = cipers_verblijfplaats.VBLHSTLANDADRESBUITENLANDCODE ;
                        		    		

								
		                        	ldf_landen_verblijfplaats_adres_buitenlandHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.lookup( ldf_landen_verblijfplaats_adres_buitenlandHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland != null && tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.getCount(ldf_landen_verblijfplaats_adres_buitenlandHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_verblijfplaats_adres_buitenland' and it contains more one result from keys :  ldf_landen_verblijfplaats_adres_buitenland.landcode = '" + ldf_landen_verblijfplaats_adres_buitenlandHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_verblijfplaats_adres_buitenlandStruct ldf_landen_verblijfplaats_adres_buitenland = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_verblijfplaats_adres_buitenlandStruct fromLookup_ldf_landen_verblijfplaats_adres_buitenland = null;
							ldf_landen_verblijfplaats_adres_buitenland = ldf_landen_verblijfplaats_adres_buitenlandDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland !=null && tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_verblijfplaats_adres_buitenland = tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_verblijfplaats_adres_buitenland != null) {
								ldf_landen_verblijfplaats_adres_buitenland = fromLookup_ldf_landen_verblijfplaats_adres_buitenland;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ldf_landen_verblijfplaats_immigratie" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopldf_landen_verblijfplaats_immigratie = false;
       		  	    	
       		  	    	
 							ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratieObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		ldf_landen_verblijfplaats_immigratieHashKey.landcode = cipers_verblijfplaats.VBLHSTLANDVANWAARINGESCHREVENCODE ;
                        		    		

								
		                        	ldf_landen_verblijfplaats_immigratieHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_ldf_landen_verblijfplaats_immigratie.lookup( ldf_landen_verblijfplaats_immigratieHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ldf_landen_verblijfplaats_immigratie != null && tHash_Lookup_ldf_landen_verblijfplaats_immigratie.getCount(ldf_landen_verblijfplaats_immigratieHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ldf_landen_verblijfplaats_immigratie' and it contains more one result from keys :  ldf_landen_verblijfplaats_immigratie.landcode = '" + ldf_landen_verblijfplaats_immigratieHashKey.landcode + "'");
								} // G 071
							

							ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratie = null;
                    		  	 
							   
                    		  	 
	       		  	    	ldf_landen_verblijfplaats_immigratieStruct fromLookup_ldf_landen_verblijfplaats_immigratie = null;
							ldf_landen_verblijfplaats_immigratie = ldf_landen_verblijfplaats_immigratieDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ldf_landen_verblijfplaats_immigratie !=null && tHash_Lookup_ldf_landen_verblijfplaats_immigratie.hasNext()) { // G 099
								
							
								
								fromLookup_ldf_landen_verblijfplaats_immigratie = tHash_Lookup_ldf_landen_verblijfplaats_immigratie.next();

							
							
								} // G 099
							
							

							if(fromLookup_ldf_landen_verblijfplaats_immigratie != null) {
								ldf_landen_verblijfplaats_immigratie = fromLookup_ldf_landen_verblijfplaats_immigratie;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ldf_verblijfplaats = null;


// # Output table : 'ldf_verblijfplaats'
ldf_verblijfplaats_tmp.prsanummer = cipers_verblijfplaats.PRSANUMMER;
ldf_verblijfplaats_tmp.vblhstsleutelgeldigdatum = cipers_verblijfplaats.VBLHSTSLEUTELGELDIGDATUM;
ldf_verblijfplaats_tmp.vblhstsleutelgeldigvolgnummer = cipers_verblijfplaats.VBLHSTSLEUTELGELDIGVOLGNUMMER;
ldf_verblijfplaats_tmp.vblhstgemeentevaninschrijvingcode = cipers_verblijfplaats.VBLHSTGEMEENTEVANINSCHRIJVINGCODE;
ldf_verblijfplaats_tmp.vblhstgemeentevaninschrijvingomschrijving = ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving ;
ldf_verblijfplaats_tmp.vblhstdatuminschrijving = cipers_verblijfplaats.VBLHSTDATUMINSCHRIJVING;
ldf_verblijfplaats_tmp.vblhstdatuminschrijvingindicator = cipers_verblijfplaats.VBLHSTDATUMINSCHRIJVINGINDICATOR;
ldf_verblijfplaats_tmp.vblhstfunctieadres = cipers_verblijfplaats.VBLHSTFUNCTIEADRES;
ldf_verblijfplaats_tmp.vblhstgemeentedeel = cipers_verblijfplaats.VBLHSTGEMEENTEDEEL;
ldf_verblijfplaats_tmp.vblhstdatumaanvangadreshouding = cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESHOUDING;
ldf_verblijfplaats_tmp.vblhstdatumaanvangadreshoudingindicator = cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESHOUDINGINDICATOR;
ldf_verblijfplaats_tmp.vblhststraatnaam = cipers_verblijfplaats.VBLHSTSTRAATNAAM;
ldf_verblijfplaats_tmp.vblhstnaamopenbareruimte = cipers_verblijfplaats.VBLHSTNAAMOPENBARERUIMTE;
ldf_verblijfplaats_tmp.vblhstadresopgemaakt = cipers_verblijfplaats.VBLHSTADRESOPGEMAAKT;
ldf_verblijfplaats_tmp.vblhstwoonplaatsopgemaakt = cipers_verblijfplaats.VBLHSTWOONPLAATSOPGEMAAKT;
ldf_verblijfplaats_tmp.vblhsthuisnummer = cipers_verblijfplaats.VBLHSTHUISNUMMER;
ldf_verblijfplaats_tmp.vblhsthuisletter = cipers_verblijfplaats.VBLHSTHUISLETTER;
ldf_verblijfplaats_tmp.vblhsthuisnummertoevoeging = cipers_verblijfplaats.VBLHSTHUISNUMMERTOEVOEGING;
ldf_verblijfplaats_tmp.vblhstaanduidingbijhuisnummer = cipers_verblijfplaats.VBLHSTAANDUIDINGBIJHUISNUMMER;
ldf_verblijfplaats_tmp.vblhstpostcode = cipers_verblijfplaats.VBLHSTPOSTCODE;
ldf_verblijfplaats_tmp.vblhstwoonplaatsnaam = cipers_verblijfplaats.VBLHSTWOONPLAATSNAAM;
ldf_verblijfplaats_tmp.vblhstidentificatiecodeverblijfplaats = cipers_verblijfplaats.VBLHSTIDENTIFICATIECODEVERBLIJFPLAATS;
ldf_verblijfplaats_tmp.vblhstidentificatiecodenummeraanduiding = cipers_verblijfplaats.VBLHSTIDENTIFICATIECODENUMMERAANDUIDING;
ldf_verblijfplaats_tmp.vblhstlocatiebeschrijving = cipers_verblijfplaats.VBLHSTLOCATIEBESCHRIJVING;
ldf_verblijfplaats_tmp.vblhstlandadresbuitenlandcode = cipers_verblijfplaats.VBLHSTLANDADRESBUITENLANDCODE;
ldf_verblijfplaats_tmp.vblhstlandadresbuitenlandomschrijving = ldf_landen_verblijfplaats_adres_buitenland.landomschrijving ;
ldf_verblijfplaats_tmp.vblhstdatumaanvangadresbuitenland = cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESBUITENLAND;
ldf_verblijfplaats_tmp.vblhstdatumaanvangadresbuitenlandindicator = cipers_verblijfplaats.VBLHSTDATUMAANVANGADRESBUITENLANDINDICATOR;
ldf_verblijfplaats_tmp.vblhstregel1adresbuitenland = cipers_verblijfplaats.VBLHSTREGEL1ADRESBUITENLAND;
ldf_verblijfplaats_tmp.vblhstregel2adresbuitenland = cipers_verblijfplaats.VBLHSTREGEL2ADRESBUITENLAND;
ldf_verblijfplaats_tmp.vblhstregel3adresbuitenland = cipers_verblijfplaats.VBLHSTREGEL3ADRESBUITENLAND;
ldf_verblijfplaats_tmp.vblhstlandvanwaaringeschrevencode = cipers_verblijfplaats.VBLHSTLANDVANWAARINGESCHREVENCODE;
ldf_verblijfplaats_tmp.vblhstlandvanwaaringeschrevenomschrijving = ldf_landen_verblijfplaats_immigratie.landomschrijving ;
ldf_verblijfplaats_tmp.vblhstdatumvestiginginnederland = cipers_verblijfplaats.VBLHSTDATUMVESTIGINGINNEDERLAND;
ldf_verblijfplaats_tmp.vblhstdatumvestiginginnederlandindicator = cipers_verblijfplaats.VBLHSTDATUMVESTIGINGINNEDERLANDINDICATOR;
ldf_verblijfplaats_tmp.vblhstomschrijvingvanaangifteadreshouding = cipers_verblijfplaats.VBLHSTOMSCHRIJVINGVANAANGIFTEADRESHOUDING;
ldf_verblijfplaats_tmp.vblhstindicatiedocument = cipers_verblijfplaats.VBLHSTINDICATIEDOCUMENT;
ldf_verblijfplaats_tmp.vblhstaanduidinggegevensonderzoek = cipers_verblijfplaats.VBLHSTAANDUIDINGGEGEVENSONDERZOEK;
ldf_verblijfplaats_tmp.vblhstdatumingangonderzoek = cipers_verblijfplaats.VBLHSTDATUMINGANGONDERZOEK;
ldf_verblijfplaats_tmp.vblhstdatumingangonderzoekindicator = cipers_verblijfplaats.VBLHSTDATUMINGANGONDERZOEKINDICATOR;
ldf_verblijfplaats_tmp.vblhstdatumeindeonderzoek = cipers_verblijfplaats.VBLHSTDATUMEINDEONDERZOEK;
ldf_verblijfplaats_tmp.vblhstdatumeindeonderzoekindicator = cipers_verblijfplaats.VBLHSTDATUMEINDEONDERZOEKINDICATOR;
ldf_verblijfplaats_tmp.vblhstingangsdatumgeldigheid = cipers_verblijfplaats.VBLHSTINGANGSDATUMGELDIGHEID;
ldf_verblijfplaats_tmp.vblhstingangsdatumgeldigheidindicator = cipers_verblijfplaats.VBLHSTINGANGSDATUMGELDIGHEIDINDICATOR;
ldf_verblijfplaats_tmp.vblhstdatumvanopneming = cipers_verblijfplaats.VBLHSTDATUMVANOPNEMING;
ldf_verblijfplaats_tmp.vblhstdatumvanopnemingindicator = cipers_verblijfplaats.VBLHSTDATUMVANOPNEMINGINDICATOR;
ldf_verblijfplaats_tmp.vblhstwijkcode = cipers_verblijfplaats.VBLHSTWIJKCODE;
ldf_verblijfplaats_tmp.vblhstwijkomschrijving = cipers_verblijfplaats.VBLHSTWIJKOMSCHRIJVING;
ldf_verblijfplaats_tmp.vblhstplanalogischewijkcode = cipers_verblijfplaats.VBLHSTPLANALOGISCHEWIJKCODE;
ldf_verblijfplaats_tmp.vblhstplanalogischewijkomschrijving = cipers_verblijfplaats.VBLHSTPLANALOGISCHEWIJKOMSCHRIJVING;
ldf_verblijfplaats = ldf_verblijfplaats_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "ldf_verblijfplaats"
if(ldf_verblijfplaats != null) { 



	
	/**
	 * [tPostgresqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	

			//ldf_verblijfplaats
			//ldf_verblijfplaats


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_verblijfplaats"+iterateId,1, 1);
				} 
			

		



        whetherReject_tPostgresqlOutput_1 = false;
                    pstmt_tPostgresqlOutput_1.setBigDecimal(1, ldf_verblijfplaats.prsanummer);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(2, ldf_verblijfplaats.vblhstsleutelgeldigdatum);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(3, ldf_verblijfplaats.vblhstsleutelgeldigvolgnummer);

                    if(ldf_verblijfplaats.vblhstgemeentevaninschrijvingcode == null) {
pstmt_tPostgresqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(4, ldf_verblijfplaats.vblhstgemeentevaninschrijvingcode);
}

                    if(ldf_verblijfplaats.vblhstgemeentevaninschrijvingomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(5, ldf_verblijfplaats.vblhstgemeentevaninschrijvingomschrijving);
}

                    if(ldf_verblijfplaats.vblhstdatuminschrijving != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(6, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatuminschrijving.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatuminschrijvingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(7, ldf_verblijfplaats.vblhstdatuminschrijvingindicator);
}

                    if(ldf_verblijfplaats.vblhstfunctieadres == null) {
pstmt_tPostgresqlOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(8, ldf_verblijfplaats.vblhstfunctieadres);
}

                    if(ldf_verblijfplaats.vblhstgemeentedeel == null) {
pstmt_tPostgresqlOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(9, ldf_verblijfplaats.vblhstgemeentedeel);
}

                    if(ldf_verblijfplaats.vblhstdatumaanvangadreshouding != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(10, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatumaanvangadreshouding.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatumaanvangadreshoudingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(11, ldf_verblijfplaats.vblhstdatumaanvangadreshoudingindicator);
}

                    if(ldf_verblijfplaats.vblhststraatnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(12, ldf_verblijfplaats.vblhststraatnaam);
}

                    if(ldf_verblijfplaats.vblhstnaamopenbareruimte == null) {
pstmt_tPostgresqlOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(13, ldf_verblijfplaats.vblhstnaamopenbareruimte);
}

                    if(ldf_verblijfplaats.vblhstadresopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(14, ldf_verblijfplaats.vblhstadresopgemaakt);
}

                    if(ldf_verblijfplaats.vblhstwoonplaatsopgemaakt == null) {
pstmt_tPostgresqlOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(15, ldf_verblijfplaats.vblhstwoonplaatsopgemaakt);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(16, ldf_verblijfplaats.vblhsthuisnummer);

                    if(ldf_verblijfplaats.vblhsthuisletter == null) {
pstmt_tPostgresqlOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(17, ldf_verblijfplaats.vblhsthuisletter);
}

                    if(ldf_verblijfplaats.vblhsthuisnummertoevoeging == null) {
pstmt_tPostgresqlOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(18, ldf_verblijfplaats.vblhsthuisnummertoevoeging);
}

                    if(ldf_verblijfplaats.vblhstaanduidingbijhuisnummer == null) {
pstmt_tPostgresqlOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(19, ldf_verblijfplaats.vblhstaanduidingbijhuisnummer);
}

                    if(ldf_verblijfplaats.vblhstpostcode == null) {
pstmt_tPostgresqlOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(20, ldf_verblijfplaats.vblhstpostcode);
}

                    if(ldf_verblijfplaats.vblhstwoonplaatsnaam == null) {
pstmt_tPostgresqlOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(21, ldf_verblijfplaats.vblhstwoonplaatsnaam);
}

                    if(ldf_verblijfplaats.vblhstidentificatiecodeverblijfplaats == null) {
pstmt_tPostgresqlOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(22, ldf_verblijfplaats.vblhstidentificatiecodeverblijfplaats);
}

                    if(ldf_verblijfplaats.vblhstidentificatiecodenummeraanduiding == null) {
pstmt_tPostgresqlOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(23, ldf_verblijfplaats.vblhstidentificatiecodenummeraanduiding);
}

                    if(ldf_verblijfplaats.vblhstlocatiebeschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(24, ldf_verblijfplaats.vblhstlocatiebeschrijving);
}

                    if(ldf_verblijfplaats.vblhstlandadresbuitenlandcode == null) {
pstmt_tPostgresqlOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(25, ldf_verblijfplaats.vblhstlandadresbuitenlandcode);
}

                    if(ldf_verblijfplaats.vblhstlandadresbuitenlandomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(26, ldf_verblijfplaats.vblhstlandadresbuitenlandomschrijving);
}

                    if(ldf_verblijfplaats.vblhstdatumaanvangadresbuitenland != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(27, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatumaanvangadresbuitenland.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatumaanvangadresbuitenlandindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(28, ldf_verblijfplaats.vblhstdatumaanvangadresbuitenlandindicator);
}

                    if(ldf_verblijfplaats.vblhstregel1adresbuitenland == null) {
pstmt_tPostgresqlOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(29, ldf_verblijfplaats.vblhstregel1adresbuitenland);
}

                    if(ldf_verblijfplaats.vblhstregel2adresbuitenland == null) {
pstmt_tPostgresqlOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(30, ldf_verblijfplaats.vblhstregel2adresbuitenland);
}

                    if(ldf_verblijfplaats.vblhstregel3adresbuitenland == null) {
pstmt_tPostgresqlOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(31, ldf_verblijfplaats.vblhstregel3adresbuitenland);
}

                    if(ldf_verblijfplaats.vblhstlandvanwaaringeschrevencode == null) {
pstmt_tPostgresqlOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(32, ldf_verblijfplaats.vblhstlandvanwaaringeschrevencode);
}

                    if(ldf_verblijfplaats.vblhstlandvanwaaringeschrevenomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(33, ldf_verblijfplaats.vblhstlandvanwaaringeschrevenomschrijving);
}

                    if(ldf_verblijfplaats.vblhstdatumvestiginginnederland != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(34, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatumvestiginginnederland.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(34, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatumvestiginginnederlandindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(35, ldf_verblijfplaats.vblhstdatumvestiginginnederlandindicator);
}

                    if(ldf_verblijfplaats.vblhstomschrijvingvanaangifteadreshouding == null) {
pstmt_tPostgresqlOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(36, ldf_verblijfplaats.vblhstomschrijvingvanaangifteadreshouding);
}

                    pstmt_tPostgresqlOutput_1.setBigDecimal(37, ldf_verblijfplaats.vblhstindicatiedocument);

                    pstmt_tPostgresqlOutput_1.setBigDecimal(38, ldf_verblijfplaats.vblhstaanduidinggegevensonderzoek);

                    if(ldf_verblijfplaats.vblhstdatumingangonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(39, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatumingangonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(39, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatumingangonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(40, ldf_verblijfplaats.vblhstdatumingangonderzoekindicator);
}

                    if(ldf_verblijfplaats.vblhstdatumeindeonderzoek != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(41, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatumeindeonderzoek.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(41, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatumeindeonderzoekindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(42, ldf_verblijfplaats.vblhstdatumeindeonderzoekindicator);
}

                    if(ldf_verblijfplaats.vblhstingangsdatumgeldigheid != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(43, new java.sql.Timestamp(ldf_verblijfplaats.vblhstingangsdatumgeldigheid.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(43, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstingangsdatumgeldigheidindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(44, ldf_verblijfplaats.vblhstingangsdatumgeldigheidindicator);
}

                    if(ldf_verblijfplaats.vblhstdatumvanopneming != null) {
pstmt_tPostgresqlOutput_1.setTimestamp(45, new java.sql.Timestamp(ldf_verblijfplaats.vblhstdatumvanopneming.getTime()));
} else {
pstmt_tPostgresqlOutput_1.setNull(45, java.sql.Types.TIMESTAMP);
}

                    if(ldf_verblijfplaats.vblhstdatumvanopnemingindicator == null) {
pstmt_tPostgresqlOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(46, ldf_verblijfplaats.vblhstdatumvanopnemingindicator);
}

                    if(ldf_verblijfplaats.vblhstwijkcode == null) {
pstmt_tPostgresqlOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(47, ldf_verblijfplaats.vblhstwijkcode);
}

                    if(ldf_verblijfplaats.vblhstwijkomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(48, ldf_verblijfplaats.vblhstwijkomschrijving);
}

                    if(ldf_verblijfplaats.vblhstplanalogischewijkcode == null) {
pstmt_tPostgresqlOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(49, ldf_verblijfplaats.vblhstplanalogischewijkcode);
}

                    if(ldf_verblijfplaats.vblhstplanalogischewijkomschrijving == null) {
pstmt_tPostgresqlOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tPostgresqlOutput_1.setString(50, ldf_verblijfplaats.vblhstplanalogischewijkomschrijving);
}

			
    		pstmt_tPostgresqlOutput_1.addBatch();
    		nb_line_tPostgresqlOutput_1++;
    		  
    		  batchSizeCounter_tPostgresqlOutput_1++;
    		  
    			if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
                try {
						int countSum_tPostgresqlOutput_1 = 0;
						    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
				    	
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
            	    	batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tPostgresqlOutput_1 = 0;
					for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
					
			    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
			    	
                	System.err.println(e.getMessage());
                	
                }
    			}
    		
    		    commitCounter_tPostgresqlOutput_1++;
                if(commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
                if ((batchSize_tPostgresqlOutput_1 > 0) && (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
                try {
                		int countSum_tPostgresqlOutput_1 = 0;
                		    
						for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
            	    	
            	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
            	    	
                batchSizeCounter_tPostgresqlOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e){
                	
                		int countSum_tPostgresqlOutput_1 = 0;
						for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
						}
						
				    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
				    	
                        System.err.println(e.getMessage());
                	
                }
            }
                	conn_tPostgresqlOutput_1.commit();
                	
                	commitCounter_tPostgresqlOutput_1=0;
                }

 


	tos_count_tPostgresqlOutput_1++;

/**
 * [tPostgresqlOutput_1 main ] stop
 */

} // End of branch "ldf_verblijfplaats"







	
	/**
	 * [tAS400Input_1 end ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

	}
}finally{
	stmt_tAS400Input_1.close();

		if(conn_tAS400Input_1 != null && !conn_tAS400Input_1.isClosed()) {
			
			conn_tAS400Input_1.close();
			
		}
}
globalMap.put("tAS400Input_1_NB_LINE",nb_line_tAS400Input_1);

 

ok_Hash.put("tAS400Input_1", true);
end_Hash.put("tAS400Input_1", System.currentTimeMillis());




/**
 * [tAS400Input_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente != null) {
						tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente" );

					
					
				
					if(tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland != null) {
						tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland" );

					
					
				
					if(tHash_Lookup_ldf_landen_verblijfplaats_immigratie != null) {
						tHash_Lookup_ldf_landen_verblijfplaats_immigratie.endGet();
					}
					globalMap.remove( "tHash_Lookup_ldf_landen_verblijfplaats_immigratie" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("cipers_verblijfplaats"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	    try {
				int countSum_tPostgresqlOutput_1 = 0;
				if (pstmt_tPostgresqlOutput_1 != null && batchSizeCounter_tPostgresqlOutput_1 > 0) {
						
					for(int countEach_tPostgresqlOutput_1: pstmt_tPostgresqlOutput_1.executeBatch()) {
						countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
					}
						
				}
		    	
		    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e){
	    	
	    	int countSum_tPostgresqlOutput_1 = 0;
			for(int countEach_tPostgresqlOutput_1: e.getUpdateCounts()) {
				countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0 : countEach_tPostgresqlOutput_1);
			}
			
	    		insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;
	    	
	    	System.err.println(e.getMessage());
	    	
		}
	    
        if(pstmt_tPostgresqlOutput_1 != null) {
            pstmt_tPostgresqlOutput_1.close();
        }

			
			conn_tPostgresqlOutput_1.commit();
			
		
    	conn_tPostgresqlOutput_1 .close();
    	
    	resourceMap.put("finish_tPostgresqlOutput_1", true);
    	

	nb_line_deleted_tPostgresqlOutput_1=nb_line_deleted_tPostgresqlOutput_1+ deletedCount_tPostgresqlOutput_1;
	nb_line_update_tPostgresqlOutput_1=nb_line_update_tPostgresqlOutput_1 + updatedCount_tPostgresqlOutput_1;
	nb_line_inserted_tPostgresqlOutput_1=nb_line_inserted_tPostgresqlOutput_1 + insertedCount_tPostgresqlOutput_1;
	nb_line_rejected_tPostgresqlOutput_1=nb_line_rejected_tPostgresqlOutput_1 + rejectedCount_tPostgresqlOutput_1;
	
        globalMap.put("tPostgresqlOutput_1_NB_LINE",nb_line_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",nb_line_update_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tPostgresqlOutput_1);
        globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tPostgresqlOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_verblijfplaats"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tPostgresqlOutput_1", true);
end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());




/**
 * [tPostgresqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ldf_landen_verblijfplaats_immigratie"); 
				     			
				try{
					
	
	/**
	 * [tAS400Input_1 finally ] start
	 */

	

	
	
	currentComponent="tAS400Input_1";

	

 



/**
 * [tAS400Input_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlOutput_1";

	



	
		if(resourceMap.get("finish_tPostgresqlOutput_1")==null){
			if(resourceMap.get("conn_tPostgresqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tPostgresqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
					String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :" + sqlEx_tPostgresqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tPostgresqlOutput_1);
				}
			}
		}
	

 



/**
 * [tPostgresqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAS400Input_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_gemeenten_verblijfplaats_gemeenteStruct implements routines.system.IPersistableComparableLookupRow<ldf_gemeenten_verblijfplaats_gemeenteStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String gemeentecode;

				public String getGemeentecode () {
					return this.gemeentecode;
				}
				
			    public String gemeenteomschrijving;

				public String getGemeenteomschrijving () {
					return this.gemeenteomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.gemeentecode == null) ? 0 : this.gemeentecode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_gemeenten_verblijfplaats_gemeenteStruct other = (ldf_gemeenten_verblijfplaats_gemeenteStruct) obj;
		
						if (this.gemeentecode == null) {
							if (other.gemeentecode != null)
								return false;
						
						} else if (!this.gemeentecode.equals(other.gemeentecode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_gemeenten_verblijfplaats_gemeenteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            other.gemeenteomschrijving = this.gemeenteomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_gemeenten_verblijfplaats_gemeenteStruct other) {

		other.gemeentecode = this.gemeentecode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
					this.gemeentecode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.gemeentecode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.gemeenteomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.gemeenteomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("gemeentecode="+gemeentecode);
		sb.append(",gemeenteomschrijving="+gemeenteomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_gemeenten_verblijfplaats_gemeenteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.gemeentecode, other.gemeentecode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeente = new ldf_gemeenten_verblijfplaats_gemeenteStruct();




	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", false);
		start_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_gemeenten_verblijfplaats_gemeente" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente().limitLog4jByte();

			   		// connection name:ldf_gemeenten_verblijfplaats_gemeente
			   		// source node:tPostgresqlInput_1 - inputs:(after_tAS400Input_1) outputs:(ldf_gemeenten_verblijfplaats_gemeente,ldf_gemeenten_verblijfplaats_gemeente) | target node:tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente - inputs:(ldf_gemeenten_verblijfplaats_gemeente) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_verblijfplaats,ldf_gemeenten_verblijfplaats_gemeente,ldf_landen_verblijfplaats_adres_buitenland,ldf_landen_verblijfplaats_immigratie) outputs:(ldf_verblijfplaats)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_gemeenten_verblijfplaats_gemeente = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_gemeenten_verblijfplaats_gemeenteStruct> tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_gemeenten_verblijfplaats_gemeenteStruct>getLookup(matchingModeEnum_ldf_gemeenten_verblijfplaats_gemeente);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente", tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_1);
			   	String dbUser_tPostgresqlInput_1 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;
		        
				
			String url_tPostgresqlInput_1 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_1,dbUser_tPostgresqlInput_1,dbPwd_tPostgresqlInput_1);
		        
				conn_tPostgresqlInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "select\ngemeentecode,\ngemeenteomschrijving\nfrom ibz_cip_gemeenten";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								ldf_gemeenten_verblijfplaats_gemeente.gemeentecode = null;
							} else {
	                         		
        	ldf_gemeenten_verblijfplaats_gemeente.gemeentecode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving = null;
							} else {
	                         		
        	ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	

			//ldf_gemeenten_verblijfplaats_gemeente
			//ldf_gemeenten_verblijfplaats_gemeente


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_gemeenten_verblijfplaats_gemeente"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_gemeenten_verblijfplaats_gemeenteStruct ldf_gemeenten_verblijfplaats_gemeente_HashRow = new ldf_gemeenten_verblijfplaats_gemeenteStruct();
		   	   	   
				
				ldf_gemeenten_verblijfplaats_gemeente_HashRow.gemeentecode = ldf_gemeenten_verblijfplaats_gemeente.gemeentecode;
				
				ldf_gemeenten_verblijfplaats_gemeente_HashRow.gemeenteomschrijving = ldf_gemeenten_verblijfplaats_gemeente.gemeenteomschrijving;
				
			tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.put(ldf_gemeenten_verblijfplaats_gemeente_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente++;

/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

	if(conn_tPostgresqlInput_1 != null && !conn_tPostgresqlInput_1.isClosed()) {
		
			conn_tPostgresqlInput_1.commit();
			
		
			conn_tPostgresqlInput_1.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	

tHash_Lookup_ldf_gemeenten_verblijfplaats_gemeente.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_gemeenten_verblijfplaats_gemeente"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", true);
end_Hash.put("tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente";

	

 



/**
 * [tAdvancedHash_ldf_gemeenten_verblijfplaats_gemeente finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_verblijfplaats_adres_buitenlandStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_verblijfplaats_adres_buitenlandStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_verblijfplaats_adres_buitenlandStruct other = (ldf_landen_verblijfplaats_adres_buitenlandStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_verblijfplaats_adres_buitenlandStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_verblijfplaats_adres_buitenlandStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_verblijfplaats_adres_buitenlandStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_verblijfplaats_adres_buitenlandStruct ldf_landen_verblijfplaats_adres_buitenland = new ldf_landen_verblijfplaats_adres_buitenlandStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland", false);
		start_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_verblijfplaats_adres_buitenland" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland().limitLog4jByte();

			   		// connection name:ldf_landen_verblijfplaats_adres_buitenland
			   		// source node:tPostgresqlInput_2 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_verblijfplaats_adres_buitenland,ldf_landen_verblijfplaats_adres_buitenland) | target node:tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland - inputs:(ldf_landen_verblijfplaats_adres_buitenland) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_verblijfplaats,ldf_gemeenten_verblijfplaats_gemeente,ldf_landen_verblijfplaats_adres_buitenland,ldf_landen_verblijfplaats_immigratie) outputs:(ldf_verblijfplaats)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_verblijfplaats_adres_buitenland = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_adres_buitenlandStruct> tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_verblijfplaats_adres_buitenlandStruct>getLookup(matchingModeEnum_ldf_landen_verblijfplaats_adres_buitenland);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland", tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_2);
			   	String dbUser_tPostgresqlInput_2 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;
		        
				
			String url_tPostgresqlInput_2 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_2,dbUser_tPostgresqlInput_2,dbPwd_tPostgresqlInput_2);
		        
				conn_tPostgresqlInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								ldf_landen_verblijfplaats_adres_buitenland.landcode = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_adres_buitenland.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								ldf_landen_verblijfplaats_adres_buitenland.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_adres_buitenland.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland";

	

			//ldf_landen_verblijfplaats_adres_buitenland
			//ldf_landen_verblijfplaats_adres_buitenland


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_verblijfplaats_adres_buitenland"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_verblijfplaats_adres_buitenlandStruct ldf_landen_verblijfplaats_adres_buitenland_HashRow = new ldf_landen_verblijfplaats_adres_buitenlandStruct();
		   	   	   
				
				ldf_landen_verblijfplaats_adres_buitenland_HashRow.landcode = ldf_landen_verblijfplaats_adres_buitenland.landcode;
				
				ldf_landen_verblijfplaats_adres_buitenland_HashRow.landomschrijving = ldf_landen_verblijfplaats_adres_buitenland.landomschrijving;
				
			tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.put(ldf_landen_verblijfplaats_adres_buitenland_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland++;

/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

	if(conn_tPostgresqlInput_2 != null && !conn_tPostgresqlInput_2.isClosed()) {
		
			conn_tPostgresqlInput_2.commit();
			
		
			conn_tPostgresqlInput_2.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland";

	

tHash_Lookup_ldf_landen_verblijfplaats_adres_buitenland.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_verblijfplaats_adres_buitenland"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland", true);
end_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland";

	

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_adres_buitenland finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class ldf_landen_verblijfplaats_immigratieStruct implements routines.system.IPersistableComparableLookupRow<ldf_landen_verblijfplaats_immigratieStruct> {
    final static byte[] commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
    static byte[] commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String landcode;

				public String getLandcode () {
					return this.landcode;
				}
				
			    public String landomschrijving;

				public String getLandomschrijving () {
					return this.landomschrijving;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.landcode == null) ? 0 : this.landcode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ldf_landen_verblijfplaats_immigratieStruct other = (ldf_landen_verblijfplaats_immigratieStruct) obj;
		
						if (this.landcode == null) {
							if (other.landcode != null)
								return false;
						
						} else if (!this.landcode.equals(other.landcode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ldf_landen_verblijfplaats_immigratieStruct other) {

		other.landcode = this.landcode;
	            other.landomschrijving = this.landomschrijving;
	            
	}

	public void copyKeysDataTo(ldf_landen_verblijfplaats_immigratieStruct other) {

		other.landcode = this.landcode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length) {
				if(length < 1024 && commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie.length == 0) {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[1024];
				} else {
   					commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length);
			strReturn = new String(commonByteArray_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IRAPPORTAGE_ibz_cipers_fill_ldf_verblijfplaats_historie) {

        	try {

        		int length = 0;
		
					this.landcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.landcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.landomschrijving = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.landomschrijving, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("landcode="+landcode);
		sb.append(",landomschrijving="+landomschrijving);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ldf_landen_verblijfplaats_immigratieStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.landcode, other.landcode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tPostgresqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratie = new ldf_landen_verblijfplaats_immigratieStruct();




	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", false);
		start_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("ldf_landen_verblijfplaats_immigratie" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_ldf_landen_verblijfplaats_immigratie = 0;
		
    	class BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_immigratie{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_ldf_landen_verblijfplaats_immigratie().limitLog4jByte();

			   		// connection name:ldf_landen_verblijfplaats_immigratie
			   		// source node:tPostgresqlInput_3 - inputs:(after_tAS400Input_1) outputs:(ldf_landen_verblijfplaats_immigratie,ldf_landen_verblijfplaats_immigratie) | target node:tAdvancedHash_ldf_landen_verblijfplaats_immigratie - inputs:(ldf_landen_verblijfplaats_immigratie) outputs:()
			   		// linked node: tMap_1 - inputs:(cipers_verblijfplaats,ldf_gemeenten_verblijfplaats_gemeente,ldf_landen_verblijfplaats_adres_buitenland,ldf_landen_verblijfplaats_immigratie) outputs:(ldf_verblijfplaats)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ldf_landen_verblijfplaats_immigratie = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ldf_landen_verblijfplaats_immigratieStruct> tHash_Lookup_ldf_landen_verblijfplaats_immigratie =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ldf_landen_verblijfplaats_immigratieStruct>getLookup(matchingModeEnum_ldf_landen_verblijfplaats_immigratie);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ldf_landen_verblijfplaats_immigratie", tHash_Lookup_ldf_landen_verblijfplaats_immigratie);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
			    java.lang.Class.forName(driverClass_tPostgresqlInput_3);
			   	String dbUser_tPostgresqlInput_3 = "mks_owner";
			   	
        		
        		
        		 
	final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("2b61aee32355cf5cf2e60757bd765168");
			   	
		        String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;
		        
				
			String url_tPostgresqlInput_3 = "jdbc:postgresql://" + context.mks_host + ":" + context.mks_port + "/" + context.mks_database;
				
				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(url_tPostgresqlInput_3,dbUser_tPostgresqlInput_3,dbPwd_tPostgresqlInput_3);
		        
				conn_tPostgresqlInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "select\nlandcode,\nlandomschrijving\n  from ibz_cip_landen";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								ldf_landen_verblijfplaats_immigratie.landcode = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_immigratie.landcode = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, false);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								ldf_landen_verblijfplaats_immigratie.landomschrijving = null;
							} else {
	                         		
        	ldf_landen_verblijfplaats_immigratie.landomschrijving = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, false);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	

			//ldf_landen_verblijfplaats_immigratie
			//ldf_landen_verblijfplaats_immigratie


			
				if(execStat){
					runStat.updateStatOnConnection("ldf_landen_verblijfplaats_immigratie"+iterateId,1, 1);
				} 
			

		


			   
			   

					ldf_landen_verblijfplaats_immigratieStruct ldf_landen_verblijfplaats_immigratie_HashRow = new ldf_landen_verblijfplaats_immigratieStruct();
		   	   	   
				
				ldf_landen_verblijfplaats_immigratie_HashRow.landcode = ldf_landen_verblijfplaats_immigratie.landcode;
				
				ldf_landen_verblijfplaats_immigratie_HashRow.landomschrijving = ldf_landen_verblijfplaats_immigratie.landomschrijving;
				
			tHash_Lookup_ldf_landen_verblijfplaats_immigratie.put(ldf_landen_verblijfplaats_immigratie_HashRow);
			
            




 


	tos_count_tAdvancedHash_ldf_landen_verblijfplaats_immigratie++;

/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

	if(conn_tPostgresqlInput_3 != null && !conn_tPostgresqlInput_3.isClosed()) {
		
			conn_tPostgresqlInput_3.commit();
			
		
			conn_tPostgresqlInput_3.close();
			
	}
	
}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	

tHash_Lookup_ldf_landen_verblijfplaats_immigratie.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("ldf_landen_verblijfplaats_immigratie"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", true);
end_Hash.put("tAdvancedHash_ldf_landen_verblijfplaats_immigratie", System.currentTimeMillis());




/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ldf_landen_verblijfplaats_immigratie";

	

 



/**
 * [tAdvancedHash_ldf_landen_verblijfplaats_immigratie finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ibz_cipers_fill_ldf_verblijfplaats_historie ibz_cipers_fill_ldf_verblijfplaats_historieClass = new ibz_cipers_fill_ldf_verblijfplaats_historie();

        int exitCode = ibz_cipers_fill_ldf_verblijfplaats_historieClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ibz_cipers_fill_ldf_verblijfplaats_historie.class.getClassLoader().getResourceAsStream("irapportage/ibz_cipers_fill_ldf_verblijfplaats_historie_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.cip_database=(String) context.getProperty("cip_database");
                context.cip_host=(String) context.getProperty("cip_host");
                context.cip_password=(String) context.getProperty("cip_password");
                context.cip_username=(String) context.getProperty("cip_username");
                context.mks_database=(String) context.getProperty("mks_database");
                context.mks_host=(String) context.getProperty("mks_host");
                context.mks_port=(String) context.getProperty("mks_port");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("cip_database")) {
                context.cip_database = (String) parentContextMap.get("cip_database");
            }if (parentContextMap.containsKey("cip_host")) {
                context.cip_host = (String) parentContextMap.get("cip_host");
            }if (parentContextMap.containsKey("cip_password")) {
                context.cip_password = (String) parentContextMap.get("cip_password");
            }if (parentContextMap.containsKey("cip_username")) {
                context.cip_username = (String) parentContextMap.get("cip_username");
            }if (parentContextMap.containsKey("mks_database")) {
                context.mks_database = (String) parentContextMap.get("mks_database");
            }if (parentContextMap.containsKey("mks_host")) {
                context.mks_host = (String) parentContextMap.get("mks_host");
            }if (parentContextMap.containsKey("mks_port")) {
                context.mks_port = (String) parentContextMap.get("mks_port");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ibz_cipers_fill_ldf_verblijfplaats_historie");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     257203 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 januari 2019 10:31:53 CET
 ************************************************************************************************/